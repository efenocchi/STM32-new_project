
base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015974  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001498  08015b08  08015b08  00025b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016fa0  08016fa0  00030668  2**0
                  CONTENTS
  4 .ARM          00000008  08016fa0  08016fa0  00026fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016fa8  08016fa8  00030668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016fa8  08016fa8  00026fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016fac  08016fac  00026fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000668  20000000  08016fb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004328  20000668  08017618  00030668  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004990  08017618  00034990  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030668  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b7ae  00000000  00000000  00030698  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006289  00000000  00000000  0006be46  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000029d0  00000000  00000000  000720d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002708  00000000  00000000  00074aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d555  00000000  00000000  000771a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000220c8  00000000  00000000  000a46fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010a027  00000000  00000000  000c67c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d07ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c174  00000000  00000000  001d0868  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000668 	.word	0x20000668
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015aec 	.word	0x08015aec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000066c 	.word	0x2000066c
 80001cc:	08015aec 	.word	0x08015aec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	2b2f      	cmp	r3, #47	; 0x2f
 8000eb6:	d906      	bls.n	8000ec6 <Hex2Num+0x1e>
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2b39      	cmp	r3, #57	; 0x39
 8000ebc:	d803      	bhi.n	8000ec6 <Hex2Num+0x1e>
        return a - '0';
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	3b30      	subs	r3, #48	; 0x30
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	e014      	b.n	8000ef0 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	2b60      	cmp	r3, #96	; 0x60
 8000eca:	d906      	bls.n	8000eda <Hex2Num+0x32>
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2b66      	cmp	r3, #102	; 0x66
 8000ed0:	d803      	bhi.n	8000eda <Hex2Num+0x32>
        return (a - 'a') + 10;
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	3b57      	subs	r3, #87	; 0x57
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	e00a      	b.n	8000ef0 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	2b40      	cmp	r3, #64	; 0x40
 8000ede:	d906      	bls.n	8000eee <Hex2Num+0x46>
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	2b46      	cmp	r3, #70	; 0x46
 8000ee4:	d803      	bhi.n	8000eee <Hex2Num+0x46>
        return (a - 'A') + 10;
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	3b37      	subs	r3, #55	; 0x37
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	e000      	b.n	8000ef0 <Hex2Num+0x48>
    }

    return 0;
 8000eee:	2300      	movs	r3, #0
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8000f0e:	e012      	b.n	8000f36 <ParseHexNumber+0x3a>
        sum <<= 4;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ffc4 	bl	8000ea8 <Hex2Num>
 8000f20:	4603      	mov	r3, r0
 8000f22:	461a      	mov	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4413      	add	r3, r2
 8000f28:	60fb      	str	r3, [r7, #12]
        ptr++;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	607b      	str	r3, [r7, #4]
        i++;
 8000f30:	7afb      	ldrb	r3, [r7, #11]
 8000f32:	3301      	adds	r3, #1
 8000f34:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b2f      	cmp	r3, #47	; 0x2f
 8000f3c:	d903      	bls.n	8000f46 <ParseHexNumber+0x4a>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b39      	cmp	r3, #57	; 0x39
 8000f44:	d9e4      	bls.n	8000f10 <ParseHexNumber+0x14>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b60      	cmp	r3, #96	; 0x60
 8000f4c:	d903      	bls.n	8000f56 <ParseHexNumber+0x5a>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b66      	cmp	r3, #102	; 0x66
 8000f54:	d9dc      	bls.n	8000f10 <ParseHexNumber+0x14>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b40      	cmp	r3, #64	; 0x40
 8000f5c:	d903      	bls.n	8000f66 <ParseHexNumber+0x6a>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b46      	cmp	r3, #70	; 0x46
 8000f64:	d9d4      	bls.n	8000f10 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d002      	beq.n	8000f72 <ParseHexNumber+0x76>
        *cnt = i;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	7afa      	ldrb	r2, [r7, #11]
 8000f70:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8000f72:	68fb      	ldr	r3, [r7, #12]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b2d      	cmp	r3, #45	; 0x2d
 8000f98:	d119      	bne.n	8000fce <ParseNumber+0x52>
        minus = 1;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	607b      	str	r3, [r7, #4]
        i++;
 8000fa4:	7bbb      	ldrb	r3, [r7, #14]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000faa:	e010      	b.n	8000fce <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000fac:	68ba      	ldr	r2, [r7, #8]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	3b30      	subs	r3, #48	; 0x30
 8000fbe:	4413      	add	r3, r2
 8000fc0:	60bb      	str	r3, [r7, #8]
        ptr++;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
        i++;
 8000fc8:	7bbb      	ldrb	r3, [r7, #14]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b2f      	cmp	r3, #47	; 0x2f
 8000fd4:	d903      	bls.n	8000fde <ParseNumber+0x62>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b39      	cmp	r3, #57	; 0x39
 8000fdc:	d9e6      	bls.n	8000fac <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d002      	beq.n	8000fea <ParseNumber+0x6e>
        *cnt = i;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	7bba      	ldrb	r2, [r7, #14]
 8000fe8:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d002      	beq.n	8000ff6 <ParseNumber+0x7a>
        return 0 - sum;
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	425b      	negs	r3, r3
 8000ff4:	e000      	b.n	8000ff8 <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8000ff6:	68bb      	ldr	r3, [r7, #8]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8001012:	e019      	b.n	8001048 <ParseMAC+0x44>
    hexcnt = 1;
 8001014:	2301      	movs	r3, #1
 8001016:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b3a      	cmp	r3, #58	; 0x3a
 800101e:	d00e      	beq.n	800103e <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8001020:	f107 030e 	add.w	r3, r7, #14
 8001024:	4619      	mov	r1, r3
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ff68 	bl	8000efc <ParseHexNumber>
 800102c:	4601      	mov	r1, r0
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	1c5a      	adds	r2, r3, #1
 8001032:	73fa      	strb	r2, [r7, #15]
 8001034:	461a      	mov	r2, r3
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	4413      	add	r3, r2
 800103a:	b2ca      	uxtb	r2, r1
 800103c:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 800103e:	7bbb      	ldrb	r3, [r7, #14]
 8001040:	461a      	mov	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1e1      	bne.n	8001014 <ParseMAC+0x10>
  }
}
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8001066:	e019      	b.n	800109c <ParseIP+0x44>
    hexcnt = 1;
 8001068:	2301      	movs	r3, #1
 800106a:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b2e      	cmp	r3, #46	; 0x2e
 8001072:	d00e      	beq.n	8001092 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8001074:	f107 030e 	add.w	r3, r7, #14
 8001078:	4619      	mov	r1, r3
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ff7e 	bl	8000f7c <ParseNumber>
 8001080:	4601      	mov	r1, r0
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	1c5a      	adds	r2, r3, #1
 8001086:	73fa      	strb	r2, [r7, #15]
 8001088:	461a      	mov	r2, r3
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	4413      	add	r3, r2
 800108e:	b2ca      	uxtb	r2, r1
 8001090:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8001092:	7bbb      	ldrb	r3, [r7, #14]
 8001094:	461a      	mov	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1e1      	bne.n	8001068 <ParseIP+0x10>
  }
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	3302      	adds	r3, #2
 80010be:	4934      	ldr	r1, [pc, #208]	; (8001190 <AT_ParseInfo+0xe4>)
 80010c0:	4618      	mov	r0, r3
 80010c2:	f012 fb0b 	bl	80136dc <strtok>
 80010c6:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 80010c8:	e05a      	b.n	8001180 <AT_ParseInfo+0xd4>
    switch (num++) {
 80010ca:	7afb      	ldrb	r3, [r7, #11]
 80010cc:	1c5a      	adds	r2, r3, #1
 80010ce:	72fa      	strb	r2, [r7, #11]
 80010d0:	2b06      	cmp	r3, #6
 80010d2:	d84f      	bhi.n	8001174 <AT_ParseInfo+0xc8>
 80010d4:	a201      	add	r2, pc, #4	; (adr r2, 80010dc <AT_ParseInfo+0x30>)
 80010d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010da:	bf00      	nop
 80010dc:	080010f9 	.word	0x080010f9
 80010e0:	08001107 	.word	0x08001107
 80010e4:	08001117 	.word	0x08001117
 80010e8:	08001127 	.word	0x08001127
 80010ec:	08001137 	.word	0x08001137
 80010f0:	08001147 	.word	0x08001147
 80010f4:	0800115b 	.word	0x0800115b
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2220      	movs	r2, #32
 80010fc:	68f9      	ldr	r1, [r7, #12]
 80010fe:	4618      	mov	r0, r3
 8001100:	f012 fabc 	bl	801367c <strncpy>
      break;
 8001104:	e037      	b.n	8001176 <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3320      	adds	r3, #32
 800110a:	2218      	movs	r2, #24
 800110c:	68f9      	ldr	r1, [r7, #12]
 800110e:	4618      	mov	r0, r3
 8001110:	f012 fab4 	bl	801367c <strncpy>
      break;
 8001114:	e02f      	b.n	8001176 <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3338      	adds	r3, #56	; 0x38
 800111a:	2210      	movs	r2, #16
 800111c:	68f9      	ldr	r1, [r7, #12]
 800111e:	4618      	mov	r0, r3
 8001120:	f012 faac 	bl	801367c <strncpy>
      break;
 8001124:	e027      	b.n	8001176 <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3348      	adds	r3, #72	; 0x48
 800112a:	2210      	movs	r2, #16
 800112c:	68f9      	ldr	r1, [r7, #12]
 800112e:	4618      	mov	r0, r3
 8001130:	f012 faa4 	bl	801367c <strncpy>
      break;
 8001134:	e01f      	b.n	8001176 <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3358      	adds	r3, #88	; 0x58
 800113a:	2210      	movs	r2, #16
 800113c:	68f9      	ldr	r1, [r7, #12]
 800113e:	4618      	mov	r0, r3
 8001140:	f012 fa9c 	bl	801367c <strncpy>
      break;
 8001144:	e017      	b.n	8001176 <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8001146:	2100      	movs	r1, #0
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f7ff ff17 	bl	8000f7c <ParseNumber>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8001158:	e00d      	b.n	8001176 <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 800115a:	490e      	ldr	r1, [pc, #56]	; (8001194 <AT_ParseInfo+0xe8>)
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f012 fabd 	bl	80136dc <strtok>
 8001162:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3368      	adds	r3, #104	; 0x68
 8001168:	2220      	movs	r2, #32
 800116a:	68f9      	ldr	r1, [r7, #12]
 800116c:	4618      	mov	r0, r3
 800116e:	f012 fa85 	bl	801367c <strncpy>
      break;
 8001172:	e000      	b.n	8001176 <AT_ParseInfo+0xca>

    default: break;
 8001174:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001176:	4906      	ldr	r1, [pc, #24]	; (8001190 <AT_ParseInfo+0xe4>)
 8001178:	2000      	movs	r0, #0
 800117a:	f012 faaf 	bl	80136dc <strtok>
 800117e:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1a1      	bne.n	80010ca <AT_ParseInfo+0x1e>
  }
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	08015b38 	.word	0x08015b38
 8001194:	08015b3c 	.word	0x08015b3c

08001198 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3302      	adds	r3, #2
 80011aa:	4952      	ldr	r1, [pc, #328]	; (80012f4 <AT_ParseConnSettings+0x15c>)
 80011ac:	4618      	mov	r0, r3
 80011ae:	f012 fa95 	bl	80136dc <strtok>
 80011b2:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 80011b4:	e095      	b.n	80012e2 <AT_ParseConnSettings+0x14a>
    switch (num++) {
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	1c5a      	adds	r2, r3, #1
 80011ba:	73fa      	strb	r2, [r7, #15]
 80011bc:	2b0b      	cmp	r3, #11
 80011be:	d87f      	bhi.n	80012c0 <AT_ParseConnSettings+0x128>
 80011c0:	a201      	add	r2, pc, #4	; (adr r2, 80011c8 <AT_ParseConnSettings+0x30>)
 80011c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c6:	bf00      	nop
 80011c8:	080011f9 	.word	0x080011f9
 80011cc:	08001207 	.word	0x08001207
 80011d0:	08001217 	.word	0x08001217
 80011d4:	0800122b 	.word	0x0800122b
 80011d8:	0800123f 	.word	0x0800123f
 80011dc:	08001253 	.word	0x08001253
 80011e0:	08001261 	.word	0x08001261
 80011e4:	0800126f 	.word	0x0800126f
 80011e8:	0800127d 	.word	0x0800127d
 80011ec:	0800128b 	.word	0x0800128b
 80011f0:	08001299 	.word	0x08001299
 80011f4:	080012ad 	.word	0x080012ad
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2221      	movs	r2, #33	; 0x21
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	4618      	mov	r0, r3
 8001200:	f012 fa3c 	bl	801367c <strncpy>
      break;
 8001204:	e05d      	b.n	80012c2 <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	3321      	adds	r3, #33	; 0x21
 800120a:	2221      	movs	r2, #33	; 0x21
 800120c:	68b9      	ldr	r1, [r7, #8]
 800120e:	4618      	mov	r0, r3
 8001210:	f012 fa34 	bl	801367c <strncpy>
      break;
 8001214:	e055      	b.n	80012c2 <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8001216:	2100      	movs	r1, #0
 8001218:	68b8      	ldr	r0, [r7, #8]
 800121a:	f7ff feaf 	bl	8000f7c <ParseNumber>
 800121e:	4603      	mov	r3, r0
 8001220:	b2da      	uxtb	r2, r3
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8001228:	e04b      	b.n	80012c2 <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 800122a:	2100      	movs	r1, #0
 800122c:	68b8      	ldr	r0, [r7, #8]
 800122e:	f7ff fea5 	bl	8000f7c <ParseNumber>
 8001232:	4603      	mov	r3, r0
 8001234:	b2da      	uxtb	r2, r3
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 800123c:	e041      	b.n	80012c2 <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 800123e:	2100      	movs	r1, #0
 8001240:	68b8      	ldr	r0, [r7, #8]
 8001242:	f7ff fe9b 	bl	8000f7c <ParseNumber>
 8001246:	4603      	mov	r3, r0
 8001248:	b2da      	uxtb	r2, r3
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8001250:	e037      	b.n	80012c2 <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	3348      	adds	r3, #72	; 0x48
 8001256:	4619      	mov	r1, r3
 8001258:	68b8      	ldr	r0, [r7, #8]
 800125a:	f7ff fefd 	bl	8001058 <ParseIP>
      break;
 800125e:	e030      	b.n	80012c2 <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	334c      	adds	r3, #76	; 0x4c
 8001264:	4619      	mov	r1, r3
 8001266:	68b8      	ldr	r0, [r7, #8]
 8001268:	f7ff fef6 	bl	8001058 <ParseIP>
      break;
 800126c:	e029      	b.n	80012c2 <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	3350      	adds	r3, #80	; 0x50
 8001272:	4619      	mov	r1, r3
 8001274:	68b8      	ldr	r0, [r7, #8]
 8001276:	f7ff feef 	bl	8001058 <ParseIP>
      break;
 800127a:	e022      	b.n	80012c2 <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	3354      	adds	r3, #84	; 0x54
 8001280:	4619      	mov	r1, r3
 8001282:	68b8      	ldr	r0, [r7, #8]
 8001284:	f7ff fee8 	bl	8001058 <ParseIP>
      break;
 8001288:	e01b      	b.n	80012c2 <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	3358      	adds	r3, #88	; 0x58
 800128e:	4619      	mov	r1, r3
 8001290:	68b8      	ldr	r0, [r7, #8]
 8001292:	f7ff fee1 	bl	8001058 <ParseIP>
      break;
 8001296:	e014      	b.n	80012c2 <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8001298:	2100      	movs	r1, #0
 800129a:	68b8      	ldr	r0, [r7, #8]
 800129c:	f7ff fe6e 	bl	8000f7c <ParseNumber>
 80012a0:	4603      	mov	r3, r0
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 80012aa:	e00a      	b.n	80012c2 <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 80012ac:	2100      	movs	r1, #0
 80012ae:	68b8      	ldr	r0, [r7, #8]
 80012b0:	f7ff fe64 	bl	8000f7c <ParseNumber>
 80012b4:	4603      	mov	r3, r0
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 80012be:	e000      	b.n	80012c2 <AT_ParseConnSettings+0x12a>

    default:
      break;
 80012c0:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80012c2:	490c      	ldr	r1, [pc, #48]	; (80012f4 <AT_ParseConnSettings+0x15c>)
 80012c4:	2000      	movs	r0, #0
 80012c6:	f012 fa09 	bl	80136dc <strtok>
 80012ca:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d007      	beq.n	80012e2 <AT_ParseConnSettings+0x14a>
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b2c      	cmp	r3, #44	; 0x2c
 80012da:	d102      	bne.n	80012e2 <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	3301      	adds	r3, #1
 80012e0:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f47f af66 	bne.w	80011b6 <AT_ParseConnSettings+0x1e>
    }
  }
}
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	08015b38 	.word	0x08015b38

080012f8 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3302      	adds	r3, #2
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b31      	cmp	r3, #49	; 0x31
 800130a:	bf0c      	ite	eq
 800130c:	2301      	moveq	r3, #1
 800130e:	2300      	movne	r3, #0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	461a      	mov	r2, r3
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	701a      	strb	r2, [r3, #0]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b087      	sub	sp, #28
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 800133e:	68b8      	ldr	r0, [r7, #8]
 8001340:	f7fe ff46 	bl	80001d0 <strlen>
 8001344:	4603      	mov	r3, r0
 8001346:	b299      	uxth	r1, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800134e:	461a      	mov	r2, r3
 8001350:	68b8      	ldr	r0, [r7, #8]
 8001352:	47a0      	blx	r4
 8001354:	4603      	mov	r3, r0
 8001356:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	2b00      	cmp	r3, #0
 800135c:	dd3e      	ble.n	80013dc <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800136a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	4798      	blx	r3
 8001372:	4603      	mov	r3, r0
 8001374:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8001376:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800137a:	2b00      	cmp	r3, #0
 800137c:	dd27      	ble.n	80013ce <AT_ExecuteCommand+0xaa>
 800137e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001382:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001386:	dc22      	bgt.n	80013ce <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8001388:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800138c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001390:	d105      	bne.n	800139e <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8001392:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001396:	b29b      	uxth	r3, r3
 8001398:	3b01      	subs	r3, #1
 800139a:	b29b      	uxth	r3, r3
 800139c:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 800139e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 80013aa:	490f      	ldr	r1, [pc, #60]	; (80013e8 <AT_ExecuteCommand+0xc4>)
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f012 f97a 	bl	80136a6 <strstr>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	e010      	b.n	80013de <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 80013bc:	490b      	ldr	r1, [pc, #44]	; (80013ec <AT_ExecuteCommand+0xc8>)
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f012 f971 	bl	80136a6 <strstr>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80013ca:	2305      	movs	r3, #5
 80013cc:	e007      	b.n	80013de <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80013ce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013d2:	f113 0f04 	cmn.w	r3, #4
 80013d6:	d101      	bne.n	80013dc <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 80013d8:	2306      	movs	r3, #6
 80013da:	e000      	b.n	80013de <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80013dc:	2304      	movs	r3, #4
}
 80013de:	4618      	mov	r0, r3
 80013e0:	371c      	adds	r7, #28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd90      	pop	{r4, r7, pc}
 80013e6:	bf00      	nop
 80013e8:	08015b4c 	.word	0x08015b4c
 80013ec:	08015b58 	.word	0x08015b58

080013f0 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();
  cmd_len = strlen((char*)cmd);
 800140a:	68b8      	ldr	r0, [r7, #8]
 800140c:	f7fe fee0 	bl	80001d0 <strlen>
 8001410:	4603      	mov	r3, r0
 8001412:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8001414:	8a7b      	ldrh	r3, [r7, #18]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <AT_RequestSendData+0x32>
 800141e:	2302      	movs	r3, #2
 8001420:	e053      	b.n	80014ca <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800142e:	8a79      	ldrh	r1, [r7, #18]
 8001430:	68b8      	ldr	r0, [r7, #8]
 8001432:	4798      	blx	r3
 8001434:	4603      	mov	r3, r0
 8001436:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8001438:	8a3a      	ldrh	r2, [r7, #16]
 800143a:	8a7b      	ldrh	r3, [r7, #18]
 800143c:	429a      	cmp	r2, r3
 800143e:	d143      	bne.n	80014c8 <AT_RequestSendData+0xd8>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800144c:	8879      	ldrh	r1, [r7, #2]
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	4798      	blx	r3
 8001452:	4603      	mov	r3, r0
 8001454:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 8001456:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800145a:	887b      	ldrh	r3, [r7, #2]
 800145c:	429a      	cmp	r2, r3
 800145e:	d131      	bne.n	80014c4 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800146c:	2100      	movs	r1, #0
 800146e:	6a38      	ldr	r0, [r7, #32]
 8001470:	4798      	blx	r3
 8001472:	4603      	mov	r3, r0
 8001474:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 8001476:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800147a:	2b00      	cmp	r3, #0
 800147c:	dd19      	ble.n	80014b2 <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 800147e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001482:	6a3a      	ldr	r2, [r7, #32]
 8001484:	4413      	add	r3, r2
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 800148a:	4912      	ldr	r1, [pc, #72]	; (80014d4 <AT_RequestSendData+0xe4>)
 800148c:	6a38      	ldr	r0, [r7, #32]
 800148e:	f012 f90a 	bl	80136a6 <strstr>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8001498:	2300      	movs	r3, #0
 800149a:	e016      	b.n	80014ca <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 800149c:	490e      	ldr	r1, [pc, #56]	; (80014d8 <AT_RequestSendData+0xe8>)
 800149e:	6a38      	ldr	r0, [r7, #32]
 80014a0:	f012 f901 	bl	80136a6 <strstr>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80014aa:	2305      	movs	r3, #5
 80014ac:	e00d      	b.n	80014ca <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 80014ae:	2302      	movs	r3, #2
 80014b0:	e00b      	b.n	80014ca <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80014b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014b6:	f113 0f04 	cmn.w	r3, #4
 80014ba:	d101      	bne.n	80014c0 <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 80014bc:	2306      	movs	r3, #6
 80014be:	e004      	b.n	80014ca <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 80014c0:	2302      	movs	r3, #2
 80014c2:	e002      	b.n	80014ca <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 80014c4:	2302      	movs	r3, #2
 80014c6:	e000      	b.n	80014ca <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 80014c8:	2304      	movs	r3, #4
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	08015b4c 	.word	0x08015b4c
 80014d8:	08015b58 	.word	0x08015b58

080014dc <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b087      	sub	sp, #28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
 80014e8:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80014f0:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 80014f8:	68b8      	ldr	r0, [r7, #8]
 80014fa:	f7fe fe69 	bl	80001d0 <strlen>
 80014fe:	4603      	mov	r3, r0
 8001500:	b299      	uxth	r1, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001508:	461a      	mov	r2, r3
 800150a:	68b8      	ldr	r0, [r7, #8]
 800150c:	47a0      	blx	r4
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	dd6f      	ble.n	80015f4 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001520:	2100      	movs	r1, #0
 8001522:	6938      	ldr	r0, [r7, #16]
 8001524:	4798      	blx	r3
 8001526:	4603      	mov	r3, r0
 8001528:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b0d      	cmp	r3, #13
 8001530:	d104      	bne.n	800153c <AT_RequestReceiveData+0x60>
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	3301      	adds	r3, #1
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b0a      	cmp	r3, #10
 800153a:	d001      	beq.n	8001540 <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 800153c:	2304      	movs	r3, #4
 800153e:	e05a      	b.n	80015f6 <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	3b02      	subs	r3, #2
 8001544:	617b      	str	r3, [r7, #20]
    p+=2;
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	3302      	adds	r3, #2
 800154a:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	2b07      	cmp	r3, #7
 8001550:	d94a      	bls.n	80015e8 <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 8001552:	e002      	b.n	800155a <AT_RequestReceiveData+0x7e>
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	3b01      	subs	r3, #1
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <AT_RequestReceiveData+0x92>
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	3b01      	subs	r3, #1
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4413      	add	r3, r2
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b15      	cmp	r3, #21
 800156c:	d0f2      	beq.n	8001554 <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4413      	add	r3, r2
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3b08      	subs	r3, #8
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4413      	add	r3, r2
 8001580:	491f      	ldr	r1, [pc, #124]	; (8001600 <AT_RequestReceiveData+0x124>)
 8001582:	4618      	mov	r0, r3
 8001584:	f012 f88f 	bl	80136a6 <strstr>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d016      	beq.n	80015bc <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	b29b      	uxth	r3, r3
 8001592:	3b08      	subs	r3, #8
 8001594:	b29a      	uxth	r2, r3
 8001596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001598:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 800159a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	887a      	ldrh	r2, [r7, #2]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d202      	bcs.n	80015aa <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 80015a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 80015aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	6939      	ldr	r1, [r7, #16]
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f011 ff77 	bl	80134a6 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	e01c      	b.n	80015f6 <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	3b04      	subs	r3, #4
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4413      	add	r3, r2
 80015c4:	2204      	movs	r2, #4
 80015c6:	490f      	ldr	r1, [pc, #60]	; (8001604 <AT_RequestReceiveData+0x128>)
 80015c8:	4618      	mov	r0, r3
 80015ca:	f011 ff5d 	bl	8013488 <memcmp>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d104      	bne.n	80015de <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 80015d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d6:	2200      	movs	r2, #0
 80015d8:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80015da:	2305      	movs	r3, #5
 80015dc:	e00b      	b.n	80015f6 <AT_RequestReceiveData+0x11a>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 80015de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e0:	2200      	movs	r2, #0
 80015e2:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80015e4:	2305      	movs	r3, #5
 80015e6:	e006      	b.n	80015f6 <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	f113 0f04 	cmn.w	r3, #4
 80015ee:	d101      	bne.n	80015f4 <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 80015f0:	2306      	movs	r3, #6
 80015f2:	e000      	b.n	80015f6 <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80015f4:	2304      	movs	r3, #4
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	371c      	adds	r7, #28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd90      	pop	{r4, r7, pc}
 80015fe:	bf00      	nop
 8001600:	08015b4c 	.word	0x08015b4c
 8001604:	08015b60 	.word	0x08015b60

08001608 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001610:	2302      	movs	r3, #2
 8001612:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f247 5230 	movw	r2, #30000	; 0x7530
 800161a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001624:	2000      	movs	r0, #0
 8001626:	4798      	blx	r3
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d113      	bne.n	8001656 <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001634:	461a      	mov	r2, r3
 8001636:	490a      	ldr	r1, [pc, #40]	; (8001660 <ES_WIFI_Init+0x58>)
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff fe73 	bl	8001324 <AT_ExecuteCommand>
 800163e:	4603      	mov	r3, r0
 8001640:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d106      	bne.n	8001656 <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800164e:	4619      	mov	r1, r3
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff fd2b 	bl	80010ac <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001656:	7bfb      	ldrb	r3, [r7, #15]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	08015b68 	.word	0x08015b68

08001664 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00b      	beq.n	8001690 <ES_WIFI_RegisterBusIO+0x2c>
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d008      	beq.n	8001690 <ES_WIFI_RegisterBusIO+0x2c>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <ES_WIFI_RegisterBusIO+0x2c>
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d002      	beq.n	8001690 <ES_WIFI_RegisterBusIO+0x2c>
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8001690:	2302      	movs	r3, #2
 8001692:	e014      	b.n	80016be <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	69fa      	ldr	r2, [r7, #28]
 80016b0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	4931      	ldr	r1, [pc, #196]	; (80017a8 <ES_WIFI_Connect+0xdc>)
 80016e4:	4618      	mov	r0, r3
 80016e6:	f011 ffa1 	bl	801362c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016f6:	461a      	mov	r2, r3
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f7ff fe13 	bl	8001324 <AT_ExecuteCommand>
 80016fe:	4603      	mov	r3, r0
 8001700:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8001702:	7dfb      	ldrb	r3, [r7, #23]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d14a      	bne.n	800179e <ES_WIFI_Connect+0xd2>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4926      	ldr	r1, [pc, #152]	; (80017ac <ES_WIFI_Connect+0xe0>)
 8001712:	4618      	mov	r0, r3
 8001714:	f011 ff8a 	bl	801362c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001724:	461a      	mov	r2, r3
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f7ff fdfc 	bl	8001324 <AT_ExecuteCommand>
 800172c:	4603      	mov	r3, r0
 800172e:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001730:	7dfb      	ldrb	r3, [r7, #23]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d133      	bne.n	800179e <ES_WIFI_Connect+0xd2>
    {
      Obj->Security = SecType;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	78fa      	ldrb	r2, [r7, #3]
 800173a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001744:	78fa      	ldrb	r2, [r7, #3]
 8001746:	491a      	ldr	r1, [pc, #104]	; (80017b0 <ES_WIFI_Connect+0xe4>)
 8001748:	4618      	mov	r0, r3
 800174a:	f011 ff6f 	bl	801362c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800175a:	461a      	mov	r2, r3
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f7ff fde1 	bl	8001324 <AT_ExecuteCommand>
 8001762:	4603      	mov	r3, r0
 8001764:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8001766:	7dfb      	ldrb	r3, [r7, #23]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d118      	bne.n	800179e <ES_WIFI_Connect+0xd2>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001772:	4a10      	ldr	r2, [pc, #64]	; (80017b4 <ES_WIFI_Connect+0xe8>)
 8001774:	6810      	ldr	r0, [r2, #0]
 8001776:	6018      	str	r0, [r3, #0]
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001784:	461a      	mov	r2, r3
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f7ff fdcc 	bl	8001324 <AT_ExecuteCommand>
 800178c:	4603      	mov	r3, r0
 800178e:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d103      	bne.n	800179e <ES_WIFI_Connect+0xd2>
        {
           Obj->NetSettings.IsConnected = 1;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 800179e:	7dfb      	ldrb	r3, [r7, #23]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	08015b80 	.word	0x08015b80
 80017ac:	08015b88 	.word	0x08015b88
 80017b0:	08015b90 	.word	0x08015b90
 80017b4:	08015b98 	.word	0x08015b98

080017b8 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017c6:	4a11      	ldr	r2, [pc, #68]	; (800180c <ES_WIFI_IsConnected+0x54>)
 80017c8:	6810      	ldr	r0, [r2, #0]
 80017ca:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017d8:	461a      	mov	r2, r3
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff fda2 	bl	8001324 <AT_ExecuteCommand>
 80017e0:	4603      	mov	r3, r0
 80017e2:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d108      	bne.n	80017fc <ES_WIFI_IsConnected+0x44>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f503 7294 	add.w	r2, r3, #296	; 0x128
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	33d2      	adds	r3, #210	; 0xd2
 80017f4:	4619      	mov	r1, r3
 80017f6:	4610      	mov	r0, r2
 80017f8:	f7ff fd7e 	bl	80012f8 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	08015b9c 	.word	0x08015b9c

08001810 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800181e:	4a10      	ldr	r2, [pc, #64]	; (8001860 <ES_WIFI_GetNetworkSettings+0x50>)
 8001820:	6810      	ldr	r0, [r2, #0]
 8001822:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001830:	461a      	mov	r2, r3
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff fd76 	bl	8001324 <AT_ExecuteCommand>
 8001838:	4603      	mov	r3, r0
 800183a:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d108      	bne.n	8001854 <ES_WIFI_GetNetworkSettings+0x44>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	338d      	adds	r3, #141	; 0x8d
 800184c:	4619      	mov	r1, r3
 800184e:	4610      	mov	r0, r2
 8001850:	f7ff fca2 	bl	8001198 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 8001854:	7bfb      	ldrb	r3, [r7, #15]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	08015ba4 	.word	0x08015ba4

08001864 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001874:	4a11      	ldr	r2, [pc, #68]	; (80018bc <ES_WIFI_GetMACAddress+0x58>)
 8001876:	6810      	ldr	r0, [r2, #0]
 8001878:	6018      	str	r0, [r3, #0]
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001886:	461a      	mov	r2, r3
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff fd4b 	bl	8001324 <AT_ExecuteCommand>
 800188e:	4603      	mov	r3, r0
 8001890:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10c      	bne.n	80018b2 <ES_WIFI_GetMACAddress+0x4e>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800189e:	3302      	adds	r3, #2
 80018a0:	4907      	ldr	r1, [pc, #28]	; (80018c0 <ES_WIFI_GetMACAddress+0x5c>)
 80018a2:	4618      	mov	r0, r3
 80018a4:	f011 ff1a 	bl	80136dc <strtok>
 80018a8:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 80018aa:	6839      	ldr	r1, [r7, #0]
 80018ac:	68b8      	ldr	r0, [r7, #8]
 80018ae:	f7ff fba9 	bl	8001004 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	08015c00 	.word	0x08015c00
 80018c0:	08015c04 	.word	0x08015c04

080018c4 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b087      	sub	sp, #28
 80018c8:	af02      	add	r7, sp, #8
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	73fb      	strb	r3, [r7, #15]

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <ES_WIFI_StartClientConnection+0x1e>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d105      	bne.n	80018ee <ES_WIFI_StartClientConnection+0x2a>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	885b      	ldrh	r3, [r3, #2]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <ES_WIFI_StartClientConnection+0x2a>
 80018ea:	2302      	movs	r3, #2
 80018ec:	e0c3      	b.n	8001a76 <ES_WIFI_StartClientConnection+0x1b2>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	785b      	ldrb	r3, [r3, #1]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4961      	ldr	r1, [pc, #388]	; (8001a80 <ES_WIFI_StartClientConnection+0x1bc>)
 80018fc:	f011 fe96 	bl	801362c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800190c:	461a      	mov	r2, r3
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff fd08 	bl	8001324 <AT_ExecuteCommand>
 8001914:	4603      	mov	r3, r0
 8001916:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d114      	bne.n	8001948 <ES_WIFI_StartClientConnection+0x84>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	4956      	ldr	r1, [pc, #344]	; (8001a84 <ES_WIFI_StartClientConnection+0x1c0>)
 800192c:	f011 fe7e 	bl	801362c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800193c:	461a      	mov	r2, r3
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff fcf0 	bl	8001324 <AT_ExecuteCommand>
 8001944:	4603      	mov	r3, r0
 8001946:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d114      	bne.n	8001978 <ES_WIFI_StartClientConnection+0xb4>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	889b      	ldrh	r3, [r3, #4]
 8001958:	461a      	mov	r2, r3
 800195a:	494b      	ldr	r1, [pc, #300]	; (8001a88 <ES_WIFI_StartClientConnection+0x1c4>)
 800195c:	f011 fe66 	bl	801362c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800196c:	461a      	mov	r2, r3
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff fcd8 	bl	8001324 <AT_ExecuteCommand>
 8001974:	4603      	mov	r3, r0
 8001976:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d11c      	bne.n	80019b8 <ES_WIFI_StartClientConnection+0xf4>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <ES_WIFI_StartClientConnection+0xca>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b03      	cmp	r3, #3
 800198c:	d114      	bne.n	80019b8 <ES_WIFI_StartClientConnection+0xf4>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	885b      	ldrh	r3, [r3, #2]
 8001998:	461a      	mov	r2, r3
 800199a:	493c      	ldr	r1, [pc, #240]	; (8001a8c <ES_WIFI_StartClientConnection+0x1c8>)
 800199c:	f011 fe46 	bl	801362c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019ac:	461a      	mov	r2, r3
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff fcb8 	bl	8001324 <AT_ExecuteCommand>
 80019b4:	4603      	mov	r3, r0
 80019b6:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d128      	bne.n	8001a10 <ES_WIFI_StartClientConnection+0x14c>
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <ES_WIFI_StartClientConnection+0x10a>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d120      	bne.n	8001a10 <ES_WIFI_StartClientConnection+0x14c>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	799b      	ldrb	r3, [r3, #6]
 80019d8:	4619      	mov	r1, r3
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	79db      	ldrb	r3, [r3, #7]
 80019de:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80019e4:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	9200      	str	r2, [sp, #0]
 80019ee:	4623      	mov	r3, r4
 80019f0:	460a      	mov	r2, r1
 80019f2:	4927      	ldr	r1, [pc, #156]	; (8001a90 <ES_WIFI_StartClientConnection+0x1cc>)
 80019f4:	f011 fe1a 	bl	801362c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a04:	461a      	mov	r2, r3
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff fc8c 	bl	8001324 <AT_ExecuteCommand>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d117      	bne.n	8001a46 <ES_WIFI_StartClientConnection+0x182>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d113      	bne.n	8001a46 <ES_WIFI_StartClientConnection+0x182>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a24:	4a1b      	ldr	r2, [pc, #108]	; (8001a94 <ES_WIFI_StartClientConnection+0x1d0>)
 8001a26:	6810      	ldr	r0, [r2, #0]
 8001a28:	6018      	str	r0, [r3, #0]
 8001a2a:	8892      	ldrh	r2, [r2, #4]
 8001a2c:	809a      	strh	r2, [r3, #4]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff fc71 	bl	8001324 <AT_ExecuteCommand>
 8001a42:	4603      	mov	r3, r0
 8001a44:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d113      	bne.n	8001a74 <ES_WIFI_StartClientConnection+0x1b0>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a52:	4a11      	ldr	r2, [pc, #68]	; (8001a98 <ES_WIFI_StartClientConnection+0x1d4>)
 8001a54:	6810      	ldr	r0, [r2, #0]
 8001a56:	6018      	str	r0, [r3, #0]
 8001a58:	8892      	ldrh	r2, [r2, #4]
 8001a5a:	809a      	strh	r2, [r3, #4]
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a68:	461a      	mov	r2, r3
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff fc5a 	bl	8001324 <AT_ExecuteCommand>
 8001a70:	4603      	mov	r3, r0
 8001a72:	73fb      	strb	r3, [r7, #15]
  }

  UNLOCK_WIFI();
  return ret;
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd90      	pop	{r4, r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	08015c68 	.word	0x08015c68
 8001a84:	08015c70 	.word	0x08015c70
 8001a88:	08015c78 	.word	0x08015c78
 8001a8c:	08015c80 	.word	0x08015c80
 8001a90:	08015c88 	.word	0x08015c88
 8001a94:	08015c98 	.word	0x08015c98
 8001a98:	08015ca0 	.word	0x08015ca0

08001a9c <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	607a      	str	r2, [r7, #4]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	72fb      	strb	r3, [r7, #11]
 8001aac:	4613      	mov	r3, r2
 8001aae:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d102      	bne.n	8001ac0 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8001aba:	2301      	movs	r3, #1
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	e001      	b.n	8001ac4 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8001ac4:	893b      	ldrh	r3, [r7, #8]
 8001ac6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001aca:	d302      	bcc.n	8001ad2 <ES_WIFI_SendData+0x36>
 8001acc:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001ad0:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	893a      	ldrh	r2, [r7, #8]
 8001ad6:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ade:	7afa      	ldrb	r2, [r7, #11]
 8001ae0:	4942      	ldr	r1, [pc, #264]	; (8001bec <ES_WIFI_SendData+0x150>)
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f011 fda2 	bl	801362c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001af4:	461a      	mov	r2, r3
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f7ff fc14 	bl	8001324 <AT_ExecuteCommand>
 8001afc:	4603      	mov	r3, r0
 8001afe:	74fb      	strb	r3, [r7, #19]
  if(ret == ES_WIFI_STATUS_OK)
 8001b00:	7cfb      	ldrb	r3, [r7, #19]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d15e      	bne.n	8001bc4 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	4938      	ldr	r1, [pc, #224]	; (8001bf0 <ES_WIFI_SendData+0x154>)
 8001b10:	4618      	mov	r0, r3
 8001b12:	f011 fd8b 	bl	801362c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b22:	461a      	mov	r2, r3
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f7ff fbfd 	bl	8001324 <AT_ExecuteCommand>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 8001b2e:	7cfb      	ldrb	r3, [r7, #19]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d13d      	bne.n	8001bb0 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b3a:	893a      	ldrh	r2, [r7, #8]
 8001b3c:	492d      	ldr	r1, [pc, #180]	; (8001bf4 <ES_WIFI_SendData+0x158>)
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f011 fd74 	bl	801362c <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b50:	893a      	ldrh	r2, [r7, #8]
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	4613      	mov	r3, r2
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f7ff fc49 	bl	80013f0 <AT_RequestSendData>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	74fb      	strb	r3, [r7, #19]

      if(ret == ES_WIFI_STATUS_OK)
 8001b62:	7cfb      	ldrb	r3, [r7, #19]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d119      	bne.n	8001b9c <ES_WIFI_SendData+0x100>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b6e:	4922      	ldr	r1, [pc, #136]	; (8001bf8 <ES_WIFI_SendData+0x15c>)
 8001b70:	4618      	mov	r0, r3
 8001b72:	f011 fd98 	bl	80136a6 <strstr>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d02c      	beq.n	8001bd6 <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8001b7c:	f640 025b 	movw	r2, #2139	; 0x85b
 8001b80:	491e      	ldr	r1, [pc, #120]	; (8001bfc <ES_WIFI_SendData+0x160>)
 8001b82:	481f      	ldr	r0, [pc, #124]	; (8001c00 <ES_WIFI_SendData+0x164>)
 8001b84:	f011 fca2 	bl	80134cc <iprintf>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b8e:	4619      	mov	r1, r3
 8001b90:	481c      	ldr	r0, [pc, #112]	; (8001c04 <ES_WIFI_SendData+0x168>)
 8001b92:	f011 fc9b 	bl	80134cc <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 8001b96:	2302      	movs	r3, #2
 8001b98:	74fb      	strb	r3, [r7, #19]
 8001b9a:	e01c      	b.n	8001bd6 <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 8001b9c:	f640 0261 	movw	r2, #2145	; 0x861
 8001ba0:	4916      	ldr	r1, [pc, #88]	; (8001bfc <ES_WIFI_SendData+0x160>)
 8001ba2:	4817      	ldr	r0, [pc, #92]	; (8001c00 <ES_WIFI_SendData+0x164>)
 8001ba4:	f011 fc92 	bl	80134cc <iprintf>
 8001ba8:	4817      	ldr	r0, [pc, #92]	; (8001c08 <ES_WIFI_SendData+0x16c>)
 8001baa:	f011 fd03 	bl	80135b4 <puts>
 8001bae:	e012      	b.n	8001bd6 <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 8001bb0:	f640 0266 	movw	r2, #2150	; 0x866
 8001bb4:	4911      	ldr	r1, [pc, #68]	; (8001bfc <ES_WIFI_SendData+0x160>)
 8001bb6:	4812      	ldr	r0, [pc, #72]	; (8001c00 <ES_WIFI_SendData+0x164>)
 8001bb8:	f011 fc88 	bl	80134cc <iprintf>
 8001bbc:	4813      	ldr	r0, [pc, #76]	; (8001c0c <ES_WIFI_SendData+0x170>)
 8001bbe:	f011 fcf9 	bl	80135b4 <puts>
 8001bc2:	e008      	b.n	8001bd6 <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 8001bc4:	f640 026b 	movw	r2, #2155	; 0x86b
 8001bc8:	490c      	ldr	r1, [pc, #48]	; (8001bfc <ES_WIFI_SendData+0x160>)
 8001bca:	480d      	ldr	r0, [pc, #52]	; (8001c00 <ES_WIFI_SendData+0x164>)
 8001bcc:	f011 fc7e 	bl	80134cc <iprintf>
 8001bd0:	480f      	ldr	r0, [pc, #60]	; (8001c10 <ES_WIFI_SendData+0x174>)
 8001bd2:	f011 fcef 	bl	80135b4 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8001bd6:	7cfb      	ldrb	r3, [r7, #19]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d102      	bne.n	8001be2 <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 8001bdc:	6a3b      	ldr	r3, [r7, #32]
 8001bde:	2200      	movs	r2, #0
 8001be0:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 8001be2:	7cfb      	ldrb	r3, [r7, #19]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	08015c68 	.word	0x08015c68
 8001bf0:	08015e1c 	.word	0x08015e1c
 8001bf4:	08015e24 	.word	0x08015e24
 8001bf8:	08015e30 	.word	0x08015e30
 8001bfc:	08015cf8 	.word	0x08015cf8
 8001c00:	08015d10 	.word	0x08015d10
 8001c04:	08015e38 	.word	0x08015e38
 8001c08:	08015e54 	.word	0x08015e54
 8001c0c:	08015e70 	.word	0x08015e70
 8001c10:	08015e84 	.word	0x08015e84

08001c14 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	460b      	mov	r3, r1
 8001c22:	72fb      	strb	r3, [r7, #11]
 8001c24:	4613      	mov	r3, r2
 8001c26:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d102      	bne.n	8001c38 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8001c32:	2301      	movs	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	e001      	b.n	8001c3c <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8001c3c:	893b      	ldrh	r3, [r7, #8]
 8001c3e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001c42:	f200 808a 	bhi.w	8001d5a <ES_WIFI_ReceiveData+0x146>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c4c:	7afa      	ldrb	r2, [r7, #11]
 8001c4e:	4945      	ldr	r1, [pc, #276]	; (8001d64 <ES_WIFI_ReceiveData+0x150>)
 8001c50:	4618      	mov	r0, r3
 8001c52:	f011 fceb 	bl	801362c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c62:	461a      	mov	r2, r3
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f7ff fb5d 	bl	8001324 <AT_ExecuteCommand>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	74fb      	strb	r3, [r7, #19]

    if(ret == ES_WIFI_STATUS_OK)
 8001c6e:	7cfb      	ldrb	r3, [r7, #19]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d164      	bne.n	8001d3e <ES_WIFI_ReceiveData+0x12a>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c7a:	893a      	ldrh	r2, [r7, #8]
 8001c7c:	493a      	ldr	r1, [pc, #232]	; (8001d68 <ES_WIFI_ReceiveData+0x154>)
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f011 fcd4 	bl	801362c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c90:	461a      	mov	r2, r3
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f7ff fb46 	bl	8001324 <AT_ExecuteCommand>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	74fb      	strb	r3, [r7, #19]
      if(ret == ES_WIFI_STATUS_OK)
 8001c9c:	7cfb      	ldrb	r3, [r7, #19]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d140      	bne.n	8001d24 <ES_WIFI_ReceiveData+0x110>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	4930      	ldr	r1, [pc, #192]	; (8001d6c <ES_WIFI_ReceiveData+0x158>)
 8001cac:	4618      	mov	r0, r3
 8001cae:	f011 fcbd 	bl	801362c <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f7ff fb2f 	bl	8001324 <AT_ExecuteCommand>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	74fb      	strb	r3, [r7, #19]
        if(ret == ES_WIFI_STATUS_OK)
 8001cca:	7cfb      	ldrb	r3, [r7, #19]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d11f      	bne.n	8001d10 <ES_WIFI_ReceiveData+0xfc>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001cd6:	4a26      	ldr	r2, [pc, #152]	; (8001d70 <ES_WIFI_ReceiveData+0x15c>)
 8001cd8:	6810      	ldr	r0, [r2, #0]
 8001cda:	6018      	str	r0, [r3, #0]
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001ce2:	893a      	ldrh	r2, [r7, #8]
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f7ff fbf5 	bl	80014dc <AT_RequestReceiveData>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 8001cf6:	7cfb      	ldrb	r3, [r7, #19]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d02e      	beq.n	8001d5a <ES_WIFI_ReceiveData+0x146>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 8001cfc:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8001d00:	491c      	ldr	r1, [pc, #112]	; (8001d74 <ES_WIFI_ReceiveData+0x160>)
 8001d02:	481d      	ldr	r0, [pc, #116]	; (8001d78 <ES_WIFI_ReceiveData+0x164>)
 8001d04:	f011 fbe2 	bl	80134cc <iprintf>
 8001d08:	481c      	ldr	r0, [pc, #112]	; (8001d7c <ES_WIFI_ReceiveData+0x168>)
 8001d0a:	f011 fc53 	bl	80135b4 <puts>
 8001d0e:	e024      	b.n	8001d5a <ES_WIFI_ReceiveData+0x146>
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 8001d10:	f640 1201 	movw	r2, #2305	; 0x901
 8001d14:	4917      	ldr	r1, [pc, #92]	; (8001d74 <ES_WIFI_ReceiveData+0x160>)
 8001d16:	4818      	ldr	r0, [pc, #96]	; (8001d78 <ES_WIFI_ReceiveData+0x164>)
 8001d18:	f011 fbd8 	bl	80134cc <iprintf>
 8001d1c:	4818      	ldr	r0, [pc, #96]	; (8001d80 <ES_WIFI_ReceiveData+0x16c>)
 8001d1e:	f011 fc49 	bl	80135b4 <puts>
 8001d22:	e01a      	b.n	8001d5a <ES_WIFI_ReceiveData+0x146>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n");
 8001d24:	f640 1206 	movw	r2, #2310	; 0x906
 8001d28:	4912      	ldr	r1, [pc, #72]	; (8001d74 <ES_WIFI_ReceiveData+0x160>)
 8001d2a:	4813      	ldr	r0, [pc, #76]	; (8001d78 <ES_WIFI_ReceiveData+0x164>)
 8001d2c:	f011 fbce 	bl	80134cc <iprintf>
 8001d30:	4814      	ldr	r0, [pc, #80]	; (8001d84 <ES_WIFI_ReceiveData+0x170>)
 8001d32:	f011 fc3f 	bl	80135b4 <puts>
        *Receivedlen = 0;
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	801a      	strh	r2, [r3, #0]
 8001d3c:	e00d      	b.n	8001d5a <ES_WIFI_ReceiveData+0x146>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n");
 8001d3e:	f640 120c 	movw	r2, #2316	; 0x90c
 8001d42:	490c      	ldr	r1, [pc, #48]	; (8001d74 <ES_WIFI_ReceiveData+0x160>)
 8001d44:	480c      	ldr	r0, [pc, #48]	; (8001d78 <ES_WIFI_ReceiveData+0x164>)
 8001d46:	f011 fbc1 	bl	80134cc <iprintf>
 8001d4a:	480f      	ldr	r0, [pc, #60]	; (8001d88 <ES_WIFI_ReceiveData+0x174>)
 8001d4c:	f011 fc32 	bl	80135b4 <puts>
      issue15++;
 8001d50:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <ES_WIFI_ReceiveData+0x178>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	3301      	adds	r3, #1
 8001d56:	4a0d      	ldr	r2, [pc, #52]	; (8001d8c <ES_WIFI_ReceiveData+0x178>)
 8001d58:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001d5a:	7cfb      	ldrb	r3, [r7, #19]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	08015c68 	.word	0x08015c68
 8001d68:	08015ea8 	.word	0x08015ea8
 8001d6c:	08015eb0 	.word	0x08015eb0
 8001d70:	08015eb8 	.word	0x08015eb8
 8001d74:	08015cf8 	.word	0x08015cf8
 8001d78:	08015d10 	.word	0x08015d10
 8001d7c:	08015ebc 	.word	0x08015ebc
 8001d80:	08015edc 	.word	0x08015edc
 8001d84:	08015ef4 	.word	0x08015ef4
 8001d88:	08015f14 	.word	0x08015f14
 8001d8c:	20000684 	.word	0x20000684

08001d90 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08c      	sub	sp, #48	; 0x30
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001d98:	4b56      	ldr	r3, [pc, #344]	; (8001ef4 <SPI_WIFI_MspInit+0x164>)
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9c:	4a55      	ldr	r2, [pc, #340]	; (8001ef4 <SPI_WIFI_MspInit+0x164>)
 8001d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001da2:	6593      	str	r3, [r2, #88]	; 0x58
 8001da4:	4b53      	ldr	r3, [pc, #332]	; (8001ef4 <SPI_WIFI_MspInit+0x164>)
 8001da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dac:	61bb      	str	r3, [r7, #24]
 8001dae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db0:	4b50      	ldr	r3, [pc, #320]	; (8001ef4 <SPI_WIFI_MspInit+0x164>)
 8001db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db4:	4a4f      	ldr	r2, [pc, #316]	; (8001ef4 <SPI_WIFI_MspInit+0x164>)
 8001db6:	f043 0302 	orr.w	r3, r3, #2
 8001dba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dbc:	4b4d      	ldr	r3, [pc, #308]	; (8001ef4 <SPI_WIFI_MspInit+0x164>)
 8001dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc8:	4b4a      	ldr	r3, [pc, #296]	; (8001ef4 <SPI_WIFI_MspInit+0x164>)
 8001dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dcc:	4a49      	ldr	r2, [pc, #292]	; (8001ef4 <SPI_WIFI_MspInit+0x164>)
 8001dce:	f043 0304 	orr.w	r3, r3, #4
 8001dd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd4:	4b47      	ldr	r3, [pc, #284]	; (8001ef4 <SPI_WIFI_MspInit+0x164>)
 8001dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001de0:	4b44      	ldr	r3, [pc, #272]	; (8001ef4 <SPI_WIFI_MspInit+0x164>)
 8001de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de4:	4a43      	ldr	r2, [pc, #268]	; (8001ef4 <SPI_WIFI_MspInit+0x164>)
 8001de6:	f043 0310 	orr.w	r3, r3, #16
 8001dea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dec:	4b41      	ldr	r3, [pc, #260]	; (8001ef4 <SPI_WIFI_MspInit+0x164>)
 8001dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df0:	f003 0310 	and.w	r3, r3, #16
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dfe:	483e      	ldr	r0, [pc, #248]	; (8001ef8 <SPI_WIFI_MspInit+0x168>)
 8001e00:	f009 f864 	bl	800aecc <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8001e04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e08:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001e12:	2300      	movs	r3, #0
 8001e14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8001e16:	f107 031c 	add.w	r3, r7, #28
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4836      	ldr	r0, [pc, #216]	; (8001ef8 <SPI_WIFI_MspInit+0x168>)
 8001e1e:	f008 fda1 	bl	800a964 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8001e22:	2302      	movs	r3, #2
 8001e24:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001e26:	4b35      	ldr	r3, [pc, #212]	; (8001efc <SPI_WIFI_MspInit+0x16c>)
 8001e28:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001e32:	f107 031c 	add.w	r3, r7, #28
 8001e36:	4619      	mov	r1, r3
 8001e38:	4831      	ldr	r0, [pc, #196]	; (8001f00 <SPI_WIFI_MspInit+0x170>)
 8001e3a:	f008 fd93 	bl	800a964 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8001e3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e42:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001e44:	2301      	movs	r3, #1
 8001e46:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4829      	ldr	r0, [pc, #164]	; (8001f00 <SPI_WIFI_MspInit+0x170>)
 8001e5c:	f008 fd82 	bl	800a964 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8001e60:	2201      	movs	r2, #1
 8001e62:	2101      	movs	r1, #1
 8001e64:	4826      	ldr	r0, [pc, #152]	; (8001f00 <SPI_WIFI_MspInit+0x170>)
 8001e66:	f009 f831 	bl	800aecc <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001e76:	2301      	movs	r3, #1
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8001e7a:	f107 031c 	add.w	r3, r7, #28
 8001e7e:	4619      	mov	r1, r3
 8001e80:	481f      	ldr	r0, [pc, #124]	; (8001f00 <SPI_WIFI_MspInit+0x170>)
 8001e82:	f008 fd6f 	bl	800a964 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8001e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e8a:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001e94:	2301      	movs	r3, #1
 8001e96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001e98:	2306      	movs	r3, #6
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8001e9c:	f107 031c 	add.w	r3, r7, #28
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4818      	ldr	r0, [pc, #96]	; (8001f04 <SPI_WIFI_MspInit+0x174>)
 8001ea4:	f008 fd5e 	bl	800a964 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 8001ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eac:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001eba:	2306      	movs	r3, #6
 8001ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001ebe:	f107 031c 	add.w	r3, r7, #28
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	480f      	ldr	r0, [pc, #60]	; (8001f04 <SPI_WIFI_MspInit+0x174>)
 8001ec6:	f008 fd4d 	bl	800a964 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8001eca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ece:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001edc:	2306      	movs	r3, #6
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001ee0:	f107 031c 	add.w	r3, r7, #28
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4807      	ldr	r0, [pc, #28]	; (8001f04 <SPI_WIFI_MspInit+0x174>)
 8001ee8:	f008 fd3c 	bl	800a964 <HAL_GPIO_Init>
}
 8001eec:	bf00      	nop
 8001eee:	3730      	adds	r7, #48	; 0x30
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	48000400 	.word	0x48000400
 8001efc:	10110000 	.word	0x10110000
 8001f00:	48001000 	.word	0x48001000
 8001f04:	48000800 	.word	0x48000800

08001f08 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d145      	bne.n	8001fa8 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8001f1c:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f1e:	4a28      	ldr	r2, [pc, #160]	; (8001fc0 <SPI_WIFI_Init+0xb8>)
 8001f20:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8001f22:	4826      	ldr	r0, [pc, #152]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f24:	f7ff ff34 	bl	8001d90 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8001f28:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f2a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f2e:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8001f30:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8001f36:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f38:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001f3c:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8001f3e:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8001f44:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f50:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8001f52:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f54:	2210      	movs	r2, #16
 8001f56:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001f64:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8001f6a:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001f70:	4812      	ldr	r0, [pc, #72]	; (8001fbc <SPI_WIFI_Init+0xb4>)
 8001f72:	f00b fd1d 	bl	800d9b0 <HAL_SPI_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d002      	beq.n	8001f82 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 8001f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f80:	e018      	b.n	8001fb4 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2100      	movs	r1, #0
 8001f86:	2007      	movs	r0, #7
 8001f88:	f008 fb67 	bl	800a65a <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8001f8c:	2007      	movs	r0, #7
 8001f8e:	f008 fb80 	bl	800a692 <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2100      	movs	r1, #0
 8001f96:	2033      	movs	r0, #51	; 0x33
 8001f98:	f008 fb5f 	bl	800a65a <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8001f9c:	2033      	movs	r0, #51	; 0x33
 8001f9e:	f008 fb78 	bl	800a692 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8001fa2:	200a      	movs	r0, #10
 8001fa4:	f000 f9fe 	bl	80023a4 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 8001fa8:	f000 f80c 	bl	8001fc4 <SPI_WIFI_ResetModule>
 8001fac:	4603      	mov	r3, r0
 8001fae:	73fb      	strb	r3, [r7, #15]

  return rc;
 8001fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	200037fc 	.word	0x200037fc
 8001fc0:	40003c00 	.word	0x40003c00

08001fc4 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8001fca:	f008 fa3d 	bl	800a448 <HAL_GetTick>
 8001fce:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fda:	4830      	ldr	r0, [pc, #192]	; (800209c <SPI_WIFI_ResetModule+0xd8>)
 8001fdc:	f008 ff76 	bl	800aecc <HAL_GPIO_WritePin>
 8001fe0:	200a      	movs	r0, #10
 8001fe2:	f008 fa3d 	bl	800a460 <HAL_Delay>
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fec:	482b      	ldr	r0, [pc, #172]	; (800209c <SPI_WIFI_ResetModule+0xd8>)
 8001fee:	f008 ff6d 	bl	800aecc <HAL_GPIO_WritePin>
 8001ff2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ff6:	f008 fa33 	bl	800a460 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	4827      	ldr	r0, [pc, #156]	; (800209c <SPI_WIFI_ResetModule+0xd8>)
 8002000:	f008 ff64 	bl	800aecc <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002004:	200f      	movs	r0, #15
 8002006:	f000 f9cd 	bl	80023a4 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 800200a:	e020      	b.n	800204e <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	463a      	mov	r2, r7
 8002010:	18d1      	adds	r1, r2, r3
 8002012:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002016:	2201      	movs	r2, #1
 8002018:	4821      	ldr	r0, [pc, #132]	; (80020a0 <SPI_WIFI_ResetModule+0xdc>)
 800201a:	f00b fd94 	bl	800db46 <HAL_SPI_Receive>
 800201e:	4603      	mov	r3, r0
 8002020:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	3302      	adds	r3, #2
 8002026:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8002028:	f008 fa0e 	bl	800a448 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002036:	d202      	bcs.n	800203e <SPI_WIFI_ResetModule+0x7a>
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d007      	beq.n	800204e <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 800203e:	2201      	movs	r2, #1
 8002040:	2101      	movs	r1, #1
 8002042:	4816      	ldr	r0, [pc, #88]	; (800209c <SPI_WIFI_ResetModule+0xd8>)
 8002044:	f008 ff42 	bl	800aecc <HAL_GPIO_WritePin>
      return -1;
 8002048:	f04f 33ff 	mov.w	r3, #4294967295
 800204c:	e021      	b.n	8002092 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 800204e:	2102      	movs	r1, #2
 8002050:	4812      	ldr	r0, [pc, #72]	; (800209c <SPI_WIFI_ResetModule+0xd8>)
 8002052:	f008 ff23 	bl	800ae9c <HAL_GPIO_ReadPin>
 8002056:	4603      	mov	r3, r0
 8002058:	2b01      	cmp	r3, #1
 800205a:	d0d7      	beq.n	800200c <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 800205c:	2201      	movs	r2, #1
 800205e:	2101      	movs	r1, #1
 8002060:	480e      	ldr	r0, [pc, #56]	; (800209c <SPI_WIFI_ResetModule+0xd8>)
 8002062:	f008 ff33 	bl	800aecc <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8002066:	783b      	ldrb	r3, [r7, #0]
 8002068:	2b15      	cmp	r3, #21
 800206a:	d10e      	bne.n	800208a <SPI_WIFI_ResetModule+0xc6>
 800206c:	787b      	ldrb	r3, [r7, #1]
 800206e:	2b15      	cmp	r3, #21
 8002070:	d10b      	bne.n	800208a <SPI_WIFI_ResetModule+0xc6>
 8002072:	78bb      	ldrb	r3, [r7, #2]
 8002074:	2b0d      	cmp	r3, #13
 8002076:	d108      	bne.n	800208a <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8002078:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800207a:	2b0a      	cmp	r3, #10
 800207c:	d105      	bne.n	800208a <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800207e:	793b      	ldrb	r3, [r7, #4]
 8002080:	2b3e      	cmp	r3, #62	; 0x3e
 8002082:	d102      	bne.n	800208a <SPI_WIFI_ResetModule+0xc6>
 8002084:	797b      	ldrb	r3, [r7, #5]
 8002086:	2b20      	cmp	r3, #32
 8002088:	d002      	beq.n	8002090 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
 800208e:	e000      	b.n	8002092 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	48001000 	.word	0x48001000
 80020a0:	200037fc 	.word	0x200037fc

080020a4 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <SPI_WIFI_DeInit+0x10>)
 80020aa:	f00b fd24 	bl	800daf6 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	200037fc 	.word	0x200037fc

080020b8 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 80020c0:	f008 f9c2 	bl	800a448 <HAL_GetTick>
 80020c4:	4603      	mov	r3, r0
 80020c6:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 80020c8:	e00a      	b.n	80020e0 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80020ca:	f008 f9bd 	bl	800a448 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1ad2      	subs	r2, r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d902      	bls.n	80020e0 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 80020da:	f04f 33ff 	mov.w	r3, #4294967295
 80020de:	e007      	b.n	80020f0 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 80020e0:	2102      	movs	r1, #2
 80020e2:	4805      	ldr	r0, [pc, #20]	; (80020f8 <wait_cmddata_rdy_high+0x40>)
 80020e4:	f008 feda 	bl	800ae9c <HAL_GPIO_ReadPin>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d1ed      	bne.n	80020ca <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	48001000 	.word	0x48001000

080020fc <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002104:	f008 f9a0 	bl	800a448 <HAL_GetTick>
 8002108:	4603      	mov	r3, r0
 800210a:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 800210c:	e00a      	b.n	8002124 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800210e:	f008 f99b 	bl	800a448 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1ad2      	subs	r2, r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	429a      	cmp	r2, r3
 800211c:	d902      	bls.n	8002124 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800211e:	f04f 33ff 	mov.w	r3, #4294967295
 8002122:	e004      	b.n	800212e <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 8002124:	4b04      	ldr	r3, [pc, #16]	; (8002138 <wait_cmddata_rdy_rising_event+0x3c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d0f0      	beq.n	800210e <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 800212c:	2300      	movs	r3, #0
#endif
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000690 	.word	0x20000690

0800213c <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002144:	f008 f980 	bl	800a448 <HAL_GetTick>
 8002148:	4603      	mov	r3, r0
 800214a:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 800214c:	e00a      	b.n	8002164 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800214e:	f008 f97b 	bl	800a448 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1ad2      	subs	r2, r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	429a      	cmp	r2, r3
 800215c:	d902      	bls.n	8002164 <wait_spi_rx_event+0x28>
    {
      return -1;
 800215e:	f04f 33ff 	mov.w	r3, #4294967295
 8002162:	e004      	b.n	800216e <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 8002164:	4b04      	ldr	r3, [pc, #16]	; (8002178 <wait_spi_rx_event+0x3c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d0f0      	beq.n	800214e <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 800216c:	2300      	movs	r3, #0
#endif
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000688 	.word	0x20000688

0800217c <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002184:	f008 f960 	bl	800a448 <HAL_GetTick>
 8002188:	4603      	mov	r3, r0
 800218a:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 800218c:	e00a      	b.n	80021a4 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800218e:	f008 f95b 	bl	800a448 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1ad2      	subs	r2, r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	429a      	cmp	r2, r3
 800219c:	d902      	bls.n	80021a4 <wait_spi_tx_event+0x28>
    {
      return -1;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295
 80021a2:	e004      	b.n	80021ae <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <wait_spi_tx_event+0x3c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d0f0      	beq.n	800218e <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 80021ac:	2300      	movs	r3, #0
#endif
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	2000068c 	.word	0x2000068c

080021bc <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	460b      	mov	r3, r1
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 80021ce:	2201      	movs	r2, #1
 80021d0:	2101      	movs	r1, #1
 80021d2:	4834      	ldr	r0, [pc, #208]	; (80022a4 <SPI_WIFI_ReceiveData+0xe8>)
 80021d4:	f008 fe7a 	bl	800aecc <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 80021d8:	2003      	movs	r0, #3
 80021da:	f000 f8e3 	bl	80023a4 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff8b 	bl	80020fc <wait_cmddata_rdy_rising_event>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	da02      	bge.n	80021f2 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 80021ec:	f06f 0302 	mvn.w	r3, #2
 80021f0:	e054      	b.n	800229c <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 80021f2:	2200      	movs	r2, #0
 80021f4:	2101      	movs	r1, #1
 80021f6:	482b      	ldr	r0, [pc, #172]	; (80022a4 <SPI_WIFI_ReceiveData+0xe8>)
 80021f8:	f008 fe68 	bl	800aecc <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80021fc:	200f      	movs	r0, #15
 80021fe:	f000 f8d1 	bl	80023a4 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8002202:	e03d      	b.n	8002280 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 8002204:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002208:	897b      	ldrh	r3, [r7, #10]
 800220a:	429a      	cmp	r2, r3
 800220c:	db02      	blt.n	8002214 <SPI_WIFI_ReceiveData+0x58>
 800220e:	897b      	ldrh	r3, [r7, #10]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d13c      	bne.n	800228e <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 8002214:	4b24      	ldr	r3, [pc, #144]	; (80022a8 <SPI_WIFI_ReceiveData+0xec>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800221a:	f107 0314 	add.w	r3, r7, #20
 800221e:	2201      	movs	r2, #1
 8002220:	4619      	mov	r1, r3
 8002222:	4822      	ldr	r0, [pc, #136]	; (80022ac <SPI_WIFI_ReceiveData+0xf0>)
 8002224:	f00c f860 	bl	800e2e8 <HAL_SPI_Receive_IT>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d007      	beq.n	800223e <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800222e:	2201      	movs	r2, #1
 8002230:	2101      	movs	r1, #1
 8002232:	481c      	ldr	r0, [pc, #112]	; (80022a4 <SPI_WIFI_ReceiveData+0xe8>)
 8002234:	f008 fe4a 	bl	800aecc <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8002238:	f04f 33ff 	mov.w	r3, #4294967295
 800223c:	e02e      	b.n	800229c <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ff7b 	bl	800213c <wait_spi_rx_event>

      pData[0] = tmp[0];
 8002246:	7d3a      	ldrb	r2, [r7, #20]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	3301      	adds	r3, #1
 8002250:	7d7a      	ldrb	r2, [r7, #21]
 8002252:	701a      	strb	r2, [r3, #0]
      length += 2;
 8002254:	8afb      	ldrh	r3, [r7, #22]
 8002256:	3302      	adds	r3, #2
 8002258:	b29b      	uxth	r3, r3
 800225a:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	3302      	adds	r3, #2
 8002260:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 8002262:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002266:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800226a:	db09      	blt.n	8002280 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 800226c:	2201      	movs	r2, #1
 800226e:	2101      	movs	r1, #1
 8002270:	480c      	ldr	r0, [pc, #48]	; (80022a4 <SPI_WIFI_ReceiveData+0xe8>)
 8002272:	f008 fe2b 	bl	800aecc <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 8002276:	f7ff fea5 	bl	8001fc4 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800227a:	f06f 0303 	mvn.w	r3, #3
 800227e:	e00d      	b.n	800229c <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 8002280:	2102      	movs	r1, #2
 8002282:	4808      	ldr	r0, [pc, #32]	; (80022a4 <SPI_WIFI_ReceiveData+0xe8>)
 8002284:	f008 fe0a 	bl	800ae9c <HAL_GPIO_ReadPin>
 8002288:	4603      	mov	r3, r0
 800228a:	2b01      	cmp	r3, #1
 800228c:	d0ba      	beq.n	8002204 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 800228e:	2201      	movs	r2, #1
 8002290:	2101      	movs	r1, #1
 8002292:	4804      	ldr	r0, [pc, #16]	; (80022a4 <SPI_WIFI_ReceiveData+0xe8>)
 8002294:	f008 fe1a 	bl	800aecc <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 8002298:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	48001000 	.word	0x48001000
 80022a8:	20000688 	.word	0x20000688
 80022ac:	200037fc 	.word	0x200037fc

080022b0 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	460b      	mov	r3, r1
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff fef9 	bl	80020b8 <wait_cmddata_rdy_high>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	da02      	bge.n	80022d2 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 80022cc:	f04f 33ff 	mov.w	r3, #4294967295
 80022d0:	e04f      	b.n	8002372 <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 80022d2:	4b2a      	ldr	r3, [pc, #168]	; (800237c <SPI_WIFI_SendData+0xcc>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 80022d8:	2200      	movs	r2, #0
 80022da:	2101      	movs	r1, #1
 80022dc:	4828      	ldr	r0, [pc, #160]	; (8002380 <SPI_WIFI_SendData+0xd0>)
 80022de:	f008 fdf5 	bl	800aecc <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80022e2:	200f      	movs	r0, #15
 80022e4:	f000 f85e 	bl	80023a4 <SPI_WIFI_DelayUs>
  if (len > 1)
 80022e8:	897b      	ldrh	r3, [r7, #10]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d919      	bls.n	8002322 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 80022ee:	4b25      	ldr	r3, [pc, #148]	; (8002384 <SPI_WIFI_SendData+0xd4>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 80022f4:	897b      	ldrh	r3, [r7, #10]
 80022f6:	085b      	lsrs	r3, r3, #1
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	461a      	mov	r2, r3
 80022fc:	68f9      	ldr	r1, [r7, #12]
 80022fe:	4822      	ldr	r0, [pc, #136]	; (8002388 <SPI_WIFI_SendData+0xd8>)
 8002300:	f00b ff64 	bl	800e1cc <HAL_SPI_Transmit_IT>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d007      	beq.n	800231a <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800230a:	2201      	movs	r2, #1
 800230c:	2101      	movs	r1, #1
 800230e:	481c      	ldr	r0, [pc, #112]	; (8002380 <SPI_WIFI_SendData+0xd0>)
 8002310:	f008 fddc 	bl	800aecc <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002314:	f04f 33ff 	mov.w	r3, #4294967295
 8002318:	e02b      	b.n	8002372 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff ff2d 	bl	800217c <wait_spi_tx_event>
  }
  
  if ( len & 1)
 8002322:	897b      	ldrh	r3, [r7, #10]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b00      	cmp	r3, #0
 800232a:	d020      	beq.n	800236e <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 800232c:	897b      	ldrh	r3, [r7, #10]
 800232e:	3b01      	subs	r3, #1
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	4413      	add	r3, r2
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8002338:	230a      	movs	r3, #10
 800233a:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <SPI_WIFI_SendData+0xd4>)
 800233e:	2201      	movs	r2, #1
 8002340:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8002342:	f107 0314 	add.w	r3, r7, #20
 8002346:	2201      	movs	r2, #1
 8002348:	4619      	mov	r1, r3
 800234a:	480f      	ldr	r0, [pc, #60]	; (8002388 <SPI_WIFI_SendData+0xd8>)
 800234c:	f00b ff3e 	bl	800e1cc <HAL_SPI_Transmit_IT>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d007      	beq.n	8002366 <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 8002356:	2201      	movs	r2, #1
 8002358:	2101      	movs	r1, #1
 800235a:	4809      	ldr	r0, [pc, #36]	; (8002380 <SPI_WIFI_SendData+0xd0>)
 800235c:	f008 fdb6 	bl	800aecc <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002360:	f04f 33ff 	mov.w	r3, #4294967295
 8002364:	e005      	b.n	8002372 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff07 	bl	800217c <wait_spi_tx_event>
    
  }
  return len;
 800236e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000690 	.word	0x20000690
 8002380:	48001000 	.word	0x48001000
 8002384:	2000068c 	.word	0x2000068c
 8002388:	200037fc 	.word	0x200037fc

0800238c <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f008 f863 	bl	800a460 <HAL_Delay>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 80023b4:	4b20      	ldr	r3, [pc, #128]	; (8002438 <SPI_WIFI_DelayUs+0x94>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d122      	bne.n	8002402 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 80023bc:	4b1f      	ldr	r3, [pc, #124]	; (800243c <SPI_WIFI_DelayUs+0x98>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a1f      	ldr	r2, [pc, #124]	; (8002440 <SPI_WIFI_DelayUs+0x9c>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	099b      	lsrs	r3, r3, #6
 80023c8:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 80023d2:	f008 f839 	bl	800a448 <HAL_GetTick>
 80023d6:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 80023d8:	e002      	b.n	80023e0 <SPI_WIFI_DelayUs+0x3c>
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	3b01      	subs	r3, #1
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f9      	bne.n	80023da <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 80023e6:	f008 f82f 	bl	800a448 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	4a11      	ldr	r2, [pc, #68]	; (8002438 <SPI_WIFI_DelayUs+0x94>)
 80023f2:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 80023f4:	4b10      	ldr	r3, [pc, #64]	; (8002438 <SPI_WIFI_DelayUs+0x94>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d102      	bne.n	8002402 <SPI_WIFI_DelayUs+0x5e>
 80023fc:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <SPI_WIFI_DelayUs+0x94>)
 80023fe:	2201      	movs	r2, #1
 8002400:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <SPI_WIFI_DelayUs+0x98>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a0f      	ldr	r2, [pc, #60]	; (8002444 <SPI_WIFI_DelayUs+0xa0>)
 8002408:	fba2 2303 	umull	r2, r3, r2, r3
 800240c:	0c9a      	lsrs	r2, r3, #18
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <SPI_WIFI_DelayUs+0x94>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	fbb2 f3f3 	udiv	r3, r2, r3
 8002416:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	fb02 f303 	mul.w	r3, r2, r3
 8002420:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8002422:	e002      	b.n	800242a <SPI_WIFI_DelayUs+0x86>
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	3b01      	subs	r3, #1
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f9      	bne.n	8002424 <SPI_WIFI_DelayUs+0x80>
  return;
 8002430:	bf00      	nop
}
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000694 	.word	0x20000694
 800243c:	2000018c 	.word	0x2000018c
 8002440:	10624dd3 	.word	0x10624dd3
 8002444:	431bde83 	.word	0x431bde83

08002448 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_SPI_RxCpltCallback+0x24>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8002458:	4b04      	ldr	r3, [pc, #16]	; (800246c <HAL_SPI_RxCpltCallback+0x24>)
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
  }
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	20000688 	.word	0x20000688

08002470 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_SPI_TxCpltCallback+0x24>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d002      	beq.n	8002486 <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <HAL_SPI_TxCpltCallback+0x24>)
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
  }
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	2000068c 	.word	0x2000068c

08002498 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <SPI_WIFI_ISR+0x1c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d102      	bne.n	80024aa <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 80024a4:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <SPI_WIFI_ISR+0x1c>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
   }
}
 80024aa:	bf00      	nop
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	20000690 	.word	0x20000690

080024b8 <inizialize>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void inizialize(struct sharedValues_t *sv){
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
	int i;
	sv->temperature_val1=0;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
	sv->temperature_val2=0;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	605a      	str	r2, [r3, #4]
	sv->average_temerature=0;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	61da      	str	r2, [r3, #28]
	sv->n_elements_temp=0;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	621a      	str	r2, [r3, #32]


	sv->humidity_val1=0;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	629a      	str	r2, [r3, #40]	; 0x28
	sv->humidity_val2=0;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	62da      	str	r2, [r3, #44]	; 0x2c
	sv->average_humidity=0;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	645a      	str	r2, [r3, #68]	; 0x44
	sv->n_elements_humidity=0;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	649a      	str	r2, [r3, #72]	; 0x48

	sv->pressure_val1=0;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	651a      	str	r2, [r3, #80]	; 0x50
	sv->pressure_val2=0;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	655a      	str	r2, [r3, #84]	; 0x54
	sv->average_pressure=0;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	66da      	str	r2, [r3, #108]	; 0x6c
	sv->n_elements_pressure=0;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	671a      	str	r2, [r3, #112]	; 0x70

	sv->proximity=0;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	679a      	str	r2, [r3, #120]	; 0x78
	sv->dewpoint=0;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	67da      	str	r2, [r3, #124]	; 0x7c
	sv->enableDew=0;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	sv->check_mean_temp=0;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	625a      	str	r2, [r3, #36]	; 0x24
	sv->check_mean_humidity=0;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	64da      	str	r2, [r3, #76]	; 0x4c
	sv->check_mean_pressure=0;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	675a      	str	r2, [r3, #116]	; 0x74



	sv->mutex = osSemaphoreNew(1, 1, NULL);
 8002534:	2200      	movs	r2, #0
 8002536:	2101      	movs	r1, #1
 8002538:	2001      	movs	r0, #1
 800253a:	f00d fe05 	bl	8010148 <osSemaphoreNew>
 800253e:	4602      	mov	r2, r0
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	sv->primo = osSemaphoreNew(1, 1, NULL);
 8002546:	2200      	movs	r2, #0
 8002548:	2101      	movs	r1, #1
 800254a:	2001      	movs	r0, #1
 800254c:	f00d fdfc 	bl	8010148 <osSemaphoreNew>
 8002550:	4602      	mov	r2, r0
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	sv->secondo = osSemaphoreNew(1, 1, NULL);
 8002558:	2200      	movs	r2, #0
 800255a:	2101      	movs	r1, #1
 800255c:	2001      	movs	r0, #1
 800255e:	f00d fdf3 	bl	8010148 <osSemaphoreNew>
 8002562:	4602      	mov	r2, r0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c


}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <main>:
  * @retval int
  */


int main(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	   HAL_Init();
 8002578:	f007 fefd 	bl	800a376 <HAL_Init>

	   /* Configure the system clock */
	   SystemClock_Config();
 800257c:	f000 f8d8 	bl	8002730 <SystemClock_Config>
	   /* Configure LED2 */
	   BSP_LED_Init(LED2);
 8002580:	2000      	movs	r0, #0
 8002582:	f007 f9c5 	bl	8009910 <BSP_LED_Init>

      /* Configure the User Button in GPIO Mode */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8002586:	2100      	movs	r1, #0
 8002588:	2000      	movs	r0, #0
 800258a:	f007 fa07 	bl	800999c <BSP_PB_Init>

#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 800258e:	4b4b      	ldr	r3, [pc, #300]	; (80026bc <main+0x148>)
 8002590:	4a4b      	ldr	r2, [pc, #300]	; (80026c0 <main+0x14c>)
 8002592:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 8002594:	4b49      	ldr	r3, [pc, #292]	; (80026bc <main+0x148>)
 8002596:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800259a:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 800259c:	4b47      	ldr	r3, [pc, #284]	; (80026bc <main+0x148>)
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 80025a2:	4b46      	ldr	r3, [pc, #280]	; (80026bc <main+0x148>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 80025a8:	4b44      	ldr	r3, [pc, #272]	; (80026bc <main+0x148>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 80025ae:	4b43      	ldr	r3, [pc, #268]	; (80026bc <main+0x148>)
 80025b0:	220c      	movs	r2, #12
 80025b2:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025b4:	4b41      	ldr	r3, [pc, #260]	; (80026bc <main+0x148>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 80025ba:	4b40      	ldr	r3, [pc, #256]	; (80026bc <main+0x148>)
 80025bc:	2200      	movs	r2, #0
 80025be:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025c0:	4b3e      	ldr	r3, [pc, #248]	; (80026bc <main+0x148>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025c6:	4b3d      	ldr	r3, [pc, #244]	; (80026bc <main+0x148>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	625a      	str	r2, [r3, #36]	; 0x24

  BSP_COM_Init(COM1, &hDiscoUart);
 80025cc:	493b      	ldr	r1, [pc, #236]	; (80026bc <main+0x148>)
 80025ce:	2000      	movs	r0, #0
 80025d0:	f007 fa3a 	bl	8009a48 <BSP_COM_Init>
#endif /* TERMINAL_USE */

		MX_GPIO_Init();
 80025d4:	f000 facc 	bl	8002b70 <MX_GPIO_Init>
		MX_DFSDM1_Init();
 80025d8:	f000 f960 	bl	800289c <MX_DFSDM1_Init>
		MX_I2C2_Init();
 80025dc:	f000 f996 	bl	800290c <MX_I2C2_Init>
		MX_QUADSPI_Init();
 80025e0:	f000 f9d4 	bl	800298c <MX_QUADSPI_Init>
		MX_SPI3_Init();
 80025e4:	f000 f9f8 	bl	80029d8 <MX_SPI3_Init>
		MX_USART1_UART_Init();
 80025e8:	f000 fa34 	bl	8002a54 <MX_USART1_UART_Init>
		MX_USART3_UART_Init();
 80025ec:	f000 fa62 	bl	8002ab4 <MX_USART3_UART_Init>
		MX_USB_OTG_FS_PCD_Init();
 80025f0:	f000 fa90 	bl	8002b14 <MX_USB_OTG_FS_PCD_Init>
		BSP_TSENSOR_Init();
 80025f4:	f007 fc40 	bl	8009e78 <BSP_TSENSOR_Init>
		BSP_PSENSOR_Init();
 80025f8:	f007 fc10 	bl	8009e1c <BSP_PSENSOR_Init>
		BSP_HSENSOR_Init();
 80025fc:	f007 fbe0 	bl	8009dc0 <BSP_HSENSOR_Init>
		VL53L0X_PROXIMITY_Init();
 8002600:	f000 fc66 	bl	8002ed0 <VL53L0X_PROXIMITY_Init>


	  TERMOUT("****** WIFI Module in TCP Client mode demonstration ****** \n\n");
 8002604:	482f      	ldr	r0, [pc, #188]	; (80026c4 <main+0x150>)
 8002606:	f010 ffd5 	bl	80135b4 <puts>
	  TERMOUT("TCP Client Instructions :\n");
 800260a:	482f      	ldr	r0, [pc, #188]	; (80026c8 <main+0x154>)
 800260c:	f010 ffd2 	bl	80135b4 <puts>
	  TERMOUT("1- Make sure your Phone is connected to the same network that\n");
 8002610:	482e      	ldr	r0, [pc, #184]	; (80026cc <main+0x158>)
 8002612:	f010 ffcf 	bl	80135b4 <puts>
	  TERMOUT("   you configured using the Configuration Access Point.\n");
 8002616:	482e      	ldr	r0, [pc, #184]	; (80026d0 <main+0x15c>)
 8002618:	f010 ffcc 	bl	80135b4 <puts>
	  TERMOUT("2- Create a server by using the android application TCP Server\n");
 800261c:	482d      	ldr	r0, [pc, #180]	; (80026d4 <main+0x160>)
 800261e:	f010 ffc9 	bl	80135b4 <puts>
	  TERMOUT("   with port(8002).\n");
 8002622:	482d      	ldr	r0, [pc, #180]	; (80026d8 <main+0x164>)
 8002624:	f010 ffc6 	bl	80135b4 <puts>
	  TERMOUT("3- Get the Network Name or IP Address of your Android from the step 2.\n\n");
 8002628:	482c      	ldr	r0, [pc, #176]	; (80026dc <main+0x168>)
 800262a:	f010 ffc3 	bl	80135b4 <puts>


		    /* Init scheduler ----------------------------------------------------------------------------*/
	  osKernelInitialize();
 800262e:	f00d fc4d 	bl	800fecc <osKernelInitialize>


	  /* USER CODE BEGIN RTOS_THREADS */
	  //inizialize the structure
	  inizialize(&sharedValues);
 8002632:	482b      	ldr	r0, [pc, #172]	; (80026e0 <main+0x16c>)
 8002634:	f7ff ff40 	bl	80024b8 <inizialize>

	  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002638:	4a2a      	ldr	r2, [pc, #168]	; (80026e4 <main+0x170>)
 800263a:	2100      	movs	r1, #0
 800263c:	482a      	ldr	r0, [pc, #168]	; (80026e8 <main+0x174>)
 800263e:	f00d fcaf 	bl	800ffa0 <osThreadNew>
 8002642:	4602      	mov	r2, r0
 8002644:	4b29      	ldr	r3, [pc, #164]	; (80026ec <main+0x178>)
 8002646:	601a      	str	r2, [r3, #0]
	  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8002648:	4a29      	ldr	r2, [pc, #164]	; (80026f0 <main+0x17c>)
 800264a:	2100      	movs	r1, #0
 800264c:	4829      	ldr	r0, [pc, #164]	; (80026f4 <main+0x180>)
 800264e:	f00d fca7 	bl	800ffa0 <osThreadNew>
 8002652:	4602      	mov	r2, r0
 8002654:	4b28      	ldr	r3, [pc, #160]	; (80026f8 <main+0x184>)
 8002656:	601a      	str	r2, [r3, #0]
	  proximityThreadHandle = osThreadNew(Proximity_Test, NULL, &proximityThread_attributes);
 8002658:	4a28      	ldr	r2, [pc, #160]	; (80026fc <main+0x188>)
 800265a:	2100      	movs	r1, #0
 800265c:	4828      	ldr	r0, [pc, #160]	; (8002700 <main+0x18c>)
 800265e:	f00d fc9f 	bl	800ffa0 <osThreadNew>
 8002662:	4602      	mov	r2, r0
 8002664:	4b27      	ldr	r3, [pc, #156]	; (8002704 <main+0x190>)
 8002666:	601a      	str	r2, [r3, #0]
	  dewpointTaskHandle = osThreadNew(StartDewpointTask, NULL, &dewpointTask_attributes);
 8002668:	4a27      	ldr	r2, [pc, #156]	; (8002708 <main+0x194>)
 800266a:	2100      	movs	r1, #0
 800266c:	4827      	ldr	r0, [pc, #156]	; (800270c <main+0x198>)
 800266e:	f00d fc97 	bl	800ffa0 <osThreadNew>
 8002672:	4602      	mov	r2, r0
 8002674:	4b26      	ldr	r3, [pc, #152]	; (8002710 <main+0x19c>)
 8002676:	601a      	str	r2, [r3, #0]
	  statisticsTaskHandle = osThreadNew(ComputeStatistics, NULL, &statisticsTask_attributes);
 8002678:	4a26      	ldr	r2, [pc, #152]	; (8002714 <main+0x1a0>)
 800267a:	2100      	movs	r1, #0
 800267c:	4826      	ldr	r0, [pc, #152]	; (8002718 <main+0x1a4>)
 800267e:	f00d fc8f 	bl	800ffa0 <osThreadNew>
 8002682:	4602      	mov	r2, r0
 8002684:	4b25      	ldr	r3, [pc, #148]	; (800271c <main+0x1a8>)
 8002686:	601a      	str	r2, [r3, #0]
	  serialTaskHandle = osThreadNew(SerialPrint, NULL, &serialTask_attributes);
 8002688:	4a25      	ldr	r2, [pc, #148]	; (8002720 <main+0x1ac>)
 800268a:	2100      	movs	r1, #0
 800268c:	4825      	ldr	r0, [pc, #148]	; (8002724 <main+0x1b0>)
 800268e:	f00d fc87 	bl	800ffa0 <osThreadNew>
 8002692:	4602      	mov	r2, r0
 8002694:	4b24      	ldr	r3, [pc, #144]	; (8002728 <main+0x1b4>)
 8002696:	601a      	str	r2, [r3, #0]

	  /* USER CODE END RTOS_THREADS */

	  /* Start scheduler */
	HAL_GPIO_WritePin(ARD_D8_GPIO_Port, ARD_D8_Pin, GPIO_PIN_SET);
 8002698:	2201      	movs	r2, #1
 800269a:	2104      	movs	r1, #4
 800269c:	4823      	ldr	r0, [pc, #140]	; (800272c <main+0x1b8>)
 800269e:	f008 fc15 	bl	800aecc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D9_Pin, GPIO_PIN_SET);//0
 80026a2:	2201      	movs	r2, #1
 80026a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ac:	f008 fc0e 	bl	800aecc <HAL_GPIO_WritePin>
	  osKernelStart();
 80026b0:	f00d fc40 	bl	800ff34 <osKernelStart>
 80026b4:	2300      	movs	r3, #0

}
 80026b6:	4618      	mov	r0, r3
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	2000487c 	.word	0x2000487c
 80026c0:	40013800 	.word	0x40013800
 80026c4:	0801601c 	.word	0x0801601c
 80026c8:	0801605c 	.word	0x0801605c
 80026cc:	08016078 	.word	0x08016078
 80026d0:	080160b8 	.word	0x080160b8
 80026d4:	080160f0 	.word	0x080160f0
 80026d8:	08016130 	.word	0x08016130
 80026dc:	08016144 	.word	0x08016144
 80026e0:	20003d74 	.word	0x20003d74
 80026e4:	08016d00 	.word	0x08016d00
 80026e8:	08003431 	.word	0x08003431
 80026ec:	2000389c 	.word	0x2000389c
 80026f0:	08016d24 	.word	0x08016d24
 80026f4:	080036ad 	.word	0x080036ad
 80026f8:	20003ef0 	.word	0x20003ef0
 80026fc:	08016d48 	.word	0x08016d48
 8002700:	0800372d 	.word	0x0800372d
 8002704:	20003eec 	.word	0x20003eec
 8002708:	08016cdc 	.word	0x08016cdc
 800270c:	080038b1 	.word	0x080038b1
 8002710:	20003ef4 	.word	0x20003ef4
 8002714:	08016cb8 	.word	0x08016cb8
 8002718:	08003a09 	.word	0x08003a09
 800271c:	20003898 	.word	0x20003898
 8002720:	08016c94 	.word	0x08016c94
 8002724:	08003cbd 	.word	0x08003cbd
 8002728:	20003e04 	.word	0x20003e04
 800272c:	48000400 	.word	0x48000400

08002730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b0b8      	sub	sp, #224	; 0xe0
 8002734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002736:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800273a:	2244      	movs	r2, #68	; 0x44
 800273c:	2100      	movs	r1, #0
 800273e:	4618      	mov	r0, r3
 8002740:	f010 febc 	bl	80134bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002744:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002754:	463b      	mov	r3, r7
 8002756:	2288      	movs	r2, #136	; 0x88
 8002758:	2100      	movs	r1, #0
 800275a:	4618      	mov	r0, r3
 800275c:	f010 feae 	bl	80134bc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002760:	f009 fd3c 	bl	800c1dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002764:	4b42      	ldr	r3, [pc, #264]	; (8002870 <SystemClock_Config+0x140>)
 8002766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276a:	4a41      	ldr	r2, [pc, #260]	; (8002870 <SystemClock_Config+0x140>)
 800276c:	f023 0318 	bic.w	r3, r3, #24
 8002770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002774:	2314      	movs	r3, #20
 8002776:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800277a:	2301      	movs	r3, #1
 800277c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002780:	2301      	movs	r3, #1
 8002782:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800278c:	2360      	movs	r3, #96	; 0x60
 800278e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002792:	2302      	movs	r3, #2
 8002794:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002798:	2301      	movs	r3, #1
 800279a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800279e:	2301      	movs	r3, #1
 80027a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80027a4:	2328      	movs	r3, #40	; 0x28
 80027a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80027aa:	2307      	movs	r3, #7
 80027ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80027b0:	2302      	movs	r3, #2
 80027b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80027b6:	2302      	movs	r3, #2
 80027b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027c0:	4618      	mov	r0, r3
 80027c2:	f009 fe4b 	bl	800c45c <HAL_RCC_OscConfig>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80027cc:	f001 fa84 	bl	8003cd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027d0:	230f      	movs	r3, #15
 80027d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027d6:	2303      	movs	r3, #3
 80027d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027dc:	2300      	movs	r3, #0
 80027de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027e2:	2300      	movs	r3, #0
 80027e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027e8:	2300      	movs	r3, #0
 80027ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80027ee:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80027f2:	2104      	movs	r1, #4
 80027f4:	4618      	mov	r0, r3
 80027f6:	f00a fa17 	bl	800cc28 <HAL_RCC_ClockConfig>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002800:	f001 fa6a 	bl	8003cd8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8002804:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <SystemClock_Config+0x144>)
 8002806:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002808:	2300      	movs	r3, #0
 800280a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800280c:	2300      	movs	r3, #0
 800280e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002810:	2300      	movs	r3, #0
 8002812:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002814:	2300      	movs	r3, #0
 8002816:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800281a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800281e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002820:	2301      	movs	r3, #1
 8002822:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002824:	2301      	movs	r3, #1
 8002826:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002828:	2318      	movs	r3, #24
 800282a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800282c:	2307      	movs	r3, #7
 800282e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002830:	2302      	movs	r3, #2
 8002832:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002834:	2302      	movs	r3, #2
 8002836:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002838:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800283c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800283e:	463b      	mov	r3, r7
 8002840:	4618      	mov	r0, r3
 8002842:	f00a fbf5 	bl	800d030 <HAL_RCCEx_PeriphCLKConfig>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <SystemClock_Config+0x120>
  {
    Error_Handler();
 800284c:	f001 fa44 	bl	8003cd8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002850:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002854:	f009 fce0 	bl	800c218 <HAL_PWREx_ControlVoltageScaling>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <SystemClock_Config+0x132>
  {
    Error_Handler();
 800285e:	f001 fa3b 	bl	8003cd8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002862:	f00a fecb 	bl	800d5fc <HAL_RCCEx_EnableMSIPLLMode>
}
 8002866:	bf00      	nop
 8002868:	37e0      	adds	r7, #224	; 0xe0
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40021000 	.word	0x40021000
 8002874:	00012085 	.word	0x00012085

08002878 <__io_putchar>:
  * @brief  Retargets the C library TERMOUT function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8002880:	1d39      	adds	r1, r7, #4
 8002882:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002886:	2201      	movs	r2, #1
 8002888:	4803      	ldr	r0, [pc, #12]	; (8002898 <__io_putchar+0x20>)
 800288a:	f00c fc08 	bl	800f09e <HAL_UART_Transmit>

  return ch;
 800288e:	687b      	ldr	r3, [r7, #4]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	2000487c 	.word	0x2000487c

0800289c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80028a0:	4b18      	ldr	r3, [pc, #96]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028a2:	4a19      	ldr	r2, [pc, #100]	; (8002908 <MX_DFSDM1_Init+0x6c>)
 80028a4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80028a6:	4b17      	ldr	r3, [pc, #92]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80028ac:	4b15      	ldr	r3, [pc, #84]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80028b2:	4b14      	ldr	r3, [pc, #80]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028b4:	2202      	movs	r2, #2
 80028b6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80028b8:	4b12      	ldr	r3, [pc, #72]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80028be:	4b11      	ldr	r3, [pc, #68]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80028c4:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028ca:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80028cc:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80028d2:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028d4:	2204      	movs	r2, #4
 80028d6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80028d8:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028da:	2200      	movs	r2, #0
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80028de:	4b09      	ldr	r3, [pc, #36]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80028e4:	4b07      	ldr	r3, [pc, #28]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80028ea:	4b06      	ldr	r3, [pc, #24]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80028f0:	4804      	ldr	r0, [pc, #16]	; (8002904 <MX_DFSDM1_Init+0x68>)
 80028f2:	f007 fee9 	bl	800a6c8 <HAL_DFSDM_ChannelInit>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80028fc:	f001 f9ec 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}
 8002904:	20003860 	.word	0x20003860
 8002908:	40016020 	.word	0x40016020

0800290c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002910:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <MX_I2C2_Init+0x74>)
 8002912:	4a1c      	ldr	r2, [pc, #112]	; (8002984 <MX_I2C2_Init+0x78>)
 8002914:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8002916:	4b1a      	ldr	r3, [pc, #104]	; (8002980 <MX_I2C2_Init+0x74>)
 8002918:	4a1b      	ldr	r2, [pc, #108]	; (8002988 <MX_I2C2_Init+0x7c>)
 800291a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800291c:	4b18      	ldr	r3, [pc, #96]	; (8002980 <MX_I2C2_Init+0x74>)
 800291e:	2200      	movs	r2, #0
 8002920:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002922:	4b17      	ldr	r3, [pc, #92]	; (8002980 <MX_I2C2_Init+0x74>)
 8002924:	2201      	movs	r2, #1
 8002926:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002928:	4b15      	ldr	r3, [pc, #84]	; (8002980 <MX_I2C2_Init+0x74>)
 800292a:	2200      	movs	r2, #0
 800292c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800292e:	4b14      	ldr	r3, [pc, #80]	; (8002980 <MX_I2C2_Init+0x74>)
 8002930:	2200      	movs	r2, #0
 8002932:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002934:	4b12      	ldr	r3, [pc, #72]	; (8002980 <MX_I2C2_Init+0x74>)
 8002936:	2200      	movs	r2, #0
 8002938:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800293a:	4b11      	ldr	r3, [pc, #68]	; (8002980 <MX_I2C2_Init+0x74>)
 800293c:	2200      	movs	r2, #0
 800293e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002940:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <MX_I2C2_Init+0x74>)
 8002942:	2200      	movs	r2, #0
 8002944:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002946:	480e      	ldr	r0, [pc, #56]	; (8002980 <MX_I2C2_Init+0x74>)
 8002948:	f008 fb0a 	bl	800af60 <HAL_I2C_Init>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002952:	f001 f9c1 	bl	8003cd8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002956:	2100      	movs	r1, #0
 8002958:	4809      	ldr	r0, [pc, #36]	; (8002980 <MX_I2C2_Init+0x74>)
 800295a:	f009 fa5f 	bl	800be1c <HAL_I2CEx_ConfigAnalogFilter>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002964:	f001 f9b8 	bl	8003cd8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002968:	2100      	movs	r1, #0
 800296a:	4805      	ldr	r0, [pc, #20]	; (8002980 <MX_I2C2_Init+0x74>)
 800296c:	f009 faa1 	bl	800beb2 <HAL_I2CEx_ConfigDigitalFilter>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002976:	f001 f9af 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20003d28 	.word	0x20003d28
 8002984:	40005800 	.word	0x40005800
 8002988:	10909cec 	.word	0x10909cec

0800298c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <MX_QUADSPI_Init+0x44>)
 8002992:	4a10      	ldr	r2, [pc, #64]	; (80029d4 <MX_QUADSPI_Init+0x48>)
 8002994:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8002996:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <MX_QUADSPI_Init+0x44>)
 8002998:	22ff      	movs	r2, #255	; 0xff
 800299a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800299c:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <MX_QUADSPI_Init+0x44>)
 800299e:	2201      	movs	r2, #1
 80029a0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80029a2:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <MX_QUADSPI_Init+0x44>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80029a8:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <MX_QUADSPI_Init+0x44>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80029ae:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <MX_QUADSPI_Init+0x44>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80029b4:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <MX_QUADSPI_Init+0x44>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80029ba:	4805      	ldr	r0, [pc, #20]	; (80029d0 <MX_QUADSPI_Init+0x44>)
 80029bc:	f009 fc92 	bl	800c2e4 <HAL_QSPI_Init>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80029c6:	f001 f987 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20003ef8 	.word	0x20003ef8
 80029d4:	a0001000 	.word	0xa0001000

080029d8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80029dc:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <MX_SPI3_Init+0x74>)
 80029de:	4a1c      	ldr	r2, [pc, #112]	; (8002a50 <MX_SPI3_Init+0x78>)
 80029e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80029e2:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <MX_SPI3_Init+0x74>)
 80029e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80029ea:	4b18      	ldr	r3, [pc, #96]	; (8002a4c <MX_SPI3_Init+0x74>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80029f0:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <MX_SPI3_Init+0x74>)
 80029f2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80029f6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029f8:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <MX_SPI3_Init+0x74>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029fe:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <MX_SPI3_Init+0x74>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002a04:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <MX_SPI3_Init+0x74>)
 8002a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a0a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <MX_SPI3_Init+0x74>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a12:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <MX_SPI3_Init+0x74>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a18:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <MX_SPI3_Init+0x74>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <MX_SPI3_Init+0x74>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002a24:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <MX_SPI3_Init+0x74>)
 8002a26:	2207      	movs	r2, #7
 8002a28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a2a:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <MX_SPI3_Init+0x74>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a30:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <MX_SPI3_Init+0x74>)
 8002a32:	2208      	movs	r2, #8
 8002a34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002a36:	4805      	ldr	r0, [pc, #20]	; (8002a4c <MX_SPI3_Init+0x74>)
 8002a38:	f00a ffba 	bl	800d9b0 <HAL_SPI_Init>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002a42:	f001 f949 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20003e08 	.word	0x20003e08
 8002a50:	40003c00 	.word	0x40003c00

08002a54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a58:	4b14      	ldr	r3, [pc, #80]	; (8002aac <MX_USART1_UART_Init+0x58>)
 8002a5a:	4a15      	ldr	r2, [pc, #84]	; (8002ab0 <MX_USART1_UART_Init+0x5c>)
 8002a5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a5e:	4b13      	ldr	r3, [pc, #76]	; (8002aac <MX_USART1_UART_Init+0x58>)
 8002a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a66:	4b11      	ldr	r3, [pc, #68]	; (8002aac <MX_USART1_UART_Init+0x58>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <MX_USART1_UART_Init+0x58>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <MX_USART1_UART_Init+0x58>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <MX_USART1_UART_Init+0x58>)
 8002a7a:	220c      	movs	r2, #12
 8002a7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a7e:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <MX_USART1_UART_Init+0x58>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a84:	4b09      	ldr	r3, [pc, #36]	; (8002aac <MX_USART1_UART_Init+0x58>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a8a:	4b08      	ldr	r3, [pc, #32]	; (8002aac <MX_USART1_UART_Init+0x58>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <MX_USART1_UART_Init+0x58>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a96:	4805      	ldr	r0, [pc, #20]	; (8002aac <MX_USART1_UART_Init+0x58>)
 8002a98:	f00c fab3 	bl	800f002 <HAL_UART_Init>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002aa2:	f001 f919 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20003e6c 	.word	0x20003e6c
 8002ab0:	40013800 	.word	0x40013800

08002ab4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ab8:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <MX_USART3_UART_Init+0x58>)
 8002aba:	4a15      	ldr	r2, [pc, #84]	; (8002b10 <MX_USART3_UART_Init+0x5c>)
 8002abc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002abe:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <MX_USART3_UART_Init+0x58>)
 8002ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ac4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ac6:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <MX_USART3_UART_Init+0x58>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002acc:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <MX_USART3_UART_Init+0x58>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ad2:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <MX_USART3_UART_Init+0x58>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <MX_USART3_UART_Init+0x58>)
 8002ada:	220c      	movs	r2, #12
 8002adc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ade:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <MX_USART3_UART_Init+0x58>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ae4:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <MX_USART3_UART_Init+0x58>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <MX_USART3_UART_Init+0x58>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <MX_USART3_UART_Init+0x58>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002af6:	4805      	ldr	r0, [pc, #20]	; (8002b0c <MX_USART3_UART_Init+0x58>)
 8002af8:	f00c fa83 	bl	800f002 <HAL_UART_Init>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002b02:	f001 f8e9 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	200038a0 	.word	0x200038a0
 8002b10:	40004800 	.word	0x40004800

08002b14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002b18:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002b1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002b20:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b22:	2206      	movs	r2, #6
 8002b24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002b26:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b28:	2202      	movs	r2, #2
 8002b2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002b2c:	4b0f      	ldr	r3, [pc, #60]	; (8002b6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b2e:	2202      	movs	r2, #2
 8002b30:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002b32:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002b3e:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8002b44:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002b4a:	4b08      	ldr	r3, [pc, #32]	; (8002b6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002b56:	4805      	ldr	r0, [pc, #20]	; (8002b6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b58:	f009 f9f7 	bl	800bf4a <HAL_PCD_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002b62:	f001 f8b9 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20003920 	.word	0x20003920

08002b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08a      	sub	sp, #40	; 0x28
 8002b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b76:	f107 0314 	add.w	r3, r7, #20
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	605a      	str	r2, [r3, #4]
 8002b80:	609a      	str	r2, [r3, #8]
 8002b82:	60da      	str	r2, [r3, #12]
 8002b84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b86:	4bba      	ldr	r3, [pc, #744]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8a:	4ab9      	ldr	r2, [pc, #740]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002b8c:	f043 0310 	orr.w	r3, r3, #16
 8002b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b92:	4bb7      	ldr	r3, [pc, #732]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	613b      	str	r3, [r7, #16]
 8002b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b9e:	4bb4      	ldr	r3, [pc, #720]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba2:	4ab3      	ldr	r2, [pc, #716]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002ba4:	f043 0304 	orr.w	r3, r3, #4
 8002ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002baa:	4bb1      	ldr	r3, [pc, #708]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb6:	4bae      	ldr	r3, [pc, #696]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bba:	4aad      	ldr	r2, [pc, #692]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bc2:	4bab      	ldr	r3, [pc, #684]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	60bb      	str	r3, [r7, #8]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bce:	4ba8      	ldr	r3, [pc, #672]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd2:	4aa7      	ldr	r2, [pc, #668]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002bd4:	f043 0302 	orr.w	r3, r3, #2
 8002bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bda:	4ba5      	ldr	r3, [pc, #660]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	607b      	str	r3, [r7, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002be6:	4ba2      	ldr	r3, [pc, #648]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bea:	4aa1      	ldr	r2, [pc, #644]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002bec:	f043 0308 	orr.w	r3, r3, #8
 8002bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bf2:	4b9f      	ldr	r3, [pc, #636]	; (8002e70 <MX_GPIO_Init+0x300>)
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f44f 718a 	mov.w	r1, #276	; 0x114
 8002c04:	489b      	ldr	r0, [pc, #620]	; (8002e74 <MX_GPIO_Init+0x304>)
 8002c06:	f008 f961 	bl	800aecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f248 1104 	movw	r1, #33028	; 0x8104
 8002c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c14:	f008 f95a 	bl	800aecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f24f 0114 	movw	r1, #61460	; 0xf014
 8002c1e:	4896      	ldr	r0, [pc, #600]	; (8002e78 <MX_GPIO_Init+0x308>)
 8002c20:	f008 f954 	bl	800aecc <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8002c24:	2200      	movs	r2, #0
 8002c26:	f241 0181 	movw	r1, #4225	; 0x1081
 8002c2a:	4894      	ldr	r0, [pc, #592]	; (8002e7c <MX_GPIO_Init+0x30c>)
 8002c2c:	f008 f94e 	bl	800aecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002c30:	2201      	movs	r2, #1
 8002c32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c36:	4891      	ldr	r0, [pc, #580]	; (8002e7c <MX_GPIO_Init+0x30c>)
 8002c38:	f008 f948 	bl	800aecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002c42:	488f      	ldr	r0, [pc, #572]	; (8002e80 <MX_GPIO_Init+0x310>)
 8002c44:	f008 f942 	bl	800aecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002c48:	2201      	movs	r2, #1
 8002c4a:	2120      	movs	r1, #32
 8002c4c:	488a      	ldr	r0, [pc, #552]	; (8002e78 <MX_GPIO_Init+0x308>)
 8002c4e:	f008 f93d 	bl	800aecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8002c52:	2201      	movs	r2, #1
 8002c54:	2101      	movs	r1, #1
 8002c56:	4887      	ldr	r0, [pc, #540]	; (8002e74 <MX_GPIO_Init+0x304>)
 8002c58:	f008 f938 	bl	800aecc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8002c5c:	f240 1315 	movw	r3, #277	; 0x115
 8002c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c62:	2301      	movs	r3, #1
 8002c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c6e:	f107 0314 	add.w	r3, r7, #20
 8002c72:	4619      	mov	r1, r3
 8002c74:	487f      	ldr	r0, [pc, #508]	; (8002e74 <MX_GPIO_Init+0x304>)
 8002c76:	f007 fe75 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8002c7a:	236a      	movs	r3, #106	; 0x6a
 8002c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c7e:	4b81      	ldr	r3, [pc, #516]	; (8002e84 <MX_GPIO_Init+0x314>)
 8002c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c86:	f107 0314 	add.w	r3, r7, #20
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4879      	ldr	r0, [pc, #484]	; (8002e74 <MX_GPIO_Init+0x304>)
 8002c8e:	f007 fe69 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8002c92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c98:	4b7b      	ldr	r3, [pc, #492]	; (8002e88 <MX_GPIO_Init+0x318>)
 8002c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8002ca0:	f107 0314 	add.w	r3, r7, #20
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4876      	ldr	r0, [pc, #472]	; (8002e80 <MX_GPIO_Init+0x310>)
 8002ca8:	f007 fe5c 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8002cac:	233f      	movs	r3, #63	; 0x3f
 8002cae:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002cb0:	230b      	movs	r3, #11
 8002cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb8:	f107 0314 	add.w	r3, r7, #20
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4870      	ldr	r0, [pc, #448]	; (8002e80 <MX_GPIO_Init+0x310>)
 8002cc0:	f007 fe50 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002cd4:	2308      	movs	r3, #8
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd8:	f107 0314 	add.w	r3, r7, #20
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ce2:	f007 fe3f 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8002ce6:	f248 1304 	movw	r3, #33028	; 0x8104
 8002cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cec:	2301      	movs	r3, #1
 8002cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf8:	f107 0314 	add.w	r3, r7, #20
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d02:	f007 fe2f 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8002d06:	2308      	movs	r3, #8
 8002d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d12:	2300      	movs	r3, #0
 8002d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d16:	2301      	movs	r3, #1
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8002d1a:	f107 0314 	add.w	r3, r7, #20
 8002d1e:	4619      	mov	r1, r3
 8002d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d24:	f007 fe1e 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8002d28:	2310      	movs	r3, #16
 8002d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002d2c:	230b      	movs	r3, #11
 8002d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8002d34:	f107 0314 	add.w	r3, r7, #20
 8002d38:	4619      	mov	r1, r3
 8002d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d3e:	f007 fe11 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8002d42:	23e0      	movs	r3, #224	; 0xe0
 8002d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d46:	2302      	movs	r3, #2
 8002d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d52:	2305      	movs	r3, #5
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d56:	f107 0314 	add.w	r3, r7, #20
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d60:	f007 fe00 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002d64:	2301      	movs	r3, #1
 8002d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d68:	4b46      	ldr	r3, [pc, #280]	; (8002e84 <MX_GPIO_Init+0x314>)
 8002d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	4619      	mov	r1, r3
 8002d76:	4840      	ldr	r0, [pc, #256]	; (8002e78 <MX_GPIO_Init+0x308>)
 8002d78:	f007 fdf4 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002d80:	230b      	movs	r3, #11
 8002d82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8002d88:	f107 0314 	add.w	r3, r7, #20
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	483a      	ldr	r0, [pc, #232]	; (8002e78 <MX_GPIO_Init+0x308>)
 8002d90:	f007 fde8 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002d94:	f24f 0334 	movw	r3, #61492	; 0xf034
 8002d98:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da2:	2300      	movs	r3, #0
 8002da4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da6:	f107 0314 	add.w	r3, r7, #20
 8002daa:	4619      	mov	r1, r3
 8002dac:	4832      	ldr	r0, [pc, #200]	; (8002e78 <MX_GPIO_Init+0x308>)
 8002dae:	f007 fdd9 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8002db2:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8002db6:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002db8:	4b32      	ldr	r3, [pc, #200]	; (8002e84 <MX_GPIO_Init+0x314>)
 8002dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dc0:	f107 0314 	add.w	r3, r7, #20
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	482d      	ldr	r0, [pc, #180]	; (8002e7c <MX_GPIO_Init+0x30c>)
 8002dc8:	f007 fdcc 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8002dcc:	f243 0381 	movw	r3, #12417	; 0x3081
 8002dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dde:	f107 0314 	add.w	r3, r7, #20
 8002de2:	4619      	mov	r1, r3
 8002de4:	4825      	ldr	r0, [pc, #148]	; (8002e7c <MX_GPIO_Init+0x30c>)
 8002de6:	f007 fdbd 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002dea:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002df0:	2301      	movs	r3, #1
 8002df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dfc:	f107 0314 	add.w	r3, r7, #20
 8002e00:	4619      	mov	r1, r3
 8002e02:	481f      	ldr	r0, [pc, #124]	; (8002e80 <MX_GPIO_Init+0x310>)
 8002e04:	f007 fdae 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8002e08:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e0e:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <MX_GPIO_Init+0x314>)
 8002e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e16:	f107 0314 	add.w	r3, r7, #20
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4818      	ldr	r0, [pc, #96]	; (8002e80 <MX_GPIO_Init+0x310>)
 8002e1e:	f007 fda1 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8002e22:	2302      	movs	r3, #2
 8002e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e26:	2302      	movs	r3, #2
 8002e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e32:	2305      	movs	r3, #5
 8002e34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8002e36:	f107 0314 	add.w	r3, r7, #20
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	480f      	ldr	r0, [pc, #60]	; (8002e7c <MX_GPIO_Init+0x30c>)
 8002e3e:	f007 fd91 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8002e42:	2378      	movs	r3, #120	; 0x78
 8002e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e46:	2302      	movs	r3, #2
 8002e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e52:	2307      	movs	r3, #7
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e56:	f107 0314 	add.w	r3, r7, #20
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4807      	ldr	r0, [pc, #28]	; (8002e7c <MX_GPIO_Init+0x30c>)
 8002e5e:	f007 fd81 	bl	800a964 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8002e62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e68:	2312      	movs	r3, #18
 8002e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e00d      	b.n	8002e8c <MX_GPIO_Init+0x31c>
 8002e70:	40021000 	.word	0x40021000
 8002e74:	48001000 	.word	0x48001000
 8002e78:	48000400 	.word	0x48000400
 8002e7c:	48000c00 	.word	0x48000c00
 8002e80:	48000800 	.word	0x48000800
 8002e84:	10110000 	.word	0x10110000
 8002e88:	10210000 	.word	0x10210000
 8002e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e92:	2304      	movs	r3, #4
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e96:	f107 0314 	add.w	r3, r7, #20
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	480b      	ldr	r0, [pc, #44]	; (8002ecc <MX_GPIO_Init+0x35c>)
 8002e9e:	f007 fd61 	bl	800a964 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	2017      	movs	r0, #23
 8002ea8:	f007 fbd7 	bl	800a65a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002eac:	2017      	movs	r0, #23
 8002eae:	f007 fbf0 	bl	800a692 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	2028      	movs	r0, #40	; 0x28
 8002eb8:	f007 fbcf 	bl	800a65a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ebc:	2028      	movs	r0, #40	; 0x28
 8002ebe:	f007 fbe8 	bl	800a692 <HAL_NVIC_EnableIRQ>

}
 8002ec2:	bf00      	nop
 8002ec4:	3728      	adds	r7, #40	; 0x28
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	48000400 	.word	0x48000400

08002ed0 <VL53L0X_PROXIMITY_Init>:
/* USER CODE END 4 */



static void VL53L0X_PROXIMITY_Init(void)
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b0f9      	sub	sp, #484	; 0x1e4
 8002ed4:	af5e      	add	r7, sp, #376	; 0x178
  uint16_t vl53l0x_id = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  VL53L0X_DeviceInfo_t VL53L0X_DeviceInfo;

  /* Initialize IO interface */
  SENSOR_IO_Init();
 8002edc:	f006 ff10 	bl	8009d00 <SENSOR_IO_Init>
  VL53L0X_PROXIMITY_MspInit();
 8002ee0:	f000 f85e 	bl	8002fa0 <VL53L0X_PROXIMITY_MspInit>

  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 8002ee4:	463b      	mov	r3, r7
 8002ee6:	2263      	movs	r2, #99	; 0x63
 8002ee8:	2100      	movs	r1, #0
 8002eea:	4618      	mov	r0, r3
 8002eec:	f010 fae6 	bl	80134bc <memset>

  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 8002ef0:	463b      	mov	r3, r7
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	481e      	ldr	r0, [pc, #120]	; (8002f70 <VL53L0X_PROXIMITY_Init+0xa0>)
 8002ef6:	f001 faad 	bl	8004454 <VL53L0X_GetDeviceInfo>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d12f      	bne.n	8002f60 <VL53L0X_PROXIMITY_Init+0x90>
  {
    if (VL53L0X_ERROR_NONE == VL53L0X_RdWord(&Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, (uint16_t *) &vl53l0x_id))
 8002f00:	f107 0366 	add.w	r3, r7, #102	; 0x66
 8002f04:	461a      	mov	r2, r3
 8002f06:	21c0      	movs	r1, #192	; 0xc0
 8002f08:	4819      	ldr	r0, [pc, #100]	; (8002f70 <VL53L0X_PROXIMITY_Init+0xa0>)
 8002f0a:	f006 f9f5 	bl	80092f8 <VL53L0X_RdWord>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d121      	bne.n	8002f58 <VL53L0X_PROXIMITY_Init+0x88>
    {
      if (vl53l0x_id == VL53L0X_ID)
 8002f14:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002f18:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d122      	bne.n	8002f66 <VL53L0X_PROXIMITY_Init+0x96>
      {
        if (VL53L0X_ERROR_NONE == VL53L0X_DataInit(&Dev))
 8002f20:	4813      	ldr	r0, [pc, #76]	; (8002f70 <VL53L0X_PROXIMITY_Init+0xa0>)
 8002f22:	f001 fabd 	bl	80044a0 <VL53L0X_DataInit>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d111      	bne.n	8002f50 <VL53L0X_PROXIMITY_Init+0x80>
        {
          Dev.Present = 1;
 8002f2c:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <VL53L0X_PROXIMITY_Init+0xa0>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
          SetupSingleShot(Dev);
 8002f34:	4c0e      	ldr	r4, [pc, #56]	; (8002f70 <VL53L0X_PROXIMITY_Init+0xa0>)
 8002f36:	4668      	mov	r0, sp
 8002f38:	f104 0310 	add.w	r3, r4, #16
 8002f3c:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8002f40:	4619      	mov	r1, r3
 8002f42:	f010 fab0 	bl	80134a6 <memcpy>
 8002f46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002f4a:	f006 fadb 	bl	8009504 <SetupSingleShot>
  }
  else
  {
    printf("VL53L0X Time of Flight Failed to get infos!\n");
  }
}
 8002f4e:	e00a      	b.n	8002f66 <VL53L0X_PROXIMITY_Init+0x96>
          printf("VL53L0X Time of Flight Failed to send its ID!\n");
 8002f50:	4808      	ldr	r0, [pc, #32]	; (8002f74 <VL53L0X_PROXIMITY_Init+0xa4>)
 8002f52:	f010 fb2f 	bl	80135b4 <puts>
}
 8002f56:	e006      	b.n	8002f66 <VL53L0X_PROXIMITY_Init+0x96>
      printf("VL53L0X Time of Flight Failed to Initialize!\n");
 8002f58:	4807      	ldr	r0, [pc, #28]	; (8002f78 <VL53L0X_PROXIMITY_Init+0xa8>)
 8002f5a:	f010 fb2b 	bl	80135b4 <puts>
}
 8002f5e:	e002      	b.n	8002f66 <VL53L0X_PROXIMITY_Init+0x96>
    printf("VL53L0X Time of Flight Failed to get infos!\n");
 8002f60:	4806      	ldr	r0, [pc, #24]	; (8002f7c <VL53L0X_PROXIMITY_Init+0xac>)
 8002f62:	f010 fb27 	bl	80135b4 <puts>
}
 8002f66:	bf00      	nop
 8002f68:	376c      	adds	r7, #108	; 0x6c
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd90      	pop	{r4, r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000004 	.word	0x20000004
 8002f74:	0801618c 	.word	0x0801618c
 8002f78:	080161bc 	.word	0x080161bc
 8002f7c:	080161ec 	.word	0x080161ec

08002f80 <VL53L0X_PROXIMITY_GetDistance>:
/**
  * @brief  Get distance from VL53L0X proximity sensor.
  * @retval Distance in mm
  */
static uint16_t VL53L0X_PROXIMITY_GetDistance(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af00      	add	r7, sp, #0
  VL53L0X_RangingMeasurementData_t RangingMeasurementData;

  VL53L0X_PerformSingleRangingMeasurement(&Dev, &RangingMeasurementData);
 8002f86:	1d3b      	adds	r3, r7, #4
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4804      	ldr	r0, [pc, #16]	; (8002f9c <VL53L0X_PROXIMITY_GetDistance+0x1c>)
 8002f8c:	f002 fcee 	bl	800596c <VL53L0X_PerformSingleRangingMeasurement>

  return RangingMeasurementData.RangeMilliMeter;
 8002f90:	89bb      	ldrh	r3, [r7, #12]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3720      	adds	r7, #32
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	20000004 	.word	0x20000004

08002fa0 <VL53L0X_PROXIMITY_MspInit>:

static void VL53L0X_PROXIMITY_MspInit(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /*Configure GPIO pin : VL53L0X_XSHUT_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin;
 8002fa6:	2340      	movs	r3, #64	; 0x40
 8002fa8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002faa:	2301      	movs	r3, #1
 8002fac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8002fb6:	1d3b      	adds	r3, r7, #4
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4808      	ldr	r0, [pc, #32]	; (8002fdc <VL53L0X_PROXIMITY_MspInit+0x3c>)
 8002fbc:	f007 fcd2 	bl	800a964 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L0X_XSHUT_GPIO_Port, VL53L0X_XSHUT_Pin, GPIO_PIN_SET);
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	2140      	movs	r1, #64	; 0x40
 8002fc4:	4805      	ldr	r0, [pc, #20]	; (8002fdc <VL53L0X_PROXIMITY_MspInit+0x3c>)
 8002fc6:	f007 ff81 	bl	800aecc <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 8002fca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fce:	f007 fa47 	bl	800a460 <HAL_Delay>
}
 8002fd2:	bf00      	nop
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	48000800 	.word	0x48000800

08002fe0 <controlla_valori_telefono>:
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */

void controlla_valori_telefono(struct sharedValues_t *sv){
 8002fe0:	b5b0      	push	{r4, r5, r7, lr}
 8002fe2:	b0a2      	sub	sp, #136	; 0x88
 8002fe4:	af04      	add	r7, sp, #16
 8002fe6:	6078      	str	r0, [r7, #4]

	uint8_t TxData[] = "STM32 : Hello!\n";
 8002fe8:	4b5b      	ldr	r3, [pc, #364]	; (8003158 <controlla_valori_telefono+0x178>)
 8002fea:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002fee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ff0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			int32_t ret;
			uint16_t Datalen;
			uint8_t  MAC_Addr[6];
			uint8_t  IP_Addr[4];
			char msg[30] = "";
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ff8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	60da      	str	r2, [r3, #12]
 8003006:	611a      	str	r2, [r3, #16]
 8003008:	615a      	str	r2, [r3, #20]
 800300a:	831a      	strh	r2, [r3, #24]

			int32_t Socket = -1;
 800300c:	f04f 33ff 	mov.w	r3, #4294967295
 8003010:	673b      	str	r3, [r7, #112]	; 0x70

			int16_t Trials = CONNECTION_TRIAL_MAX;
 8003012:	230a      	movs	r3, #10
 8003014:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			char text[30];

			/*Initialize  WIFI module */
			  if(WIFI_Init() ==  WIFI_STATUS_OK)
 8003018:	f006 fb52 	bl	80096c0 <WIFI_Init>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	f040 80b8 	bne.w	8003194 <controlla_valori_telefono+0x1b4>
			  {
					TERMOUT("> WIFI Module Initialized.\n");
 8003024:	484d      	ldr	r0, [pc, #308]	; (800315c <controlla_valori_telefono+0x17c>)
 8003026:	f010 fac5 	bl	80135b4 <puts>
					if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 800302a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800302e:	4618      	mov	r0, r3
 8003030:	f006 fb94 	bl	800975c <WIFI_GetMAC_Address>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d118      	bne.n	800306c <controlla_valori_telefono+0x8c>
					{
					  TERMOUT("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 800303a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800303e:	4618      	mov	r0, r3
 8003040:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8003044:	461c      	mov	r4, r3
 8003046:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800304a:	461d      	mov	r5, r3
 800304c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003050:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8003054:	f897 1055 	ldrb.w	r1, [r7, #85]	; 0x55
 8003058:	9102      	str	r1, [sp, #8]
 800305a:	9201      	str	r2, [sp, #4]
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	462b      	mov	r3, r5
 8003060:	4622      	mov	r2, r4
 8003062:	4601      	mov	r1, r0
 8003064:	483e      	ldr	r0, [pc, #248]	; (8003160 <controlla_valori_telefono+0x180>)
 8003066:	f010 fa31 	bl	80134cc <iprintf>
 800306a:	e005      	b.n	8003078 <controlla_valori_telefono+0x98>
							   MAC_Addr[4],
							   MAC_Addr[5]);
					}
					else
					{
					  TERMOUT("> ERROR : CANNOT get MAC address\n");
 800306c:	483d      	ldr	r0, [pc, #244]	; (8003164 <controlla_valori_telefono+0x184>)
 800306e:	f010 faa1 	bl	80135b4 <puts>
					  BSP_LED_On(LED2);
 8003072:	2000      	movs	r0, #0
 8003074:	f006 fc7c 	bl	8009970 <BSP_LED_On>
					}

					if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 8003078:	2203      	movs	r2, #3
 800307a:	493b      	ldr	r1, [pc, #236]	; (8003168 <controlla_valori_telefono+0x188>)
 800307c:	483b      	ldr	r0, [pc, #236]	; (800316c <controlla_valori_telefono+0x18c>)
 800307e:	f006 fb4b 	bl	8009718 <WIFI_Connect>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d15f      	bne.n	8003148 <controlla_valori_telefono+0x168>
					{
					  TERMOUT("> es-wifi module connected \n");
 8003088:	4839      	ldr	r0, [pc, #228]	; (8003170 <controlla_valori_telefono+0x190>)
 800308a:	f010 fa93 	bl	80135b4 <puts>
					  if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 800308e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003092:	4618      	mov	r0, r3
 8003094:	f006 fb78 	bl	8009788 <WIFI_GetIP_Address>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d14d      	bne.n	800313a <controlla_valori_telefono+0x15a>
					  {
						TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 800309e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80030a2:	4619      	mov	r1, r3
 80030a4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80030a8:	461a      	mov	r2, r3
 80030aa:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80030ae:	4618      	mov	r0, r3
 80030b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	4603      	mov	r3, r0
 80030b8:	482e      	ldr	r0, [pc, #184]	; (8003174 <controlla_valori_telefono+0x194>)
 80030ba:	f010 fa07 	bl	80134cc <iprintf>
							   IP_Addr[0],
							   IP_Addr[1],
							   IP_Addr[2],
							   IP_Addr[3]);

						TERMOUT("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 80030be:	4b2e      	ldr	r3, [pc, #184]	; (8003178 <controlla_valori_telefono+0x198>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	4619      	mov	r1, r3
 80030c4:	4b2c      	ldr	r3, [pc, #176]	; (8003178 <controlla_valori_telefono+0x198>)
 80030c6:	785b      	ldrb	r3, [r3, #1]
 80030c8:	4618      	mov	r0, r3
 80030ca:	4b2b      	ldr	r3, [pc, #172]	; (8003178 <controlla_valori_telefono+0x198>)
 80030cc:	789b      	ldrb	r3, [r3, #2]
 80030ce:	461c      	mov	r4, r3
 80030d0:	4b29      	ldr	r3, [pc, #164]	; (8003178 <controlla_valori_telefono+0x198>)
 80030d2:	78db      	ldrb	r3, [r3, #3]
 80030d4:	461a      	mov	r2, r3
 80030d6:	f641 7342 	movw	r3, #8002	; 0x1f42
 80030da:	9301      	str	r3, [sp, #4]
 80030dc:	9200      	str	r2, [sp, #0]
 80030de:	4623      	mov	r3, r4
 80030e0:	4602      	mov	r2, r0
 80030e2:	4826      	ldr	r0, [pc, #152]	; (800317c <controlla_valori_telefono+0x19c>)
 80030e4:	f010 f9f2 	bl	80134cc <iprintf>
							   RemoteIP[1],
							   RemoteIP[2],
							   RemoteIP[3],
											 RemotePORT);

						while (Trials--)
 80030e8:	e013      	b.n	8003112 <controlla_valori_telefono+0x132>
						{
						  if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 80030ea:	2300      	movs	r3, #0
 80030ec:	9301      	str	r3, [sp, #4]
 80030ee:	f641 7342 	movw	r3, #8002	; 0x1f42
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	4b20      	ldr	r3, [pc, #128]	; (8003178 <controlla_valori_telefono+0x198>)
 80030f6:	4a22      	ldr	r2, [pc, #136]	; (8003180 <controlla_valori_telefono+0x1a0>)
 80030f8:	2100      	movs	r1, #0
 80030fa:	2000      	movs	r0, #0
 80030fc:	f006 fb60 	bl	80097c0 <WIFI_OpenClientConnection>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d105      	bne.n	8003112 <controlla_valori_telefono+0x132>
						  {
							TERMOUT("> TCP Connection opened successfully.\n");
 8003106:	481f      	ldr	r0, [pc, #124]	; (8003184 <controlla_valori_telefono+0x1a4>)
 8003108:	f010 fa54 	bl	80135b4 <puts>
							Socket = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	673b      	str	r3, [r7, #112]	; 0x70
							break;
 8003110:	e008      	b.n	8003124 <controlla_valori_telefono+0x144>
						while (Trials--)
 8003112:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8003116:	b29a      	uxth	r2, r3
 8003118:	3a01      	subs	r2, #1
 800311a:	b292      	uxth	r2, r2
 800311c:	f8a7 206e 	strh.w	r2, [r7, #110]	; 0x6e
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1e2      	bne.n	80030ea <controlla_valori_telefono+0x10a>
						  }

						}
						if(Socket == -1)
 8003124:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312a:	d139      	bne.n	80031a0 <controlla_valori_telefono+0x1c0>
						{
						  TERMOUT("> ERROR : Cannot open Connection\n");
 800312c:	4816      	ldr	r0, [pc, #88]	; (8003188 <controlla_valori_telefono+0x1a8>)
 800312e:	f010 fa41 	bl	80135b4 <puts>
						  BSP_LED_On(LED2);
 8003132:	2000      	movs	r0, #0
 8003134:	f006 fc1c 	bl	8009970 <BSP_LED_On>
 8003138:	e032      	b.n	80031a0 <controlla_valori_telefono+0x1c0>
						}
					  }
					  else
					  {
						TERMOUT("> ERROR : es-wifi module CANNOT get IP address\n");
 800313a:	4814      	ldr	r0, [pc, #80]	; (800318c <controlla_valori_telefono+0x1ac>)
 800313c:	f010 fa3a 	bl	80135b4 <puts>
						BSP_LED_On(LED2);
 8003140:	2000      	movs	r0, #0
 8003142:	f006 fc15 	bl	8009970 <BSP_LED_On>
 8003146:	e02b      	b.n	80031a0 <controlla_valori_telefono+0x1c0>
					  }
					}
					else
					{
					  TERMOUT("> ERROR : es-wifi module NOT connected\n");
 8003148:	4811      	ldr	r0, [pc, #68]	; (8003190 <controlla_valori_telefono+0x1b0>)
 800314a:	f010 fa33 	bl	80135b4 <puts>
					  BSP_LED_On(LED2);
 800314e:	2000      	movs	r0, #0
 8003150:	f006 fc0e 	bl	8009970 <BSP_LED_On>
 8003154:	e024      	b.n	80031a0 <controlla_valori_telefono+0x1c0>
 8003156:	bf00      	nop
 8003158:	08016504 	.word	0x08016504
 800315c:	08016218 	.word	0x08016218
 8003160:	08016234 	.word	0x08016234
 8003164:	08016268 	.word	0x08016268
 8003168:	0801628c 	.word	0x0801628c
 800316c:	0801629c 	.word	0x0801629c
 8003170:	080162b0 	.word	0x080162b0
 8003174:	080162cc 	.word	0x080162cc
 8003178:	20000000 	.word	0x20000000
 800317c:	080162fc 	.word	0x080162fc
 8003180:	08016330 	.word	0x08016330
 8003184:	0801633c 	.word	0x0801633c
 8003188:	08016364 	.word	0x08016364
 800318c:	08016388 	.word	0x08016388
 8003190:	080163b8 	.word	0x080163b8
					}
			  }
			  else
			  {
				TERMOUT("> ERROR : WIFI Module cannot be initialized.\n");
 8003194:	489c      	ldr	r0, [pc, #624]	; (8003408 <controlla_valori_telefono+0x428>)
 8003196:	f010 fa0d 	bl	80135b4 <puts>
				BSP_LED_On(LED2);
 800319a:	2000      	movs	r0, #0
 800319c:	f006 fbe8 	bl	8009970 <BSP_LED_On>


			  while(1)
			  {

				if(Socket != -1)
 80031a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a6:	f000 8125 	beq.w	80033f4 <controlla_valori_telefono+0x414>
				{
				  ret = WIFI_ReceiveData(Socket, RxData, sizeof(RxData)-1, &Datalen, WIFI_READ_TIMEOUT);
 80031aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031ac:	b2d8      	uxtb	r0, r3
 80031ae:	f107 0256 	add.w	r2, r7, #86	; 0x56
 80031b2:	f242 7310 	movw	r3, #10000	; 0x2710
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	4613      	mov	r3, r2
 80031ba:	f240 12f3 	movw	r2, #499	; 0x1f3
 80031be:	4993      	ldr	r1, [pc, #588]	; (800340c <controlla_valori_telefono+0x42c>)
 80031c0:	f006 fb5a 	bl	8009878 <WIFI_ReceiveData>
 80031c4:	4603      	mov	r3, r0
 80031c6:	677b      	str	r3, [r7, #116]	; 0x74
				  if(ret == WIFI_STATUS_OK)
 80031c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f040 8107 	bne.w	80033de <controlla_valori_telefono+0x3fe>
				  {
					if(Datalen > 0)
 80031d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 810d 	beq.w	80033f4 <controlla_valori_telefono+0x414>
					{
					  RxData[Datalen]=0;
 80031da:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80031de:	461a      	mov	r2, r3
 80031e0:	4b8a      	ldr	r3, [pc, #552]	; (800340c <controlla_valori_telefono+0x42c>)
 80031e2:	2100      	movs	r1, #0
 80031e4:	5499      	strb	r1, [r3, r2]
					  TERMOUT("Received: %s\n",RxData);
 80031e6:	4989      	ldr	r1, [pc, #548]	; (800340c <controlla_valori_telefono+0x42c>)
 80031e8:	4889      	ldr	r0, [pc, #548]	; (8003410 <controlla_valori_telefono+0x430>)
 80031ea:	f010 f96f 	bl	80134cc <iprintf>
					  int ritorno = atoi(RxData);
 80031ee:	4887      	ldr	r0, [pc, #540]	; (800340c <controlla_valori_telefono+0x42c>)
 80031f0:	f010 f91c 	bl	801342c <atoi>
 80031f4:	66b8      	str	r0, [r7, #104]	; 0x68
					  if(ritorno==45){
 80031f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031f8:	2b2d      	cmp	r3, #45	; 0x2d
 80031fa:	d10e      	bne.n	800321a <controlla_valori_telefono+0x23a>
						  ret = WIFI_SendData(Socket, TxData, sizeof(TxData), &Datalen, WIFI_WRITE_TIMEOUT);
 80031fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031fe:	b2d8      	uxtb	r0, r3
 8003200:	f107 0256 	add.w	r2, r7, #86	; 0x56
 8003204:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003208:	f242 7310 	movw	r3, #10000	; 0x2710
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	4613      	mov	r3, r2
 8003210:	2210      	movs	r2, #16
 8003212:	f006 fb0f 	bl	8009834 <WIFI_SendData>
 8003216:	4603      	mov	r3, r0
 8003218:	677b      	str	r3, [r7, #116]	; 0x74
					  }

					  //PROXIMITY
					  if(ritorno == 0){
 800321a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800321c:	2b00      	cmp	r3, #0
 800321e:	d124      	bne.n	800326a <controlla_valori_telefono+0x28a>
						  osSemaphoreAcquire(sv->mutex, portMAX_DELAY);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003226:	f04f 31ff 	mov.w	r1, #4294967295
 800322a:	4618      	mov	r0, r3
 800322c:	f00d f82a 	bl	8010284 <osSemaphoreAcquire>
						  snprintf(text, 30, "Proximity value: %d \n", sv->proximity); // puts string into buffer
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003234:	f107 000c 	add.w	r0, r7, #12
 8003238:	4a76      	ldr	r2, [pc, #472]	; (8003414 <controlla_valori_telefono+0x434>)
 800323a:	211e      	movs	r1, #30
 800323c:	f010 f9c2 	bl	80135c4 <sniprintf>
						  ret = WIFI_SendData(Socket, text, sizeof(text), &Datalen, WIFI_WRITE_TIMEOUT);
 8003240:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003242:	b2d8      	uxtb	r0, r3
 8003244:	f107 0256 	add.w	r2, r7, #86	; 0x56
 8003248:	f107 010c 	add.w	r1, r7, #12
 800324c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	4613      	mov	r3, r2
 8003254:	221e      	movs	r2, #30
 8003256:	f006 faed 	bl	8009834 <WIFI_SendData>
 800325a:	4603      	mov	r3, r0
 800325c:	677b      	str	r3, [r7, #116]	; 0x74
						  //wifi_http_get (uint8_t * hostname, uint8_t * path, uint32_t port_number )
						  osSemaphoreRelease(sv->mutex);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003264:	4618      	mov	r0, r3
 8003266:	f00d f873 	bl	8010350 <osSemaphoreRelease>
					  }

					  //TEMPERATURE
					  if(ritorno==1){
 800326a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800326c:	2b01      	cmp	r3, #1
 800326e:	d128      	bne.n	80032c2 <controlla_valori_telefono+0x2e2>
						  osSemaphoreAcquire(sv->mutex, portMAX_DELAY);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003276:	f04f 31ff 	mov.w	r1, #4294967295
 800327a:	4618      	mov	r0, r3
 800327c:	f00d f802 	bl	8010284 <osSemaphoreAcquire>
						  snprintf(text,30," Temperature = %d.%02d\n\r", sv->temperature_val1, sv->temperature_val2);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f107 000c 	add.w	r0, r7, #12
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	4613      	mov	r3, r2
 8003290:	4a61      	ldr	r2, [pc, #388]	; (8003418 <controlla_valori_telefono+0x438>)
 8003292:	211e      	movs	r1, #30
 8003294:	f010 f996 	bl	80135c4 <sniprintf>
						  ret = WIFI_SendData(Socket, text, sizeof(text), &Datalen, WIFI_WRITE_TIMEOUT);
 8003298:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800329a:	b2d8      	uxtb	r0, r3
 800329c:	f107 0256 	add.w	r2, r7, #86	; 0x56
 80032a0:	f107 010c 	add.w	r1, r7, #12
 80032a4:	f242 7310 	movw	r3, #10000	; 0x2710
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	4613      	mov	r3, r2
 80032ac:	221e      	movs	r2, #30
 80032ae:	f006 fac1 	bl	8009834 <WIFI_SendData>
 80032b2:	4603      	mov	r3, r0
 80032b4:	677b      	str	r3, [r7, #116]	; 0x74
						  osSemaphoreRelease(sv->mutex);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032bc:	4618      	mov	r0, r3
 80032be:	f00d f847 	bl	8010350 <osSemaphoreRelease>
					  }

					  //HUMIDITY
					  if(ritorno==2){
 80032c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d128      	bne.n	800331a <controlla_valori_telefono+0x33a>
						  osSemaphoreAcquire(sv->mutex, portMAX_DELAY);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ce:	f04f 31ff 	mov.w	r1, #4294967295
 80032d2:	4618      	mov	r0, r3
 80032d4:	f00c ffd6 	bl	8010284 <osSemaphoreAcquire>
						  snprintf(text,30," Humidity = %d.%02d\n\r", sv->humidity_val1, sv->humidity_val2);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	f107 000c 	add.w	r0, r7, #12
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	4613      	mov	r3, r2
 80032e8:	4a4c      	ldr	r2, [pc, #304]	; (800341c <controlla_valori_telefono+0x43c>)
 80032ea:	211e      	movs	r1, #30
 80032ec:	f010 f96a 	bl	80135c4 <sniprintf>
						  ret = WIFI_SendData(Socket, text, sizeof(text), &Datalen, WIFI_WRITE_TIMEOUT);
 80032f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032f2:	b2d8      	uxtb	r0, r3
 80032f4:	f107 0256 	add.w	r2, r7, #86	; 0x56
 80032f8:	f107 010c 	add.w	r1, r7, #12
 80032fc:	f242 7310 	movw	r3, #10000	; 0x2710
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	4613      	mov	r3, r2
 8003304:	221e      	movs	r2, #30
 8003306:	f006 fa95 	bl	8009834 <WIFI_SendData>
 800330a:	4603      	mov	r3, r0
 800330c:	677b      	str	r3, [r7, #116]	; 0x74
						  osSemaphoreRelease(sv->mutex);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003314:	4618      	mov	r0, r3
 8003316:	f00d f81b 	bl	8010350 <osSemaphoreRelease>
					  }

					  //PRESSSURE 1mBar = 1hPa (100Pa)
					  if(ritorno==3){
 800331a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800331c:	2b03      	cmp	r3, #3
 800331e:	d128      	bne.n	8003372 <controlla_valori_telefono+0x392>
						  osSemaphoreAcquire(sv->mutex, portMAX_DELAY);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003326:	f04f 31ff 	mov.w	r1, #4294967295
 800332a:	4618      	mov	r0, r3
 800332c:	f00c ffaa 	bl	8010284 <osSemaphoreAcquire>
						  snprintf(text,30," Pressure = %d.%02d hPa\n\r", sv->pressure_val1, sv->pressure_val2);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003338:	f107 000c 	add.w	r0, r7, #12
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	4613      	mov	r3, r2
 8003340:	4a37      	ldr	r2, [pc, #220]	; (8003420 <controlla_valori_telefono+0x440>)
 8003342:	211e      	movs	r1, #30
 8003344:	f010 f93e 	bl	80135c4 <sniprintf>
						  ret = WIFI_SendData(Socket, text, sizeof(text), &Datalen, WIFI_WRITE_TIMEOUT);
 8003348:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800334a:	b2d8      	uxtb	r0, r3
 800334c:	f107 0256 	add.w	r2, r7, #86	; 0x56
 8003350:	f107 010c 	add.w	r1, r7, #12
 8003354:	f242 7310 	movw	r3, #10000	; 0x2710
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	4613      	mov	r3, r2
 800335c:	221e      	movs	r2, #30
 800335e:	f006 fa69 	bl	8009834 <WIFI_SendData>
 8003362:	4603      	mov	r3, r0
 8003364:	677b      	str	r3, [r7, #116]	; 0x74
						  osSemaphoreRelease(sv->mutex);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800336c:	4618      	mov	r0, r3
 800336e:	f00c ffef 	bl	8010350 <osSemaphoreRelease>
					  }

					  if(ritorno==4){
 8003372:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003374:	2b04      	cmp	r3, #4
 8003376:	d124      	bne.n	80033c2 <controlla_valori_telefono+0x3e2>
						  osSemaphoreAcquire(sv->mutex, portMAX_DELAY);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800337e:	f04f 31ff 	mov.w	r1, #4294967295
 8003382:	4618      	mov	r0, r3
 8003384:	f00c ff7e 	bl	8010284 <osSemaphoreAcquire>
						  snprintf(text,30," Dewpoint = %d\n\r", sv->dewpoint);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800338c:	f107 000c 	add.w	r0, r7, #12
 8003390:	4a24      	ldr	r2, [pc, #144]	; (8003424 <controlla_valori_telefono+0x444>)
 8003392:	211e      	movs	r1, #30
 8003394:	f010 f916 	bl	80135c4 <sniprintf>
						  ret = WIFI_SendData(Socket, text, sizeof(text), &Datalen, WIFI_WRITE_TIMEOUT);
 8003398:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800339a:	b2d8      	uxtb	r0, r3
 800339c:	f107 0256 	add.w	r2, r7, #86	; 0x56
 80033a0:	f107 010c 	add.w	r1, r7, #12
 80033a4:	f242 7310 	movw	r3, #10000	; 0x2710
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	4613      	mov	r3, r2
 80033ac:	221e      	movs	r2, #30
 80033ae:	f006 fa41 	bl	8009834 <WIFI_SendData>
 80033b2:	4603      	mov	r3, r0
 80033b4:	677b      	str	r3, [r7, #116]	; 0x74
						  osSemaphoreRelease(sv->mutex);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033bc:	4618      	mov	r0, r3
 80033be:	f00c ffc7 	bl	8010350 <osSemaphoreRelease>

		              }

					if (ret != WIFI_STATUS_OK)
 80033c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d015      	beq.n	80033f4 <controlla_valori_telefono+0x414>
					  {
						TERMOUT("> ERROR : Failed to Send Data, connection closed\n");
 80033c8:	4817      	ldr	r0, [pc, #92]	; (8003428 <controlla_valori_telefono+0x448>)
 80033ca:	f010 f8f3 	bl	80135b4 <puts>
						 HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D9_Pin, GPIO_PIN_SET);//0
 80033ce:	2201      	movs	r2, #1
 80033d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033d8:	f007 fd78 	bl	800aecc <HAL_GPIO_WritePin>

						break;
 80033dc:	e00f      	b.n	80033fe <controlla_valori_telefono+0x41e>
					  }
					}
				  }
				  else
				  {
					TERMOUT("> ERROR : Failed to Receive Data, connection closed\n");
 80033de:	4813      	ldr	r0, [pc, #76]	; (800342c <controlla_valori_telefono+0x44c>)
 80033e0:	f010 f8e8 	bl	80135b4 <puts>
					 HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D9_Pin, GPIO_PIN_SET);//0
 80033e4:	2201      	movs	r2, #1
 80033e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033ee:	f007 fd6d 	bl	800aecc <HAL_GPIO_WritePin>

					break;
 80033f2:	e004      	b.n	80033fe <controlla_valori_telefono+0x41e>
				  }
				}
				HAL_Delay(500);
 80033f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033f8:	f007 f832 	bl	800a460 <HAL_Delay>
				if(Socket != -1)
 80033fc:	e6d0      	b.n	80031a0 <controlla_valori_telefono+0x1c0>

			  }

}
 80033fe:	bf00      	nop
 8003400:	3778      	adds	r7, #120	; 0x78
 8003402:	46bd      	mov	sp, r7
 8003404:	bdb0      	pop	{r4, r5, r7, pc}
 8003406:	bf00      	nop
 8003408:	080163e0 	.word	0x080163e0
 800340c:	20000698 	.word	0x20000698
 8003410:	08016410 	.word	0x08016410
 8003414:	08016420 	.word	0x08016420
 8003418:	08016438 	.word	0x08016438
 800341c:	08016454 	.word	0x08016454
 8003420:	0801646c 	.word	0x0801646c
 8003424:	08016488 	.word	0x08016488
 8003428:	0801649c 	.word	0x0801649c
 800342c:	080164d0 	.word	0x080164d0

08003430 <StartDefaultTask>:


/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *arguments)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]

	controlla_valori_telefono(&sharedValues);
 8003438:	4803      	ldr	r0, [pc, #12]	; (8003448 <StartDefaultTask+0x18>)
 800343a:	f7ff fdd1 	bl	8002fe0 <controlla_valori_telefono>

}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20003d74 	.word	0x20003d74

0800344c <stampa>:
* @retval None
*/
/* USER CODE END Header_StartTask02 */

//Aggiorna i valori dei sensori così se vengono richiesti dall'app sono consistenti
void stampa(struct sharedValues_t *sv){
 800344c:	b590      	push	{r4, r7, lr}
 800344e:	b0a1      	sub	sp, #132	; 0x84
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	 osSemaphoreAcquire(sv->mutex, portMAX_DELAY);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800345a:	f04f 31ff 	mov.w	r1, #4294967295
 800345e:	4618      	mov	r0, r3
 8003460:	f00c ff10 	bl	8010284 <osSemaphoreAcquire>

		float temperature,humidity,pressure;
		float separa = 0;
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	67fb      	str	r3, [r7, #124]	; 0x7c
		int val1,val2;
		char msg_t[30] = "";
 800346a:	2300      	movs	r3, #0
 800346c:	64bb      	str	r3, [r7, #72]	; 0x48
 800346e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	605a      	str	r2, [r3, #4]
 8003478:	609a      	str	r2, [r3, #8]
 800347a:	60da      	str	r2, [r3, #12]
 800347c:	611a      	str	r2, [r3, #16]
 800347e:	615a      	str	r2, [r3, #20]
 8003480:	831a      	strh	r2, [r3, #24]
		char msg_h[30] = "";
 8003482:	2300      	movs	r3, #0
 8003484:	62bb      	str	r3, [r7, #40]	; 0x28
 8003486:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	605a      	str	r2, [r3, #4]
 8003490:	609a      	str	r2, [r3, #8]
 8003492:	60da      	str	r2, [r3, #12]
 8003494:	611a      	str	r2, [r3, #16]
 8003496:	615a      	str	r2, [r3, #20]
 8003498:	831a      	strh	r2, [r3, #24]
		char msg_p[30] = "";
 800349a:	2300      	movs	r3, #0
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	f107 030c 	add.w	r3, r7, #12
 80034a2:	2200      	movs	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	605a      	str	r2, [r3, #4]
 80034a8:	609a      	str	r2, [r3, #8]
 80034aa:	60da      	str	r2, [r3, #12]
 80034ac:	611a      	str	r2, [r3, #16]
 80034ae:	615a      	str	r2, [r3, #20]
 80034b0:	831a      	strh	r2, [r3, #24]

		temperature = BSP_TSENSOR_ReadTemp();
 80034b2:	f006 fcfd 	bl	8009eb0 <BSP_TSENSOR_ReadTemp>
 80034b6:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
		humidity = BSP_HSENSOR_ReadHumidity();
 80034ba:	f006 fca1 	bl	8009e00 <BSP_HSENSOR_ReadHumidity>
 80034be:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
		pressure = BSP_PSENSOR_ReadPressure();
 80034c2:	f006 fccb 	bl	8009e5c <BSP_PSENSOR_ReadPressure>
 80034c6:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70

		if(temperature>27){
 80034ca:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80034ce:	eeb3 7a0b 	vmov.f32	s14, #59	; 0x41d80000  27.0
 80034d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034da:	dd0b      	ble.n	80034f4 <stampa+0xa8>
			HAL_GPIO_WritePin(ARD_D5_GPIO_Port, ARD_D5_Pin, GPIO_PIN_SET);
 80034dc:	2201      	movs	r2, #1
 80034de:	2110      	movs	r1, #16
 80034e0:	4870      	ldr	r0, [pc, #448]	; (80036a4 <stampa+0x258>)
 80034e2:	f007 fcf3 	bl	800aecc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ARD_D10_GPIO_Port, ARD_D10_Pin, GPIO_PIN_SET);
 80034e6:	2201      	movs	r2, #1
 80034e8:	2104      	movs	r1, #4
 80034ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034ee:	f007 fced 	bl	800aecc <HAL_GPIO_WritePin>
 80034f2:	e00a      	b.n	800350a <stampa+0xbe>
		}
		else{
			HAL_GPIO_WritePin(ARD_D5_GPIO_Port, ARD_D5_Pin, GPIO_PIN_RESET);
 80034f4:	2200      	movs	r2, #0
 80034f6:	2110      	movs	r1, #16
 80034f8:	486a      	ldr	r0, [pc, #424]	; (80036a4 <stampa+0x258>)
 80034fa:	f007 fce7 	bl	800aecc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ARD_D10_GPIO_Port, ARD_D10_Pin, GPIO_PIN_RESET);
 80034fe:	2200      	movs	r2, #0
 8003500:	2104      	movs	r1, #4
 8003502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003506:	f007 fce1 	bl	800aecc <HAL_GPIO_WritePin>
		}
//temperature
		val1 = temperature;
 800350a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800350e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003512:	ee17 3a90 	vmov	r3, s15
 8003516:	66fb      	str	r3, [r7, #108]	; 0x6c
		separa = temperature - val1;
 8003518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800351a:	ee07 3a90 	vmov	s15, r3
 800351e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003522:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8003526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800352a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		val2 = trunc(separa * 100);
 800352e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003532:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80036a8 <stampa+0x25c>
 8003536:	ee67 7a87 	vmul.f32	s15, s15, s14
 800353a:	ee17 0a90 	vmov	r0, s15
 800353e:	f7fd f803 	bl	8000548 <__aeabi_f2d>
 8003542:	4603      	mov	r3, r0
 8003544:	460c      	mov	r4, r1
 8003546:	ec44 3b10 	vmov	d0, r3, r4
 800354a:	f011 fa3d 	bl	80149c8 <trunc>
 800354e:	ec54 3b10 	vmov	r3, r4, d0
 8003552:	4618      	mov	r0, r3
 8003554:	4621      	mov	r1, r4
 8003556:	f7fd faff 	bl	8000b58 <__aeabi_d2iz>
 800355a:	4603      	mov	r3, r0
 800355c:	66bb      	str	r3, [r7, #104]	; 0x68
		sv->temperature_val1 = val1;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003562:	601a      	str	r2, [r3, #0]
		sv->temperature_val2 = val2;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003568:	605a      	str	r2, [r3, #4]
		if(sv->n_elements_temp<5){
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	2b04      	cmp	r3, #4
 8003570:	dc0c      	bgt.n	800358c <stampa+0x140>
			sv->array_temp[sv->n_elements_temp]=temperature;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	3302      	adds	r3, #2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003580:	601a      	str	r2, [r3, #0]
			sv->n_elements_temp += 1;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	621a      	str	r2, [r3, #32]

		}

//humidity
		val1 = humidity;
 800358c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8003590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003594:	ee17 3a90 	vmov	r3, s15
 8003598:	66fb      	str	r3, [r7, #108]	; 0x6c
		separa = humidity - val1;
 800359a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800359c:	ee07 3a90 	vmov	s15, r3
 80035a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035a4:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80035a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035ac:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		val2 = trunc(separa * 100);
 80035b0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80035b4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80036a8 <stampa+0x25c>
 80035b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035bc:	ee17 0a90 	vmov	r0, s15
 80035c0:	f7fc ffc2 	bl	8000548 <__aeabi_f2d>
 80035c4:	4603      	mov	r3, r0
 80035c6:	460c      	mov	r4, r1
 80035c8:	ec44 3b10 	vmov	d0, r3, r4
 80035cc:	f011 f9fc 	bl	80149c8 <trunc>
 80035d0:	ec54 3b10 	vmov	r3, r4, d0
 80035d4:	4618      	mov	r0, r3
 80035d6:	4621      	mov	r1, r4
 80035d8:	f7fd fabe 	bl	8000b58 <__aeabi_d2iz>
 80035dc:	4603      	mov	r3, r0
 80035de:	66bb      	str	r3, [r7, #104]	; 0x68
		sv->humidity_val1 = val1;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80035e4:	629a      	str	r2, [r3, #40]	; 0x28
		sv->humidity_val2 = val2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80035ea:	62da      	str	r2, [r3, #44]	; 0x2c
		if(sv->n_elements_humidity<5){
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	dc0c      	bgt.n	800360e <stampa+0x1c2>
			sv->array_humidity[sv->n_elements_humidity]=humidity;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	330c      	adds	r3, #12
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003602:	601a      	str	r2, [r3, #0]
			sv->n_elements_humidity +=1;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	649a      	str	r2, [r3, #72]	; 0x48
		}

//pressure
		val1 = pressure;
 800360e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003616:	ee17 3a90 	vmov	r3, s15
 800361a:	66fb      	str	r3, [r7, #108]	; 0x6c
		separa = pressure - val1;
 800361c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800361e:	ee07 3a90 	vmov	s15, r3
 8003622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003626:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800362a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800362e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		val2 = trunc(separa * 100);
 8003632:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8003636:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80036a8 <stampa+0x25c>
 800363a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800363e:	ee17 0a90 	vmov	r0, s15
 8003642:	f7fc ff81 	bl	8000548 <__aeabi_f2d>
 8003646:	4603      	mov	r3, r0
 8003648:	460c      	mov	r4, r1
 800364a:	ec44 3b10 	vmov	d0, r3, r4
 800364e:	f011 f9bb 	bl	80149c8 <trunc>
 8003652:	ec54 3b10 	vmov	r3, r4, d0
 8003656:	4618      	mov	r0, r3
 8003658:	4621      	mov	r1, r4
 800365a:	f7fd fa7d 	bl	8000b58 <__aeabi_d2iz>
 800365e:	4603      	mov	r3, r0
 8003660:	66bb      	str	r3, [r7, #104]	; 0x68
		sv->pressure_val1 = val1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003666:	651a      	str	r2, [r3, #80]	; 0x50
		sv->pressure_val2 = val2;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800366c:	655a      	str	r2, [r3, #84]	; 0x54
		if(sv->n_elements_pressure<5){
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	2b04      	cmp	r3, #4
 8003674:	dc0c      	bgt.n	8003690 <stampa+0x244>
			sv->array_pressure[sv->n_elements_pressure]=pressure;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	3316      	adds	r3, #22
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003684:	601a      	str	r2, [r3, #0]
			sv->n_elements_pressure +=1;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	671a      	str	r2, [r3, #112]	; 0x70
		}


	  osSemaphoreRelease(sv->mutex);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003696:	4618      	mov	r0, r3
 8003698:	f00c fe5a 	bl	8010350 <osSemaphoreRelease>

}
 800369c:	bf00      	nop
 800369e:	3784      	adds	r7, #132	; 0x84
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd90      	pop	{r4, r7, pc}
 80036a4:	48000400 	.word	0x48000400
 80036a8:	42c80000 	.word	0x42c80000

080036ac <StartTask02>:
void StartTask02(void *arguments)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  stampa(&sharedValues);
 80036b4:	4803      	ldr	r0, [pc, #12]	; (80036c4 <StartTask02+0x18>)
 80036b6:	f7ff fec9 	bl	800344c <stampa>
	  osDelay(500);
 80036ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80036be:	f00c fd15 	bl	80100ec <osDelay>
	  stampa(&sharedValues);
 80036c2:	e7f7      	b.n	80036b4 <StartTask02+0x8>
 80036c4:	20003d74 	.word	0x20003d74

080036c8 <aggiorna_contatore>:
  }
  /* USER CODE END StartTask02 */
}

void aggiorna_contatore(struct sharedValues_t *sv){
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
	uint32_t ret = 0;
 80036d0:	2300      	movs	r3, #0
 80036d2:	60fb      	str	r3, [r7, #12]
	uint16_t prox_value = 0;
 80036d4:	2300      	movs	r3, #0
 80036d6:	817b      	strh	r3, [r7, #10]


	//prendo il mutex
	osSemaphoreAcquire(sv->mutex, portMAX_DELAY);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036de:	f04f 31ff 	mov.w	r1, #4294967295
 80036e2:	4618      	mov	r0, r3
 80036e4:	f00c fdce 	bl	8010284 <osSemaphoreAcquire>

	prox_value = VL53L0X_PROXIMITY_GetDistance();
 80036e8:	f7ff fc4a 	bl	8002f80 <VL53L0X_PROXIMITY_GetDistance>
 80036ec:	4603      	mov	r3, r0
 80036ee:	817b      	strh	r3, [r7, #10]
	printf("DISTANCE is = %d mm \n", prox_value);
 80036f0:	897b      	ldrh	r3, [r7, #10]
 80036f2:	4619      	mov	r1, r3
 80036f4:	480b      	ldr	r0, [pc, #44]	; (8003724 <aggiorna_contatore+0x5c>)
 80036f6:	f00f fee9 	bl	80134cc <iprintf>

	sv->proximity = prox_value;
 80036fa:	897a      	ldrh	r2, [r7, #10]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	679a      	str	r2, [r3, #120]	; 0x78
	if(prox_value<100)
 8003700:	897b      	ldrh	r3, [r7, #10]
 8003702:	2b63      	cmp	r3, #99	; 0x63
 8003704:	d804      	bhi.n	8003710 <aggiorna_contatore+0x48>
		HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 8003706:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800370a:	4807      	ldr	r0, [pc, #28]	; (8003728 <aggiorna_contatore+0x60>)
 800370c:	f007 fbf6 	bl	800aefc <HAL_GPIO_TogglePin>
	osSemaphoreRelease(sv->mutex);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003716:	4618      	mov	r0, r3
 8003718:	f00c fe1a 	bl	8010350 <osSemaphoreRelease>

}
 800371c:	bf00      	nop
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	08016514 	.word	0x08016514
 8003728:	48000400 	.word	0x48000400

0800372c <Proximity_Test>:

void Proximity_Test(void *arguments)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]

  printf("\n*************************************************************\n");
 8003734:	4808      	ldr	r0, [pc, #32]	; (8003758 <Proximity_Test+0x2c>)
 8003736:	f00f ff3d 	bl	80135b4 <puts>
  printf("\n********************** Proximity Test ************************\n");
 800373a:	4808      	ldr	r0, [pc, #32]	; (800375c <Proximity_Test+0x30>)
 800373c:	f00f ff3a 	bl	80135b4 <puts>
  printf("\n*************************************************************\n\n");
 8003740:	4807      	ldr	r0, [pc, #28]	; (8003760 <Proximity_Test+0x34>)
 8003742:	f00f ff37 	bl	80135b4 <puts>


  while(1)
  {
	  	  aggiorna_contatore(&sharedValues);
 8003746:	4807      	ldr	r0, [pc, #28]	; (8003764 <Proximity_Test+0x38>)
 8003748:	f7ff ffbe 	bl	80036c8 <aggiorna_contatore>
	  	  HAL_Delay(1000);
 800374c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003750:	f006 fe86 	bl	800a460 <HAL_Delay>
	  	  aggiorna_contatore(&sharedValues);
 8003754:	e7f7      	b.n	8003746 <Proximity_Test+0x1a>
 8003756:	bf00      	nop
 8003758:	0801652c 	.word	0x0801652c
 800375c:	0801656c 	.word	0x0801656c
 8003760:	080165ac 	.word	0x080165ac
 8003764:	20003d74 	.word	0x20003d74

08003768 <stampaDewpoint>:
  }

}

//acquisisce il tasto e stampa su seriale il valore di rugiada calcolato
void stampaDewpoint(struct sharedValues_t *sv){
 8003768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800376a:	b08d      	sub	sp, #52	; 0x34
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]


		osSemaphoreAcquire(sv->mutex, portMAX_DELAY);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003776:	f04f 31ff 	mov.w	r1, #4294967295
 800377a:	4618      	mov	r0, r3
 800377c:	f00c fd82 	bl	8010284 <osSemaphoreAcquire>

		if(sv->enableDew==1){
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003786:	2b01      	cmp	r3, #1
 8003788:	d173      	bne.n	8003872 <stampaDewpoint+0x10a>
			int dewpoint;
			char msg_d[30] = "";
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	f107 0310 	add.w	r3, r7, #16
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	605a      	str	r2, [r3, #4]
 8003798:	609a      	str	r2, [r3, #8]
 800379a:	60da      	str	r2, [r3, #12]
 800379c:	611a      	str	r2, [r3, #16]
 800379e:	615a      	str	r2, [r3, #20]
 80037a0:	831a      	strh	r2, [r3, #24]
			dewpoint = pow(sv->humidity_val1/100, 0.125)*(112+(0.9*sv->temperature_val1))+(0.1*sv->temperature_val1)-112;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	4a3e      	ldr	r2, [pc, #248]	; (80038a0 <stampaDewpoint+0x138>)
 80037a8:	fb82 1203 	smull	r1, r2, r2, r3
 80037ac:	1152      	asrs	r2, r2, #5
 80037ae:	17db      	asrs	r3, r3, #31
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fc feb6 	bl	8000524 <__aeabi_i2d>
 80037b8:	4603      	mov	r3, r0
 80037ba:	460c      	mov	r4, r1
 80037bc:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8003888 <stampaDewpoint+0x120>
 80037c0:	ec44 3b10 	vmov	d0, r3, r4
 80037c4:	f011 f93a 	bl	8014a3c <pow>
 80037c8:	ec56 5b10 	vmov	r5, r6, d0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fc fea7 	bl	8000524 <__aeabi_i2d>
 80037d6:	a32e      	add	r3, pc, #184	; (adr r3, 8003890 <stampaDewpoint+0x128>)
 80037d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037dc:	f7fc ff0c 	bl	80005f8 <__aeabi_dmul>
 80037e0:	4603      	mov	r3, r0
 80037e2:	460c      	mov	r4, r1
 80037e4:	4618      	mov	r0, r3
 80037e6:	4621      	mov	r1, r4
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	4b2d      	ldr	r3, [pc, #180]	; (80038a4 <stampaDewpoint+0x13c>)
 80037ee:	f7fc fd4d 	bl	800028c <__adddf3>
 80037f2:	4603      	mov	r3, r0
 80037f4:	460c      	mov	r4, r1
 80037f6:	461a      	mov	r2, r3
 80037f8:	4623      	mov	r3, r4
 80037fa:	4628      	mov	r0, r5
 80037fc:	4631      	mov	r1, r6
 80037fe:	f7fc fefb 	bl	80005f8 <__aeabi_dmul>
 8003802:	4603      	mov	r3, r0
 8003804:	460c      	mov	r4, r1
 8003806:	4625      	mov	r5, r4
 8003808:	461c      	mov	r4, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f7fc fe88 	bl	8000524 <__aeabi_i2d>
 8003814:	a320      	add	r3, pc, #128	; (adr r3, 8003898 <stampaDewpoint+0x130>)
 8003816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381a:	f7fc feed 	bl	80005f8 <__aeabi_dmul>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4620      	mov	r0, r4
 8003824:	4629      	mov	r1, r5
 8003826:	f7fc fd31 	bl	800028c <__adddf3>
 800382a:	4603      	mov	r3, r0
 800382c:	460c      	mov	r4, r1
 800382e:	4618      	mov	r0, r3
 8003830:	4621      	mov	r1, r4
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <stampaDewpoint+0x13c>)
 8003838:	f7fc fd26 	bl	8000288 <__aeabi_dsub>
 800383c:	4603      	mov	r3, r0
 800383e:	460c      	mov	r4, r1
 8003840:	4618      	mov	r0, r3
 8003842:	4621      	mov	r1, r4
 8003844:	f7fd f988 	bl	8000b58 <__aeabi_d2iz>
 8003848:	4603      	mov	r3, r0
 800384a:	62fb      	str	r3, [r7, #44]	; 0x2c
			snprintf(msg_d,30," DEWPOINT = %d\n\r", dewpoint);
 800384c:	f107 000c 	add.w	r0, r7, #12
 8003850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003852:	4a15      	ldr	r2, [pc, #84]	; (80038a8 <stampaDewpoint+0x140>)
 8003854:	211e      	movs	r1, #30
 8003856:	f00f feb5 	bl	80135c4 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) msg_d, sizeof(msg_d), 1000);
 800385a:	f107 010c 	add.w	r1, r7, #12
 800385e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003862:	221e      	movs	r2, #30
 8003864:	4811      	ldr	r0, [pc, #68]	; (80038ac <stampaDewpoint+0x144>)
 8003866:	f00b fc1a 	bl	800f09e <HAL_UART_Transmit>
			sv->enableDew=0;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		}
		osSemaphoreRelease(sv->mutex);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003878:	4618      	mov	r0, r3
 800387a:	f00c fd69 	bl	8010350 <osSemaphoreRelease>


}
 800387e:	bf00      	nop
 8003880:	3734      	adds	r7, #52	; 0x34
 8003882:	46bd      	mov	sp, r7
 8003884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003886:	bf00      	nop
 8003888:	00000000 	.word	0x00000000
 800388c:	3fc00000 	.word	0x3fc00000
 8003890:	cccccccd 	.word	0xcccccccd
 8003894:	3feccccc 	.word	0x3feccccc
 8003898:	9999999a 	.word	0x9999999a
 800389c:	3fb99999 	.word	0x3fb99999
 80038a0:	51eb851f 	.word	0x51eb851f
 80038a4:	405c0000 	.word	0x405c0000
 80038a8:	080165ec 	.word	0x080165ec
 80038ac:	20003e6c 	.word	0x20003e6c

080038b0 <StartDewpointTask>:

void StartDewpointTask(void *arguments){
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
	/*USER CODE BEGIN StartDewpointTask*/
	/* Infinite loop */
	for(;;)
	{
		stampaDewpoint(&sharedValues);
 80038b8:	4803      	ldr	r0, [pc, #12]	; (80038c8 <StartDewpointTask+0x18>)
 80038ba:	f7ff ff55 	bl	8003768 <stampaDewpoint>
		 osDelay(500);
 80038be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80038c2:	f00c fc13 	bl	80100ec <osDelay>
		stampaDewpoint(&sharedValues);
 80038c6:	e7f7      	b.n	80038b8 <StartDewpointTask+0x8>
 80038c8:	20003d74 	.word	0x20003d74

080038cc <computeAndUpdate>:
	}
	/* USER CODE END StartDewpointTask */
}

//Faccio statistiche sui dati campionati e salvati da altri thread
void computeAndUpdate(struct sharedValues_t *sv){
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
	int i;

	osSemaphoreAcquire(sv->mutex, portMAX_DELAY);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038da:	f04f 31ff 	mov.w	r1, #4294967295
 80038de:	4618      	mov	r0, r3
 80038e0:	f00c fcd0 	bl	8010284 <osSemaphoreAcquire>
	if(sv->n_elements_temp==5){
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	2b05      	cmp	r3, #5
 80038ea:	d128      	bne.n	800393e <computeAndUpdate+0x72>
		sv->average_temerature=0;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	61da      	str	r2, [r3, #28]
		for(i=0;i<5;i++){
 80038f4:	2300      	movs	r3, #0
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	e011      	b.n	800391e <computeAndUpdate+0x52>
			sv->average_temerature = sv->average_temerature + sv->array_temp[i];
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	ed93 7a07 	vldr	s14, [r3, #28]
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	3302      	adds	r3, #2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	edd3 7a00 	vldr	s15, [r3]
 800390e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	edc3 7a07 	vstr	s15, [r3, #28]
		for(i=0;i<5;i++){
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	3301      	adds	r3, #1
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2b04      	cmp	r3, #4
 8003922:	ddea      	ble.n	80038fa <computeAndUpdate+0x2e>
		}

		sv->average_temerature = sv->average_temerature / 5;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	ed93 7a07 	vldr	s14, [r3, #28]
 800392a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800392e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	edc3 7a07 	vstr	s15, [r3, #28]
		sv->check_mean_temp=1;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	625a      	str	r2, [r3, #36]	; 0x24
	}


	if(sv->n_elements_pressure==5){
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003942:	2b05      	cmp	r3, #5
 8003944:	d128      	bne.n	8003998 <computeAndUpdate+0xcc>
		sv->average_pressure=0;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	66da      	str	r2, [r3, #108]	; 0x6c
		for(i=0;i<5;i++){
 800394e:	2300      	movs	r3, #0
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	e011      	b.n	8003978 <computeAndUpdate+0xac>
			sv->average_pressure = sv->average_pressure + sv->array_pressure[i];
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	3316      	adds	r3, #22
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	edd3 7a00 	vldr	s15, [r3]
 8003968:	ee77 7a27 	vadd.f32	s15, s14, s15
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
		for(i=0;i<5;i++){
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3301      	adds	r3, #1
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b04      	cmp	r3, #4
 800397c:	ddea      	ble.n	8003954 <computeAndUpdate+0x88>
		}
		sv->average_pressure = sv->average_pressure / 5;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8003984:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003988:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
		sv->check_mean_pressure=1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	675a      	str	r2, [r3, #116]	; 0x74
	}


	if(sv->n_elements_humidity==5){
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399c:	2b05      	cmp	r3, #5
 800399e:	d128      	bne.n	80039f2 <computeAndUpdate+0x126>
		sv->average_humidity=0;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	645a      	str	r2, [r3, #68]	; 0x44
		for(i=0;i<5;i++){
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	e011      	b.n	80039d2 <computeAndUpdate+0x106>
			sv->average_humidity = sv->average_humidity + sv->array_humidity[i];
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	330c      	adds	r3, #12
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	edd3 7a00 	vldr	s15, [r3]
 80039c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		for(i=0;i<5;i++){
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	3301      	adds	r3, #1
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	ddea      	ble.n	80039ae <computeAndUpdate+0xe2>
		}
		sv->average_humidity = sv->average_humidity / 5;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80039de:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80039e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		sv->check_mean_humidity=1;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	64da      	str	r2, [r3, #76]	; 0x4c
	}

	osSemaphoreRelease(sv->mutex);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f8:	4618      	mov	r0, r3
 80039fa:	f00c fca9 	bl	8010350 <osSemaphoreRelease>

}
 80039fe:	bf00      	nop
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <ComputeStatistics>:

void ComputeStatistics(void *arguments){
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]

	for(;;){
		computeAndUpdate(&sharedValues);
 8003a10:	4803      	ldr	r0, [pc, #12]	; (8003a20 <ComputeStatistics+0x18>)
 8003a12:	f7ff ff5b 	bl	80038cc <computeAndUpdate>

		osDelay(1000);
 8003a16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a1a:	f00c fb67 	bl	80100ec <osDelay>
		computeAndUpdate(&sharedValues);
 8003a1e:	e7f7      	b.n	8003a10 <ComputeStatistics+0x8>
 8003a20:	20003d74 	.word	0x20003d74

08003a24 <checkAndPrint>:
	}
}

//stampa valori sulla seria, quando disponibili stampa anche i valori statistici
void checkAndPrint(struct sharedValues_t *sv){
 8003a24:	b590      	push	{r4, r7, lr}
 8003a26:	b0a1      	sub	sp, #132	; 0x84
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	6078      	str	r0, [r7, #4]

	osSemaphoreAcquire(sv->mutex, portMAX_DELAY);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a32:	f04f 31ff 	mov.w	r1, #4294967295
 8003a36:	4618      	mov	r0, r3
 8003a38:	f00c fc24 	bl	8010284 <osSemaphoreAcquire>

	char msg[100] = "";
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	f107 030c 	add.w	r3, r7, #12
 8003a44:	2260      	movs	r2, #96	; 0x60
 8003a46:	2100      	movs	r1, #0
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f00f fd37 	bl	80134bc <memset>
	int i;
	float separa;
	int val1,val2;


	snprintf(msg,100,"Temperature = %d.%02d\n\r", sv->temperature_val1, sv->temperature_val2);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f107 0008 	add.w	r0, r7, #8
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	4a8f      	ldr	r2, [pc, #572]	; (8003c9c <checkAndPrint+0x278>)
 8003a60:	2164      	movs	r1, #100	; 0x64
 8003a62:	f00f fdaf 	bl	80135c4 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 10);
 8003a66:	f107 0108 	add.w	r1, r7, #8
 8003a6a:	230a      	movs	r3, #10
 8003a6c:	2264      	movs	r2, #100	; 0x64
 8003a6e:	488c      	ldr	r0, [pc, #560]	; (8003ca0 <checkAndPrint+0x27c>)
 8003a70:	f00b fb15 	bl	800f09e <HAL_UART_Transmit>

	snprintf(msg,100,"Humidity = %d.%02d\n\r", sv->humidity_val1, sv->humidity_val2);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	f107 0008 	add.w	r0, r7, #8
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	4613      	mov	r3, r2
 8003a84:	4a87      	ldr	r2, [pc, #540]	; (8003ca4 <checkAndPrint+0x280>)
 8003a86:	2164      	movs	r1, #100	; 0x64
 8003a88:	f00f fd9c 	bl	80135c4 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 1000);
 8003a8c:	f107 0108 	add.w	r1, r7, #8
 8003a90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a94:	2264      	movs	r2, #100	; 0x64
 8003a96:	4882      	ldr	r0, [pc, #520]	; (8003ca0 <checkAndPrint+0x27c>)
 8003a98:	f00b fb01 	bl	800f09e <HAL_UART_Transmit>

	snprintf(msg,100,"Pressure = %d.%02d\n\r", sv->pressure_val1, sv->pressure_val2);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa4:	f107 0008 	add.w	r0, r7, #8
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	4a7e      	ldr	r2, [pc, #504]	; (8003ca8 <checkAndPrint+0x284>)
 8003aae:	2164      	movs	r1, #100	; 0x64
 8003ab0:	f00f fd88 	bl	80135c4 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 1000);
 8003ab4:	f107 0108 	add.w	r1, r7, #8
 8003ab8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003abc:	2264      	movs	r2, #100	; 0x64
 8003abe:	4878      	ldr	r0, [pc, #480]	; (8003ca0 <checkAndPrint+0x27c>)
 8003ac0:	f00b faed 	bl	800f09e <HAL_UART_Transmit>

	if(sv->n_elements_temp==5 && sv->check_mean_temp==1 ){
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	2b05      	cmp	r3, #5
 8003aca:	d146      	bne.n	8003b5a <checkAndPrint+0x136>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d142      	bne.n	8003b5a <checkAndPrint+0x136>
		val1 = sv->average_temerature;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	edd3 7a07 	vldr	s15, [r3, #28]
 8003ada:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ade:	ee17 3a90 	vmov	r3, s15
 8003ae2:	677b      	str	r3, [r7, #116]	; 0x74
		separa = sv->average_temerature - val1;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	ed93 7a07 	vldr	s14, [r3, #28]
 8003aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aec:	ee07 3a90 	vmov	s15, r3
 8003af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003af8:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		val2 = trunc(separa * 100);
 8003afc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003b00:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8003cac <checkAndPrint+0x288>
 8003b04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b08:	ee17 0a90 	vmov	r0, s15
 8003b0c:	f7fc fd1c 	bl	8000548 <__aeabi_f2d>
 8003b10:	4603      	mov	r3, r0
 8003b12:	460c      	mov	r4, r1
 8003b14:	ec44 3b10 	vmov	d0, r3, r4
 8003b18:	f010 ff56 	bl	80149c8 <trunc>
 8003b1c:	ec54 3b10 	vmov	r3, r4, d0
 8003b20:	4618      	mov	r0, r3
 8003b22:	4621      	mov	r1, r4
 8003b24:	f7fd f818 	bl	8000b58 <__aeabi_d2iz>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	66fb      	str	r3, [r7, #108]	; 0x6c
		snprintf(msg,100,"Average Temperature = %d.%02d\n\r", val1, val2);
 8003b2c:	f107 0008 	add.w	r0, r7, #8
 8003b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b36:	4a5e      	ldr	r2, [pc, #376]	; (8003cb0 <checkAndPrint+0x28c>)
 8003b38:	2164      	movs	r1, #100	; 0x64
 8003b3a:	f00f fd43 	bl	80135c4 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 1000);
 8003b3e:	f107 0108 	add.w	r1, r7, #8
 8003b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b46:	2264      	movs	r2, #100	; 0x64
 8003b48:	4855      	ldr	r0, [pc, #340]	; (8003ca0 <checkAndPrint+0x27c>)
 8003b4a:	f00b faa8 	bl	800f09e <HAL_UART_Transmit>
		sv->n_elements_temp=0;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	621a      	str	r2, [r3, #32]
		sv->check_mean_temp=0;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if(sv->n_elements_humidity==5 && sv->check_mean_humidity==1){
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b5e:	2b05      	cmp	r3, #5
 8003b60:	d146      	bne.n	8003bf0 <checkAndPrint+0x1cc>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d142      	bne.n	8003bf0 <checkAndPrint+0x1cc>
		val1 = sv->average_humidity;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003b70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b74:	ee17 3a90 	vmov	r3, s15
 8003b78:	677b      	str	r3, [r7, #116]	; 0x74
		separa = sv->average_humidity - val1;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8003b80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b8e:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		val2 = trunc(separa * 100);
 8003b92:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003b96:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003cac <checkAndPrint+0x288>
 8003b9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b9e:	ee17 0a90 	vmov	r0, s15
 8003ba2:	f7fc fcd1 	bl	8000548 <__aeabi_f2d>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	460c      	mov	r4, r1
 8003baa:	ec44 3b10 	vmov	d0, r3, r4
 8003bae:	f010 ff0b 	bl	80149c8 <trunc>
 8003bb2:	ec54 3b10 	vmov	r3, r4, d0
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	4621      	mov	r1, r4
 8003bba:	f7fc ffcd 	bl	8000b58 <__aeabi_d2iz>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	66fb      	str	r3, [r7, #108]	; 0x6c
		snprintf(msg,100,"Average Humidity = %d.%02d\n\r", val1, val2);
 8003bc2:	f107 0008 	add.w	r0, r7, #8
 8003bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bcc:	4a39      	ldr	r2, [pc, #228]	; (8003cb4 <checkAndPrint+0x290>)
 8003bce:	2164      	movs	r1, #100	; 0x64
 8003bd0:	f00f fcf8 	bl	80135c4 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 1000);
 8003bd4:	f107 0108 	add.w	r1, r7, #8
 8003bd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bdc:	2264      	movs	r2, #100	; 0x64
 8003bde:	4830      	ldr	r0, [pc, #192]	; (8003ca0 <checkAndPrint+0x27c>)
 8003be0:	f00b fa5d 	bl	800f09e <HAL_UART_Transmit>
		sv->n_elements_humidity=0;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	649a      	str	r2, [r3, #72]	; 0x48
		sv->check_mean_humidity=0;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	64da      	str	r2, [r3, #76]	; 0x4c
	}

	if(sv->n_elements_pressure==5 && sv->check_mean_pressure==1){
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf4:	2b05      	cmp	r3, #5
 8003bf6:	d146      	bne.n	8003c86 <checkAndPrint+0x262>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d142      	bne.n	8003c86 <checkAndPrint+0x262>
		val1 = sv->average_pressure;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003c06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c0a:	ee17 3a90 	vmov	r3, s15
 8003c0e:	677b      	str	r3, [r7, #116]	; 0x74
		separa = sv->average_pressure - val1;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8003c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c18:	ee07 3a90 	vmov	s15, r3
 8003c1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c24:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		val2 = trunc(separa * 100);
 8003c28:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8003c2c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003cac <checkAndPrint+0x288>
 8003c30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c34:	ee17 0a90 	vmov	r0, s15
 8003c38:	f7fc fc86 	bl	8000548 <__aeabi_f2d>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	460c      	mov	r4, r1
 8003c40:	ec44 3b10 	vmov	d0, r3, r4
 8003c44:	f010 fec0 	bl	80149c8 <trunc>
 8003c48:	ec54 3b10 	vmov	r3, r4, d0
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	4621      	mov	r1, r4
 8003c50:	f7fc ff82 	bl	8000b58 <__aeabi_d2iz>
 8003c54:	4603      	mov	r3, r0
 8003c56:	66fb      	str	r3, [r7, #108]	; 0x6c
		snprintf(msg,100,"Average Pressure = %d.%02d\n\r", val1, val2);
 8003c58:	f107 0008 	add.w	r0, r7, #8
 8003c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c62:	4a15      	ldr	r2, [pc, #84]	; (8003cb8 <checkAndPrint+0x294>)
 8003c64:	2164      	movs	r1, #100	; 0x64
 8003c66:	f00f fcad 	bl	80135c4 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg, sizeof(msg), 1000);
 8003c6a:	f107 0108 	add.w	r1, r7, #8
 8003c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c72:	2264      	movs	r2, #100	; 0x64
 8003c74:	480a      	ldr	r0, [pc, #40]	; (8003ca0 <checkAndPrint+0x27c>)
 8003c76:	f00b fa12 	bl	800f09e <HAL_UART_Transmit>
		sv->n_elements_pressure=0;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	671a      	str	r2, [r3, #112]	; 0x70
		sv->check_mean_pressure=0;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	675a      	str	r2, [r3, #116]	; 0x74
	}
	osSemaphoreRelease(sv->mutex);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f00c fb5f 	bl	8010350 <osSemaphoreRelease>
}
 8003c92:	bf00      	nop
 8003c94:	377c      	adds	r7, #124	; 0x7c
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd90      	pop	{r4, r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	08016600 	.word	0x08016600
 8003ca0:	20003e6c 	.word	0x20003e6c
 8003ca4:	08016618 	.word	0x08016618
 8003ca8:	08016630 	.word	0x08016630
 8003cac:	42c80000 	.word	0x42c80000
 8003cb0:	08016648 	.word	0x08016648
 8003cb4:	08016668 	.word	0x08016668
 8003cb8:	08016688 	.word	0x08016688

08003cbc <SerialPrint>:


void SerialPrint(void *arguments){
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]


	for(;;){

		checkAndPrint(&sharedValues);
 8003cc4:	4803      	ldr	r0, [pc, #12]	; (8003cd4 <SerialPrint+0x18>)
 8003cc6:	f7ff fead 	bl	8003a24 <checkAndPrint>
		osDelay(2000);
 8003cca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003cce:	f00c fa0d 	bl	80100ec <osDelay>
		checkAndPrint(&sharedValues);
 8003cd2:	e7f7      	b.n	8003cc4 <SerialPrint+0x8>
 8003cd4:	20003d74 	.word	0x20003d74

08003cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003cdc:	bf00      	nop
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
	...

08003ce8 <HAL_GPIO_EXTI_Callback>:
}
#endif /* USE_FULL_ASSERT */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8003cf2:	88fb      	ldrh	r3, [r7, #6]
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d003      	beq.n	8003d00 <HAL_GPIO_EXTI_Callback+0x18>
 8003cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cfc:	d003      	beq.n	8003d06 <HAL_GPIO_EXTI_Callback+0x1e>
    	}
    }

    default:
    {
      break;
 8003cfe:	e00e      	b.n	8003d1e <HAL_GPIO_EXTI_Callback+0x36>
      SPI_WIFI_ISR();
 8003d00:	f7fe fbca 	bl	8002498 <SPI_WIFI_ISR>
      break;
 8003d04:	e00c      	b.n	8003d20 <HAL_GPIO_EXTI_Callback+0x38>
    	if (HAL_GPIO_ReadPin(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin) != GPIO_PIN_SET){
 8003d06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d0a:	4807      	ldr	r0, [pc, #28]	; (8003d28 <HAL_GPIO_EXTI_Callback+0x40>)
 8003d0c:	f007 f8c6 	bl	800ae9c <HAL_GPIO_ReadPin>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d003      	beq.n	8003d1e <HAL_GPIO_EXTI_Callback+0x36>
    		sharedValues.enableDew=1;
 8003d16:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <HAL_GPIO_EXTI_Callback+0x44>)
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      break;
 8003d1e:	bf00      	nop
    }
  }
}
 8003d20:	bf00      	nop
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	48000800 	.word	0x48000800
 8003d2c:	20003d74 	.word	0x20003d74

08003d30 <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8003d34:	4802      	ldr	r0, [pc, #8]	; (8003d40 <SPI3_IRQHandler+0x10>)
 8003d36:	f00a fc37 	bl	800e5a8 <HAL_SPI_IRQHandler>
}
 8003d3a:	bf00      	nop
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	200037fc 	.word	0x200037fc

08003d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d4a:	4b0f      	ldr	r3, [pc, #60]	; (8003d88 <HAL_MspInit+0x44>)
 8003d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d4e:	4a0e      	ldr	r2, [pc, #56]	; (8003d88 <HAL_MspInit+0x44>)
 8003d50:	f043 0301 	orr.w	r3, r3, #1
 8003d54:	6613      	str	r3, [r2, #96]	; 0x60
 8003d56:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <HAL_MspInit+0x44>)
 8003d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	607b      	str	r3, [r7, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d62:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <HAL_MspInit+0x44>)
 8003d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d66:	4a08      	ldr	r2, [pc, #32]	; (8003d88 <HAL_MspInit+0x44>)
 8003d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8003d6e:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <HAL_MspInit+0x44>)
 8003d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	40021000 	.word	0x40021000

08003d8c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08a      	sub	sp, #40	; 0x28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d94:	f107 0314 	add.w	r3, r7, #20
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	605a      	str	r2, [r3, #4]
 8003d9e:	609a      	str	r2, [r3, #8]
 8003da0:	60da      	str	r2, [r3, #12]
 8003da2:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8003da4:	4b18      	ldr	r3, [pc, #96]	; (8003e08 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d128      	bne.n	8003dfe <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003dac:	4b17      	ldr	r3, [pc, #92]	; (8003e0c <HAL_DFSDM_ChannelMspInit+0x80>)
 8003dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db0:	4a16      	ldr	r2, [pc, #88]	; (8003e0c <HAL_DFSDM_ChannelMspInit+0x80>)
 8003db2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003db6:	6613      	str	r3, [r2, #96]	; 0x60
 8003db8:	4b14      	ldr	r3, [pc, #80]	; (8003e0c <HAL_DFSDM_ChannelMspInit+0x80>)
 8003dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003dc4:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <HAL_DFSDM_ChannelMspInit+0x80>)
 8003dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc8:	4a10      	ldr	r2, [pc, #64]	; (8003e0c <HAL_DFSDM_ChannelMspInit+0x80>)
 8003dca:	f043 0310 	orr.w	r3, r3, #16
 8003dce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dd0:	4b0e      	ldr	r3, [pc, #56]	; (8003e0c <HAL_DFSDM_ChannelMspInit+0x80>)
 8003dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd4:	f003 0310 	and.w	r3, r3, #16
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8003ddc:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de2:	2302      	movs	r3, #2
 8003de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dea:	2300      	movs	r3, #0
 8003dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8003dee:	2306      	movs	r3, #6
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003df2:	f107 0314 	add.w	r3, r7, #20
 8003df6:	4619      	mov	r1, r3
 8003df8:	4805      	ldr	r0, [pc, #20]	; (8003e10 <HAL_DFSDM_ChannelMspInit+0x84>)
 8003dfa:	f006 fdb3 	bl	800a964 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8003dfe:	bf00      	nop
 8003e00:	3728      	adds	r7, #40	; 0x28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	2000088c 	.word	0x2000088c
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	48001000 	.word	0x48001000

08003e14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08a      	sub	sp, #40	; 0x28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e1c:	f107 0314 	add.w	r3, r7, #20
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	605a      	str	r2, [r3, #4]
 8003e26:	609a      	str	r2, [r3, #8]
 8003e28:	60da      	str	r2, [r3, #12]
 8003e2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a17      	ldr	r2, [pc, #92]	; (8003e90 <HAL_I2C_MspInit+0x7c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d128      	bne.n	8003e88 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e36:	4b17      	ldr	r3, [pc, #92]	; (8003e94 <HAL_I2C_MspInit+0x80>)
 8003e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3a:	4a16      	ldr	r2, [pc, #88]	; (8003e94 <HAL_I2C_MspInit+0x80>)
 8003e3c:	f043 0302 	orr.w	r3, r3, #2
 8003e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e42:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <HAL_I2C_MspInit+0x80>)
 8003e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8003e4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e54:	2312      	movs	r3, #18
 8003e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003e60:	2304      	movs	r3, #4
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e64:	f107 0314 	add.w	r3, r7, #20
 8003e68:	4619      	mov	r1, r3
 8003e6a:	480b      	ldr	r0, [pc, #44]	; (8003e98 <HAL_I2C_MspInit+0x84>)
 8003e6c:	f006 fd7a 	bl	800a964 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003e70:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <HAL_I2C_MspInit+0x80>)
 8003e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e74:	4a07      	ldr	r2, [pc, #28]	; (8003e94 <HAL_I2C_MspInit+0x80>)
 8003e76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e7a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_I2C_MspInit+0x80>)
 8003e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003e88:	bf00      	nop
 8003e8a:	3728      	adds	r7, #40	; 0x28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40005800 	.word	0x40005800
 8003e94:	40021000 	.word	0x40021000
 8003e98:	48000400 	.word	0x48000400

08003e9c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a0b      	ldr	r2, [pc, #44]	; (8003ed8 <HAL_I2C_MspDeInit+0x3c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d10f      	bne.n	8003ece <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8003eae:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <HAL_I2C_MspDeInit+0x40>)
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb2:	4a0a      	ldr	r2, [pc, #40]	; (8003edc <HAL_I2C_MspDeInit+0x40>)
 8003eb4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003eb8:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8003eba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ebe:	4808      	ldr	r0, [pc, #32]	; (8003ee0 <HAL_I2C_MspDeInit+0x44>)
 8003ec0:	f006 fef8 	bl	800acb4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8003ec4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ec8:	4805      	ldr	r0, [pc, #20]	; (8003ee0 <HAL_I2C_MspDeInit+0x44>)
 8003eca:	f006 fef3 	bl	800acb4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8003ece:	bf00      	nop
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40005800 	.word	0x40005800
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	48000400 	.word	0x48000400

08003ee4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08a      	sub	sp, #40	; 0x28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eec:	f107 0314 	add.w	r3, r7, #20
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	605a      	str	r2, [r3, #4]
 8003ef6:	609a      	str	r2, [r3, #8]
 8003ef8:	60da      	str	r2, [r3, #12]
 8003efa:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a17      	ldr	r2, [pc, #92]	; (8003f60 <HAL_QSPI_MspInit+0x7c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d128      	bne.n	8003f58 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8003f06:	4b17      	ldr	r3, [pc, #92]	; (8003f64 <HAL_QSPI_MspInit+0x80>)
 8003f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f0a:	4a16      	ldr	r2, [pc, #88]	; (8003f64 <HAL_QSPI_MspInit+0x80>)
 8003f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f10:	6513      	str	r3, [r2, #80]	; 0x50
 8003f12:	4b14      	ldr	r3, [pc, #80]	; (8003f64 <HAL_QSPI_MspInit+0x80>)
 8003f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1a:	613b      	str	r3, [r7, #16]
 8003f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f1e:	4b11      	ldr	r3, [pc, #68]	; (8003f64 <HAL_QSPI_MspInit+0x80>)
 8003f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f22:	4a10      	ldr	r2, [pc, #64]	; (8003f64 <HAL_QSPI_MspInit+0x80>)
 8003f24:	f043 0310 	orr.w	r3, r3, #16
 8003f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f2a:	4b0e      	ldr	r3, [pc, #56]	; (8003f64 <HAL_QSPI_MspInit+0x80>)
 8003f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f2e:	f003 0310 	and.w	r3, r3, #16
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8003f36:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8003f3a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f44:	2303      	movs	r3, #3
 8003f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003f48:	230a      	movs	r3, #10
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f4c:	f107 0314 	add.w	r3, r7, #20
 8003f50:	4619      	mov	r1, r3
 8003f52:	4805      	ldr	r0, [pc, #20]	; (8003f68 <HAL_QSPI_MspInit+0x84>)
 8003f54:	f006 fd06 	bl	800a964 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003f58:	bf00      	nop
 8003f5a:	3728      	adds	r7, #40	; 0x28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	a0001000 	.word	0xa0001000
 8003f64:	40021000 	.word	0x40021000
 8003f68:	48001000 	.word	0x48001000

08003f6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08a      	sub	sp, #40	; 0x28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f74:	f107 0314 	add.w	r3, r7, #20
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	605a      	str	r2, [r3, #4]
 8003f7e:	609a      	str	r2, [r3, #8]
 8003f80:	60da      	str	r2, [r3, #12]
 8003f82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a17      	ldr	r2, [pc, #92]	; (8003fe8 <HAL_SPI_MspInit+0x7c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d128      	bne.n	8003fe0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003f8e:	4b17      	ldr	r3, [pc, #92]	; (8003fec <HAL_SPI_MspInit+0x80>)
 8003f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f92:	4a16      	ldr	r2, [pc, #88]	; (8003fec <HAL_SPI_MspInit+0x80>)
 8003f94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f98:	6593      	str	r3, [r2, #88]	; 0x58
 8003f9a:	4b14      	ldr	r3, [pc, #80]	; (8003fec <HAL_SPI_MspInit+0x80>)
 8003f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fa2:	613b      	str	r3, [r7, #16]
 8003fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fa6:	4b11      	ldr	r3, [pc, #68]	; (8003fec <HAL_SPI_MspInit+0x80>)
 8003fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003faa:	4a10      	ldr	r2, [pc, #64]	; (8003fec <HAL_SPI_MspInit+0x80>)
 8003fac:	f043 0304 	orr.w	r3, r3, #4
 8003fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fb2:	4b0e      	ldr	r3, [pc, #56]	; (8003fec <HAL_SPI_MspInit+0x80>)
 8003fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8003fbe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003fd0:	2306      	movs	r3, #6
 8003fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fd4:	f107 0314 	add.w	r3, r7, #20
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4805      	ldr	r0, [pc, #20]	; (8003ff0 <HAL_SPI_MspInit+0x84>)
 8003fdc:	f006 fcc2 	bl	800a964 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003fe0:	bf00      	nop
 8003fe2:	3728      	adds	r7, #40	; 0x28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40003c00 	.word	0x40003c00
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	48000800 	.word	0x48000800

08003ff4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a08      	ldr	r2, [pc, #32]	; (8004024 <HAL_SPI_MspDeInit+0x30>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d10a      	bne.n	800401c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8004006:	4b08      	ldr	r3, [pc, #32]	; (8004028 <HAL_SPI_MspDeInit+0x34>)
 8004008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400a:	4a07      	ldr	r2, [pc, #28]	; (8004028 <HAL_SPI_MspDeInit+0x34>)
 800400c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004010:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8004012:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8004016:	4805      	ldr	r0, [pc, #20]	; (800402c <HAL_SPI_MspDeInit+0x38>)
 8004018:	f006 fe4c 	bl	800acb4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 800401c:	bf00      	nop
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40003c00 	.word	0x40003c00
 8004028:	40021000 	.word	0x40021000
 800402c:	48000800 	.word	0x48000800

08004030 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08c      	sub	sp, #48	; 0x30
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004038:	f107 031c 	add.w	r3, r7, #28
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	605a      	str	r2, [r3, #4]
 8004042:	609a      	str	r2, [r3, #8]
 8004044:	60da      	str	r2, [r3, #12]
 8004046:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a2e      	ldr	r2, [pc, #184]	; (8004108 <HAL_UART_MspInit+0xd8>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d128      	bne.n	80040a4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004052:	4b2e      	ldr	r3, [pc, #184]	; (800410c <HAL_UART_MspInit+0xdc>)
 8004054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004056:	4a2d      	ldr	r2, [pc, #180]	; (800410c <HAL_UART_MspInit+0xdc>)
 8004058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800405c:	6613      	str	r3, [r2, #96]	; 0x60
 800405e:	4b2b      	ldr	r3, [pc, #172]	; (800410c <HAL_UART_MspInit+0xdc>)
 8004060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004066:	61bb      	str	r3, [r7, #24]
 8004068:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800406a:	4b28      	ldr	r3, [pc, #160]	; (800410c <HAL_UART_MspInit+0xdc>)
 800406c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406e:	4a27      	ldr	r2, [pc, #156]	; (800410c <HAL_UART_MspInit+0xdc>)
 8004070:	f043 0302 	orr.w	r3, r3, #2
 8004074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004076:	4b25      	ldr	r3, [pc, #148]	; (800410c <HAL_UART_MspInit+0xdc>)
 8004078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8004082:	23c0      	movs	r3, #192	; 0xc0
 8004084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004086:	2302      	movs	r3, #2
 8004088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408a:	2300      	movs	r3, #0
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800408e:	2303      	movs	r3, #3
 8004090:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004092:	2307      	movs	r3, #7
 8004094:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004096:	f107 031c 	add.w	r3, r7, #28
 800409a:	4619      	mov	r1, r3
 800409c:	481c      	ldr	r0, [pc, #112]	; (8004110 <HAL_UART_MspInit+0xe0>)
 800409e:	f006 fc61 	bl	800a964 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80040a2:	e02d      	b.n	8004100 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a1a      	ldr	r2, [pc, #104]	; (8004114 <HAL_UART_MspInit+0xe4>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d128      	bne.n	8004100 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80040ae:	4b17      	ldr	r3, [pc, #92]	; (800410c <HAL_UART_MspInit+0xdc>)
 80040b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b2:	4a16      	ldr	r2, [pc, #88]	; (800410c <HAL_UART_MspInit+0xdc>)
 80040b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040b8:	6593      	str	r3, [r2, #88]	; 0x58
 80040ba:	4b14      	ldr	r3, [pc, #80]	; (800410c <HAL_UART_MspInit+0xdc>)
 80040bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040c2:	613b      	str	r3, [r7, #16]
 80040c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040c6:	4b11      	ldr	r3, [pc, #68]	; (800410c <HAL_UART_MspInit+0xdc>)
 80040c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ca:	4a10      	ldr	r2, [pc, #64]	; (800410c <HAL_UART_MspInit+0xdc>)
 80040cc:	f043 0308 	orr.w	r3, r3, #8
 80040d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040d2:	4b0e      	ldr	r3, [pc, #56]	; (800410c <HAL_UART_MspInit+0xdc>)
 80040d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80040de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80040e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e4:	2302      	movs	r3, #2
 80040e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ec:	2303      	movs	r3, #3
 80040ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80040f0:	2307      	movs	r3, #7
 80040f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040f4:	f107 031c 	add.w	r3, r7, #28
 80040f8:	4619      	mov	r1, r3
 80040fa:	4807      	ldr	r0, [pc, #28]	; (8004118 <HAL_UART_MspInit+0xe8>)
 80040fc:	f006 fc32 	bl	800a964 <HAL_GPIO_Init>
}
 8004100:	bf00      	nop
 8004102:	3730      	adds	r7, #48	; 0x30
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40013800 	.word	0x40013800
 800410c:	40021000 	.word	0x40021000
 8004110:	48000400 	.word	0x48000400
 8004114:	40004800 	.word	0x40004800
 8004118:	48000c00 	.word	0x48000c00

0800411c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b08a      	sub	sp, #40	; 0x28
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004124:	f107 0314 	add.w	r3, r7, #20
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	605a      	str	r2, [r3, #4]
 800412e:	609a      	str	r2, [r3, #8]
 8004130:	60da      	str	r2, [r3, #12]
 8004132:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800413c:	d154      	bne.n	80041e8 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800413e:	4b2c      	ldr	r3, [pc, #176]	; (80041f0 <HAL_PCD_MspInit+0xd4>)
 8004140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004142:	4a2b      	ldr	r2, [pc, #172]	; (80041f0 <HAL_PCD_MspInit+0xd4>)
 8004144:	f043 0301 	orr.w	r3, r3, #1
 8004148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800414a:	4b29      	ldr	r3, [pc, #164]	; (80041f0 <HAL_PCD_MspInit+0xd4>)
 800414c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	613b      	str	r3, [r7, #16]
 8004154:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8004156:	f44f 7300 	mov.w	r3, #512	; 0x200
 800415a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800415c:	2300      	movs	r3, #0
 800415e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004160:	2300      	movs	r3, #0
 8004162:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004164:	f107 0314 	add.w	r3, r7, #20
 8004168:	4619      	mov	r1, r3
 800416a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800416e:	f006 fbf9 	bl	800a964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8004172:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004178:	2302      	movs	r3, #2
 800417a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417c:	2300      	movs	r3, #0
 800417e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004180:	2303      	movs	r3, #3
 8004182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004184:	230a      	movs	r3, #10
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004188:	f107 0314 	add.w	r3, r7, #20
 800418c:	4619      	mov	r1, r3
 800418e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004192:	f006 fbe7 	bl	800a964 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004196:	4b16      	ldr	r3, [pc, #88]	; (80041f0 <HAL_PCD_MspInit+0xd4>)
 8004198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800419a:	4a15      	ldr	r2, [pc, #84]	; (80041f0 <HAL_PCD_MspInit+0xd4>)
 800419c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041a2:	4b13      	ldr	r3, [pc, #76]	; (80041f0 <HAL_PCD_MspInit+0xd4>)
 80041a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ae:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <HAL_PCD_MspInit+0xd4>)
 80041b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d114      	bne.n	80041e4 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ba:	4b0d      	ldr	r3, [pc, #52]	; (80041f0 <HAL_PCD_MspInit+0xd4>)
 80041bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041be:	4a0c      	ldr	r2, [pc, #48]	; (80041f0 <HAL_PCD_MspInit+0xd4>)
 80041c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c4:	6593      	str	r3, [r2, #88]	; 0x58
 80041c6:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <HAL_PCD_MspInit+0xd4>)
 80041c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ce:	60bb      	str	r3, [r7, #8]
 80041d0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80041d2:	f008 f877 	bl	800c2c4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d6:	4b06      	ldr	r3, [pc, #24]	; (80041f0 <HAL_PCD_MspInit+0xd4>)
 80041d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041da:	4a05      	ldr	r2, [pc, #20]	; (80041f0 <HAL_PCD_MspInit+0xd4>)
 80041dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e0:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80041e2:	e001      	b.n	80041e8 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80041e4:	f008 f86e 	bl	800c2c4 <HAL_PWREx_EnableVddUSB>
}
 80041e8:	bf00      	nop
 80041ea:	3728      	adds	r7, #40	; 0x28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40021000 	.word	0x40021000

080041f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80041f8:	bf00      	nop
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004202:	b480      	push	{r7}
 8004204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004206:	e7fe      	b.n	8004206 <HardFault_Handler+0x4>

08004208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800420c:	e7fe      	b.n	800420c <MemManage_Handler+0x4>

0800420e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800420e:	b480      	push	{r7}
 8004210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004212:	e7fe      	b.n	8004212 <BusFault_Handler+0x4>

08004214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004218:	e7fe      	b.n	8004218 <UsageFault_Handler+0x4>

0800421a <DebugMon_Handler>:
*/
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800421a:	b480      	push	{r7}
 800421c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800421e:	bf00      	nop
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800422c:	f006 f8f8 	bl	800a420 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004230:	f00d ffc4 	bl	80121bc <xTaskGetSchedulerState>
 8004234:	4603      	mov	r3, r0
 8004236:	2b01      	cmp	r3, #1
 8004238:	d001      	beq.n	800423e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800423a:	f00e fe95 	bl	8012f68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800423e:	bf00      	nop
 8004240:	bd80      	pop	{r7, pc}

08004242 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8004246:	2020      	movs	r0, #32
 8004248:	f006 fe72 	bl	800af30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800424c:	2040      	movs	r0, #64	; 0x40
 800424e:	f006 fe6f 	bl	800af30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004252:	2080      	movs	r0, #128	; 0x80
 8004254:	f006 fe6c 	bl	800af30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004258:	f44f 7080 	mov.w	r0, #256	; 0x100
 800425c:	f006 fe68 	bl	800af30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004260:	bf00      	nop
 8004262:	bd80      	pop	{r7, pc}

08004264 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI1_IRQHandler(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004268:	2002      	movs	r0, #2
 800426a:	f006 fe61 	bl	800af30 <HAL_GPIO_EXTI_IRQHandler>
}
 800426e:	bf00      	nop
 8004270:	bd80      	pop	{r7, pc}

08004272 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004276:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800427a:	f006 fe59 	bl	800af30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800427e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004282:	f006 fe55 	bl	800af30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004286:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800428a:	f006 fe51 	bl	800af30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800428e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004292:	f006 fe4d 	bl	800af30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004296:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800429a:	f006 fe49 	bl	800af30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800429e:	bf00      	nop
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b086      	sub	sp, #24
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ae:	2300      	movs	r3, #0
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	e00a      	b.n	80042ca <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80042b4:	f3af 8000 	nop.w
 80042b8:	4601      	mov	r1, r0
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	60ba      	str	r2, [r7, #8]
 80042c0:	b2ca      	uxtb	r2, r1
 80042c2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	3301      	adds	r3, #1
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	dbf0      	blt.n	80042b4 <_read+0x12>
	}

return len;
 80042d2:	687b      	ldr	r3, [r7, #4]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042e8:	2300      	movs	r3, #0
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	e009      	b.n	8004302 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	60ba      	str	r2, [r7, #8]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fe fabe 	bl	8002878 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	3301      	adds	r3, #1
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	429a      	cmp	r2, r3
 8004308:	dbf1      	blt.n	80042ee <_write+0x12>
	}
	return len;
 800430a:	687b      	ldr	r3, [r7, #4]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3718      	adds	r7, #24
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <_close>:

int _close(int file)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
	return -1;
 800431c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004320:	4618      	mov	r0, r3
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800433c:	605a      	str	r2, [r3, #4]
	return 0;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <_isatty>:

int _isatty(int file)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
	return 1;
 8004354:	2301      	movs	r3, #1
}
 8004356:	4618      	mov	r0, r3
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004362:	b480      	push	{r7}
 8004364:	b085      	sub	sp, #20
 8004366:	af00      	add	r7, sp, #0
 8004368:	60f8      	str	r0, [r7, #12]
 800436a:	60b9      	str	r1, [r7, #8]
 800436c:	607a      	str	r2, [r7, #4]
	return 0;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004384:	4a14      	ldr	r2, [pc, #80]	; (80043d8 <_sbrk+0x5c>)
 8004386:	4b15      	ldr	r3, [pc, #84]	; (80043dc <_sbrk+0x60>)
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004390:	4b13      	ldr	r3, [pc, #76]	; (80043e0 <_sbrk+0x64>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d102      	bne.n	800439e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004398:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <_sbrk+0x64>)
 800439a:	4a12      	ldr	r2, [pc, #72]	; (80043e4 <_sbrk+0x68>)
 800439c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800439e:	4b10      	ldr	r3, [pc, #64]	; (80043e0 <_sbrk+0x64>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4413      	add	r3, r2
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d207      	bcs.n	80043bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043ac:	f00f f842 	bl	8013434 <__errno>
 80043b0:	4602      	mov	r2, r0
 80043b2:	230c      	movs	r3, #12
 80043b4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80043b6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ba:	e009      	b.n	80043d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043bc:	4b08      	ldr	r3, [pc, #32]	; (80043e0 <_sbrk+0x64>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043c2:	4b07      	ldr	r3, [pc, #28]	; (80043e0 <_sbrk+0x64>)
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4413      	add	r3, r2
 80043ca:	4a05      	ldr	r2, [pc, #20]	; (80043e0 <_sbrk+0x64>)
 80043cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043ce:	68fb      	ldr	r3, [r7, #12]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	20018000 	.word	0x20018000
 80043dc:	00000400 	.word	0x00000400
 80043e0:	20000890 	.word	0x20000890
 80043e4:	20004990 	.word	0x20004990

080043e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043ec:	4b17      	ldr	r3, [pc, #92]	; (800444c <SystemInit+0x64>)
 80043ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f2:	4a16      	ldr	r2, [pc, #88]	; (800444c <SystemInit+0x64>)
 80043f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80043fc:	4b14      	ldr	r3, [pc, #80]	; (8004450 <SystemInit+0x68>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a13      	ldr	r2, [pc, #76]	; (8004450 <SystemInit+0x68>)
 8004402:	f043 0301 	orr.w	r3, r3, #1
 8004406:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004408:	4b11      	ldr	r3, [pc, #68]	; (8004450 <SystemInit+0x68>)
 800440a:	2200      	movs	r2, #0
 800440c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800440e:	4b10      	ldr	r3, [pc, #64]	; (8004450 <SystemInit+0x68>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a0f      	ldr	r2, [pc, #60]	; (8004450 <SystemInit+0x68>)
 8004414:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004418:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800441c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800441e:	4b0c      	ldr	r3, [pc, #48]	; (8004450 <SystemInit+0x68>)
 8004420:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004424:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004426:	4b0a      	ldr	r3, [pc, #40]	; (8004450 <SystemInit+0x68>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a09      	ldr	r2, [pc, #36]	; (8004450 <SystemInit+0x68>)
 800442c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004430:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004432:	4b07      	ldr	r3, [pc, #28]	; (8004450 <SystemInit+0x68>)
 8004434:	2200      	movs	r2, #0
 8004436:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004438:	4b04      	ldr	r3, [pc, #16]	; (800444c <SystemInit+0x64>)
 800443a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800443e:	609a      	str	r2, [r3, #8]
#endif
}
 8004440:	bf00      	nop
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	e000ed00 	.word	0xe000ed00
 8004450:	40021000 	.word	0x40021000

08004454 <VL53L0X_GetDeviceInfo>:

}

VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev,
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800445e:	2300      	movs	r3, #0
 8004460:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 8004462:	6839      	ldr	r1, [r7, #0]
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f004 fdfb 	bl	8009060 <VL53L0X_get_device_info>
 800446a:	4603      	mov	r3, r0
 800446c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800446e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b084      	sub	sp, #16
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004484:	2300      	movs	r3, #0
 8004486:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8004488:	6839      	ldr	r1, [r7, #0]
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f001 fc6f 	bl	8005d6e <VL53L0X_get_offset_calibration_data_micro_meter>
 8004490:	4603      	mov	r3, r0
 8004492:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8004494:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80044a0:	b5b0      	push	{r4, r5, r7, lr}
 80044a2:	b094      	sub	sp, #80	; 0x50
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044a8:	2300      	movs	r3, #0
 80044aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80044ae:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d107      	bne.n	80044c6 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80044b6:	2200      	movs	r2, #0
 80044b8:	2188      	movs	r1, #136	; 0x88
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f004 ff90 	bl	80093e0 <VL53L0X_WrByte>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044d4:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80044de:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a71      	ldr	r2, [pc, #452]	; (80046ac <VL53L0X_DataInit+0x20c>)
 80044e6:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a70      	ldr	r2, [pc, #448]	; (80046b0 <VL53L0X_DataInit+0x210>)
 80044ee:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80044f8:	f107 0308 	add.w	r3, r7, #8
 80044fc:	4619      	mov	r1, r3
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fa5a 	bl	80049b8 <VL53L0X_GetDeviceParameters>
 8004504:	4603      	mov	r3, r0
 8004506:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (Status == VL53L0X_ERROR_NONE) {
 800450a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800450e:	2b00      	cmp	r3, #0
 8004510:	d112      	bne.n	8004538 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8004512:	2300      	movs	r3, #0
 8004514:	723b      	strb	r3, [r7, #8]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8004516:	2300      	movs	r3, #0
 8004518:	727b      	strb	r3, [r7, #9]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f103 0410 	add.w	r4, r3, #16
 8004520:	f107 0508 	add.w	r5, r7, #8
 8004524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800452a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800452c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800452e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004530:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004534:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2264      	movs	r2, #100	; 0x64
 800453c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004546:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004550:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800455a:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004566:	2300      	movs	r3, #0
 8004568:	64bb      	str	r3, [r7, #72]	; 0x48
 800456a:	e014      	b.n	8004596 <VL53L0X_DataInit+0xf6>
		if (Status == VL53L0X_ERROR_NONE)
 800456c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004570:	2b00      	cmp	r3, #0
 8004572:	d114      	bne.n	800459e <VL53L0X_DataInit+0xfe>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8004574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004576:	b29b      	uxth	r3, r3
 8004578:	2201      	movs	r2, #1
 800457a:	4619      	mov	r1, r3
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fd83 	bl	8005088 <VL53L0X_SetLimitCheckEnable>
 8004582:	4603      	mov	r3, r0
 8004584:	461a      	mov	r2, r3
 8004586:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800458a:	4313      	orrs	r3, r2
 800458c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004592:	3301      	adds	r3, #1
 8004594:	64bb      	str	r3, [r7, #72]	; 0x48
 8004596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004598:	2b05      	cmp	r3, #5
 800459a:	dde7      	ble.n	800456c <VL53L0X_DataInit+0xcc>
 800459c:	e000      	b.n	80045a0 <VL53L0X_DataInit+0x100>
		else
			break;
 800459e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80045a0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d107      	bne.n	80045b8 <VL53L0X_DataInit+0x118>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80045a8:	2200      	movs	r2, #0
 80045aa:	2102      	movs	r1, #2
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 fd6b 	bl	8005088 <VL53L0X_SetLimitCheckEnable>
 80045b2:	4603      	mov	r3, r0
 80045b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80045b8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d107      	bne.n	80045d0 <VL53L0X_DataInit+0x130>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80045c0:	2200      	movs	r2, #0
 80045c2:	2103      	movs	r1, #3
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 fd5f 	bl	8005088 <VL53L0X_SetLimitCheckEnable>
 80045ca:	4603      	mov	r3, r0
 80045cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80045d0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d107      	bne.n	80045e8 <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80045d8:	2200      	movs	r2, #0
 80045da:	2104      	movs	r1, #4
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fd53 	bl	8005088 <VL53L0X_SetLimitCheckEnable>
 80045e2:	4603      	mov	r3, r0
 80045e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80045e8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d107      	bne.n	8004600 <VL53L0X_DataInit+0x160>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80045f0:	2200      	movs	r2, #0
 80045f2:	2105      	movs	r1, #5
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 fd47 	bl	8005088 <VL53L0X_SetLimitCheckEnable>
 80045fa:	4603      	mov	r3, r0
 80045fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8004600:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004604:	2b00      	cmp	r3, #0
 8004606:	d108      	bne.n	800461a <VL53L0X_DataInit+0x17a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004608:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800460c:	2100      	movs	r1, #0
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fdea 	bl	80051e8 <VL53L0X_SetLimitCheckValue>
 8004614:	4603      	mov	r3, r0
 8004616:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800461a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800461e:	2b00      	cmp	r3, #0
 8004620:	d108      	bne.n	8004634 <VL53L0X_DataInit+0x194>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004622:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004626:	2101      	movs	r1, #1
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 fddd 	bl	80051e8 <VL53L0X_SetLimitCheckValue>
 800462e:	4603      	mov	r3, r0
 8004630:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004634:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004638:	2b00      	cmp	r3, #0
 800463a:	d108      	bne.n	800464e <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800463c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8004640:	2102      	movs	r1, #2
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fdd0 	bl	80051e8 <VL53L0X_SetLimitCheckValue>
 8004648:	4603      	mov	r3, r0
 800464a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800464e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004652:	2b00      	cmp	r3, #0
 8004654:	d107      	bne.n	8004666 <VL53L0X_DataInit+0x1c6>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004656:	2200      	movs	r2, #0
 8004658:	2103      	movs	r1, #3
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fdc4 	bl	80051e8 <VL53L0X_SetLimitCheckValue>
 8004660:	4603      	mov	r3, r0
 8004662:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004666:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10f      	bne.n	800468e <VL53L0X_DataInit+0x1ee>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	22ff      	movs	r2, #255	; 0xff
 8004672:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004676:	22ff      	movs	r2, #255	; 0xff
 8004678:	2101      	movs	r1, #1
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f004 feb0 	bl	80093e0 <VL53L0X_WrByte>
 8004680:	4603      	mov	r3, r0
 8004682:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800468e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004692:	2b00      	cmp	r3, #0
 8004694:	d103      	bne.n	800469e <VL53L0X_DataInit+0x1fe>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800469e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3750      	adds	r7, #80	; 0x50
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bdb0      	pop	{r4, r5, r7, pc}
 80046aa:	bf00      	nop
 80046ac:	00016b85 	.word	0x00016b85
 80046b0:	000970a4 	.word	0x000970a4

080046b4 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80046b4:	b5b0      	push	{r4, r5, r7, lr}
 80046b6:	b09e      	sub	sp, #120	; 0x78
 80046b8:	af02      	add	r7, sp, #8
 80046ba:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80046bc:	2300      	movs	r3, #0
 80046be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80046c2:	f107 031c 	add.w	r3, r7, #28
 80046c6:	2240      	movs	r2, #64	; 0x40
 80046c8:	2100      	movs	r1, #0
 80046ca:	4618      	mov	r0, r3
 80046cc:	f00e fef6 	bl	80134bc <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80046d0:	2300      	movs	r3, #0
 80046d2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80046d4:	2300      	movs	r3, #0
 80046d6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80046de:	2300      	movs	r3, #0
 80046e0:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80046e6:	2300      	movs	r3, #0
 80046e8:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80046ea:	2300      	movs	r3, #0
 80046ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	FixPoint1616_t seqTimeoutMilliSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80046f0:	2101      	movs	r1, #1
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f002 fa8e 	bl	8006c14 <VL53L0X_get_info_from_device>
 80046f8:	4603      	mov	r3, r0
 80046fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8004704:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800470c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8004710:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004714:	2b01      	cmp	r3, #1
 8004716:	d80d      	bhi.n	8004734 <VL53L0X_StaticInit+0x80>
 8004718:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800471c:	2b01      	cmp	r3, #1
 800471e:	d102      	bne.n	8004726 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8004720:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004722:	2b20      	cmp	r3, #32
 8004724:	d806      	bhi.n	8004734 <VL53L0X_StaticInit+0x80>
 8004726:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10e      	bne.n	800474c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800472e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004730:	2b0c      	cmp	r3, #12
 8004732:	d90b      	bls.n	800474c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8004734:	f107 0218 	add.w	r2, r7, #24
 8004738:	f107 0314 	add.w	r3, r7, #20
 800473c:	4619      	mov	r1, r3
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f001 fd10 	bl	8006164 <VL53L0X_perform_ref_spad_management>
 8004744:	4603      	mov	r3, r0
 8004746:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800474a:	e009      	b.n	8004760 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800474c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004750:	461a      	mov	r2, r3
 8004752:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f001 ff11 	bl	800657c <VL53L0X_set_reference_spads>
 800475a:	4603      	mov	r3, r0
 800475c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8004760:	4b94      	ldr	r3, [pc, #592]	; (80049b4 <VL53L0X_StaticInit+0x300>)
 8004762:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8004764:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10f      	bne.n	800478c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8004772:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8004776:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800477a:	2b00      	cmp	r3, #0
 800477c:	d104      	bne.n	8004788 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8004784:	66bb      	str	r3, [r7, #104]	; 0x68
 8004786:	e001      	b.n	800478c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8004788:	4b8a      	ldr	r3, [pc, #552]	; (80049b4 <VL53L0X_StaticInit+0x300>)
 800478a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800478c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004790:	2b00      	cmp	r3, #0
 8004792:	d106      	bne.n	80047a2 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8004794:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f003 fde4 	bl	8008364 <VL53L0X_load_tuning_settings>
 800479c:	4603      	mov	r3, r0
 800479e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80047a2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10a      	bne.n	80047c0 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80047aa:	2300      	movs	r3, #0
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	2304      	movs	r3, #4
 80047b0:	2200      	movs	r2, #0
 80047b2:	2100      	movs	r1, #0
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f001 f909 	bl	80059cc <VL53L0X_SetGpioConfig>
 80047ba:	4603      	mov	r3, r0
 80047bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80047c0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d121      	bne.n	800480c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80047c8:	2201      	movs	r2, #1
 80047ca:	21ff      	movs	r1, #255	; 0xff
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f004 fe07 	bl	80093e0 <VL53L0X_WrByte>
 80047d2:	4603      	mov	r3, r0
 80047d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80047d8:	f107 031a 	add.w	r3, r7, #26
 80047dc:	461a      	mov	r2, r3
 80047de:	2184      	movs	r1, #132	; 0x84
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f004 fd89 	bl	80092f8 <VL53L0X_RdWord>
 80047e6:	4603      	mov	r3, r0
 80047e8:	461a      	mov	r2, r3
 80047ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80047f4:	2200      	movs	r2, #0
 80047f6:	21ff      	movs	r1, #255	; 0xff
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f004 fdf1 	bl	80093e0 <VL53L0X_WrByte>
 80047fe:	4603      	mov	r3, r0
 8004800:	461a      	mov	r2, r3
 8004802:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004806:	4313      	orrs	r3, r2
 8004808:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800480c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004810:	2b00      	cmp	r3, #0
 8004812:	d105      	bne.n	8004820 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8004814:	8b7b      	ldrh	r3, [r7, #26]
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	461a      	mov	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8004820:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004824:	2b00      	cmp	r3, #0
 8004826:	d108      	bne.n	800483a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004828:	f107 031c 	add.w	r3, r7, #28
 800482c:	4619      	mov	r1, r3
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f8c2 	bl	80049b8 <VL53L0X_GetDeviceParameters>
 8004834:	4603      	mov	r3, r0
 8004836:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800483a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800483e:	2b00      	cmp	r3, #0
 8004840:	d110      	bne.n	8004864 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8004842:	f107 0319 	add.w	r3, r7, #25
 8004846:	4619      	mov	r1, r3
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f9a0 	bl	8004b8e <VL53L0X_GetFractionEnable>
 800484e:	4603      	mov	r3, r0
 8004850:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8004854:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004858:	2b00      	cmp	r3, #0
 800485a:	d103      	bne.n	8004864 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800485c:	7e7a      	ldrb	r2, [r7, #25]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004864:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10e      	bne.n	800488a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f103 0410 	add.w	r4, r3, #16
 8004872:	f107 051c 	add.w	r5, r7, #28
 8004876:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004878:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800487a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800487c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800487e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004880:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004882:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004886:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800488a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800488e:	2b00      	cmp	r3, #0
 8004890:	d111      	bne.n	80048b6 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8004892:	f107 0319 	add.w	r3, r7, #25
 8004896:	461a      	mov	r2, r3
 8004898:	2101      	movs	r1, #1
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f004 fca5 	bl	80091ea <VL53L0X_RdByte>
 80048a0:	4603      	mov	r3, r0
 80048a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80048a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d103      	bne.n	80048b6 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80048ae:	7e7a      	ldrb	r2, [r7, #25]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80048b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d107      	bne.n	80048ce <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80048be:	2200      	movs	r2, #0
 80048c0:	2100      	movs	r1, #0
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f9d8 	bl	8004c78 <VL53L0X_SetSequenceStepEnable>
 80048c8:	4603      	mov	r3, r0
 80048ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80048ce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d107      	bne.n	80048e6 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80048d6:	2200      	movs	r2, #0
 80048d8:	2102      	movs	r1, #2
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f9cc 	bl	8004c78 <VL53L0X_SetSequenceStepEnable>
 80048e0:	4603      	mov	r3, r0
 80048e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80048e6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d103      	bne.n	80048f6 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2203      	movs	r2, #3
 80048f2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80048f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d109      	bne.n	8004912 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80048fe:	f107 0313 	add.w	r3, r7, #19
 8004902:	461a      	mov	r2, r3
 8004904:	2100      	movs	r1, #0
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f99e 	bl	8004c48 <VL53L0X_GetVcselPulsePeriod>
 800490c:	4603      	mov	r3, r0
 800490e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004912:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004916:	2b00      	cmp	r3, #0
 8004918:	d103      	bne.n	8004922 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800491a:	7cfa      	ldrb	r2, [r7, #19]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004922:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004926:	2b00      	cmp	r3, #0
 8004928:	d109      	bne.n	800493e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800492a:	f107 0313 	add.w	r3, r7, #19
 800492e:	461a      	mov	r2, r3
 8004930:	2101      	movs	r1, #1
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f988 	bl	8004c48 <VL53L0X_GetVcselPulsePeriod>
 8004938:	4603      	mov	r3, r0
 800493a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800493e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004942:	2b00      	cmp	r3, #0
 8004944:	d103      	bne.n	800494e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004946:	7cfa      	ldrb	r2, [r7, #19]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800494e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004952:	2b00      	cmp	r3, #0
 8004954:	d109      	bne.n	800496a <VL53L0X_StaticInit+0x2b6>
		Status = VL53L0X_GetSequenceStepTimeout(
 8004956:	f107 030c 	add.w	r3, r7, #12
 800495a:	461a      	mov	r2, r3
 800495c:	2103      	movs	r1, #3
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fad6 	bl	8004f10 <VL53L0X_GetSequenceStepTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800496a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800496e:	2b00      	cmp	r3, #0
 8004970:	d103      	bne.n	800497a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800497a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800497e:	2b00      	cmp	r3, #0
 8004980:	d109      	bne.n	8004996 <VL53L0X_StaticInit+0x2e2>
		Status = VL53L0X_GetSequenceStepTimeout(
 8004982:	f107 030c 	add.w	r3, r7, #12
 8004986:	461a      	mov	r2, r3
 8004988:	2104      	movs	r1, #4
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fac0 	bl	8004f10 <VL53L0X_GetSequenceStepTimeout>
 8004990:	4603      	mov	r3, r0
 8004992:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004996:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800499a:	2b00      	cmp	r3, #0
 800499c:	d103      	bne.n	80049a6 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80049a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3770      	adds	r7, #112	; 0x70
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bdb0      	pop	{r4, r5, r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20000190 	.word	0x20000190

080049b8 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	4619      	mov	r1, r3
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f8cc 	bl	8004b68 <VL53L0X_GetDeviceMode>
 80049d0:	4603      	mov	r3, r0
 80049d2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80049d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d107      	bne.n	80049ec <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	3308      	adds	r3, #8
 80049e0:	4619      	mov	r1, r3
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fad4 	bl	8004f90 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80049e8:	4603      	mov	r3, r0
 80049ea:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80049ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d102      	bne.n	80049fa <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2200      	movs	r2, #0
 80049f8:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80049fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d107      	bne.n	8004a12 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	3310      	adds	r3, #16
 8004a06:	4619      	mov	r1, r3
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 fb0a 	bl	8005022 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8004a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d107      	bne.n	8004a2a <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	3314      	adds	r3, #20
 8004a1e:	4619      	mov	r1, r3
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff fd2a 	bl	800447a <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8004a26:	4603      	mov	r3, r0
 8004a28:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8004a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d134      	bne.n	8004a9c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004a32:	2300      	movs	r3, #0
 8004a34:	60bb      	str	r3, [r7, #8]
 8004a36:	e02a      	b.n	8004a8e <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8004a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d12a      	bne.n	8004a96 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	b299      	uxth	r1, r3
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	3308      	adds	r3, #8
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	3304      	adds	r3, #4
 8004a50:	461a      	mov	r2, r3
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fc2a 	bl	80052ac <VL53L0X_GetLimitCheckValue>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8004a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d117      	bne.n	8004a9a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	b299      	uxth	r1, r3
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	3318      	adds	r3, #24
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	4413      	add	r3, r2
 8004a76:	461a      	mov	r2, r3
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 fb91 	bl	80051a0 <VL53L0X_GetLimitCheckEnable>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	461a      	mov	r2, r3
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	60bb      	str	r3, [r7, #8]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b05      	cmp	r3, #5
 8004a92:	ddd1      	ble.n	8004a38 <VL53L0X_GetDeviceParameters+0x80>
 8004a94:	e002      	b.n	8004a9c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8004a96:	bf00      	nop
 8004a98:	e000      	b.n	8004a9c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8004a9a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d107      	bne.n	8004ab4 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	333c      	adds	r3, #60	; 0x3c
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fc8c 	bl	80053c8 <VL53L0X_GetWrapAroundCheckEnable>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8004ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d107      	bne.n	8004acc <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f895 	bl	8004bf2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	2b15      	cmp	r3, #21
 8004aec:	d832      	bhi.n	8004b54 <VL53L0X_SetDeviceMode+0x7c>
 8004aee:	a201      	add	r2, pc, #4	; (adr r2, 8004af4 <VL53L0X_SetDeviceMode+0x1c>)
 8004af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af4:	08004b4d 	.word	0x08004b4d
 8004af8:	08004b4d 	.word	0x08004b4d
 8004afc:	08004b55 	.word	0x08004b55
 8004b00:	08004b4d 	.word	0x08004b4d
 8004b04:	08004b55 	.word	0x08004b55
 8004b08:	08004b55 	.word	0x08004b55
 8004b0c:	08004b55 	.word	0x08004b55
 8004b10:	08004b55 	.word	0x08004b55
 8004b14:	08004b55 	.word	0x08004b55
 8004b18:	08004b55 	.word	0x08004b55
 8004b1c:	08004b55 	.word	0x08004b55
 8004b20:	08004b55 	.word	0x08004b55
 8004b24:	08004b55 	.word	0x08004b55
 8004b28:	08004b55 	.word	0x08004b55
 8004b2c:	08004b55 	.word	0x08004b55
 8004b30:	08004b55 	.word	0x08004b55
 8004b34:	08004b55 	.word	0x08004b55
 8004b38:	08004b55 	.word	0x08004b55
 8004b3c:	08004b55 	.word	0x08004b55
 8004b40:	08004b55 	.word	0x08004b55
 8004b44:	08004b4d 	.word	0x08004b4d
 8004b48:	08004b4d 	.word	0x08004b4d
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	78fa      	ldrb	r2, [r7, #3]
 8004b50:	741a      	strb	r2, [r3, #16]
		break;
 8004b52:	e001      	b.n	8004b58 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8004b54:	23f8      	movs	r3, #248	; 0xf8
 8004b56:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b72:	2300      	movs	r3, #0
 8004b74:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	7c1a      	ldrb	r2, [r3, #16]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b084      	sub	sp, #16
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
 8004b96:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	2109      	movs	r1, #9
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f004 fb22 	bl	80091ea <VL53L0X_RdByte>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d106      	bne.n	8004bc0 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8004bda:	6839      	ldr	r1, [r7, #0]
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f003 fa30 	bl	8008042 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8004be2:	4603      	mov	r3, r0
 8004be4:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8004be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8004c00:	6839      	ldr	r1, [r7, #0]
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f003 fafd 	bl	8008202 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8004c0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	460b      	mov	r3, r1
 8004c22:	70fb      	strb	r3, [r7, #3]
 8004c24:	4613      	mov	r3, r2
 8004c26:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8004c2c:	78ba      	ldrb	r2, [r7, #2]
 8004c2e:	78fb      	ldrb	r3, [r7, #3]
 8004c30:	4619      	mov	r1, r3
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f002 ff45 	bl	8007ac2 <VL53L0X_set_vcsel_pulse_period>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8004c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	460b      	mov	r3, r1
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c56:	2300      	movs	r3, #0
 8004c58:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8004c5a:	7afb      	ldrb	r3, [r7, #11]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	4619      	mov	r1, r3
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f003 f9b7 	bl	8007fd4 <VL53L0X_get_vcsel_pulse_period>
 8004c66:	4603      	mov	r3, r0
 8004c68:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8004c6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	460b      	mov	r3, r1
 8004c82:	70fb      	strb	r3, [r7, #3]
 8004c84:	4613      	mov	r3, r2
 8004c86:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8004c90:	2300      	movs	r3, #0
 8004c92:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004c94:	f107 030f 	add.w	r3, r7, #15
 8004c98:	461a      	mov	r2, r3
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f004 faa4 	bl	80091ea <VL53L0X_RdByte>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
 8004ca8:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8004caa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d15a      	bne.n	8004d68 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8004cb2:	78bb      	ldrb	r3, [r7, #2]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d12b      	bne.n	8004d10 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8004cb8:	78fb      	ldrb	r3, [r7, #3]
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d825      	bhi.n	8004d0a <VL53L0X_SetSequenceStepEnable+0x92>
 8004cbe:	a201      	add	r2, pc, #4	; (adr r2, 8004cc4 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8004cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc4:	08004cd9 	.word	0x08004cd9
 8004cc8:	08004ce3 	.word	0x08004ce3
 8004ccc:	08004ced 	.word	0x08004ced
 8004cd0:	08004cf7 	.word	0x08004cf7
 8004cd4:	08004d01 	.word	0x08004d01
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8004cd8:	7dbb      	ldrb	r3, [r7, #22]
 8004cda:	f043 0310 	orr.w	r3, r3, #16
 8004cde:	75bb      	strb	r3, [r7, #22]
				break;
 8004ce0:	e043      	b.n	8004d6a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8004ce2:	7dbb      	ldrb	r3, [r7, #22]
 8004ce4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8004ce8:	75bb      	strb	r3, [r7, #22]
				break;
 8004cea:	e03e      	b.n	8004d6a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8004cec:	7dbb      	ldrb	r3, [r7, #22]
 8004cee:	f043 0304 	orr.w	r3, r3, #4
 8004cf2:	75bb      	strb	r3, [r7, #22]
				break;
 8004cf4:	e039      	b.n	8004d6a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8004cf6:	7dbb      	ldrb	r3, [r7, #22]
 8004cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cfc:	75bb      	strb	r3, [r7, #22]
				break;
 8004cfe:	e034      	b.n	8004d6a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8004d00:	7dbb      	ldrb	r3, [r7, #22]
 8004d02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d06:	75bb      	strb	r3, [r7, #22]
				break;
 8004d08:	e02f      	b.n	8004d6a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004d0a:	23fc      	movs	r3, #252	; 0xfc
 8004d0c:	75fb      	strb	r3, [r7, #23]
 8004d0e:	e02c      	b.n	8004d6a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8004d10:	78fb      	ldrb	r3, [r7, #3]
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d825      	bhi.n	8004d62 <VL53L0X_SetSequenceStepEnable+0xea>
 8004d16:	a201      	add	r2, pc, #4	; (adr r2, 8004d1c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8004d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1c:	08004d31 	.word	0x08004d31
 8004d20:	08004d3b 	.word	0x08004d3b
 8004d24:	08004d45 	.word	0x08004d45
 8004d28:	08004d4f 	.word	0x08004d4f
 8004d2c:	08004d59 	.word	0x08004d59
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8004d30:	7dbb      	ldrb	r3, [r7, #22]
 8004d32:	f023 0310 	bic.w	r3, r3, #16
 8004d36:	75bb      	strb	r3, [r7, #22]
				break;
 8004d38:	e017      	b.n	8004d6a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8004d3a:	7dbb      	ldrb	r3, [r7, #22]
 8004d3c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8004d40:	75bb      	strb	r3, [r7, #22]
				break;
 8004d42:	e012      	b.n	8004d6a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8004d44:	7dbb      	ldrb	r3, [r7, #22]
 8004d46:	f023 0304 	bic.w	r3, r3, #4
 8004d4a:	75bb      	strb	r3, [r7, #22]
				break;
 8004d4c:	e00d      	b.n	8004d6a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8004d4e:	7dbb      	ldrb	r3, [r7, #22]
 8004d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d54:	75bb      	strb	r3, [r7, #22]
				break;
 8004d56:	e008      	b.n	8004d6a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8004d58:	7dbb      	ldrb	r3, [r7, #22]
 8004d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d5e:	75bb      	strb	r3, [r7, #22]
				break;
 8004d60:	e003      	b.n	8004d6a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004d62:	23fc      	movs	r3, #252	; 0xfc
 8004d64:	75fb      	strb	r3, [r7, #23]
 8004d66:	e000      	b.n	8004d6a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8004d68:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8004d6a:	7bfb      	ldrb	r3, [r7, #15]
 8004d6c:	7dba      	ldrb	r2, [r7, #22]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d01e      	beq.n	8004db0 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8004d72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d107      	bne.n	8004d8a <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8004d7a:	7dbb      	ldrb	r3, [r7, #22]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	2101      	movs	r1, #1
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f004 fb2d 	bl	80093e0 <VL53L0X_WrByte>
 8004d86:	4603      	mov	r3, r0
 8004d88:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8004d8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d103      	bne.n	8004d9a <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	7dba      	ldrb	r2, [r7, #22]
 8004d96:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8004d9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8004da8:	6939      	ldr	r1, [r7, #16]
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7ff ff0e 	bl	8004bcc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8004db0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3718      	adds	r7, #24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	607b      	str	r3, [r7, #4]
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	72fb      	strb	r3, [r7, #11]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8004dd8:	7afb      	ldrb	r3, [r7, #11]
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d836      	bhi.n	8004e4c <sequence_step_enabled+0x90>
 8004dde:	a201      	add	r2, pc, #4	; (adr r2, 8004de4 <sequence_step_enabled+0x28>)
 8004de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de4:	08004df9 	.word	0x08004df9
 8004de8:	08004e0b 	.word	0x08004e0b
 8004dec:	08004e1d 	.word	0x08004e1d
 8004df0:	08004e2f 	.word	0x08004e2f
 8004df4:	08004e41 	.word	0x08004e41
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8004df8:	7abb      	ldrb	r3, [r7, #10]
 8004dfa:	111b      	asrs	r3, r3, #4
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	701a      	strb	r2, [r3, #0]
		break;
 8004e08:	e022      	b.n	8004e50 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8004e0a:	7abb      	ldrb	r3, [r7, #10]
 8004e0c:	10db      	asrs	r3, r3, #3
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	701a      	strb	r2, [r3, #0]
		break;
 8004e1a:	e019      	b.n	8004e50 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8004e1c:	7abb      	ldrb	r3, [r7, #10]
 8004e1e:	109b      	asrs	r3, r3, #2
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	701a      	strb	r2, [r3, #0]
		break;
 8004e2c:	e010      	b.n	8004e50 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8004e2e:	7abb      	ldrb	r3, [r7, #10]
 8004e30:	119b      	asrs	r3, r3, #6
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	701a      	strb	r2, [r3, #0]
		break;
 8004e3e:	e007      	b.n	8004e50 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8004e40:	7abb      	ldrb	r3, [r7, #10]
 8004e42:	09db      	lsrs	r3, r3, #7
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	701a      	strb	r2, [r3, #0]
		break;
 8004e4a:	e001      	b.n	8004e50 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004e4c:	23fc      	movs	r3, #252	; 0xfc
 8004e4e:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004e50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	371c      	adds	r7, #28
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004e72:	f107 030e 	add.w	r3, r7, #14
 8004e76:	461a      	mov	r2, r3
 8004e78:	2101      	movs	r1, #1
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f004 f9b5 	bl	80091ea <VL53L0X_RdByte>
 8004e80:	4603      	mov	r3, r0
 8004e82:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8004e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d107      	bne.n	8004e9c <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8004e8c:	7bba      	ldrb	r2, [r7, #14]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2100      	movs	r1, #0
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7ff ff92 	bl	8004dbc <sequence_step_enabled>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d108      	bne.n	8004eb6 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8004ea4:	7bba      	ldrb	r2, [r7, #14]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	3302      	adds	r3, #2
 8004eaa:	2101      	movs	r1, #1
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff ff85 	bl	8004dbc <sequence_step_enabled>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d108      	bne.n	8004ed0 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8004ebe:	7bba      	ldrb	r2, [r7, #14]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	2102      	movs	r1, #2
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7ff ff78 	bl	8004dbc <sequence_step_enabled>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d108      	bne.n	8004eea <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8004ed8:	7bba      	ldrb	r2, [r7, #14]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	3303      	adds	r3, #3
 8004ede:	2103      	movs	r1, #3
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7ff ff6b 	bl	8004dbc <sequence_step_enabled>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d108      	bne.n	8004f04 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8004ef2:	7bba      	ldrb	r2, [r7, #14]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	2104      	movs	r1, #4
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7ff ff5e 	bl	8004dbc <sequence_step_enabled>
 8004f00:	4603      	mov	r3, r0
 8004f02:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	460b      	mov	r3, r1
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	77fb      	strb	r3, [r7, #31]
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	61bb      	str	r3, [r7, #24]
	uint32_t Fraction_ms = 0;
 8004f26:	2300      	movs	r3, #0
 8004f28:	617b      	str	r3, [r7, #20]
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 8004f2a:	f107 0210 	add.w	r2, r7, #16
 8004f2e:	7afb      	ldrb	r3, [r7, #11]
 8004f30:	4619      	mov	r1, r3
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f002 fbf0 	bl	8007718 <get_sequence_step_timeout>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	77fb      	strb	r3, [r7, #31]
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 8004f3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d11c      	bne.n	8004f7e <VL53L0X_GetSequenceStepTimeout+0x6e>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	4a11      	ldr	r2, [pc, #68]	; (8004f8c <VL53L0X_GetSequenceStepTimeout+0x7c>)
 8004f48:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4c:	099b      	lsrs	r3, r3, #6
 8004f4e:	61bb      	str	r3, [r7, #24]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004f58:	fb01 f303 	mul.w	r3, r1, r3
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	617b      	str	r3, [r7, #20]
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	0419      	lsls	r1, r3, #16
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	4613      	mov	r3, r2
 8004f68:	041b      	lsls	r3, r3, #16
 8004f6a:	1a9b      	subs	r3, r3, r2
 8004f6c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004f70:	4a06      	ldr	r2, [pc, #24]	; (8004f8c <VL53L0X_GetSequenceStepTimeout+0x7c>)
 8004f72:	fba2 2303 	umull	r2, r3, r2, r3
 8004f76:	099b      	lsrs	r3, r3, #6
 8004f78:	18ca      	adds	r2, r1, r3
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004f7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3720      	adds	r7, #32
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	10624dd3 	.word	0x10624dd3

08004f90 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8004f9e:	f107 030c 	add.w	r3, r7, #12
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	21f8      	movs	r1, #248	; 0xf8
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f004 f9a6 	bl	80092f8 <VL53L0X_RdWord>
 8004fac:	4603      	mov	r3, r0
 8004fae:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8004fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d108      	bne.n	8004fca <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8004fb8:	f107 0308 	add.w	r3, r7, #8
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	2104      	movs	r1, #4
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f004 f9d1 	bl	8009368 <VL53L0X_RdDWord>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10c      	bne.n	8004fec <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8004fd2:	89bb      	ldrh	r3, [r7, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	89ba      	ldrh	r2, [r7, #12]
 8004fdc:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005002:	2300      	movs	r3, #0
 8005004:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	7f1b      	ldrb	r3, [r3, #28]
 800500a:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	7bba      	ldrb	r2, [r7, #14]
 8005010:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005012:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b086      	sub	sp, #24
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800502c:	2300      	movs	r3, #0
 800502e:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8005030:	f107 030e 	add.w	r3, r7, #14
 8005034:	461a      	mov	r2, r3
 8005036:	2120      	movs	r1, #32
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f004 f95d 	bl	80092f8 <VL53L0X_RdWord>
 800503e:	4603      	mov	r3, r0
 8005040:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8005042:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d118      	bne.n	800507c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800504a:	89fb      	ldrh	r3, [r7, #14]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d109      	bne.n	8005064 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	771a      	strb	r2, [r3, #28]
 8005062:	e00b      	b.n	800507c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8005064:	89fb      	ldrh	r3, [r7, #14]
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800507c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3718      	adds	r7, #24
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	807b      	strh	r3, [r7, #2]
 8005094:	4613      	mov	r3, r2
 8005096:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005098:	2300      	movs	r3, #0
 800509a:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800509c:	2300      	movs	r3, #0
 800509e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80050a0:	2300      	movs	r3, #0
 80050a2:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80050a4:	2300      	movs	r3, #0
 80050a6:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80050a8:	887b      	ldrh	r3, [r7, #2]
 80050aa:	2b05      	cmp	r3, #5
 80050ac:	d902      	bls.n	80050b4 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80050ae:	23fc      	movs	r3, #252	; 0xfc
 80050b0:	75fb      	strb	r3, [r7, #23]
 80050b2:	e05b      	b.n	800516c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80050b4:	787b      	ldrb	r3, [r7, #1]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d106      	bne.n	80050c8 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80050ba:	2300      	movs	r3, #0
 80050bc:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80050be:	2300      	movs	r3, #0
 80050c0:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80050c2:	2301      	movs	r3, #1
 80050c4:	73bb      	strb	r3, [r7, #14]
 80050c6:	e00a      	b.n	80050de <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80050c8:	887b      	ldrh	r3, [r7, #2]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	330c      	adds	r3, #12
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80050d6:	2300      	movs	r3, #0
 80050d8:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80050da:	2301      	movs	r3, #1
 80050dc:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80050de:	887b      	ldrh	r3, [r7, #2]
 80050e0:	2b05      	cmp	r3, #5
 80050e2:	d841      	bhi.n	8005168 <VL53L0X_SetLimitCheckEnable+0xe0>
 80050e4:	a201      	add	r2, pc, #4	; (adr r2, 80050ec <VL53L0X_SetLimitCheckEnable+0x64>)
 80050e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ea:	bf00      	nop
 80050ec:	08005105 	.word	0x08005105
 80050f0:	0800510f 	.word	0x0800510f
 80050f4:	08005125 	.word	0x08005125
 80050f8:	0800512f 	.word	0x0800512f
 80050fc:	08005139 	.word	0x08005139
 8005100:	08005151 	.word	0x08005151

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	7bfa      	ldrb	r2, [r7, #15]
 8005108:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800510c:	e02e      	b.n	800516c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005112:	b29b      	uxth	r3, r3
 8005114:	461a      	mov	r2, r3
 8005116:	2144      	movs	r1, #68	; 0x44
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f004 f985 	bl	8009428 <VL53L0X_WrWord>
 800511e:	4603      	mov	r3, r0
 8005120:	75fb      	strb	r3, [r7, #23]

			break;
 8005122:	e023      	b.n	800516c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	7bfa      	ldrb	r2, [r7, #15]
 8005128:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800512c:	e01e      	b.n	800516c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	7bfa      	ldrb	r2, [r7, #15]
 8005132:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8005136:	e019      	b.n	800516c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8005138:	7bbb      	ldrb	r3, [r7, #14]
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800513e:	7b7b      	ldrb	r3, [r7, #13]
 8005140:	22fe      	movs	r2, #254	; 0xfe
 8005142:	2160      	movs	r1, #96	; 0x60
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f004 f999 	bl	800947c <VL53L0X_UpdateByte>
 800514a:	4603      	mov	r3, r0
 800514c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800514e:	e00d      	b.n	800516c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8005150:	7bbb      	ldrb	r3, [r7, #14]
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8005156:	7b7b      	ldrb	r3, [r7, #13]
 8005158:	22ef      	movs	r2, #239	; 0xef
 800515a:	2160      	movs	r1, #96	; 0x60
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f004 f98d 	bl	800947c <VL53L0X_UpdateByte>
 8005162:	4603      	mov	r3, r0
 8005164:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8005166:	e001      	b.n	800516c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005168:	23fc      	movs	r3, #252	; 0xfc
 800516a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800516c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10f      	bne.n	8005194 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8005174:	787b      	ldrb	r3, [r7, #1]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d106      	bne.n	8005188 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800517a:	887b      	ldrh	r3, [r7, #2]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	4413      	add	r3, r2
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005186:	e005      	b.n	8005194 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005188:	887b      	ldrh	r3, [r7, #2]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	4413      	add	r3, r2
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005194:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3718      	adds	r7, #24
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	460b      	mov	r3, r1
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051ae:	2300      	movs	r3, #0
 80051b0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80051b2:	897b      	ldrh	r3, [r7, #10]
 80051b4:	2b05      	cmp	r3, #5
 80051b6:	d905      	bls.n	80051c4 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80051b8:	23fc      	movs	r3, #252	; 0xfc
 80051ba:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	701a      	strb	r2, [r3, #0]
 80051c2:	e008      	b.n	80051d6 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80051c4:	897b      	ldrh	r3, [r7, #10]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4413      	add	r3, r2
 80051ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051ce:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	7dba      	ldrb	r2, [r7, #22]
 80051d4:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80051d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
	...

080051e8 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	460b      	mov	r3, r1
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051f6:	2300      	movs	r3, #0
 80051f8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80051fa:	897b      	ldrh	r3, [r7, #10]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005204:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8005206:	7dbb      	ldrb	r3, [r7, #22]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d107      	bne.n	800521c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800520c:	897b      	ldrh	r3, [r7, #10]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	330c      	adds	r3, #12
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	605a      	str	r2, [r3, #4]
 800521a:	e040      	b.n	800529e <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800521c:	897b      	ldrh	r3, [r7, #10]
 800521e:	2b05      	cmp	r3, #5
 8005220:	d830      	bhi.n	8005284 <VL53L0X_SetLimitCheckValue+0x9c>
 8005222:	a201      	add	r2, pc, #4	; (adr r2, 8005228 <VL53L0X_SetLimitCheckValue+0x40>)
 8005224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005228:	08005241 	.word	0x08005241
 800522c:	08005249 	.word	0x08005249
 8005230:	0800525f 	.word	0x0800525f
 8005234:	08005267 	.word	0x08005267
 8005238:	0800526f 	.word	0x0800526f
 800523c:	0800526f 	.word	0x0800526f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8005246:	e01f      	b.n	8005288 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800524c:	b29b      	uxth	r3, r3
 800524e:	461a      	mov	r2, r3
 8005250:	2144      	movs	r1, #68	; 0x44
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f004 f8e8 	bl	8009428 <VL53L0X_WrWord>
 8005258:	4603      	mov	r3, r0
 800525a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800525c:	e014      	b.n	8005288 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8005264:	e010      	b.n	8005288 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800526c:	e00c      	b.n	8005288 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005272:	b29b      	uxth	r3, r3
 8005274:	461a      	mov	r2, r3
 8005276:	2164      	movs	r1, #100	; 0x64
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f004 f8d5 	bl	8009428 <VL53L0X_WrWord>
 800527e:	4603      	mov	r3, r0
 8005280:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8005282:	e001      	b.n	8005288 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005284:	23fc      	movs	r3, #252	; 0xfc
 8005286:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005288:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d106      	bne.n	800529e <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005290:	897b      	ldrh	r3, [r7, #10]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	330c      	adds	r3, #12
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800529e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop

080052ac <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	460b      	mov	r3, r1
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052ba:	2300      	movs	r3, #0
 80052bc:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80052be:	2300      	movs	r3, #0
 80052c0:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80052c2:	897b      	ldrh	r3, [r7, #10]
 80052c4:	2b05      	cmp	r3, #5
 80052c6:	d847      	bhi.n	8005358 <VL53L0X_GetLimitCheckValue+0xac>
 80052c8:	a201      	add	r2, pc, #4	; (adr r2, 80052d0 <VL53L0X_GetLimitCheckValue+0x24>)
 80052ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ce:	bf00      	nop
 80052d0:	080052e9 	.word	0x080052e9
 80052d4:	080052f5 	.word	0x080052f5
 80052d8:	0800531b 	.word	0x0800531b
 80052dc:	08005327 	.word	0x08005327
 80052e0:	08005333 	.word	0x08005333
 80052e4:	08005333 	.word	0x08005333

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ec:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	77bb      	strb	r3, [r7, #30]
		break;
 80052f2:	e033      	b.n	800535c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80052f4:	f107 0316 	add.w	r3, r7, #22
 80052f8:	461a      	mov	r2, r3
 80052fa:	2144      	movs	r1, #68	; 0x44
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f003 fffb 	bl	80092f8 <VL53L0X_RdWord>
 8005302:	4603      	mov	r3, r0
 8005304:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8005306:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d102      	bne.n	8005314 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800530e:	8afb      	ldrh	r3, [r7, #22]
 8005310:	025b      	lsls	r3, r3, #9
 8005312:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8005314:	2301      	movs	r3, #1
 8005316:	77bb      	strb	r3, [r7, #30]
		break;
 8005318:	e020      	b.n	800535c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8005320:	2300      	movs	r3, #0
 8005322:	77bb      	strb	r3, [r7, #30]
		break;
 8005324:	e01a      	b.n	800535c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800532c:	2300      	movs	r3, #0
 800532e:	77bb      	strb	r3, [r7, #30]
		break;
 8005330:	e014      	b.n	800535c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8005332:	f107 0316 	add.w	r3, r7, #22
 8005336:	461a      	mov	r2, r3
 8005338:	2164      	movs	r1, #100	; 0x64
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f003 ffdc 	bl	80092f8 <VL53L0X_RdWord>
 8005340:	4603      	mov	r3, r0
 8005342:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8005344:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d102      	bne.n	8005352 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800534c:	8afb      	ldrh	r3, [r7, #22]
 800534e:	025b      	lsls	r3, r3, #9
 8005350:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8005352:	2300      	movs	r3, #0
 8005354:	77bb      	strb	r3, [r7, #30]
		break;
 8005356:	e001      	b.n	800535c <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005358:	23fc      	movs	r3, #252	; 0xfc
 800535a:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800535c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d12a      	bne.n	80053ba <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8005364:	7fbb      	ldrb	r3, [r7, #30]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d124      	bne.n	80053b4 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d110      	bne.n	8005392 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8005370:	897b      	ldrh	r3, [r7, #10]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	330c      	adds	r3, #12
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005384:	897b      	ldrh	r3, [r7, #10]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4413      	add	r3, r2
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005390:	e013      	b.n	80053ba <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005398:	897b      	ldrh	r3, [r7, #10]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	330c      	adds	r3, #12
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80053a6:	897b      	ldrh	r3, [r7, #10]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4413      	add	r3, r2
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80053b2:	e002      	b.n	80053ba <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80053ba:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80053be:	4618      	mov	r0, r3
 80053c0:	3720      	adds	r7, #32
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop

080053c8 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80053d2:	2300      	movs	r3, #0
 80053d4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80053d6:	f107 030e 	add.w	r3, r7, #14
 80053da:	461a      	mov	r2, r3
 80053dc:	2101      	movs	r1, #1
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f003 ff03 	bl	80091ea <VL53L0X_RdByte>
 80053e4:	4603      	mov	r3, r0
 80053e6:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80053e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10e      	bne.n	800540e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80053f0:	7bba      	ldrb	r2, [r7, #14]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80053f8:	7bbb      	ldrb	r3, [r7, #14]
 80053fa:	b25b      	sxtb	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	da03      	bge.n	8005408 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	2201      	movs	r2, #1
 8005404:	701a      	strb	r2, [r3, #0]
 8005406:	e002      	b.n	800540e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2200      	movs	r2, #0
 800540c:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800540e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d104      	bne.n	8005420 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781a      	ldrb	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005420:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005434:	2300      	movs	r3, #0
 8005436:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005438:	f107 030e 	add.w	r3, r7, #14
 800543c:	4619      	mov	r1, r3
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7ff fb92 	bl	8004b68 <VL53L0X_GetDeviceMode>
 8005444:	4603      	mov	r3, r0
 8005446:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005448:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d107      	bne.n	8005460 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005450:	7bbb      	ldrb	r3, [r7, #14]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d104      	bne.n	8005460 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f898 	bl	800558c <VL53L0X_StartMeasurement>
 800545c:	4603      	mov	r3, r0
 800545e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d104      	bne.n	8005472 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f001 fb09 	bl	8006a80 <VL53L0X_measurement_poll_for_completion>
 800546e:	4603      	mov	r3, r0
 8005470:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800547a:	7bbb      	ldrb	r3, [r7, #14]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d103      	bne.n	8005488 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2203      	movs	r2, #3
 8005484:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8005488:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054a0:	2300      	movs	r3, #0
 80054a2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80054a4:	2301      	movs	r3, #1
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	68b9      	ldr	r1, [r7, #8]
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f001 faab 	bl	8006a06 <VL53L0X_perform_ref_calibration>
 80054b0:	4603      	mov	r3, r0
 80054b2:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80054b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	460b      	mov	r3, r1
 80054ca:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054cc:	2300      	movs	r3, #0
 80054ce:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80054d6:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80054d8:	7dbb      	ldrb	r3, [r7, #22]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d005      	beq.n	80054ea <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80054de:	7dbb      	ldrb	r3, [r7, #22]
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d002      	beq.n	80054ea <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80054e4:	7dbb      	ldrb	r3, [r7, #22]
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d147      	bne.n	800557a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80054ea:	f107 030c 	add.w	r3, r7, #12
 80054ee:	f107 0210 	add.w	r2, r7, #16
 80054f2:	2101      	movs	r1, #1
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fb8d 	bl	8005c14 <VL53L0X_GetInterruptThresholds>
 80054fa:	4603      	mov	r3, r0
 80054fc:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005504:	d803      	bhi.n	800550e <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8005506:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8005508:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800550c:	d935      	bls.n	800557a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800550e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d131      	bne.n	800557a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8005516:	78fb      	ldrb	r3, [r7, #3]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d006      	beq.n	800552a <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800551c:	491a      	ldr	r1, [pc, #104]	; (8005588 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f002 ff20 	bl	8008364 <VL53L0X_load_tuning_settings>
 8005524:	4603      	mov	r3, r0
 8005526:	75fb      	strb	r3, [r7, #23]
 8005528:	e027      	b.n	800557a <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800552a:	2204      	movs	r2, #4
 800552c:	21ff      	movs	r1, #255	; 0xff
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f003 ff56 	bl	80093e0 <VL53L0X_WrByte>
 8005534:	4603      	mov	r3, r0
 8005536:	461a      	mov	r2, r3
 8005538:	7dfb      	ldrb	r3, [r7, #23]
 800553a:	4313      	orrs	r3, r2
 800553c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800553e:	2200      	movs	r2, #0
 8005540:	2170      	movs	r1, #112	; 0x70
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f003 ff4c 	bl	80093e0 <VL53L0X_WrByte>
 8005548:	4603      	mov	r3, r0
 800554a:	461a      	mov	r2, r3
 800554c:	7dfb      	ldrb	r3, [r7, #23]
 800554e:	4313      	orrs	r3, r2
 8005550:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005552:	2200      	movs	r2, #0
 8005554:	21ff      	movs	r1, #255	; 0xff
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f003 ff42 	bl	80093e0 <VL53L0X_WrByte>
 800555c:	4603      	mov	r3, r0
 800555e:	461a      	mov	r2, r3
 8005560:	7dfb      	ldrb	r3, [r7, #23]
 8005562:	4313      	orrs	r3, r2
 8005564:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005566:	2200      	movs	r2, #0
 8005568:	2180      	movs	r1, #128	; 0x80
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f003 ff38 	bl	80093e0 <VL53L0X_WrByte>
 8005570:	4603      	mov	r3, r0
 8005572:	461a      	mov	r2, r3
 8005574:	7dfb      	ldrb	r3, [r7, #23]
 8005576:	4313      	orrs	r3, r2
 8005578:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800557a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800557e:	4618      	mov	r0, r3
 8005580:	3718      	adds	r7, #24
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	20000284 	.word	0x20000284

0800558c <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005594:	2300      	movs	r3, #0
 8005596:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8005598:	2301      	movs	r3, #1
 800559a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800559c:	f107 030e 	add.w	r3, r7, #14
 80055a0:	4619      	mov	r1, r3
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7ff fae0 	bl	8004b68 <VL53L0X_GetDeviceMode>

	switch (DeviceMode) {
 80055a8:	7bbb      	ldrb	r3, [r7, #14]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d035      	beq.n	800561a <VL53L0X_StartMeasurement+0x8e>
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d04d      	beq.n	800564e <VL53L0X_StartMeasurement+0xc2>
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d165      	bne.n	8005682 <VL53L0X_StartMeasurement+0xf6>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80055b6:	2201      	movs	r2, #1
 80055b8:	2100      	movs	r1, #0
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f003 ff10 	bl	80093e0 <VL53L0X_WrByte>
 80055c0:	4603      	mov	r3, r0
 80055c2:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80055c4:	7bfb      	ldrb	r3, [r7, #15]
 80055c6:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80055c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d15b      	bne.n	8005688 <VL53L0X_StartMeasurement+0xfc>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80055d0:	2300      	movs	r3, #0
 80055d2:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d008      	beq.n	80055ec <VL53L0X_StartMeasurement+0x60>
					Status = VL53L0X_RdByte(Dev,
 80055da:	f107 030d 	add.w	r3, r7, #13
 80055de:	461a      	mov	r2, r3
 80055e0:	2100      	movs	r1, #0
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f003 fe01 	bl	80091ea <VL53L0X_RdByte>
 80055e8:	4603      	mov	r3, r0
 80055ea:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	3301      	adds	r3, #1
 80055f0:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80055f2:	7b7a      	ldrb	r2, [r7, #13]
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
 80055f6:	4013      	ands	r3, r2
 80055f8:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80055fa:	7bfa      	ldrb	r2, [r7, #15]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d106      	bne.n	800560e <VL53L0X_StartMeasurement+0x82>
				&& (Status == VL53L0X_ERROR_NONE)
 8005600:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d102      	bne.n	800560e <VL53L0X_StartMeasurement+0x82>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	2bc7      	cmp	r3, #199	; 0xc7
 800560c:	d9e2      	bls.n	80055d4 <VL53L0X_StartMeasurement+0x48>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	2bc7      	cmp	r3, #199	; 0xc7
 8005612:	d939      	bls.n	8005688 <VL53L0X_StartMeasurement+0xfc>
				Status = VL53L0X_ERROR_TIME_OUT;
 8005614:	23f9      	movs	r3, #249	; 0xf9
 8005616:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8005618:	e036      	b.n	8005688 <VL53L0X_StartMeasurement+0xfc>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800561a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d105      	bne.n	800562e <VL53L0X_StartMeasurement+0xa2>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005622:	2101      	movs	r1, #1
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7ff ff4b 	bl	80054c0 <VL53L0X_CheckAndLoadInterruptSettings>
 800562a:	4603      	mov	r3, r0
 800562c:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800562e:	2202      	movs	r2, #2
 8005630:	2100      	movs	r1, #0
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f003 fed4 	bl	80093e0 <VL53L0X_WrByte>
 8005638:	4603      	mov	r3, r0
 800563a:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800563c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d123      	bne.n	800568c <VL53L0X_StartMeasurement+0x100>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2204      	movs	r2, #4
 8005648:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800564c:	e01e      	b.n	800568c <VL53L0X_StartMeasurement+0x100>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800564e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d105      	bne.n	8005662 <VL53L0X_StartMeasurement+0xd6>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005656:	2101      	movs	r1, #1
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7ff ff31 	bl	80054c0 <VL53L0X_CheckAndLoadInterruptSettings>
 800565e:	4603      	mov	r3, r0
 8005660:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005662:	2204      	movs	r2, #4
 8005664:	2100      	movs	r1, #0
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f003 feba 	bl	80093e0 <VL53L0X_WrByte>
 800566c:	4603      	mov	r3, r0
 800566e:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8005670:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10b      	bne.n	8005690 <VL53L0X_StartMeasurement+0x104>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2204      	movs	r2, #4
 800567c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8005680:	e006      	b.n	8005690 <VL53L0X_StartMeasurement+0x104>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005682:	23f8      	movs	r3, #248	; 0xf8
 8005684:	75fb      	strb	r3, [r7, #23]
 8005686:	e004      	b.n	8005692 <VL53L0X_StartMeasurement+0x106>
		break;
 8005688:	bf00      	nop
 800568a:	e002      	b.n	8005692 <VL53L0X_StartMeasurement+0x106>
		break;
 800568c:	bf00      	nop
 800568e:	e000      	b.n	8005692 <VL53L0X_StartMeasurement+0x106>
		break;
 8005690:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8005692:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3718      	adds	r7, #24
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b084      	sub	sp, #16
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80056a8:	2300      	movs	r3, #0
 80056aa:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80056b2:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80056b4:	7bbb      	ldrb	r3, [r7, #14]
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d112      	bne.n	80056e0 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80056ba:	f107 0308 	add.w	r3, r7, #8
 80056be:	4619      	mov	r1, r3
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fb1d 	bl	8005d00 <VL53L0X_GetInterruptMaskStatus>
 80056c6:	4603      	mov	r3, r0
 80056c8:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	d103      	bne.n	80056d8 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2201      	movs	r2, #1
 80056d4:	701a      	strb	r2, [r3, #0]
 80056d6:	e01c      	b.n	8005712 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	2200      	movs	r2, #0
 80056dc:	701a      	strb	r2, [r3, #0]
 80056de:	e018      	b.n	8005712 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80056e0:	f107 030d 	add.w	r3, r7, #13
 80056e4:	461a      	mov	r2, r3
 80056e6:	2114      	movs	r1, #20
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f003 fd7e 	bl	80091ea <VL53L0X_RdByte>
 80056ee:	4603      	mov	r3, r0
 80056f0:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80056f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10b      	bne.n	8005712 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80056fa:	7b7b      	ldrb	r3, [r7, #13]
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	2201      	movs	r2, #1
 8005708:	701a      	strb	r2, [r3, #0]
 800570a:	e002      	b.n	8005712 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2200      	movs	r2, #0
 8005710:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005712:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
	...

08005720 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005720:	b5b0      	push	{r4, r5, r7, lr}
 8005722:	b096      	sub	sp, #88	; 0x58
 8005724:	af02      	add	r7, sp, #8
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800572a:	2300      	movs	r3, #0
 800572c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005730:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005734:	230c      	movs	r3, #12
 8005736:	2114      	movs	r1, #20
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f003 fdb1 	bl	80092a0 <VL53L0X_ReadMulti>
 800573e:	4603      	mov	r3, r0
 8005740:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8005744:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005748:	2b00      	cmp	r3, #0
 800574a:	f040 80d2 	bne.w	80058f2 <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2200      	movs	r2, #0
 8005752:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2200      	movs	r2, #0
 8005758:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800575a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800575e:	b29b      	uxth	r3, r3
 8005760:	021b      	lsls	r3, r3, #8
 8005762:	b29a      	uxth	r2, r3
 8005764:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005768:	b29b      	uxth	r3, r3
 800576a:	4413      	add	r3, r2
 800576c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2200      	movs	r2, #0
 8005774:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005776:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800577a:	b29b      	uxth	r3, r3
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	b29a      	uxth	r2, r3
 8005780:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005784:	b29b      	uxth	r3, r3
 8005786:	4413      	add	r3, r2
 8005788:	b29b      	uxth	r3, r3
 800578a:	025b      	lsls	r3, r3, #9
 800578c:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005792:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8005794:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005798:	b29b      	uxth	r3, r3
 800579a:	021b      	lsls	r3, r3, #8
 800579c:	b29a      	uxth	r2, r3
 800579e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	4413      	add	r3, r2
 80057a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80057aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80057ae:	025b      	lsls	r3, r3, #9
 80057b0:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80057b6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	021b      	lsls	r3, r3, #8
 80057be:	b29a      	uxth	r2, r3
 80057c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	4413      	add	r3, r2
 80057c8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80057d2:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 80057d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 80057e2:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80057ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80057ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80057f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057f4:	d047      	beq.n	8005886 <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80057f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80057f8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80057fc:	fb02 f303 	mul.w	r3, r2, r3
 8005800:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005804:	4a58      	ldr	r2, [pc, #352]	; (8005968 <VL53L0X_GetRangingMeasurementData+0x248>)
 8005806:	fb82 1203 	smull	r1, r2, r2, r3
 800580a:	1192      	asrs	r2, r2, #6
 800580c:	17db      	asrs	r3, r3, #31
 800580e:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8005810:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	7f1b      	ldrb	r3, [r3, #28]
 800581e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8005822:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005826:	2b00      	cmp	r3, #0
 8005828:	d02d      	beq.n	8005886 <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800582a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800582c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005830:	fb02 f303 	mul.w	r3, r2, r3
 8005834:	121b      	asrs	r3, r3, #8
 8005836:	461a      	mov	r2, r3
				if ((SignalRate
 8005838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800583a:	4293      	cmp	r3, r2
 800583c:	d10d      	bne.n	800585a <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 800583e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005842:	2b00      	cmp	r3, #0
 8005844:	d004      	beq.n	8005850 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 8005846:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800584a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800584e:	e016      	b.n	800587e <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8005850:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8005854:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005858:	e011      	b.n	800587e <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800585a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800585e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005860:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8005864:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005866:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800586a:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800586e:	121b      	asrs	r3, r3, #8
 8005870:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8005872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005874:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8005876:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800587a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800587e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005882:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8005886:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00d      	beq.n	80058aa <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800588e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005892:	089b      	lsrs	r3, r3, #2
 8005894:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800589a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	019b      	lsls	r3, r3, #6
 80058a2:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	75da      	strb	r2, [r3, #23]
 80058a8:	e006      	b.n	80058b8 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80058b0:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2200      	movs	r2, #0
 80058b6:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80058b8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80058bc:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80058c0:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80058c4:	9301      	str	r3, [sp, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	4613      	mov	r3, r2
 80058cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f003 f9b6 	bl	8008c40 <VL53L0X_get_pal_range_status>
 80058d4:	4603      	mov	r3, r0
 80058d6:	461a      	mov	r2, r3
 80058d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80058dc:	4313      	orrs	r3, r2
 80058de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80058e2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d103      	bne.n	80058f2 <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80058ea:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80058f2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d12f      	bne.n	800595a <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f107 040c 	add.w	r4, r7, #12
 8005900:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8005904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005908:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800590c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8005914:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800591a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8005922:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8005928:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800592e:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8005934:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800593a:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8005940:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800594a:	f107 050c 	add.w	r5, r7, #12
 800594e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005950:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005952:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005956:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800595a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800595e:	4618      	mov	r0, r3
 8005960:	3750      	adds	r7, #80	; 0x50
 8005962:	46bd      	mov	sp, r7
 8005964:	bdb0      	pop	{r4, r5, r7, pc}
 8005966:	bf00      	nop
 8005968:	10624dd3 	.word	0x10624dd3

0800596c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005976:	2300      	movs	r3, #0
 8005978:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800597a:	2100      	movs	r1, #0
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7ff f8ab 	bl	8004ad8 <VL53L0X_SetDeviceMode>
 8005982:	4603      	mov	r3, r0
 8005984:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d104      	bne.n	8005998 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7ff fd4c 	bl	800542c <VL53L0X_PerformSingleMeasurement>
 8005994:	4603      	mov	r3, r0
 8005996:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d105      	bne.n	80059ac <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80059a0:	6839      	ldr	r1, [r7, #0]
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7ff febc 	bl	8005720 <VL53L0X_GetRangingMeasurementData>
 80059a8:	4603      	mov	r3, r0
 80059aa:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80059ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d105      	bne.n	80059c0 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80059b4:	2100      	movs	r1, #0
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f962 	bl	8005c80 <VL53L0X_ClearInterruptMask>
 80059bc:	4603      	mov	r3, r0
 80059be:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80059c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	4608      	mov	r0, r1
 80059d6:	4611      	mov	r1, r2
 80059d8:	461a      	mov	r2, r3
 80059da:	4603      	mov	r3, r0
 80059dc:	70fb      	strb	r3, [r7, #3]
 80059de:	460b      	mov	r3, r1
 80059e0:	70bb      	strb	r3, [r7, #2]
 80059e2:	4613      	mov	r3, r2
 80059e4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059e6:	2300      	movs	r3, #0
 80059e8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80059ea:	78fb      	ldrb	r3, [r7, #3]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80059f0:	23f6      	movs	r3, #246	; 0xf6
 80059f2:	73fb      	strb	r3, [r7, #15]
 80059f4:	e107      	b.n	8005c06 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80059f6:	78bb      	ldrb	r3, [r7, #2]
 80059f8:	2b14      	cmp	r3, #20
 80059fa:	d110      	bne.n	8005a1e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80059fc:	7e3b      	ldrb	r3, [r7, #24]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d102      	bne.n	8005a08 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8005a02:	2310      	movs	r3, #16
 8005a04:	73bb      	strb	r3, [r7, #14]
 8005a06:	e001      	b.n	8005a0c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8005a0c:	7bbb      	ldrb	r3, [r7, #14]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	2184      	movs	r1, #132	; 0x84
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f003 fce4 	bl	80093e0 <VL53L0X_WrByte>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	73fb      	strb	r3, [r7, #15]
 8005a1c:	e0f3      	b.n	8005c06 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8005a1e:	78bb      	ldrb	r3, [r7, #2]
 8005a20:	2b15      	cmp	r3, #21
 8005a22:	f040 8097 	bne.w	8005b54 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005a26:	2201      	movs	r2, #1
 8005a28:	21ff      	movs	r1, #255	; 0xff
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f003 fcd8 	bl	80093e0 <VL53L0X_WrByte>
 8005a30:	4603      	mov	r3, r0
 8005a32:	461a      	mov	r2, r3
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f003 fcce 	bl	80093e0 <VL53L0X_WrByte>
 8005a44:	4603      	mov	r3, r0
 8005a46:	461a      	mov	r2, r3
 8005a48:	7bfb      	ldrb	r3, [r7, #15]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005a4e:	2200      	movs	r2, #0
 8005a50:	21ff      	movs	r1, #255	; 0xff
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f003 fcc4 	bl	80093e0 <VL53L0X_WrByte>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005a62:	2201      	movs	r2, #1
 8005a64:	2180      	movs	r1, #128	; 0x80
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f003 fcba 	bl	80093e0 <VL53L0X_WrByte>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	461a      	mov	r2, r3
 8005a70:	7bfb      	ldrb	r3, [r7, #15]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8005a76:	2202      	movs	r2, #2
 8005a78:	2185      	movs	r1, #133	; 0x85
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f003 fcb0 	bl	80093e0 <VL53L0X_WrByte>
 8005a80:	4603      	mov	r3, r0
 8005a82:	461a      	mov	r2, r3
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8005a8a:	2204      	movs	r2, #4
 8005a8c:	21ff      	movs	r1, #255	; 0xff
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f003 fca6 	bl	80093e0 <VL53L0X_WrByte>
 8005a94:	4603      	mov	r3, r0
 8005a96:	461a      	mov	r2, r3
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	21cd      	movs	r1, #205	; 0xcd
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f003 fc9c 	bl	80093e0 <VL53L0X_WrByte>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	461a      	mov	r2, r3
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8005ab2:	2211      	movs	r2, #17
 8005ab4:	21cc      	movs	r1, #204	; 0xcc
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f003 fc92 	bl	80093e0 <VL53L0X_WrByte>
 8005abc:	4603      	mov	r3, r0
 8005abe:	461a      	mov	r2, r3
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8005ac6:	2207      	movs	r2, #7
 8005ac8:	21ff      	movs	r1, #255	; 0xff
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f003 fc88 	bl	80093e0 <VL53L0X_WrByte>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8005ada:	2200      	movs	r2, #0
 8005adc:	21be      	movs	r1, #190	; 0xbe
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f003 fc7e 	bl	80093e0 <VL53L0X_WrByte>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8005aee:	2206      	movs	r2, #6
 8005af0:	21ff      	movs	r1, #255	; 0xff
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f003 fc74 	bl	80093e0 <VL53L0X_WrByte>
 8005af8:	4603      	mov	r3, r0
 8005afa:	461a      	mov	r2, r3
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8005b02:	2209      	movs	r2, #9
 8005b04:	21cc      	movs	r1, #204	; 0xcc
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f003 fc6a 	bl	80093e0 <VL53L0X_WrByte>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	461a      	mov	r2, r3
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005b16:	2200      	movs	r2, #0
 8005b18:	21ff      	movs	r1, #255	; 0xff
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f003 fc60 	bl	80093e0 <VL53L0X_WrByte>
 8005b20:	4603      	mov	r3, r0
 8005b22:	461a      	mov	r2, r3
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	21ff      	movs	r1, #255	; 0xff
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f003 fc56 	bl	80093e0 <VL53L0X_WrByte>
 8005b34:	4603      	mov	r3, r0
 8005b36:	461a      	mov	r2, r3
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005b3e:	2200      	movs	r2, #0
 8005b40:	2100      	movs	r1, #0
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f003 fc4c 	bl	80093e0 <VL53L0X_WrByte>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	73fb      	strb	r3, [r7, #15]
 8005b52:	e058      	b.n	8005c06 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8005b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d121      	bne.n	8005ba0 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8005b5c:	787b      	ldrb	r3, [r7, #1]
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d81b      	bhi.n	8005b9a <VL53L0X_SetGpioConfig+0x1ce>
 8005b62:	a201      	add	r2, pc, #4	; (adr r2, 8005b68 <VL53L0X_SetGpioConfig+0x19c>)
 8005b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b68:	08005b7d 	.word	0x08005b7d
 8005b6c:	08005b83 	.word	0x08005b83
 8005b70:	08005b89 	.word	0x08005b89
 8005b74:	08005b8f 	.word	0x08005b8f
 8005b78:	08005b95 	.word	0x08005b95
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	73bb      	strb	r3, [r7, #14]
				break;
 8005b80:	e00f      	b.n	8005ba2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8005b82:	2301      	movs	r3, #1
 8005b84:	73bb      	strb	r3, [r7, #14]
				break;
 8005b86:	e00c      	b.n	8005ba2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8005b88:	2302      	movs	r3, #2
 8005b8a:	73bb      	strb	r3, [r7, #14]
				break;
 8005b8c:	e009      	b.n	8005ba2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	73bb      	strb	r3, [r7, #14]
				break;
 8005b92:	e006      	b.n	8005ba2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8005b94:	2304      	movs	r3, #4
 8005b96:	73bb      	strb	r3, [r7, #14]
				break;
 8005b98:	e003      	b.n	8005ba2 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8005b9a:	23f5      	movs	r3, #245	; 0xf5
 8005b9c:	73fb      	strb	r3, [r7, #15]
 8005b9e:	e000      	b.n	8005ba2 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8005ba0:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8005ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d107      	bne.n	8005bba <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8005baa:	7bbb      	ldrb	r3, [r7, #14]
 8005bac:	461a      	mov	r2, r3
 8005bae:	210a      	movs	r1, #10
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f003 fc15 	bl	80093e0 <VL53L0X_WrByte>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8005bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10f      	bne.n	8005be2 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8005bc2:	7e3b      	ldrb	r3, [r7, #24]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d102      	bne.n	8005bce <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	73bb      	strb	r3, [r7, #14]
 8005bcc:	e001      	b.n	8005bd2 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8005bce:	2310      	movs	r3, #16
 8005bd0:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8005bd2:	7bbb      	ldrb	r3, [r7, #14]
 8005bd4:	22ef      	movs	r2, #239	; 0xef
 8005bd6:	2184      	movs	r1, #132	; 0x84
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f003 fc4f 	bl	800947c <VL53L0X_UpdateByte>
 8005bde:	4603      	mov	r3, r0
 8005be0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8005be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d103      	bne.n	8005bf2 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	787a      	ldrb	r2, [r7, #1]
 8005bee:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8005bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d105      	bne.n	8005c06 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f83f 	bl	8005c80 <VL53L0X_ClearInterruptMask>
 8005c02:	4603      	mov	r3, r0
 8005c04:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop

08005c14 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	607a      	str	r2, [r7, #4]
 8005c1e:	603b      	str	r3, [r7, #0]
 8005c20:	460b      	mov	r3, r1
 8005c22:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c24:	2300      	movs	r3, #0
 8005c26:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8005c28:	f107 0314 	add.w	r3, r7, #20
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	210e      	movs	r1, #14
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f003 fb61 	bl	80092f8 <VL53L0X_RdWord>
 8005c36:	4603      	mov	r3, r0
 8005c38:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005c3a:	8abb      	ldrh	r3, [r7, #20]
 8005c3c:	045b      	lsls	r3, r3, #17
 8005c3e:	461a      	mov	r2, r3
 8005c40:	4b0e      	ldr	r3, [pc, #56]	; (8005c7c <VL53L0X_GetInterruptThresholds+0x68>)
 8005c42:	4013      	ands	r3, r2
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8005c48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10f      	bne.n	8005c70 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8005c50:	f107 0314 	add.w	r3, r7, #20
 8005c54:	461a      	mov	r2, r3
 8005c56:	210c      	movs	r1, #12
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f003 fb4d 	bl	80092f8 <VL53L0X_RdWord>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005c62:	8abb      	ldrh	r3, [r7, #20]
 8005c64:	045b      	lsls	r3, r3, #17
 8005c66:	461a      	mov	r2, r3
 8005c68:	4b04      	ldr	r3, [pc, #16]	; (8005c7c <VL53L0X_GetInterruptThresholds+0x68>)
 8005c6a:	4013      	ands	r3, r2
		*pThresholdHigh =
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005c70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	1ffe0000 	.word	0x1ffe0000

08005c80 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8005c92:	2201      	movs	r2, #1
 8005c94:	210b      	movs	r1, #11
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f003 fba2 	bl	80093e0 <VL53L0X_WrByte>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	210b      	movs	r1, #11
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f003 fb9b 	bl	80093e0 <VL53L0X_WrByte>
 8005caa:	4603      	mov	r3, r0
 8005cac:	461a      	mov	r2, r3
 8005cae:	7bfb      	ldrb	r3, [r7, #15]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8005cb4:	f107 030d 	add.w	r3, r7, #13
 8005cb8:	461a      	mov	r2, r3
 8005cba:	2113      	movs	r1, #19
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f003 fa94 	bl	80091ea <VL53L0X_RdByte>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8005ccc:	7bbb      	ldrb	r3, [r7, #14]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8005cd2:	7b7b      	ldrb	r3, [r7, #13]
 8005cd4:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d006      	beq.n	8005cea <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8005cdc:	7bbb      	ldrb	r3, [r7, #14]
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d803      	bhi.n	8005cea <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8005ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0d3      	beq.n	8005c92 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8005cea:	7bbb      	ldrb	r3, [r7, #14]
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d901      	bls.n	8005cf4 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8005cf0:	23f4      	movs	r3, #244	; 0xf4
 8005cf2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8005d0e:	f107 030e 	add.w	r3, r7, #14
 8005d12:	461a      	mov	r2, r3
 8005d14:	2113      	movs	r1, #19
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f003 fa67 	bl	80091ea <VL53L0X_RdByte>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8005d20:	7bbb      	ldrb	r3, [r7, #14]
 8005d22:	f003 0207 	and.w	r2, r3, #7
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8005d2a:	7bbb      	ldrb	r3, [r7, #14]
 8005d2c:	f003 0318 	and.w	r3, r3, #24
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8005d34:	23fa      	movs	r3, #250	; 0xfa
 8005d36:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d50:	2300      	movs	r3, #0
 8005d52:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	68b9      	ldr	r1, [r7, #8]
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 fa03 	bl	8006164 <VL53L0X_perform_ref_spad_management>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8005d62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b084      	sub	sp, #16
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8005d7c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005d80:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8005d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d86:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8005d88:	f107 0308 	add.w	r3, r7, #8
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	2128      	movs	r1, #40	; 0x28
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f003 fab1 	bl	80092f8 <VL53L0X_RdWord>
 8005d96:	4603      	mov	r3, r0
 8005d98:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8005d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d11e      	bne.n	8005de0 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8005da2:	893b      	ldrh	r3, [r7, #8]
 8005da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8005dac:	893b      	ldrh	r3, [r7, #8]
 8005dae:	461a      	mov	r2, r3
 8005db0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	dd0b      	ble.n	8005dd0 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8005db8:	893a      	ldrh	r2, [r7, #8]
 8005dba:	897b      	ldrh	r3, [r7, #10]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	b21b      	sxth	r3, r3
 8005dc2:	461a      	mov	r2, r3
					* 250;
 8005dc4:	23fa      	movs	r3, #250	; 0xfa
 8005dc6:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	e007      	b.n	8005de0 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8005dd0:	893b      	ldrh	r3, [r7, #8]
 8005dd2:	b21b      	sxth	r3, r3
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	23fa      	movs	r3, #250	; 0xfa
 8005dd8:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8005de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b08b      	sub	sp, #44	; 0x2c
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
 8005df8:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8005dfa:	2308      	movs	r3, #8
 8005dfc:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	f04f 32ff 	mov.w	r2, #4294967295
 8005e08:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e12:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e1c:	69b9      	ldr	r1, [r7, #24]
 8005e1e:	fb01 f202 	mul.w	r2, r1, r2
 8005e22:	1a9b      	subs	r3, r3, r2
 8005e24:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	627b      	str	r3, [r7, #36]	; 0x24
 8005e2a:	e030      	b.n	8005e8e <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	4413      	add	r3, r2
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8005e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d11e      	bne.n	8005e80 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8005e42:	7ffa      	ldrb	r2, [r7, #31]
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	fa42 f303 	asr.w	r3, r2, r3
 8005e4a:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8005e50:	e016      	b.n	8005e80 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8005e52:	7ffb      	ldrb	r3, [r7, #31]
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00b      	beq.n	8005e74 <get_next_good_spad+0x88>
				success = 1;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	fb02 f203 	mul.w	r2, r2, r3
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	601a      	str	r2, [r3, #0]
				break;
 8005e72:	e009      	b.n	8005e88 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8005e74:	7ffb      	ldrb	r3, [r7, #31]
 8005e76:	085b      	lsrs	r3, r3, #1
 8005e78:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8005e80:	6a3a      	ldr	r2, [r7, #32]
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d3e4      	bcc.n	8005e52 <get_next_good_spad+0x66>
				coarseIndex++) {
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8005e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d202      	bcs.n	8005e9c <get_next_good_spad+0xb0>
 8005e96:	7fbb      	ldrb	r3, [r7, #30]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d0c7      	beq.n	8005e2c <get_next_good_spad+0x40>
		}
	}
}
 8005e9c:	bf00      	nop
 8005e9e:	372c      	adds	r7, #44	; 0x2c
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	099b      	lsrs	r3, r3, #6
 8005eb8:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8005eba:	4a07      	ldr	r2, [pc, #28]	; (8005ed8 <is_aperture+0x30>)
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <is_aperture+0x22>
		isAperture = 0;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8005eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	2000043c 	.word	0x2000043c

08005edc <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b089      	sub	sp, #36	; 0x24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8005eec:	2308      	movs	r3, #8
 8005eee:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef8:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f02:	69b9      	ldr	r1, [r7, #24]
 8005f04:	fb01 f202 	mul.w	r2, r1, r2
 8005f08:	1a9b      	subs	r3, r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d302      	bcc.n	8005f1a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005f14:	23ce      	movs	r3, #206	; 0xce
 8005f16:	77fb      	strb	r3, [r7, #31]
 8005f18:	e010      	b.n	8005f3c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	4413      	add	r3, r2
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	b25a      	sxtb	r2, r3
 8005f24:	2101      	movs	r1, #1
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	fa01 f303 	lsl.w	r3, r1, r3
 8005f2c:	b25b      	sxtb	r3, r3
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	b259      	sxtb	r1, r3
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	4413      	add	r3, r2
 8005f38:	b2ca      	uxtb	r2, r1
 8005f3a:	701a      	strb	r2, [r3, #0]

	return status;
 8005f3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3724      	adds	r7, #36	; 0x24
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8005f56:	2306      	movs	r3, #6
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	21b0      	movs	r1, #176	; 0xb0
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f003 f96f 	bl	8009240 <VL53L0X_WriteMulti>
 8005f62:	4603      	mov	r3, r0
 8005f64:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8005f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8005f7c:	2306      	movs	r3, #6
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	21b0      	movs	r1, #176	; 0xb0
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f003 f98c 	bl	80092a0 <VL53L0X_ReadMulti>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8005f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b08c      	sub	sp, #48	; 0x30
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	607a      	str	r2, [r7, #4]
 8005fa2:	603b      	str	r3, [r7, #0]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8005fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fb0:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8005fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fb4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fba:	e02b      	b.n	8006014 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8005fbc:	f107 031c 	add.w	r3, r7, #28
 8005fc0:	6a3a      	ldr	r2, [r7, #32]
 8005fc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f7ff ff11 	bl	8005dec <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd0:	d103      	bne.n	8005fda <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005fd2:	23ce      	movs	r3, #206	; 0xce
 8005fd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8005fd8:	e020      	b.n	800601c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe0:	4413      	add	r3, r2
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7ff ff60 	bl	8005ea8 <is_aperture>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	461a      	mov	r2, r3
 8005fec:	7afb      	ldrb	r3, [r7, #11]
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d003      	beq.n	8005ffa <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005ff2:	23ce      	movs	r3, #206	; 0xce
 8005ff4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8005ff8:	e010      	b.n	800601c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8005ffe:	6a3a      	ldr	r2, [r7, #32]
 8006000:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006002:	6838      	ldr	r0, [r7, #0]
 8006004:	f7ff ff6a 	bl	8005edc <enable_spad_bit>
		currentSpad++;
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	3301      	adds	r3, #1
 800600c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800600e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006010:	3301      	adds	r3, #1
 8006012:	62bb      	str	r3, [r7, #40]	; 0x28
 8006014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006018:	429a      	cmp	r2, r3
 800601a:	d3cf      	bcc.n	8005fbc <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800601c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800601e:	6a3a      	ldr	r2, [r7, #32]
 8006020:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8006022:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006026:	2b00      	cmp	r3, #0
 8006028:	d106      	bne.n	8006038 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800602a:	6839      	ldr	r1, [r7, #0]
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f7ff ff8d 	bl	8005f4c <set_ref_spad_map>
 8006032:	4603      	mov	r3, r0
 8006034:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8006038:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800603c:	2b00      	cmp	r3, #0
 800603e:	d121      	bne.n	8006084 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8006040:	f107 0314 	add.w	r3, r7, #20
 8006044:	4619      	mov	r1, r3
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f7ff ff93 	bl	8005f72 <get_ref_spad_map>
 800604c:	4603      	mov	r3, r0
 800604e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8006052:	2300      	movs	r3, #0
 8006054:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8006056:	e011      	b.n	800607c <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	4413      	add	r3, r2
 800605e:	781a      	ldrb	r2, [r3, #0]
 8006060:	f107 0114 	add.w	r1, r7, #20
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	440b      	add	r3, r1
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	429a      	cmp	r2, r3
 800606c:	d003      	beq.n	8006076 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800606e:	23ce      	movs	r3, #206	; 0xce
 8006070:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8006074:	e006      	b.n	8006084 <enable_ref_spads+0xec>
			}
			i++;
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	3301      	adds	r3, #1
 800607a:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800607c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800607e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006080:	429a      	cmp	r2, r3
 8006082:	d3e9      	bcc.n	8006058 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8006084:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006088:	4618      	mov	r0, r3
 800608a:	3730      	adds	r7, #48	; 0x30
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b08a      	sub	sp, #40	; 0x28
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800609a:	2300      	movs	r3, #0
 800609c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80060a0:	2300      	movs	r3, #0
 80060a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80060ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80060b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d107      	bne.n	80060c8 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80060b8:	22c0      	movs	r2, #192	; 0xc0
 80060ba:	2101      	movs	r1, #1
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f003 f98f 	bl	80093e0 <VL53L0X_WrByte>
 80060c2:	4603      	mov	r3, r0
 80060c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80060c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d108      	bne.n	80060e2 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80060d0:	f107 0308 	add.w	r3, r7, #8
 80060d4:	4619      	mov	r1, r3
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7ff fc48 	bl	800596c <VL53L0X_PerformSingleRangingMeasurement>
 80060dc:	4603      	mov	r3, r0
 80060de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80060e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d107      	bne.n	80060fa <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80060ea:	2201      	movs	r2, #1
 80060ec:	21ff      	movs	r1, #255	; 0xff
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f003 f976 	bl	80093e0 <VL53L0X_WrByte>
 80060f4:	4603      	mov	r3, r0
 80060f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 80060fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d107      	bne.n	8006112 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	21b6      	movs	r1, #182	; 0xb6
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f003 f8f6 	bl	80092f8 <VL53L0X_RdWord>
 800610c:	4603      	mov	r3, r0
 800610e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8006112:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006116:	2b00      	cmp	r3, #0
 8006118:	d107      	bne.n	800612a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800611a:	2200      	movs	r2, #0
 800611c:	21ff      	movs	r1, #255	; 0xff
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f003 f95e 	bl	80093e0 <VL53L0X_WrByte>
 8006124:	4603      	mov	r3, r0
 8006126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800612a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800612e:	2b00      	cmp	r3, #0
 8006130:	d112      	bne.n	8006158 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006132:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006136:	461a      	mov	r2, r3
 8006138:	2101      	movs	r1, #1
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f003 f950 	bl	80093e0 <VL53L0X_WrByte>
 8006140:	4603      	mov	r3, r0
 8006142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8006146:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800614a:	2b00      	cmp	r3, #0
 800614c:	d104      	bne.n	8006158 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006154:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8006158:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800615c:	4618      	mov	r0, r3
 800615e:	3728      	adds	r7, #40	; 0x28
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8006164:	b590      	push	{r4, r7, lr}
 8006166:	b09d      	sub	sp, #116	; 0x74
 8006168:	af06      	add	r7, sp, #24
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006170:	2300      	movs	r3, #0
 8006172:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8006176:	23b4      	movs	r3, #180	; 0xb4
 8006178:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800617c:	2303      	movs	r3, #3
 800617e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8006180:	232c      	movs	r3, #44	; 0x2c
 8006182:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8006184:	2300      	movs	r3, #0
 8006186:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8006188:	2300      	movs	r3, #0
 800618a:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800618c:	2300      	movs	r3, #0
 800618e:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8006190:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006194:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8006196:	2300      	movs	r3, #0
 8006198:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800619a:	2300      	movs	r3, #0
 800619c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800619e:	2306      	movs	r3, #6
 80061a0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80061a2:	2300      	movs	r3, #0
 80061a4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80061aa:	2300      	movs	r3, #0
 80061ac:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80061b0:	2300      	movs	r3, #0
 80061b2:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80061b4:	2300      	movs	r3, #0
 80061b6:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80061b8:	2300      	movs	r3, #0
 80061ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80061bc:	2300      	movs	r3, #0
 80061be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f8b3 313a 	ldrh.w	r3, [r3, #314]	; 0x13a
 80061c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80061ca:	2300      	movs	r3, #0
 80061cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80061ce:	e009      	b.n	80061e4 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80061da:	2200      	movs	r2, #0
 80061dc:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80061de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061e0:	3301      	adds	r3, #1
 80061e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80061e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d3f1      	bcc.n	80061d0 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80061ec:	2201      	movs	r2, #1
 80061ee:	21ff      	movs	r1, #255	; 0xff
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f003 f8f5 	bl	80093e0 <VL53L0X_WrByte>
 80061f6:	4603      	mov	r3, r0
 80061f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80061fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006200:	2b00      	cmp	r3, #0
 8006202:	d107      	bne.n	8006214 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8006204:	2200      	movs	r2, #0
 8006206:	214f      	movs	r1, #79	; 0x4f
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f003 f8e9 	bl	80093e0 <VL53L0X_WrByte>
 800620e:	4603      	mov	r3, r0
 8006210:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006214:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006218:	2b00      	cmp	r3, #0
 800621a:	d107      	bne.n	800622c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800621c:	222c      	movs	r2, #44	; 0x2c
 800621e:	214e      	movs	r1, #78	; 0x4e
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f003 f8dd 	bl	80093e0 <VL53L0X_WrByte>
 8006226:	4603      	mov	r3, r0
 8006228:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800622c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006230:	2b00      	cmp	r3, #0
 8006232:	d107      	bne.n	8006244 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006234:	2200      	movs	r2, #0
 8006236:	21ff      	movs	r1, #255	; 0xff
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f003 f8d1 	bl	80093e0 <VL53L0X_WrByte>
 800623e:	4603      	mov	r3, r0
 8006240:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006244:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006248:	2b00      	cmp	r3, #0
 800624a:	d109      	bne.n	8006260 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800624c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006250:	461a      	mov	r2, r3
 8006252:	21b6      	movs	r1, #182	; 0xb6
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f003 f8c3 	bl	80093e0 <VL53L0X_WrByte>
 800625a:	4603      	mov	r3, r0
 800625c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8006260:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006264:	2b00      	cmp	r3, #0
 8006266:	d107      	bne.n	8006278 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8006268:	2200      	movs	r2, #0
 800626a:	2180      	movs	r1, #128	; 0x80
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f003 f8b7 	bl	80093e0 <VL53L0X_WrByte>
 8006272:	4603      	mov	r3, r0
 8006274:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8006278:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10a      	bne.n	8006296 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8006280:	f107 0210 	add.w	r2, r7, #16
 8006284:	f107 0111 	add.w	r1, r7, #17
 8006288:	2300      	movs	r3, #0
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f000 fbbb 	bl	8006a06 <VL53L0X_perform_ref_calibration>
 8006290:	4603      	mov	r3, r0
 8006292:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8006296:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800629a:	2b00      	cmp	r3, #0
 800629c:	d121      	bne.n	80062e2 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800629e:	2300      	movs	r3, #0
 80062a0:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80062a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062a4:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80062a6:	2300      	movs	r3, #0
 80062a8:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80062aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ac:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 80062ba:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80062be:	f107 0218 	add.w	r2, r7, #24
 80062c2:	9204      	str	r2, [sp, #16]
 80062c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062c6:	9203      	str	r2, [sp, #12]
 80062c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80062ca:	9202      	str	r2, [sp, #8]
 80062cc:	9301      	str	r3, [sp, #4]
 80062ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	4623      	mov	r3, r4
 80062d4:	4602      	mov	r2, r0
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f7ff fe5e 	bl	8005f98 <enable_ref_spads>
 80062dc:	4603      	mov	r3, r0
 80062de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80062e2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d174      	bne.n	80063d4 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 80062ee:	f107 0312 	add.w	r3, r7, #18
 80062f2:	4619      	mov	r1, r3
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f7ff fecb 	bl	8006090 <perform_ref_signal_measurement>
 80062fa:	4603      	mov	r3, r0
 80062fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006300:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006304:	2b00      	cmp	r3, #0
 8006306:	d161      	bne.n	80063cc <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8006308:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800630a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800630c:	429a      	cmp	r2, r3
 800630e:	d25d      	bcs.n	80063cc <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8006310:	2300      	movs	r3, #0
 8006312:	64bb      	str	r3, [r7, #72]	; 0x48
 8006314:	e009      	b.n	800632a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800631a:	4413      	add	r3, r2
 800631c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006320:	2200      	movs	r2, #0
 8006322:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8006324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006326:	3301      	adds	r3, #1
 8006328:	64bb      	str	r3, [r7, #72]	; 0x48
 800632a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800632c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632e:	429a      	cmp	r2, r3
 8006330:	d3f1      	bcc.n	8006316 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8006332:	e002      	b.n	800633a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8006334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006336:	3301      	adds	r3, #1
 8006338:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800633a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800633e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006340:	4413      	add	r3, r2
 8006342:	4618      	mov	r0, r3
 8006344:	f7ff fdb0 	bl	8005ea8 <is_aperture>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d103      	bne.n	8006356 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800634e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006352:	429a      	cmp	r2, r3
 8006354:	d3ee      	bcc.n	8006334 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8006356:	2301      	movs	r3, #1
 8006358:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800635a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800635c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800636a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800636e:	f107 0218 	add.w	r2, r7, #24
 8006372:	9204      	str	r2, [sp, #16]
 8006374:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006376:	9203      	str	r2, [sp, #12]
 8006378:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800637a:	9202      	str	r2, [sp, #8]
 800637c:	9301      	str	r3, [sp, #4]
 800637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	4623      	mov	r3, r4
 8006384:	4602      	mov	r2, r0
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f7ff fe06 	bl	8005f98 <enable_ref_spads>
 800638c:	4603      	mov	r3, r0
 800638e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006392:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006396:	2b00      	cmp	r3, #0
 8006398:	d11b      	bne.n	80063d2 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800639e:	f107 0312 	add.w	r3, r7, #18
 80063a2:	4619      	mov	r1, r3
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f7ff fe73 	bl	8006090 <perform_ref_signal_measurement>
 80063aa:	4603      	mov	r3, r0
 80063ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 80063b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10c      	bne.n	80063d2 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 80063b8:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 80063ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80063bc:	429a      	cmp	r2, r3
 80063be:	d208      	bcs.n	80063d2 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 80063c0:	2301      	movs	r3, #1
 80063c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 80063c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c8:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 80063ca:	e002      	b.n	80063d2 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 80063cc:	2300      	movs	r3, #0
 80063ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063d0:	e000      	b.n	80063d4 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 80063d2:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80063d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f040 80af 	bne.w	800653c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 80063de:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 80063e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80063e2:	429a      	cmp	r2, r3
 80063e4:	f240 80aa 	bls.w	800653c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 80063e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 80063ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f0:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f503 7192 	add.w	r1, r3, #292	; 0x124
 80063f8:	f107 031c 	add.w	r3, r7, #28
 80063fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063fe:	4618      	mov	r0, r3
 8006400:	f00d f851 	bl	80134a6 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006404:	8a7b      	ldrh	r3, [r7, #18]
 8006406:	461a      	mov	r2, r3
 8006408:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	bfb8      	it	lt
 8006410:	425b      	neglt	r3, r3
 8006412:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8006414:	2300      	movs	r3, #0
 8006416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800641a:	e086      	b.n	800652a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8006422:	f107 0314 	add.w	r3, r7, #20
 8006426:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800642a:	f7ff fcdf 	bl	8005dec <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006434:	d103      	bne.n	800643e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006436:	23ce      	movs	r3, #206	; 0xce
 8006438:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800643c:	e07e      	b.n	800653c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800643e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006440:	3301      	adds	r3, #1
 8006442:	63fb      	str	r3, [r7, #60]	; 0x3c

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8006444:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	4413      	add	r3, r2
 800644c:	4618      	mov	r0, r3
 800644e:	f7ff fd2b 	bl	8005ea8 <is_aperture>
 8006452:	4603      	mov	r3, r0
 8006454:	461a      	mov	r2, r3
 8006456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006458:	4293      	cmp	r3, r2
 800645a:	d003      	beq.n	8006464 <VL53L0X_perform_ref_spad_management+0x300>
					needAptSpads) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800645c:	23ce      	movs	r3, #206	; 0xce
 800645e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8006462:	e06b      	b.n	800653c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			currentSpadIndex = nextGoodSpad;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800646e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006470:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006472:	4618      	mov	r0, r3
 8006474:	f7ff fd32 	bl	8005edc <enable_spad_bit>
 8006478:	4603      	mov	r3, r0
 800647a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800647e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10c      	bne.n	80064a0 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8006486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006488:	3301      	adds	r3, #1
 800648a:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8006492:	4619      	mov	r1, r3
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f7ff fd59 	bl	8005f4c <set_ref_spad_map>
 800649a:	4603      	mov	r3, r0
 800649c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80064a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d146      	bne.n	8006536 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80064a8:	f107 0312 	add.w	r3, r7, #18
 80064ac:	4619      	mov	r1, r3
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f7ff fdee 	bl	8006090 <perform_ref_signal_measurement>
 80064b4:	4603      	mov	r3, r0
 80064b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 80064ba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d13b      	bne.n	800653a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80064c2:	8a7b      	ldrh	r3, [r7, #18]
 80064c4:	461a      	mov	r2, r3
 80064c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	bfb8      	it	lt
 80064ce:	425b      	neglt	r3, r3
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 80064d2:	8a7b      	ldrh	r3, [r7, #18]
 80064d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d21c      	bcs.n	8006514 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 80064da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064de:	429a      	cmp	r2, r3
 80064e0:	d914      	bls.n	800650c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 80064e2:	f107 031c 	add.w	r3, r7, #28
 80064e6:	4619      	mov	r1, r3
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f7ff fd2f 	bl	8005f4c <set_ref_spad_map>
 80064ee:	4603      	mov	r3, r0
 80064f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 80064fa:	f107 011c 	add.w	r1, r7, #28
 80064fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006500:	4618      	mov	r0, r3
 8006502:	f00c ffd0 	bl	80134a6 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8006506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006508:	3b01      	subs	r3, #1
 800650a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800650c:	2301      	movs	r3, #1
 800650e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006512:	e00a      	b.n	800652a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800651e:	f107 031c 	add.w	r3, r7, #28
 8006522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006524:	4618      	mov	r0, r3
 8006526:	f00c ffbe 	bl	80134a6 <memcpy>
		while (!complete) {
 800652a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800652e:	2b00      	cmp	r3, #0
 8006530:	f43f af74 	beq.w	800641c <VL53L0X_perform_ref_spad_management+0x2b8>
 8006534:	e002      	b.n	800653c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006536:	bf00      	nop
 8006538:	e000      	b.n	800653c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800653a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800653c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006540:	2b00      	cmp	r3, #0
 8006542:	d115      	bne.n	8006570 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006548:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8006550:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	b2da      	uxtb	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	781a      	ldrb	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8006570:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006574:	4618      	mov	r0, r3
 8006576:	375c      	adds	r7, #92	; 0x5c
 8006578:	46bd      	mov	sp, r7
 800657a:	bd90      	pop	{r4, r7, pc}

0800657c <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800657c:	b590      	push	{r4, r7, lr}
 800657e:	b093      	sub	sp, #76	; 0x4c
 8006580:	af06      	add	r7, sp, #24
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	4613      	mov	r3, r2
 8006588:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800658a:	2300      	movs	r3, #0
 800658c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8006590:	2300      	movs	r3, #0
 8006592:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8006594:	23b4      	movs	r3, #180	; 0xb4
 8006596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800659a:	2306      	movs	r3, #6
 800659c:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800659e:	232c      	movs	r3, #44	; 0x2c
 80065a0:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80065a2:	2201      	movs	r2, #1
 80065a4:	21ff      	movs	r1, #255	; 0xff
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f002 ff1a 	bl	80093e0 <VL53L0X_WrByte>
 80065ac:	4603      	mov	r3, r0
 80065ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80065b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d107      	bne.n	80065ca <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 80065ba:	2200      	movs	r2, #0
 80065bc:	214f      	movs	r1, #79	; 0x4f
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f002 ff0e 	bl	80093e0 <VL53L0X_WrByte>
 80065c4:	4603      	mov	r3, r0
 80065c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80065ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d107      	bne.n	80065e2 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 80065d2:	222c      	movs	r2, #44	; 0x2c
 80065d4:	214e      	movs	r1, #78	; 0x4e
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f002 ff02 	bl	80093e0 <VL53L0X_WrByte>
 80065dc:	4603      	mov	r3, r0
 80065de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80065e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d107      	bne.n	80065fa <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80065ea:	2200      	movs	r2, #0
 80065ec:	21ff      	movs	r1, #255	; 0xff
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f002 fef6 	bl	80093e0 <VL53L0X_WrByte>
 80065f4:	4603      	mov	r3, r0
 80065f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80065fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d109      	bne.n	8006616 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8006602:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006606:	461a      	mov	r2, r3
 8006608:	21b6      	movs	r1, #182	; 0xb6
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f002 fee8 	bl	80093e0 <VL53L0X_WrByte>
 8006610:	4603      	mov	r3, r0
 8006612:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8006616:	2300      	movs	r3, #0
 8006618:	627b      	str	r3, [r7, #36]	; 0x24
 800661a:	e009      	b.n	8006630 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	4413      	add	r3, r2
 8006622:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006626:	2200      	movs	r2, #0
 8006628:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800662a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662c:	3301      	adds	r3, #1
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
 8006630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	429a      	cmp	r2, r3
 8006636:	d3f1      	bcc.n	800661c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8006638:	79fb      	ldrb	r3, [r7, #7]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d011      	beq.n	8006662 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800663e:	e002      	b.n	8006646 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	3301      	adds	r3, #1
 8006644:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006646:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664c:	4413      	add	r3, r2
 800664e:	4618      	mov	r0, r3
 8006650:	f7ff fc2a 	bl	8005ea8 <is_aperture>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d103      	bne.n	8006662 <VL53L0X_set_reference_spads+0xe6>
 800665a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	429a      	cmp	r2, r3
 8006660:	d3ee      	bcc.n	8006640 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800666e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006672:	79f9      	ldrb	r1, [r7, #7]
 8006674:	f107 0214 	add.w	r2, r7, #20
 8006678:	9204      	str	r2, [sp, #16]
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	9203      	str	r2, [sp, #12]
 800667e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006680:	9202      	str	r2, [sp, #8]
 8006682:	9301      	str	r3, [sp, #4]
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	4623      	mov	r3, r4
 800668a:	4602      	mov	r2, r0
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f7ff fc83 	bl	8005f98 <enable_ref_spads>
 8006692:	4603      	mov	r3, r0
 8006694:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8006698:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10c      	bne.n	80066ba <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	b2da      	uxtb	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	79fa      	ldrb	r2, [r7, #7]
 80066b6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 80066ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3734      	adds	r7, #52	; 0x34
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd90      	pop	{r4, r7, pc}

080066c6 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	460b      	mov	r3, r1
 80066d0:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066d2:	2300      	movs	r3, #0
 80066d4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80066d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10a      	bne.n	80066f4 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80066de:	78fb      	ldrb	r3, [r7, #3]
 80066e0:	f043 0301 	orr.w	r3, r3, #1
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	461a      	mov	r2, r3
 80066e8:	2100      	movs	r1, #0
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f002 fe78 	bl	80093e0 <VL53L0X_WrByte>
 80066f0:	4603      	mov	r3, r0
 80066f2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80066f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d104      	bne.n	8006706 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 f9bf 	bl	8006a80 <VL53L0X_measurement_poll_for_completion>
 8006702:	4603      	mov	r3, r0
 8006704:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d105      	bne.n	800671a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800670e:	2100      	movs	r1, #0
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f7ff fab5 	bl	8005c80 <VL53L0X_ClearInterruptMask>
 8006716:	4603      	mov	r3, r0
 8006718:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800671a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d106      	bne.n	8006730 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8006722:	2200      	movs	r2, #0
 8006724:	2100      	movs	r1, #0
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f002 fe5a 	bl	80093e0 <VL53L0X_WrByte>
 800672c:	4603      	mov	r3, r0
 800672e:	73fb      	strb	r3, [r7, #15]

	return Status;
 8006730:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	4608      	mov	r0, r1
 8006746:	4611      	mov	r1, r2
 8006748:	461a      	mov	r2, r3
 800674a:	4603      	mov	r3, r0
 800674c:	70fb      	strb	r3, [r7, #3]
 800674e:	460b      	mov	r3, r1
 8006750:	70bb      	strb	r3, [r7, #2]
 8006752:	4613      	mov	r3, r2
 8006754:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006756:	2300      	movs	r3, #0
 8006758:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800675a:	2300      	movs	r3, #0
 800675c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800675e:	2201      	movs	r2, #1
 8006760:	21ff      	movs	r1, #255	; 0xff
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f002 fe3c 	bl	80093e0 <VL53L0X_WrByte>
 8006768:	4603      	mov	r3, r0
 800676a:	461a      	mov	r2, r3
 800676c:	7bfb      	ldrb	r3, [r7, #15]
 800676e:	4313      	orrs	r3, r2
 8006770:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006772:	2200      	movs	r2, #0
 8006774:	2100      	movs	r1, #0
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f002 fe32 	bl	80093e0 <VL53L0X_WrByte>
 800677c:	4603      	mov	r3, r0
 800677e:	461a      	mov	r2, r3
 8006780:	7bfb      	ldrb	r3, [r7, #15]
 8006782:	4313      	orrs	r3, r2
 8006784:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006786:	2200      	movs	r2, #0
 8006788:	21ff      	movs	r1, #255	; 0xff
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f002 fe28 	bl	80093e0 <VL53L0X_WrByte>
 8006790:	4603      	mov	r3, r0
 8006792:	461a      	mov	r2, r3
 8006794:	7bfb      	ldrb	r3, [r7, #15]
 8006796:	4313      	orrs	r3, r2
 8006798:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800679a:	78fb      	ldrb	r3, [r7, #3]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d01e      	beq.n	80067de <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80067a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d009      	beq.n	80067bc <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80067a8:	69ba      	ldr	r2, [r7, #24]
 80067aa:	21cb      	movs	r1, #203	; 0xcb
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f002 fd1c 	bl	80091ea <VL53L0X_RdByte>
 80067b2:	4603      	mov	r3, r0
 80067b4:	461a      	mov	r2, r3
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80067bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d02a      	beq.n	800681a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 80067c4:	f107 030e 	add.w	r3, r7, #14
 80067c8:	461a      	mov	r2, r3
 80067ca:	21ee      	movs	r1, #238	; 0xee
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f002 fd0c 	bl	80091ea <VL53L0X_RdByte>
 80067d2:	4603      	mov	r3, r0
 80067d4:	461a      	mov	r2, r3
 80067d6:	7bfb      	ldrb	r3, [r7, #15]
 80067d8:	4313      	orrs	r3, r2
 80067da:	73fb      	strb	r3, [r7, #15]
 80067dc:	e01d      	b.n	800681a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 80067de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80067e6:	78bb      	ldrb	r3, [r7, #2]
 80067e8:	461a      	mov	r2, r3
 80067ea:	21cb      	movs	r1, #203	; 0xcb
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f002 fdf7 	bl	80093e0 <VL53L0X_WrByte>
 80067f2:	4603      	mov	r3, r0
 80067f4:	461a      	mov	r2, r3
 80067f6:	7bfb      	ldrb	r3, [r7, #15]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80067fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00a      	beq.n	800681a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8006804:	787b      	ldrb	r3, [r7, #1]
 8006806:	2280      	movs	r2, #128	; 0x80
 8006808:	21ee      	movs	r1, #238	; 0xee
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f002 fe36 	bl	800947c <VL53L0X_UpdateByte>
 8006810:	4603      	mov	r3, r0
 8006812:	461a      	mov	r2, r3
 8006814:	7bfb      	ldrb	r3, [r7, #15]
 8006816:	4313      	orrs	r3, r2
 8006818:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800681a:	2201      	movs	r2, #1
 800681c:	21ff      	movs	r1, #255	; 0xff
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f002 fdde 	bl	80093e0 <VL53L0X_WrByte>
 8006824:	4603      	mov	r3, r0
 8006826:	461a      	mov	r2, r3
 8006828:	7bfb      	ldrb	r3, [r7, #15]
 800682a:	4313      	orrs	r3, r2
 800682c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800682e:	2201      	movs	r2, #1
 8006830:	2100      	movs	r1, #0
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f002 fdd4 	bl	80093e0 <VL53L0X_WrByte>
 8006838:	4603      	mov	r3, r0
 800683a:	461a      	mov	r2, r3
 800683c:	7bfb      	ldrb	r3, [r7, #15]
 800683e:	4313      	orrs	r3, r2
 8006840:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006842:	2200      	movs	r2, #0
 8006844:	21ff      	movs	r1, #255	; 0xff
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f002 fdca 	bl	80093e0 <VL53L0X_WrByte>
 800684c:	4603      	mov	r3, r0
 800684e:	461a      	mov	r2, r3
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	4313      	orrs	r3, r2
 8006854:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8006856:	7bbb      	ldrb	r3, [r7, #14]
 8006858:	f023 0310 	bic.w	r3, r3, #16
 800685c:	b2da      	uxtb	r2, r3
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	701a      	strb	r2, [r3, #0]

	return Status;
 8006862:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b08a      	sub	sp, #40	; 0x28
 8006872:	af04      	add	r7, sp, #16
 8006874:	60f8      	str	r0, [r7, #12]
 8006876:	60b9      	str	r1, [r7, #8]
 8006878:	4611      	mov	r1, r2
 800687a:	461a      	mov	r2, r3
 800687c:	460b      	mov	r3, r1
 800687e:	71fb      	strb	r3, [r7, #7]
 8006880:	4613      	mov	r3, r2
 8006882:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006884:	2300      	movs	r3, #0
 8006886:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006888:	2300      	movs	r3, #0
 800688a:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800688c:	2300      	movs	r3, #0
 800688e:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006890:	2300      	movs	r3, #0
 8006892:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8006894:	2300      	movs	r3, #0
 8006896:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006898:	79bb      	ldrb	r3, [r7, #6]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80068a4:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80068a6:	2201      	movs	r2, #1
 80068a8:	2101      	movs	r1, #1
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f002 fd98 	bl	80093e0 <VL53L0X_WrByte>
 80068b0:	4603      	mov	r3, r0
 80068b2:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80068b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d105      	bne.n	80068c8 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80068bc:	2140      	movs	r1, #64	; 0x40
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f7ff ff01 	bl	80066c6 <VL53L0X_perform_single_ref_calibration>
 80068c4:	4603      	mov	r3, r0
 80068c6:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80068c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d115      	bne.n	80068fc <VL53L0X_perform_vhv_calibration+0x8e>
 80068d0:	79fb      	ldrb	r3, [r7, #7]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d112      	bne.n	80068fc <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80068d6:	7d39      	ldrb	r1, [r7, #20]
 80068d8:	7d7a      	ldrb	r2, [r7, #21]
 80068da:	2300      	movs	r3, #0
 80068dc:	9303      	str	r3, [sp, #12]
 80068de:	2301      	movs	r3, #1
 80068e0:	9302      	str	r3, [sp, #8]
 80068e2:	f107 0313 	add.w	r3, r7, #19
 80068e6:	9301      	str	r3, [sp, #4]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	460b      	mov	r3, r1
 80068ee:	2101      	movs	r1, #1
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f7ff ff23 	bl	800673c <VL53L0X_ref_calibration_io>
 80068f6:	4603      	mov	r3, r0
 80068f8:	75fb      	strb	r3, [r7, #23]
 80068fa:	e002      	b.n	8006902 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	2200      	movs	r2, #0
 8006900:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006902:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d112      	bne.n	8006930 <VL53L0X_perform_vhv_calibration+0xc2>
 800690a:	79bb      	ldrb	r3, [r7, #6]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00f      	beq.n	8006930 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006910:	7dbb      	ldrb	r3, [r7, #22]
 8006912:	461a      	mov	r2, r3
 8006914:	2101      	movs	r1, #1
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f002 fd62 	bl	80093e0 <VL53L0X_WrByte>
 800691c:	4603      	mov	r3, r0
 800691e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006920:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d103      	bne.n	8006930 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	7dba      	ldrb	r2, [r7, #22]
 800692c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006930:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3718      	adds	r7, #24
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b08a      	sub	sp, #40	; 0x28
 8006940:	af04      	add	r7, sp, #16
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	4611      	mov	r1, r2
 8006948:	461a      	mov	r2, r3
 800694a:	460b      	mov	r3, r1
 800694c:	71fb      	strb	r3, [r7, #7]
 800694e:	4613      	mov	r3, r2
 8006950:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006952:	2300      	movs	r3, #0
 8006954:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006956:	2300      	movs	r3, #0
 8006958:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800695a:	2300      	movs	r3, #0
 800695c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800695e:	2300      	movs	r3, #0
 8006960:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006962:	79bb      	ldrb	r3, [r7, #6]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d003      	beq.n	8006970 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800696e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8006970:	2202      	movs	r2, #2
 8006972:	2101      	movs	r1, #1
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f002 fd33 	bl	80093e0 <VL53L0X_WrByte>
 800697a:	4603      	mov	r3, r0
 800697c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800697e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d105      	bne.n	8006992 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8006986:	2100      	movs	r1, #0
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f7ff fe9c 	bl	80066c6 <VL53L0X_perform_single_ref_calibration>
 800698e:	4603      	mov	r3, r0
 8006990:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006992:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d115      	bne.n	80069c6 <VL53L0X_perform_phase_calibration+0x8a>
 800699a:	79fb      	ldrb	r3, [r7, #7]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d112      	bne.n	80069c6 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80069a0:	7d39      	ldrb	r1, [r7, #20]
 80069a2:	7d7a      	ldrb	r2, [r7, #21]
 80069a4:	2301      	movs	r3, #1
 80069a6:	9303      	str	r3, [sp, #12]
 80069a8:	2300      	movs	r3, #0
 80069aa:	9302      	str	r3, [sp, #8]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	9301      	str	r3, [sp, #4]
 80069b0:	f107 0313 	add.w	r3, r7, #19
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	460b      	mov	r3, r1
 80069b8:	2101      	movs	r1, #1
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f7ff febe 	bl	800673c <VL53L0X_ref_calibration_io>
 80069c0:	4603      	mov	r3, r0
 80069c2:	75fb      	strb	r3, [r7, #23]
 80069c4:	e002      	b.n	80069cc <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2200      	movs	r2, #0
 80069ca:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80069cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d112      	bne.n	80069fa <VL53L0X_perform_phase_calibration+0xbe>
 80069d4:	79bb      	ldrb	r3, [r7, #6]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00f      	beq.n	80069fa <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80069da:	7dbb      	ldrb	r3, [r7, #22]
 80069dc:	461a      	mov	r2, r3
 80069de:	2101      	movs	r1, #1
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f002 fcfd 	bl	80093e0 <VL53L0X_WrByte>
 80069e6:	4603      	mov	r3, r0
 80069e8:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80069ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d103      	bne.n	80069fa <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	7dba      	ldrb	r2, [r7, #22]
 80069f6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80069fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3718      	adds	r7, #24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b086      	sub	sp, #24
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	60f8      	str	r0, [r7, #12]
 8006a0e:	60b9      	str	r1, [r7, #8]
 8006a10:	607a      	str	r2, [r7, #4]
 8006a12:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a14:	2300      	movs	r3, #0
 8006a16:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006a22:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8006a24:	78fa      	ldrb	r2, [r7, #3]
 8006a26:	2300      	movs	r3, #0
 8006a28:	68b9      	ldr	r1, [r7, #8]
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f7ff ff1f 	bl	800686e <VL53L0X_perform_vhv_calibration>
 8006a30:	4603      	mov	r3, r0
 8006a32:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8006a34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d107      	bne.n	8006a4c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8006a3c:	78fa      	ldrb	r2, [r7, #3]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	6879      	ldr	r1, [r7, #4]
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f7ff ff7a 	bl	800693c <VL53L0X_perform_phase_calibration>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8006a4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10f      	bne.n	8006a74 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006a54:	7dbb      	ldrb	r3, [r7, #22]
 8006a56:	461a      	mov	r2, r3
 8006a58:	2101      	movs	r1, #1
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f002 fcc0 	bl	80093e0 <VL53L0X_WrByte>
 8006a60:	4603      	mov	r3, r0
 8006a62:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006a64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d103      	bne.n	8006a74 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	7dba      	ldrb	r2, [r7, #22]
 8006a70:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006a74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3718      	adds	r7, #24
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8006a90:	2300      	movs	r3, #0
 8006a92:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006a94:	f107 030f 	add.w	r3, r7, #15
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7fe fdff 	bl	800569e <VL53L0X_GetMeasurementDataReady>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8006aa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10f      	bne.n	8006acc <VL53L0X_measurement_poll_for_completion+0x4c>
			break; /* the error is set */

		if (NewDataReady == 1)
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d00e      	beq.n	8006ad0 <VL53L0X_measurement_poll_for_completion+0x50>
			break; /* done note that status == 0 */

		LoopNb++;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	2bc7      	cmp	r3, #199	; 0xc7
 8006abc:	d902      	bls.n	8006ac4 <VL53L0X_measurement_poll_for_completion+0x44>
			Status = VL53L0X_ERROR_TIME_OUT;
 8006abe:	23f9      	movs	r3, #249	; 0xf9
 8006ac0:	75fb      	strb	r3, [r7, #23]
			break;
 8006ac2:	e006      	b.n	8006ad2 <VL53L0X_measurement_poll_for_completion+0x52>
		}

		VL53L0X_PollingDelay(Dev);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f002 fd0d 	bl	80094e4 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006aca:	e7e3      	b.n	8006a94 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8006acc:	bf00      	nop
 8006ace:	e000      	b.n	8006ad2 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */
 8006ad0:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8006ad2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b085      	sub	sp, #20
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8006aec:	79fb      	ldrb	r3, [r7, #7]
 8006aee:	3301      	adds	r3, #1
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	005b      	lsls	r3, r3, #1
 8006af4:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8006af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8006b12:	79fb      	ldrb	r3, [r7, #7]
 8006b14:	085b      	lsrs	r3, r3, #1
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b085      	sub	sp, #20
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8006b32:	2300      	movs	r3, #0
 8006b34:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8006b36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b3a:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8006b3c:	e002      	b.n	8006b44 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	089b      	lsrs	r3, r3, #2
 8006b42:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d8f8      	bhi.n	8006b3e <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8006b4c:	e017      	b.n	8006b7e <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	4413      	add	r3, r2
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d30b      	bcc.n	8006b72 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	4413      	add	r3, r2
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	085b      	lsrs	r3, r3, #1
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]
 8006b70:	e002      	b.n	8006b78 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	085b      	lsrs	r3, r3, #1
 8006b76:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	089b      	lsrs	r3, r3, #2
 8006b7c:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1e4      	bne.n	8006b4e <VL53L0X_isqrt+0x24>
	}

	return res;
 8006b84:	68fb      	ldr	r3, [r7, #12]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b086      	sub	sp, #24
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	2183      	movs	r1, #131	; 0x83
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f002 fc1c 	bl	80093e0 <VL53L0X_WrByte>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	461a      	mov	r2, r3
 8006bac:	7dfb      	ldrb	r3, [r7, #23]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8006bb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d11c      	bne.n	8006bf4 <VL53L0X_device_read_strobe+0x62>
		LoopNb = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8006bbe:	f107 030f 	add.w	r3, r7, #15
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	2183      	movs	r1, #131	; 0x83
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f002 fb0f 	bl	80091ea <VL53L0X_RdByte>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d109      	bne.n	8006bea <VL53L0X_device_read_strobe+0x58>
 8006bd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d105      	bne.n	8006bea <VL53L0X_device_read_strobe+0x58>
					break;

			LoopNb = LoopNb + 1;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	3301      	adds	r3, #1
 8006be2:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	2bc7      	cmp	r3, #199	; 0xc7
 8006be8:	d9e9      	bls.n	8006bbe <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	2bc7      	cmp	r3, #199	; 0xc7
 8006bee:	d901      	bls.n	8006bf4 <VL53L0X_device_read_strobe+0x62>
			Status = VL53L0X_ERROR_TIME_OUT;
 8006bf0:	23f9      	movs	r3, #249	; 0xf9
 8006bf2:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	2183      	movs	r1, #131	; 0x83
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f002 fbf1 	bl	80093e0 <VL53L0X_WrByte>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	461a      	mov	r2, r3
 8006c02:	7dfb      	ldrb	r3, [r7, #23]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8006c08:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3718      	adds	r7, #24
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b098      	sub	sp, #96	; 0x60
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c20:	2300      	movs	r3, #0
 8006c22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8006c26:	2300      	movs	r3, #0
 8006c28:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8006c32:	2300      	movs	r3, #0
 8006c34:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8006c36:	2300      	movs	r3, #0
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8006c44:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8006c48:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8006c5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8006c60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006c64:	2b07      	cmp	r3, #7
 8006c66:	f000 8408 	beq.w	800747a <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	2180      	movs	r1, #128	; 0x80
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f002 fbb6 	bl	80093e0 <VL53L0X_WrByte>
 8006c74:	4603      	mov	r3, r0
 8006c76:	461a      	mov	r2, r3
 8006c78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006c82:	2201      	movs	r2, #1
 8006c84:	21ff      	movs	r1, #255	; 0xff
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f002 fbaa 	bl	80093e0 <VL53L0X_WrByte>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	461a      	mov	r2, r3
 8006c90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c94:	4313      	orrs	r3, r2
 8006c96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f002 fb9e 	bl	80093e0 <VL53L0X_WrByte>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cac:	4313      	orrs	r3, r2
 8006cae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006cb2:	2206      	movs	r2, #6
 8006cb4:	21ff      	movs	r1, #255	; 0xff
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f002 fb92 	bl	80093e0 <VL53L0X_WrByte>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006cca:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8006cce:	461a      	mov	r2, r3
 8006cd0:	2183      	movs	r1, #131	; 0x83
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f002 fa89 	bl	80091ea <VL53L0X_RdByte>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8006ce6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006cea:	f043 0304 	orr.w	r3, r3, #4
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	2183      	movs	r1, #131	; 0x83
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f002 fb73 	bl	80093e0 <VL53L0X_WrByte>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d02:	4313      	orrs	r3, r2
 8006d04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8006d08:	2207      	movs	r2, #7
 8006d0a:	21ff      	movs	r1, #255	; 0xff
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f002 fb67 	bl	80093e0 <VL53L0X_WrByte>
 8006d12:	4603      	mov	r3, r0
 8006d14:	461a      	mov	r2, r3
 8006d16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8006d20:	2201      	movs	r2, #1
 8006d22:	2181      	movs	r1, #129	; 0x81
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f002 fb5b 	bl	80093e0 <VL53L0X_WrByte>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d32:	4313      	orrs	r3, r2
 8006d34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f002 fbd3 	bl	80094e4 <VL53L0X_PollingDelay>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	461a      	mov	r2, r3
 8006d42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d46:	4313      	orrs	r3, r2
 8006d48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	2180      	movs	r1, #128	; 0x80
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f002 fb45 	bl	80093e0 <VL53L0X_WrByte>
 8006d56:	4603      	mov	r3, r0
 8006d58:	461a      	mov	r2, r3
 8006d5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8006d64:	78fb      	ldrb	r3, [r7, #3]
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 8098 	beq.w	8006ea0 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8006d70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d74:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f040 8091 	bne.w	8006ea0 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8006d7e:	226b      	movs	r2, #107	; 0x6b
 8006d80:	2194      	movs	r1, #148	; 0x94
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f002 fb2c 	bl	80093e0 <VL53L0X_WrByte>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d90:	4313      	orrs	r3, r2
 8006d92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7ff fefb 	bl	8006b92 <VL53L0X_device_read_strobe>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006da4:	4313      	orrs	r3, r2
 8006da6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006daa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006dae:	461a      	mov	r2, r3
 8006db0:	2190      	movs	r1, #144	; 0x90
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f002 fad8 	bl	8009368 <VL53L0X_RdDWord>
 8006db8:	4603      	mov	r3, r0
 8006dba:	461a      	mov	r2, r3
 8006dbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc8:	0a1b      	lsrs	r3, r3, #8
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dd0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd6:	0bdb      	lsrs	r3, r3, #15
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8006de2:	2224      	movs	r2, #36	; 0x24
 8006de4:	2194      	movs	r1, #148	; 0x94
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f002 fafa 	bl	80093e0 <VL53L0X_WrByte>
 8006dec:	4603      	mov	r3, r0
 8006dee:	461a      	mov	r2, r3
 8006df0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006df4:	4313      	orrs	r3, r2
 8006df6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f7ff fec9 	bl	8006b92 <VL53L0X_device_read_strobe>
 8006e00:	4603      	mov	r3, r0
 8006e02:	461a      	mov	r2, r3
 8006e04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e12:	461a      	mov	r2, r3
 8006e14:	2190      	movs	r1, #144	; 0x90
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f002 faa6 	bl	8009368 <VL53L0X_RdDWord>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	461a      	mov	r2, r3
 8006e20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e24:	4313      	orrs	r3, r2
 8006e26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2c:	0e1b      	lsrs	r3, r3, #24
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8006e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e34:	0c1b      	lsrs	r3, r3, #16
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3c:	0a1b      	lsrs	r3, r3, #8
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8006e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8006e48:	2225      	movs	r2, #37	; 0x25
 8006e4a:	2194      	movs	r1, #148	; 0x94
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f002 fac7 	bl	80093e0 <VL53L0X_WrByte>
 8006e52:	4603      	mov	r3, r0
 8006e54:	461a      	mov	r2, r3
 8006e56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f7ff fe96 	bl	8006b92 <VL53L0X_device_read_strobe>
 8006e66:	4603      	mov	r3, r0
 8006e68:	461a      	mov	r2, r3
 8006e6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e78:	461a      	mov	r2, r3
 8006e7a:	2190      	movs	r1, #144	; 0x90
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f002 fa73 	bl	8009368 <VL53L0X_RdDWord>
 8006e82:	4603      	mov	r3, r0
 8006e84:	461a      	mov	r2, r3
 8006e86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8006e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e92:	0e1b      	lsrs	r3, r3, #24
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8006e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9a:	0c1b      	lsrs	r3, r3, #16
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8006ea0:	78fb      	ldrb	r3, [r7, #3]
 8006ea2:	f003 0302 	and.w	r3, r3, #2
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f000 8189 	beq.w	80071be <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8006eac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006eb0:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f040 8182 	bne.w	80071be <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8006eba:	2202      	movs	r2, #2
 8006ebc:	2194      	movs	r1, #148	; 0x94
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f002 fa8e 	bl	80093e0 <VL53L0X_WrByte>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7ff fe5d 	bl	8006b92 <VL53L0X_device_read_strobe>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	461a      	mov	r2, r3
 8006edc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006ee6:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8006eea:	461a      	mov	r2, r3
 8006eec:	2190      	movs	r1, #144	; 0x90
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f002 f97b 	bl	80091ea <VL53L0X_RdByte>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006efc:	4313      	orrs	r3, r2
 8006efe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006f02:	227b      	movs	r2, #123	; 0x7b
 8006f04:	2194      	movs	r1, #148	; 0x94
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f002 fa6a 	bl	80093e0 <VL53L0X_WrByte>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	461a      	mov	r2, r3
 8006f10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f14:	4313      	orrs	r3, r2
 8006f16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7ff fe39 	bl	8006b92 <VL53L0X_device_read_strobe>
 8006f20:	4603      	mov	r3, r0
 8006f22:	461a      	mov	r2, r3
 8006f24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006f2e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8006f32:	461a      	mov	r2, r3
 8006f34:	2190      	movs	r1, #144	; 0x90
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f002 f957 	bl	80091ea <VL53L0X_RdByte>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	461a      	mov	r2, r3
 8006f40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f44:	4313      	orrs	r3, r2
 8006f46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006f4a:	2277      	movs	r2, #119	; 0x77
 8006f4c:	2194      	movs	r1, #148	; 0x94
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f002 fa46 	bl	80093e0 <VL53L0X_WrByte>
 8006f54:	4603      	mov	r3, r0
 8006f56:	461a      	mov	r2, r3
 8006f58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7ff fe15 	bl	8006b92 <VL53L0X_device_read_strobe>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f70:	4313      	orrs	r3, r2
 8006f72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006f76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	2190      	movs	r1, #144	; 0x90
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f002 f9f2 	bl	8009368 <VL53L0X_RdDWord>
 8006f84:	4603      	mov	r3, r0
 8006f86:	461a      	mov	r2, r3
 8006f88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8006f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f94:	0e5b      	lsrs	r3, r3, #25
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa2:	0c9b      	lsrs	r3, r3, #18
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8006fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb0:	0adb      	lsrs	r3, r3, #11
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8006fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbe:	091b      	lsrs	r3, r3, #4
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8006fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	00db      	lsls	r3, r3, #3
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8006fdc:	2278      	movs	r2, #120	; 0x78
 8006fde:	2194      	movs	r1, #148	; 0x94
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f002 f9fd 	bl	80093e0 <VL53L0X_WrByte>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	461a      	mov	r2, r3
 8006fea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff fdcc 	bl	8006b92 <VL53L0X_device_read_strobe>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007002:	4313      	orrs	r3, r2
 8007004:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007008:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800700c:	461a      	mov	r2, r3
 800700e:	2190      	movs	r1, #144	; 0x90
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f002 f9a9 	bl	8009368 <VL53L0X_RdDWord>
 8007016:	4603      	mov	r3, r0
 8007018:	461a      	mov	r2, r3
 800701a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800701e:	4313      	orrs	r3, r2
 8007020:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8007024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007026:	0f5b      	lsrs	r3, r3, #29
 8007028:	b2db      	uxtb	r3, r3
 800702a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800702e:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8007030:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007034:	4413      	add	r3, r2
 8007036:	b2db      	uxtb	r3, r3
 8007038:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800703a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703c:	0d9b      	lsrs	r3, r3, #22
 800703e:	b2db      	uxtb	r3, r3
 8007040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007044:	b2db      	uxtb	r3, r3
 8007046:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8007048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704a:	0bdb      	lsrs	r3, r3, #15
 800704c:	b2db      	uxtb	r3, r3
 800704e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007052:	b2db      	uxtb	r3, r3
 8007054:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8007056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007058:	0a1b      	lsrs	r3, r3, #8
 800705a:	b2db      	uxtb	r3, r3
 800705c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007060:	b2db      	uxtb	r3, r3
 8007062:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8007064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007066:	085b      	lsrs	r3, r3, #1
 8007068:	b2db      	uxtb	r3, r3
 800706a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800706e:	b2db      	uxtb	r3, r3
 8007070:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8007072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007074:	b2db      	uxtb	r3, r3
 8007076:	019b      	lsls	r3, r3, #6
 8007078:	b2db      	uxtb	r3, r3
 800707a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707e:	b2db      	uxtb	r3, r3
 8007080:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8007084:	2279      	movs	r2, #121	; 0x79
 8007086:	2194      	movs	r1, #148	; 0x94
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f002 f9a9 	bl	80093e0 <VL53L0X_WrByte>
 800708e:	4603      	mov	r3, r0
 8007090:	461a      	mov	r2, r3
 8007092:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007096:	4313      	orrs	r3, r2
 8007098:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f7ff fd78 	bl	8006b92 <VL53L0X_device_read_strobe>
 80070a2:	4603      	mov	r3, r0
 80070a4:	461a      	mov	r2, r3
 80070a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070aa:	4313      	orrs	r3, r2
 80070ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80070b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80070b4:	461a      	mov	r2, r3
 80070b6:	2190      	movs	r1, #144	; 0x90
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f002 f955 	bl	8009368 <VL53L0X_RdDWord>
 80070be:	4603      	mov	r3, r0
 80070c0:	461a      	mov	r2, r3
 80070c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070c6:	4313      	orrs	r3, r2
 80070c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80070cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ce:	0e9b      	lsrs	r3, r3, #26
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070d6:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80070d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80070dc:	4413      	add	r3, r2
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80070e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e4:	0cdb      	lsrs	r3, r3, #19
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 80070f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f2:	0b1b      	lsrs	r3, r3, #12
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 80070fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007100:	095b      	lsrs	r3, r3, #5
 8007102:	b2db      	uxtb	r3, r3
 8007104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007108:	b2db      	uxtb	r3, r3
 800710a:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800710c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710e:	b2db      	uxtb	r3, r3
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	b2db      	uxtb	r3, r3
 8007114:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8007118:	b2db      	uxtb	r3, r3
 800711a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800711e:	227a      	movs	r2, #122	; 0x7a
 8007120:	2194      	movs	r1, #148	; 0x94
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f002 f95c 	bl	80093e0 <VL53L0X_WrByte>
 8007128:	4603      	mov	r3, r0
 800712a:	461a      	mov	r2, r3
 800712c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007130:	4313      	orrs	r3, r2
 8007132:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7ff fd2b 	bl	8006b92 <VL53L0X_device_read_strobe>
 800713c:	4603      	mov	r3, r0
 800713e:	461a      	mov	r2, r3
 8007140:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007144:	4313      	orrs	r3, r2
 8007146:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800714a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800714e:	461a      	mov	r2, r3
 8007150:	2190      	movs	r1, #144	; 0x90
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f002 f908 	bl	8009368 <VL53L0X_RdDWord>
 8007158:	4603      	mov	r3, r0
 800715a:	461a      	mov	r2, r3
 800715c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007160:	4313      	orrs	r3, r2
 8007162:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	0f9b      	lsrs	r3, r3, #30
 800716a:	b2db      	uxtb	r3, r3
 800716c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007170:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8007172:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007176:	4413      	add	r3, r2
 8007178:	b2db      	uxtb	r3, r3
 800717a:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800717c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717e:	0ddb      	lsrs	r3, r3, #23
 8007180:	b2db      	uxtb	r3, r3
 8007182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007186:	b2db      	uxtb	r3, r3
 8007188:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	0c1b      	lsrs	r3, r3, #16
 800718e:	b2db      	uxtb	r3, r3
 8007190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007194:	b2db      	uxtb	r3, r3
 8007196:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8007198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719a:	0a5b      	lsrs	r3, r3, #9
 800719c:	b2db      	uxtb	r3, r3
 800719e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	089b      	lsrs	r3, r3, #2
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 80071b8:	2300      	movs	r3, #0
 80071ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80071be:	78fb      	ldrb	r3, [r7, #3]
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 80f1 	beq.w	80073ac <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80071ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80071ce:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f040 80ea 	bne.w	80073ac <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80071d8:	227b      	movs	r2, #123	; 0x7b
 80071da:	2194      	movs	r1, #148	; 0x94
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f002 f8ff 	bl	80093e0 <VL53L0X_WrByte>
 80071e2:	4603      	mov	r3, r0
 80071e4:	461a      	mov	r2, r3
 80071e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071ea:	4313      	orrs	r3, r2
 80071ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f7ff fcce 	bl	8006b92 <VL53L0X_device_read_strobe>
 80071f6:	4603      	mov	r3, r0
 80071f8:	461a      	mov	r2, r3
 80071fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071fe:	4313      	orrs	r3, r2
 8007200:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8007204:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007208:	461a      	mov	r2, r3
 800720a:	2190      	movs	r1, #144	; 0x90
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f002 f8ab 	bl	8009368 <VL53L0X_RdDWord>
 8007212:	4603      	mov	r3, r0
 8007214:	461a      	mov	r2, r3
 8007216:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800721a:	4313      	orrs	r3, r2
 800721c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8007220:	227c      	movs	r2, #124	; 0x7c
 8007222:	2194      	movs	r1, #148	; 0x94
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f002 f8db 	bl	80093e0 <VL53L0X_WrByte>
 800722a:	4603      	mov	r3, r0
 800722c:	461a      	mov	r2, r3
 800722e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007232:	4313      	orrs	r3, r2
 8007234:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f7ff fcaa 	bl	8006b92 <VL53L0X_device_read_strobe>
 800723e:	4603      	mov	r3, r0
 8007240:	461a      	mov	r2, r3
 8007242:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007246:	4313      	orrs	r3, r2
 8007248:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800724c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007250:	461a      	mov	r2, r3
 8007252:	2190      	movs	r1, #144	; 0x90
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f002 f887 	bl	8009368 <VL53L0X_RdDWord>
 800725a:	4603      	mov	r3, r0
 800725c:	461a      	mov	r2, r3
 800725e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007262:	4313      	orrs	r3, r2
 8007264:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8007268:	2273      	movs	r2, #115	; 0x73
 800726a:	2194      	movs	r1, #148	; 0x94
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f002 f8b7 	bl	80093e0 <VL53L0X_WrByte>
 8007272:	4603      	mov	r3, r0
 8007274:	461a      	mov	r2, r3
 8007276:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800727a:	4313      	orrs	r3, r2
 800727c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7ff fc86 	bl	8006b92 <VL53L0X_device_read_strobe>
 8007286:	4603      	mov	r3, r0
 8007288:	461a      	mov	r2, r3
 800728a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800728e:	4313      	orrs	r3, r2
 8007290:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007294:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007298:	461a      	mov	r2, r3
 800729a:	2190      	movs	r1, #144	; 0x90
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f002 f863 	bl	8009368 <VL53L0X_RdDWord>
 80072a2:	4603      	mov	r3, r0
 80072a4:	461a      	mov	r2, r3
 80072a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072aa:	4313      	orrs	r3, r2
 80072ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x000000ff) << 8;
 80072b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b2:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 80072b8:	2274      	movs	r2, #116	; 0x74
 80072ba:	2194      	movs	r1, #148	; 0x94
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f002 f88f 	bl	80093e0 <VL53L0X_WrByte>
 80072c2:	4603      	mov	r3, r0
 80072c4:	461a      	mov	r2, r3
 80072c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072ca:	4313      	orrs	r3, r2
 80072cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7ff fc5e 	bl	8006b92 <VL53L0X_device_read_strobe>
 80072d6:	4603      	mov	r3, r0
 80072d8:	461a      	mov	r2, r3
 80072da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072de:	4313      	orrs	r3, r2
 80072e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80072e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80072e8:	461a      	mov	r2, r3
 80072ea:	2190      	movs	r1, #144	; 0x90
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f002 f83b 	bl	8009368 <VL53L0X_RdDWord>
 80072f2:	4603      	mov	r3, r0
 80072f4:	461a      	mov	r2, r3
 80072f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072fa:	4313      	orrs	r3, r2
 80072fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8007300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007302:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8007304:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007306:	4313      	orrs	r3, r2
 8007308:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800730a:	2275      	movs	r2, #117	; 0x75
 800730c:	2194      	movs	r1, #148	; 0x94
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f002 f866 	bl	80093e0 <VL53L0X_WrByte>
 8007314:	4603      	mov	r3, r0
 8007316:	461a      	mov	r2, r3
 8007318:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800731c:	4313      	orrs	r3, r2
 800731e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7ff fc35 	bl	8006b92 <VL53L0X_device_read_strobe>
 8007328:	4603      	mov	r3, r0
 800732a:	461a      	mov	r2, r3
 800732c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007330:	4313      	orrs	r3, r2
 8007332:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007336:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800733a:	461a      	mov	r2, r3
 800733c:	2190      	movs	r1, #144	; 0x90
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f002 f812 	bl	8009368 <VL53L0X_RdDWord>
 8007344:	4603      	mov	r3, r0
 8007346:	461a      	mov	r2, r3
 8007348:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800734c:	4313      	orrs	r3, r2
 800734e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
							<< 8;
 8007352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007354:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 8007356:	b29b      	uxth	r3, r3
 8007358:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800735a:	2276      	movs	r2, #118	; 0x76
 800735c:	2194      	movs	r1, #148	; 0x94
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f002 f83e 	bl	80093e0 <VL53L0X_WrByte>
 8007364:	4603      	mov	r3, r0
 8007366:	461a      	mov	r2, r3
 8007368:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800736c:	4313      	orrs	r3, r2
 800736e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7ff fc0d 	bl	8006b92 <VL53L0X_device_read_strobe>
 8007378:	4603      	mov	r3, r0
 800737a:	461a      	mov	r2, r3
 800737c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007380:	4313      	orrs	r3, r2
 8007382:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007386:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800738a:	461a      	mov	r2, r3
 800738c:	2190      	movs	r1, #144	; 0x90
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f001 ffea 	bl	8009368 <VL53L0X_RdDWord>
 8007394:	4603      	mov	r3, r0
 8007396:	461a      	mov	r2, r3
 8007398:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800739c:	4313      	orrs	r3, r2
 800739e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80073a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80073a8:	4313      	orrs	r3, r2
 80073aa:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80073ac:	2200      	movs	r2, #0
 80073ae:	2181      	movs	r1, #129	; 0x81
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f002 f815 	bl	80093e0 <VL53L0X_WrByte>
 80073b6:	4603      	mov	r3, r0
 80073b8:	461a      	mov	r2, r3
 80073ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073be:	4313      	orrs	r3, r2
 80073c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80073c4:	2206      	movs	r2, #6
 80073c6:	21ff      	movs	r1, #255	; 0xff
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f002 f809 	bl	80093e0 <VL53L0X_WrByte>
 80073ce:	4603      	mov	r3, r0
 80073d0:	461a      	mov	r2, r3
 80073d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073d6:	4313      	orrs	r3, r2
 80073d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80073dc:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80073e0:	461a      	mov	r2, r3
 80073e2:	2183      	movs	r1, #131	; 0x83
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f001 ff00 	bl	80091ea <VL53L0X_RdByte>
 80073ea:	4603      	mov	r3, r0
 80073ec:	461a      	mov	r2, r3
 80073ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073f2:	4313      	orrs	r3, r2
 80073f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 80073f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80073fc:	f023 0304 	bic.w	r3, r3, #4
 8007400:	b2db      	uxtb	r3, r3
 8007402:	461a      	mov	r2, r3
 8007404:	2183      	movs	r1, #131	; 0x83
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f001 ffea 	bl	80093e0 <VL53L0X_WrByte>
 800740c:	4603      	mov	r3, r0
 800740e:	461a      	mov	r2, r3
 8007410:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007414:	4313      	orrs	r3, r2
 8007416:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800741a:	2201      	movs	r2, #1
 800741c:	21ff      	movs	r1, #255	; 0xff
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f001 ffde 	bl	80093e0 <VL53L0X_WrByte>
 8007424:	4603      	mov	r3, r0
 8007426:	461a      	mov	r2, r3
 8007428:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800742c:	4313      	orrs	r3, r2
 800742e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007432:	2201      	movs	r2, #1
 8007434:	2100      	movs	r1, #0
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f001 ffd2 	bl	80093e0 <VL53L0X_WrByte>
 800743c:	4603      	mov	r3, r0
 800743e:	461a      	mov	r2, r3
 8007440:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007444:	4313      	orrs	r3, r2
 8007446:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800744a:	2200      	movs	r2, #0
 800744c:	21ff      	movs	r1, #255	; 0xff
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f001 ffc6 	bl	80093e0 <VL53L0X_WrByte>
 8007454:	4603      	mov	r3, r0
 8007456:	461a      	mov	r2, r3
 8007458:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800745c:	4313      	orrs	r3, r2
 800745e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007462:	2200      	movs	r2, #0
 8007464:	2180      	movs	r1, #128	; 0x80
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f001 ffba 	bl	80093e0 <VL53L0X_WrByte>
 800746c:	4603      	mov	r3, r0
 800746e:	461a      	mov	r2, r3
 8007470:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007474:	4313      	orrs	r3, r2
 8007476:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800747a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800747e:	2b00      	cmp	r3, #0
 8007480:	f040 808f 	bne.w	80075a2 <VL53L0X_get_info_from_device+0x98e>
 8007484:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007488:	2b07      	cmp	r3, #7
 800748a:	f000 808a 	beq.w	80075a2 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800748e:	78fb      	ldrb	r3, [r7, #3]
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	2b00      	cmp	r3, #0
 8007496:	d024      	beq.n	80074e2 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8007498:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800749c:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d11e      	bne.n	80074e2 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80074aa:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80074b4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80074b8:	2300      	movs	r3, #0
 80074ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074bc:	e00e      	b.n	80074dc <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 80074be:	f107 0208 	add.w	r2, r7, #8
 80074c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074c4:	4413      	add	r3, r2
 80074c6:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80074d2:	460a      	mov	r2, r1
 80074d4:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80074d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074d8:	3301      	adds	r3, #1
 80074da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074de:	2b05      	cmp	r3, #5
 80074e0:	dded      	ble.n	80074be <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 80074e2:	78fb      	ldrb	r3, [r7, #3]
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d018      	beq.n	800751e <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80074ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80074f0:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d112      	bne.n	800751e <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80074f8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007502:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	33f3      	adds	r3, #243	; 0xf3
 8007510:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8007512:	f107 0310 	add.w	r3, r7, #16
 8007516:	4619      	mov	r1, r3
 8007518:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800751a:	f00c f8a7 	bl	801366c <strcpy>

		}

		if (((option & 4) == 4) &&
 800751e:	78fb      	ldrb	r3, [r7, #3]
 8007520:	f003 0304 	and.w	r3, r3, #4
 8007524:	2b00      	cmp	r3, #0
 8007526:	d030      	beq.n	800758a <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007528:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800752c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007530:	2b00      	cmp	r3, #0
 8007532:	d12a      	bne.n	800758a <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800753c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8007544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007546:	025b      	lsls	r3, r3, #9
 8007548:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800754e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8007552:	2300      	movs	r3, #0
 8007554:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8007558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800755a:	2b00      	cmp	r3, #0
 800755c:	d011      	beq.n	8007582 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800755e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8007566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007568:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800756c:	fb02 f303 	mul.w	r3, r2, r3
 8007570:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8007572:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8007576:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800757a:	425b      	negs	r3, r3
 800757c:	b29b      	uxth	r3, r3
 800757e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8007582:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800758a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800758e:	78fb      	ldrb	r3, [r7, #3]
 8007590:	4313      	orrs	r3, r2
 8007592:	b2db      	uxtb	r3, r3
 8007594:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8007598:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80075a2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3760      	adds	r7, #96	; 0x60
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 80075ae:	b490      	push	{r4, r7}
 80075b0:	b086      	sub	sp, #24
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
 80075b6:	460b      	mov	r3, r1
 80075b8:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 80075ba:	f240 6377 	movw	r3, #1655	; 0x677
 80075be:	f04f 0400 	mov.w	r4, #0
 80075c2:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 80075c6:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80075ca:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 80075cc:	78fb      	ldrb	r3, [r7, #3]
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	fb02 f303 	mul.w	r3, r2, r3
 80075da:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 80075dc:	68bb      	ldr	r3, [r7, #8]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3718      	adds	r7, #24
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bc90      	pop	{r4, r7}
 80075e6:	4770      	bx	lr

080075e8 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 80075f0:	2300      	movs	r3, #0
 80075f2:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 80075f4:	2300      	movs	r3, #0
 80075f6:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 80075f8:	2300      	movs	r3, #0
 80075fa:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d017      	beq.n	8007632 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	3b01      	subs	r3, #1
 8007606:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007608:	e005      	b.n	8007616 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	085b      	lsrs	r3, r3, #1
 800760e:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8007610:	89fb      	ldrh	r3, [r7, #14]
 8007612:	3301      	adds	r3, #1
 8007614:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1f4      	bne.n	800760a <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8007620:	89fb      	ldrh	r3, [r7, #14]
 8007622:	021b      	lsls	r3, r3, #8
 8007624:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	b29b      	uxth	r3, r3
 800762a:	b2db      	uxtb	r3, r3
 800762c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800762e:	4413      	add	r3, r2
 8007630:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8007632:	8afb      	ldrh	r3, [r7, #22]

}
 8007634:	4618      	mov	r0, r3
 8007636:	371c      	adds	r7, #28
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	4603      	mov	r3, r0
 8007648:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800764a:	2300      	movs	r3, #0
 800764c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800764e:	88fb      	ldrh	r3, [r7, #6]
 8007650:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8007652:	88fa      	ldrh	r2, [r7, #6]
 8007654:	0a12      	lsrs	r2, r2, #8
 8007656:	b292      	uxth	r2, r2
 8007658:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800765a:	3301      	adds	r3, #1
 800765c:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800765e:	68fb      	ldr	r3, [r7, #12]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b088      	sub	sp, #32
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	4613      	mov	r3, r2
 8007678:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800767a:	2300      	movs	r3, #0
 800767c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800767e:	79fb      	ldrb	r3, [r7, #7]
 8007680:	4619      	mov	r1, r3
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f7ff ff93 	bl	80075ae <VL53L0X_calc_macro_period_ps>
 8007688:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007690:	4a0a      	ldr	r2, [pc, #40]	; (80076bc <VL53L0X_calc_timeout_mclks+0x50>)
 8007692:	fba2 2303 	umull	r2, r3, r2, r3
 8007696:	099b      	lsrs	r3, r3, #6
 8007698:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80076a0:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	085b      	lsrs	r3, r3, #1
 80076a8:	441a      	add	r2, r3
	timeout_period_mclks =
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b0:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 80076b2:	69fb      	ldr	r3, [r7, #28]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3720      	adds	r7, #32
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	10624dd3 	.word	0x10624dd3

080076c0 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	460b      	mov	r3, r1
 80076ca:	807b      	strh	r3, [r7, #2]
 80076cc:	4613      	mov	r3, r2
 80076ce:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 80076d0:	2300      	movs	r3, #0
 80076d2:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80076d4:	787b      	ldrb	r3, [r7, #1]
 80076d6:	4619      	mov	r1, r3
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7ff ff68 	bl	80075ae <VL53L0X_calc_macro_period_ps>
 80076de:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80076e6:	4a0b      	ldr	r2, [pc, #44]	; (8007714 <VL53L0X_calc_timeout_us+0x54>)
 80076e8:	fba2 2303 	umull	r2, r3, r2, r3
 80076ec:	099b      	lsrs	r3, r3, #6
 80076ee:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns)
 80076f0:	887b      	ldrh	r3, [r7, #2]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / 1000;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	085b      	lsrs	r3, r3, #1
 80076fc:	4413      	add	r3, r2
	actual_timeout_period_us =
 80076fe:	4a05      	ldr	r2, [pc, #20]	; (8007714 <VL53L0X_calc_timeout_us+0x54>)
 8007700:	fba2 2303 	umull	r2, r3, r2, r3
 8007704:	099b      	lsrs	r3, r3, #6
 8007706:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8007708:	697b      	ldr	r3, [r7, #20]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3718      	adds	r7, #24
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	10624dd3 	.word	0x10624dd3

08007718 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b08c      	sub	sp, #48	; 0x30
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	460b      	mov	r3, r1
 8007722:	607a      	str	r2, [r7, #4]
 8007724:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007726:	2300      	movs	r3, #0
 8007728:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800772c:	2300      	movs	r3, #0
 800772e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8007732:	2300      	movs	r3, #0
 8007734:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8007736:	2300      	movs	r3, #0
 8007738:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800773a:	2300      	movs	r3, #0
 800773c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800773e:	7afb      	ldrb	r3, [r7, #11]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d005      	beq.n	8007750 <get_sequence_step_timeout+0x38>
 8007744:	7afb      	ldrb	r3, [r7, #11]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d002      	beq.n	8007750 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800774a:	7afb      	ldrb	r3, [r7, #11]
 800774c:	2b02      	cmp	r3, #2
 800774e:	d128      	bne.n	80077a2 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007750:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007754:	461a      	mov	r2, r3
 8007756:	2100      	movs	r1, #0
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f7fd fa75 	bl	8004c48 <VL53L0X_GetVcselPulsePeriod>
 800775e:	4603      	mov	r3, r0
 8007760:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8007764:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007768:	2b00      	cmp	r3, #0
 800776a:	d109      	bne.n	8007780 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800776c:	f107 0320 	add.w	r3, r7, #32
 8007770:	461a      	mov	r2, r3
 8007772:	2146      	movs	r1, #70	; 0x46
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f001 fd38 	bl	80091ea <VL53L0X_RdByte>
 800777a:	4603      	mov	r3, r0
 800777c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8007780:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007784:	b29b      	uxth	r3, r3
 8007786:	4618      	mov	r0, r3
 8007788:	f7ff ff5a 	bl	8007640 <VL53L0X_decode_timeout>
 800778c:	4603      	mov	r3, r0
 800778e:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007790:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007794:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007796:	4619      	mov	r1, r3
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f7ff ff91 	bl	80076c0 <VL53L0X_calc_timeout_us>
 800779e:	62b8      	str	r0, [r7, #40]	; 0x28
 80077a0:	e092      	b.n	80078c8 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80077a2:	7afb      	ldrb	r3, [r7, #11]
 80077a4:	2b03      	cmp	r3, #3
 80077a6:	d135      	bne.n	8007814 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80077a8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80077ac:	461a      	mov	r2, r3
 80077ae:	2100      	movs	r1, #0
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f7fd fa49 	bl	8004c48 <VL53L0X_GetVcselPulsePeriod>
 80077b6:	4603      	mov	r3, r0
 80077b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80077bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f040 8081 	bne.w	80078c8 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80077c6:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80077ca:	461a      	mov	r2, r3
 80077cc:	2100      	movs	r1, #0
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f7fd fa3a 	bl	8004c48 <VL53L0X_GetVcselPulsePeriod>
 80077d4:	4603      	mov	r3, r0
 80077d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 80077da:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d109      	bne.n	80077f6 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 80077e2:	f107 031e 	add.w	r3, r7, #30
 80077e6:	461a      	mov	r2, r3
 80077e8:	2151      	movs	r1, #81	; 0x51
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f001 fd84 	bl	80092f8 <VL53L0X_RdWord>
 80077f0:	4603      	mov	r3, r0
 80077f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80077f6:	8bfb      	ldrh	r3, [r7, #30]
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7ff ff21 	bl	8007640 <VL53L0X_decode_timeout>
 80077fe:	4603      	mov	r3, r0
 8007800:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007802:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007806:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007808:	4619      	mov	r1, r3
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f7ff ff58 	bl	80076c0 <VL53L0X_calc_timeout_us>
 8007810:	62b8      	str	r0, [r7, #40]	; 0x28
 8007812:	e059      	b.n	80078c8 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007814:	7afb      	ldrb	r3, [r7, #11]
 8007816:	2b04      	cmp	r3, #4
 8007818:	d156      	bne.n	80078c8 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800781a:	f107 0314 	add.w	r3, r7, #20
 800781e:	4619      	mov	r1, r3
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f7fd fb1d 	bl	8004e60 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8007826:	2300      	movs	r3, #0
 8007828:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800782a:	7dfb      	ldrb	r3, [r7, #23]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d01d      	beq.n	800786c <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007830:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007834:	461a      	mov	r2, r3
 8007836:	2100      	movs	r1, #0
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f7fd fa05 	bl	8004c48 <VL53L0X_GetVcselPulsePeriod>
 800783e:	4603      	mov	r3, r0
 8007840:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8007844:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10f      	bne.n	800786c <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800784c:	f107 031e 	add.w	r3, r7, #30
 8007850:	461a      	mov	r2, r3
 8007852:	2151      	movs	r1, #81	; 0x51
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f001 fd4f 	bl	80092f8 <VL53L0X_RdWord>
 800785a:	4603      	mov	r3, r0
 800785c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007860:	8bfb      	ldrh	r3, [r7, #30]
 8007862:	4618      	mov	r0, r3
 8007864:	f7ff feec 	bl	8007640 <VL53L0X_decode_timeout>
 8007868:	4603      	mov	r3, r0
 800786a:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800786c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007870:	2b00      	cmp	r3, #0
 8007872:	d109      	bne.n	8007888 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007874:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007878:	461a      	mov	r2, r3
 800787a:	2101      	movs	r1, #1
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f7fd f9e3 	bl	8004c48 <VL53L0X_GetVcselPulsePeriod>
 8007882:	4603      	mov	r3, r0
 8007884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007888:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10f      	bne.n	80078b0 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8007890:	f107 031c 	add.w	r3, r7, #28
 8007894:	461a      	mov	r2, r3
 8007896:	2171      	movs	r1, #113	; 0x71
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f001 fd2d 	bl	80092f8 <VL53L0X_RdWord>
 800789e:	4603      	mov	r3, r0
 80078a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80078a4:	8bbb      	ldrh	r3, [r7, #28]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7ff feca 	bl	8007640 <VL53L0X_decode_timeout>
 80078ac:	4603      	mov	r3, r0
 80078ae:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80078b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80078b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80078b8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80078bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078be:	4619      	mov	r1, r3
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f7ff fefd 	bl	80076c0 <VL53L0X_calc_timeout_us>
 80078c6:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078cc:	601a      	str	r2, [r3, #0]

	return Status;
 80078ce:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3730      	adds	r7, #48	; 0x30
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b08a      	sub	sp, #40	; 0x28
 80078de:	af00      	add	r7, sp, #0
 80078e0:	60f8      	str	r0, [r7, #12]
 80078e2:	460b      	mov	r3, r1
 80078e4:	607a      	str	r2, [r7, #4]
 80078e6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078e8:	2300      	movs	r3, #0
 80078ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80078ee:	7afb      	ldrb	r3, [r7, #11]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d005      	beq.n	8007900 <set_sequence_step_timeout+0x26>
 80078f4:	7afb      	ldrb	r3, [r7, #11]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d002      	beq.n	8007900 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80078fa:	7afb      	ldrb	r3, [r7, #11]
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d138      	bne.n	8007972 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007900:	f107 031d 	add.w	r3, r7, #29
 8007904:	461a      	mov	r2, r3
 8007906:	2100      	movs	r1, #0
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f7fd f99d 	bl	8004c48 <VL53L0X_GetVcselPulsePeriod>
 800790e:	4603      	mov	r3, r0
 8007910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8007914:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007918:	2b00      	cmp	r3, #0
 800791a:	d11a      	bne.n	8007952 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800791c:	7f7b      	ldrb	r3, [r7, #29]
 800791e:	461a      	mov	r2, r3
 8007920:	6879      	ldr	r1, [r7, #4]
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f7ff fea2 	bl	800766c <VL53L0X_calc_timeout_mclks>
 8007928:	4603      	mov	r3, r0
 800792a:	83fb      	strh	r3, [r7, #30]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800792c:	8bfb      	ldrh	r3, [r7, #30]
 800792e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007932:	d903      	bls.n	800793c <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8007934:	23ff      	movs	r3, #255	; 0xff
 8007936:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800793a:	e004      	b.n	8007946 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800793c:	8bfb      	ldrh	r3, [r7, #30]
 800793e:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8007940:	3b01      	subs	r3, #1
 8007942:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007946:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800794a:	b29a      	uxth	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007952:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007956:	2b00      	cmp	r3, #0
 8007958:	f040 80ad 	bne.w	8007ab6 <set_sequence_step_timeout+0x1dc>
			Status = VL53L0X_WrByte(Dev,
 800795c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007960:	461a      	mov	r2, r3
 8007962:	2146      	movs	r1, #70	; 0x46
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f001 fd3b 	bl	80093e0 <VL53L0X_WrByte>
 800796a:	4603      	mov	r3, r0
 800796c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8007970:	e0a1      	b.n	8007ab6 <set_sequence_step_timeout+0x1dc>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007972:	7afb      	ldrb	r3, [r7, #11]
 8007974:	2b03      	cmp	r3, #3
 8007976:	d135      	bne.n	80079e4 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8007978:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800797c:	2b00      	cmp	r3, #0
 800797e:	d11b      	bne.n	80079b8 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007980:	f107 031d 	add.w	r3, r7, #29
 8007984:	461a      	mov	r2, r3
 8007986:	2100      	movs	r1, #0
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f7fd f95d 	bl	8004c48 <VL53L0X_GetVcselPulsePeriod>
 800798e:	4603      	mov	r3, r0
 8007990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007994:	7f7b      	ldrb	r3, [r7, #29]
 8007996:	461a      	mov	r2, r3
 8007998:	6879      	ldr	r1, [r7, #4]
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f7ff fe66 	bl	800766c <VL53L0X_calc_timeout_mclks>
 80079a0:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80079a2:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80079a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7ff fe1e 	bl	80075e8 <VL53L0X_encode_timeout>
 80079ac:	4603      	mov	r3, r0
 80079ae:	837b      	strh	r3, [r7, #26]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80079b0:	8b7a      	ldrh	r2, [r7, #26]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80079b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d108      	bne.n	80079d2 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80079c0:	8b7b      	ldrh	r3, [r7, #26]
 80079c2:	461a      	mov	r2, r3
 80079c4:	2151      	movs	r1, #81	; 0x51
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f001 fd2e 	bl	8009428 <VL53L0X_WrWord>
 80079cc:	4603      	mov	r3, r0
 80079ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80079d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d16d      	bne.n	8007ab6 <set_sequence_step_timeout+0x1dc>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80079e2:	e068      	b.n	8007ab6 <set_sequence_step_timeout+0x1dc>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80079e4:	7afb      	ldrb	r3, [r7, #11]
 80079e6:	2b04      	cmp	r3, #4
 80079e8:	d162      	bne.n	8007ab0 <set_sequence_step_timeout+0x1d6>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 80079ea:	f107 0314 	add.w	r3, r7, #20
 80079ee:	4619      	mov	r1, r3
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f7fd fa35 	bl	8004e60 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 80079f6:	2300      	movs	r3, #0
 80079f8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 80079fa:	7dfb      	ldrb	r3, [r7, #23]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d01d      	beq.n	8007a3c <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007a00:	f107 031d 	add.w	r3, r7, #29
 8007a04:	461a      	mov	r2, r3
 8007a06:	2100      	movs	r1, #0
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f7fd f91d 	bl	8004c48 <VL53L0X_GetVcselPulsePeriod>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8007a14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10f      	bne.n	8007a3c <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8007a1c:	f107 031a 	add.w	r3, r7, #26
 8007a20:	461a      	mov	r2, r3
 8007a22:	2151      	movs	r1, #81	; 0x51
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f001 fc67 	bl	80092f8 <VL53L0X_RdWord>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8007a30:	8b7b      	ldrh	r3, [r7, #26]
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7ff fe04 	bl	8007640 <VL53L0X_decode_timeout>
 8007a38:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8007a3a:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007a3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d109      	bne.n	8007a58 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007a44:	f107 031d 	add.w	r3, r7, #29
 8007a48:	461a      	mov	r2, r3
 8007a4a:	2101      	movs	r1, #1
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f7fd f8fb 	bl	8004c48 <VL53L0X_GetVcselPulsePeriod>
 8007a52:	4603      	mov	r3, r0
 8007a54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8007a58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d12a      	bne.n	8007ab6 <set_sequence_step_timeout+0x1dc>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007a60:	7f7b      	ldrb	r3, [r7, #29]
 8007a62:	461a      	mov	r2, r3
 8007a64:	6879      	ldr	r1, [r7, #4]
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f7ff fe00 	bl	800766c <VL53L0X_calc_timeout_mclks>
 8007a6c:	4603      	mov	r3, r0
				FinalRangeTimeOutMClks =
 8007a6e:	847b      	strh	r3, [r7, #34]	; 0x22
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8007a70:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007a72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a74:	4413      	add	r3, r2
 8007a76:	847b      	strh	r3, [r7, #34]	; 0x22

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8007a78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
				FinalRangeEncodedTimeOut =
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7ff fdb4 	bl	80075e8 <VL53L0X_encode_timeout>
 8007a80:	4603      	mov	r3, r0
 8007a82:	843b      	strh	r3, [r7, #32]

				if (Status == VL53L0X_ERROR_NONE) {
 8007a84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d108      	bne.n	8007a9e <set_sequence_step_timeout+0x1c4>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8007a8c:	8c3b      	ldrh	r3, [r7, #32]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	2171      	movs	r1, #113	; 0x71
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f001 fcc8 	bl	8009428 <VL53L0X_WrWord>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8007a9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d107      	bne.n	8007ab6 <set_sequence_step_timeout+0x1dc>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8007aae:	e002      	b.n	8007ab6 <set_sequence_step_timeout+0x1dc>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007ab0:	23fc      	movs	r3, #252	; 0xfc
 8007ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8007ab6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3728      	adds	r7, #40	; 0x28
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b08a      	sub	sp, #40	; 0x28
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	460b      	mov	r3, r1
 8007acc:	70fb      	strb	r3, [r7, #3]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8007ad8:	230c      	movs	r3, #12
 8007ada:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8007ade:	2312      	movs	r3, #18
 8007ae0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8007ae4:	2308      	movs	r3, #8
 8007ae6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8007aea:	230e      	movs	r3, #14
 8007aec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8007af0:	2300      	movs	r3, #0
 8007af2:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8007af4:	78bb      	ldrb	r3, [r7, #2]
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d003      	beq.n	8007b08 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007b00:	23fc      	movs	r3, #252	; 0xfc
 8007b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b06:	e020      	b.n	8007b4a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8007b08:	78fb      	ldrb	r3, [r7, #3]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10d      	bne.n	8007b2a <VL53L0X_set_vcsel_pulse_period+0x68>
 8007b0e:	78ba      	ldrb	r2, [r7, #2]
 8007b10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d304      	bcc.n	8007b22 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8007b18:	78ba      	ldrb	r2, [r7, #2]
 8007b1a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d903      	bls.n	8007b2a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007b22:	23fc      	movs	r3, #252	; 0xfc
 8007b24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b28:	e00f      	b.n	8007b4a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8007b2a:	78fb      	ldrb	r3, [r7, #3]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d10c      	bne.n	8007b4a <VL53L0X_set_vcsel_pulse_period+0x88>
 8007b30:	78ba      	ldrb	r2, [r7, #2]
 8007b32:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d304      	bcc.n	8007b44 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8007b3a:	78ba      	ldrb	r2, [r7, #2]
 8007b3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d902      	bls.n	8007b4a <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007b44:	23fc      	movs	r3, #252	; 0xfc
 8007b46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8007b4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d002      	beq.n	8007b58 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8007b52:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007b56:	e239      	b.n	8007fcc <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8007b58:	78fb      	ldrb	r3, [r7, #3]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d150      	bne.n	8007c00 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8007b5e:	78bb      	ldrb	r3, [r7, #2]
 8007b60:	2b0c      	cmp	r3, #12
 8007b62:	d110      	bne.n	8007b86 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8007b64:	2218      	movs	r2, #24
 8007b66:	2157      	movs	r1, #87	; 0x57
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f001 fc39 	bl	80093e0 <VL53L0X_WrByte>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8007b74:	2208      	movs	r2, #8
 8007b76:	2156      	movs	r1, #86	; 0x56
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f001 fc31 	bl	80093e0 <VL53L0X_WrByte>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b84:	e17f      	b.n	8007e86 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8007b86:	78bb      	ldrb	r3, [r7, #2]
 8007b88:	2b0e      	cmp	r3, #14
 8007b8a:	d110      	bne.n	8007bae <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8007b8c:	2230      	movs	r2, #48	; 0x30
 8007b8e:	2157      	movs	r1, #87	; 0x57
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f001 fc25 	bl	80093e0 <VL53L0X_WrByte>
 8007b96:	4603      	mov	r3, r0
 8007b98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8007b9c:	2208      	movs	r2, #8
 8007b9e:	2156      	movs	r1, #86	; 0x56
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f001 fc1d 	bl	80093e0 <VL53L0X_WrByte>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007bac:	e16b      	b.n	8007e86 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8007bae:	78bb      	ldrb	r3, [r7, #2]
 8007bb0:	2b10      	cmp	r3, #16
 8007bb2:	d110      	bne.n	8007bd6 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8007bb4:	2240      	movs	r2, #64	; 0x40
 8007bb6:	2157      	movs	r1, #87	; 0x57
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f001 fc11 	bl	80093e0 <VL53L0X_WrByte>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8007bc4:	2208      	movs	r2, #8
 8007bc6:	2156      	movs	r1, #86	; 0x56
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f001 fc09 	bl	80093e0 <VL53L0X_WrByte>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007bd4:	e157      	b.n	8007e86 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8007bd6:	78bb      	ldrb	r3, [r7, #2]
 8007bd8:	2b12      	cmp	r3, #18
 8007bda:	f040 8154 	bne.w	8007e86 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8007bde:	2250      	movs	r2, #80	; 0x50
 8007be0:	2157      	movs	r1, #87	; 0x57
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f001 fbfc 	bl	80093e0 <VL53L0X_WrByte>
 8007be8:	4603      	mov	r3, r0
 8007bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8007bee:	2208      	movs	r2, #8
 8007bf0:	2156      	movs	r1, #86	; 0x56
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f001 fbf4 	bl	80093e0 <VL53L0X_WrByte>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007bfe:	e142      	b.n	8007e86 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8007c00:	78fb      	ldrb	r3, [r7, #3]
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	f040 813f 	bne.w	8007e86 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8007c08:	78bb      	ldrb	r3, [r7, #2]
 8007c0a:	2b08      	cmp	r3, #8
 8007c0c:	d14c      	bne.n	8007ca8 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8007c0e:	2210      	movs	r2, #16
 8007c10:	2148      	movs	r1, #72	; 0x48
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f001 fbe4 	bl	80093e0 <VL53L0X_WrByte>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8007c1e:	2208      	movs	r2, #8
 8007c20:	2147      	movs	r1, #71	; 0x47
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f001 fbdc 	bl	80093e0 <VL53L0X_WrByte>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007c2e:	2202      	movs	r2, #2
 8007c30:	2132      	movs	r1, #50	; 0x32
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f001 fbd4 	bl	80093e0 <VL53L0X_WrByte>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c40:	4313      	orrs	r3, r2
 8007c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8007c46:	220c      	movs	r2, #12
 8007c48:	2130      	movs	r1, #48	; 0x30
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f001 fbc8 	bl	80093e0 <VL53L0X_WrByte>
 8007c50:	4603      	mov	r3, r0
 8007c52:	461a      	mov	r2, r3
 8007c54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007c5e:	2201      	movs	r2, #1
 8007c60:	21ff      	movs	r1, #255	; 0xff
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f001 fbbc 	bl	80093e0 <VL53L0X_WrByte>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c70:	4313      	orrs	r3, r2
 8007c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007c76:	2230      	movs	r2, #48	; 0x30
 8007c78:	2130      	movs	r1, #48	; 0x30
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f001 fbb0 	bl	80093e0 <VL53L0X_WrByte>
 8007c80:	4603      	mov	r3, r0
 8007c82:	461a      	mov	r2, r3
 8007c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007c8e:	2200      	movs	r2, #0
 8007c90:	21ff      	movs	r1, #255	; 0xff
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f001 fba4 	bl	80093e0 <VL53L0X_WrByte>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007ca6:	e0ee      	b.n	8007e86 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8007ca8:	78bb      	ldrb	r3, [r7, #2]
 8007caa:	2b0a      	cmp	r3, #10
 8007cac:	d14c      	bne.n	8007d48 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8007cae:	2228      	movs	r2, #40	; 0x28
 8007cb0:	2148      	movs	r1, #72	; 0x48
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f001 fb94 	bl	80093e0 <VL53L0X_WrByte>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8007cbe:	2208      	movs	r2, #8
 8007cc0:	2147      	movs	r1, #71	; 0x47
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f001 fb8c 	bl	80093e0 <VL53L0X_WrByte>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007cce:	2203      	movs	r2, #3
 8007cd0:	2132      	movs	r1, #50	; 0x32
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f001 fb84 	bl	80093e0 <VL53L0X_WrByte>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	461a      	mov	r2, r3
 8007cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007ce6:	2209      	movs	r2, #9
 8007ce8:	2130      	movs	r1, #48	; 0x30
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f001 fb78 	bl	80093e0 <VL53L0X_WrByte>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007cfe:	2201      	movs	r2, #1
 8007d00:	21ff      	movs	r1, #255	; 0xff
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f001 fb6c 	bl	80093e0 <VL53L0X_WrByte>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d10:	4313      	orrs	r3, r2
 8007d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007d16:	2220      	movs	r2, #32
 8007d18:	2130      	movs	r1, #48	; 0x30
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f001 fb60 	bl	80093e0 <VL53L0X_WrByte>
 8007d20:	4603      	mov	r3, r0
 8007d22:	461a      	mov	r2, r3
 8007d24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007d2e:	2200      	movs	r2, #0
 8007d30:	21ff      	movs	r1, #255	; 0xff
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f001 fb54 	bl	80093e0 <VL53L0X_WrByte>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d40:	4313      	orrs	r3, r2
 8007d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d46:	e09e      	b.n	8007e86 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8007d48:	78bb      	ldrb	r3, [r7, #2]
 8007d4a:	2b0c      	cmp	r3, #12
 8007d4c:	d14c      	bne.n	8007de8 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8007d4e:	2238      	movs	r2, #56	; 0x38
 8007d50:	2148      	movs	r1, #72	; 0x48
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f001 fb44 	bl	80093e0 <VL53L0X_WrByte>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8007d5e:	2208      	movs	r2, #8
 8007d60:	2147      	movs	r1, #71	; 0x47
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f001 fb3c 	bl	80093e0 <VL53L0X_WrByte>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007d6e:	2203      	movs	r2, #3
 8007d70:	2132      	movs	r1, #50	; 0x32
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f001 fb34 	bl	80093e0 <VL53L0X_WrByte>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d80:	4313      	orrs	r3, r2
 8007d82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007d86:	2208      	movs	r2, #8
 8007d88:	2130      	movs	r1, #48	; 0x30
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f001 fb28 	bl	80093e0 <VL53L0X_WrByte>
 8007d90:	4603      	mov	r3, r0
 8007d92:	461a      	mov	r2, r3
 8007d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007d9e:	2201      	movs	r2, #1
 8007da0:	21ff      	movs	r1, #255	; 0xff
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f001 fb1c 	bl	80093e0 <VL53L0X_WrByte>
 8007da8:	4603      	mov	r3, r0
 8007daa:	461a      	mov	r2, r3
 8007dac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007db0:	4313      	orrs	r3, r2
 8007db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007db6:	2220      	movs	r2, #32
 8007db8:	2130      	movs	r1, #48	; 0x30
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f001 fb10 	bl	80093e0 <VL53L0X_WrByte>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007dce:	2200      	movs	r2, #0
 8007dd0:	21ff      	movs	r1, #255	; 0xff
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f001 fb04 	bl	80093e0 <VL53L0X_WrByte>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	461a      	mov	r2, r3
 8007ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007de0:	4313      	orrs	r3, r2
 8007de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007de6:	e04e      	b.n	8007e86 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8007de8:	78bb      	ldrb	r3, [r7, #2]
 8007dea:	2b0e      	cmp	r3, #14
 8007dec:	d14b      	bne.n	8007e86 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8007dee:	2248      	movs	r2, #72	; 0x48
 8007df0:	2148      	movs	r1, #72	; 0x48
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f001 faf4 	bl	80093e0 <VL53L0X_WrByte>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8007dfe:	2208      	movs	r2, #8
 8007e00:	2147      	movs	r1, #71	; 0x47
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f001 faec 	bl	80093e0 <VL53L0X_WrByte>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007e0e:	2203      	movs	r2, #3
 8007e10:	2132      	movs	r1, #50	; 0x32
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f001 fae4 	bl	80093e0 <VL53L0X_WrByte>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e20:	4313      	orrs	r3, r2
 8007e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007e26:	2207      	movs	r2, #7
 8007e28:	2130      	movs	r1, #48	; 0x30
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f001 fad8 	bl	80093e0 <VL53L0X_WrByte>
 8007e30:	4603      	mov	r3, r0
 8007e32:	461a      	mov	r2, r3
 8007e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007e3e:	2201      	movs	r2, #1
 8007e40:	21ff      	movs	r1, #255	; 0xff
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f001 facc 	bl	80093e0 <VL53L0X_WrByte>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e50:	4313      	orrs	r3, r2
 8007e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007e56:	2220      	movs	r2, #32
 8007e58:	2130      	movs	r1, #48	; 0x30
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f001 fac0 	bl	80093e0 <VL53L0X_WrByte>
 8007e60:	4603      	mov	r3, r0
 8007e62:	461a      	mov	r2, r3
 8007e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007e6e:	2200      	movs	r2, #0
 8007e70:	21ff      	movs	r1, #255	; 0xff
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f001 fab4 	bl	80093e0 <VL53L0X_WrByte>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e80:	4313      	orrs	r3, r2
 8007e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8007e86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d17f      	bne.n	8007f8e <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8007e8e:	78bb      	ldrb	r3, [r7, #2]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7fe fe37 	bl	8006b04 <VL53L0X_encode_vcsel_period>
 8007e96:	4603      	mov	r3, r0
 8007e98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8007e9c:	78fb      	ldrb	r3, [r7, #3]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d002      	beq.n	8007ea8 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d045      	beq.n	8007f32 <VL53L0X_set_vcsel_pulse_period+0x470>
 8007ea6:	e06e      	b.n	8007f86 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8007ea8:	f107 0314 	add.w	r3, r7, #20
 8007eac:	461a      	mov	r2, r3
 8007eae:	2103      	movs	r1, #3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f7ff fc31 	bl	8007718 <get_sequence_step_timeout>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007ebc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d109      	bne.n	8007ed8 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8007ec4:	f107 0310 	add.w	r3, r7, #16
 8007ec8:	461a      	mov	r2, r3
 8007eca:	2102      	movs	r1, #2
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7ff fc23 	bl	8007718 <get_sequence_step_timeout>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007ed8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d109      	bne.n	8007ef4 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8007ee0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	2150      	movs	r1, #80	; 0x50
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f001 fa79 	bl	80093e0 <VL53L0X_WrByte>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8007ef4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d108      	bne.n	8007f0e <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	461a      	mov	r2, r3
 8007f00:	2103      	movs	r1, #3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7ff fce9 	bl	80078da <set_sequence_step_timeout>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8007f0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d108      	bne.n	8007f28 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	461a      	mov	r2, r3
 8007f1a:	2102      	movs	r1, #2
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f7ff fcdc 	bl	80078da <set_sequence_step_timeout>
 8007f22:	4603      	mov	r3, r0
 8007f24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	78ba      	ldrb	r2, [r7, #2]
 8007f2c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8007f30:	e02e      	b.n	8007f90 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8007f32:	f107 0318 	add.w	r3, r7, #24
 8007f36:	461a      	mov	r2, r3
 8007f38:	2104      	movs	r1, #4
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7ff fbec 	bl	8007718 <get_sequence_step_timeout>
 8007f40:	4603      	mov	r3, r0
 8007f42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007f46:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d109      	bne.n	8007f62 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8007f4e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007f52:	461a      	mov	r2, r3
 8007f54:	2170      	movs	r1, #112	; 0x70
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f001 fa42 	bl	80093e0 <VL53L0X_WrByte>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8007f62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d108      	bne.n	8007f7c <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	2104      	movs	r1, #4
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f7ff fcb2 	bl	80078da <set_sequence_step_timeout>
 8007f76:	4603      	mov	r3, r0
 8007f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	78ba      	ldrb	r2, [r7, #2]
 8007f80:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8007f84:	e004      	b.n	8007f90 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007f86:	23fc      	movs	r3, #252	; 0xfc
 8007f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007f8c:	e000      	b.n	8007f90 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8007f8e:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8007f90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d109      	bne.n	8007fac <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	695b      	ldr	r3, [r3, #20]
 8007f9c:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8007f9e:	69f9      	ldr	r1, [r7, #28]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f7fc fe13 	bl	8004bcc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8007fac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d109      	bne.n	8007fc8 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8007fb4:	f107 010f 	add.w	r1, r7, #15
 8007fb8:	2301      	movs	r3, #1
 8007fba:	2200      	movs	r2, #0
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f7fe fcbd 	bl	800693c <VL53L0X_perform_phase_calibration>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8007fc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3728      	adds	r7, #40	; 0x28
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b086      	sub	sp, #24
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	607a      	str	r2, [r7, #4]
 8007fe0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8007fe6:	7afb      	ldrb	r3, [r7, #11]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d002      	beq.n	8007ff2 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d00a      	beq.n	8008006 <VL53L0X_get_vcsel_pulse_period+0x32>
 8007ff0:	e013      	b.n	800801a <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8007ff2:	f107 0316 	add.w	r3, r7, #22
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	2150      	movs	r1, #80	; 0x50
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f001 f8f5 	bl	80091ea <VL53L0X_RdByte>
 8008000:	4603      	mov	r3, r0
 8008002:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008004:	e00b      	b.n	800801e <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008006:	f107 0316 	add.w	r3, r7, #22
 800800a:	461a      	mov	r2, r3
 800800c:	2170      	movs	r1, #112	; 0x70
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f001 f8eb 	bl	80091ea <VL53L0X_RdByte>
 8008014:	4603      	mov	r3, r0
 8008016:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008018:	e001      	b.n	800801e <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800801a:	23fc      	movs	r3, #252	; 0xfc
 800801c:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800801e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d107      	bne.n	8008036 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8008026:	7dbb      	ldrb	r3, [r7, #22]
 8008028:	4618      	mov	r0, r3
 800802a:	f7fe fd58 	bl	8006ade <VL53L0X_decode_vcsel_period>
 800802e:	4603      	mov	r3, r0
 8008030:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	701a      	strb	r2, [r3, #0]

	return Status;
 8008036:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3718      	adds	r7, #24
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b092      	sub	sp, #72	; 0x48
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800804c:	2300      	movs	r3, #0
 800804e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008052:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008056:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1320;
 8008058:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 800805c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800805e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008062:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008064:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008068:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800806a:	f240 234e 	movw	r3, #590	; 0x24e
 800806e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8008070:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008074:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008076:	f44f 7325 	mov.w	r3, #660	; 0x294
 800807a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800807c:	f240 2326 	movw	r3, #550	; 0x226
 8008080:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008082:	2300      	movs	r3, #0
 8008084:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8008086:	f644 6320 	movw	r3, #20000	; 0x4e20
 800808a:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800808c:	2300      	movs	r3, #0
 800808e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8008090:	683a      	ldr	r2, [r7, #0]
 8008092:	6a3b      	ldr	r3, [r7, #32]
 8008094:	429a      	cmp	r2, r3
 8008096:	d205      	bcs.n	80080a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008098:	23fc      	movs	r3, #252	; 0xfc
 800809a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800809e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80080a2:	e0aa      	b.n	80081fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80080a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80080a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a8:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80080aa:	683a      	ldr	r2, [r7, #0]
 80080ac:	1ad3      	subs	r3, r2, r3
 80080ae:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80080b0:	f107 0314 	add.w	r3, r7, #20
 80080b4:	4619      	mov	r1, r3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7fc fed2 	bl	8004e60 <VL53L0X_GetSequenceStepEnables>
 80080bc:	4603      	mov	r3, r0
 80080be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 80080c2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d15b      	bne.n	8008182 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 80080ca:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d105      	bne.n	80080dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 80080d0:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d102      	bne.n	80080dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 80080d6:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d052      	beq.n	8008182 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80080dc:	f107 0310 	add.w	r3, r7, #16
 80080e0:	461a      	mov	r2, r3
 80080e2:	2102      	movs	r1, #2
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f7ff fb17 	bl	8007718 <get_sequence_step_timeout>
 80080ea:	4603      	mov	r3, r0
 80080ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 80080f0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d002      	beq.n	80080fe <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 80080f8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80080fc:	e07d      	b.n	80081fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 80080fe:	7d3b      	ldrb	r3, [r7, #20]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00f      	beq.n	8008124 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8008104:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8008106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008108:	4413      	add	r3, r2
 800810a:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800810c:	69fa      	ldr	r2, [r7, #28]
 800810e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008110:	429a      	cmp	r2, r3
 8008112:	d204      	bcs.n	800811e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8008114:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	643b      	str	r3, [r7, #64]	; 0x40
 800811c:	e002      	b.n	8008124 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800811e:	23fc      	movs	r3, #252	; 0xfc
 8008120:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8008124:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008128:	2b00      	cmp	r3, #0
 800812a:	d002      	beq.n	8008132 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800812c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008130:	e063      	b.n	80081fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8008132:	7dbb      	ldrb	r3, [r7, #22]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d011      	beq.n	800815c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813c:	4413      	add	r3, r2
 800813e:	005b      	lsls	r3, r3, #1
 8008140:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008142:	69fa      	ldr	r2, [r7, #28]
 8008144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008146:	429a      	cmp	r2, r3
 8008148:	d204      	bcs.n	8008154 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800814a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	643b      	str	r3, [r7, #64]	; 0x40
 8008152:	e016      	b.n	8008182 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008154:	23fc      	movs	r3, #252	; 0xfc
 8008156:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800815a:	e012      	b.n	8008182 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800815c:	7d7b      	ldrb	r3, [r7, #21]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00f      	beq.n	8008182 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008166:	4413      	add	r3, r2
 8008168:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800816a:	69fa      	ldr	r2, [r7, #28]
 800816c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800816e:	429a      	cmp	r2, r3
 8008170:	d204      	bcs.n	800817c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8008172:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	643b      	str	r3, [r7, #64]	; 0x40
 800817a:	e002      	b.n	8008182 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800817c:	23fc      	movs	r3, #252	; 0xfc
 800817e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8008182:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008186:	2b00      	cmp	r3, #0
 8008188:	d002      	beq.n	8008190 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800818a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800818e:	e034      	b.n	80081fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8008190:	7dfb      	ldrb	r3, [r7, #23]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d019      	beq.n	80081ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8008196:	f107 030c 	add.w	r3, r7, #12
 800819a:	461a      	mov	r2, r3
 800819c:	2103      	movs	r1, #3
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f7ff faba 	bl	8007718 <get_sequence_step_timeout>
 80081a4:	4603      	mov	r3, r0
 80081a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081ae:	4413      	add	r3, r2
 80081b0:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80081b2:	69fa      	ldr	r2, [r7, #28]
 80081b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d204      	bcs.n	80081c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80081ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	643b      	str	r3, [r7, #64]	; 0x40
 80081c2:	e002      	b.n	80081ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80081c4:	23fc      	movs	r3, #252	; 0xfc
 80081c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 80081ca:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d111      	bne.n	80081f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 80081d2:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00e      	beq.n	80081f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 80081d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081dc:	1ad3      	subs	r3, r2, r3
 80081de:	643b      	str	r3, [r7, #64]	; 0x40
		* budget and the sum of all other timeouts within the sequence.
		* If there is no room for the final range timeout, then an error
		* will be set. Otherwise the remaining time will be applied to
		* the final range.
		*/
		Status = set_sequence_step_timeout(Dev,
 80081e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081e2:	2104      	movs	r1, #4
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f7ff fb78 	bl	80078da <set_sequence_step_timeout>
 80081ea:	4603      	mov	r3, r0
 80081ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			   VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			   FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	615a      	str	r2, [r3, #20]
			   MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80081f6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3748      	adds	r7, #72	; 0x48
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b090      	sub	sp, #64	; 0x40
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800820c:	2300      	movs	r3, #0
 800820e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008212:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008216:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008218:	f240 7376 	movw	r3, #1910	; 0x776
 800821c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800821e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008222:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008224:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008228:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800822a:	f240 234e 	movw	r3, #590	; 0x24e
 800822e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8008230:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008234:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008236:	f44f 7325 	mov.w	r3, #660	; 0x294
 800823a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800823c:	f240 2326 	movw	r3, #550	; 0x226
 8008240:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008242:	2300      	movs	r3, #0
 8008244:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8008246:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800824a:	441a      	add	r2, r3
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008250:	f107 0318 	add.w	r3, r7, #24
 8008254:	4619      	mov	r1, r3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f7fc fe02 	bl	8004e60 <VL53L0X_GetSequenceStepEnables>
 800825c:	4603      	mov	r3, r0
 800825e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8008262:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008266:	2b00      	cmp	r3, #0
 8008268:	d002      	beq.n	8008270 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800826a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800826e:	e075      	b.n	800835c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8008270:	7e3b      	ldrb	r3, [r7, #24]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d105      	bne.n	8008282 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8008276:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8008278:	2b00      	cmp	r3, #0
 800827a:	d102      	bne.n	8008282 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800827c:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800827e:	2b00      	cmp	r3, #0
 8008280:	d030      	beq.n	80082e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8008282:	f107 0310 	add.w	r3, r7, #16
 8008286:	461a      	mov	r2, r3
 8008288:	2102      	movs	r1, #2
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f7ff fa44 	bl	8007718 <get_sequence_step_timeout>
 8008290:	4603      	mov	r3, r0
 8008292:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8008296:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800829a:	2b00      	cmp	r3, #0
 800829c:	d122      	bne.n	80082e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800829e:	7e3b      	ldrb	r3, [r7, #24]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d007      	beq.n	80082b4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80082a8:	6939      	ldr	r1, [r7, #16]
 80082aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ac:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80082ae:	441a      	add	r2, r3
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80082b4:	7ebb      	ldrb	r3, [r7, #26]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d009      	beq.n	80082ce <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80082be:	6939      	ldr	r1, [r7, #16]
 80082c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c2:	440b      	add	r3, r1
 80082c4:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80082c6:	441a      	add	r2, r3
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	601a      	str	r2, [r3, #0]
 80082cc:	e00a      	b.n	80082e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80082ce:	7e7b      	ldrb	r3, [r7, #25]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d007      	beq.n	80082e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80082d8:	6939      	ldr	r1, [r7, #16]
 80082da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082dc:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80082de:	441a      	add	r2, r3
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80082e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d114      	bne.n	8008316 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 80082ec:	7efb      	ldrb	r3, [r7, #27]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d011      	beq.n	8008316 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 80082f2:	f107 030c 	add.w	r3, r7, #12
 80082f6:	461a      	mov	r2, r3
 80082f8:	2103      	movs	r1, #3
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7ff fa0c 	bl	8007718 <get_sequence_step_timeout>
 8008300:	4603      	mov	r3, r0
 8008302:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800830a:	68f9      	ldr	r1, [r7, #12]
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008310:	441a      	add	r2, r3
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008316:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800831a:	2b00      	cmp	r3, #0
 800831c:	d114      	bne.n	8008348 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800831e:	7f3b      	ldrb	r3, [r7, #28]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d011      	beq.n	8008348 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8008324:	f107 0314 	add.w	r3, r7, #20
 8008328:	461a      	mov	r2, r3
 800832a:	2104      	movs	r1, #4
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f7ff f9f3 	bl	8007718 <get_sequence_step_timeout>
 8008332:	4603      	mov	r3, r0
 8008334:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800833c:	6979      	ldr	r1, [r7, #20]
 800833e:	6a3b      	ldr	r3, [r7, #32]
 8008340:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008342:	441a      	add	r2, r3
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008348:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800834c:	2b00      	cmp	r3, #0
 800834e:	d103      	bne.n	8008358 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008358:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800835c:	4618      	mov	r0, r3
 800835e:	3740      	adds	r7, #64	; 0x40
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b088      	sub	sp, #32
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800836e:	2300      	movs	r3, #0
 8008370:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8008372:	2300      	movs	r3, #0
 8008374:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008376:	e0c6      	b.n	8008506 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	683a      	ldr	r2, [r7, #0]
 800837c:	4413      	add	r3, r2
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	74fb      	strb	r3, [r7, #19]
		Index++;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	3301      	adds	r3, #1
 8008386:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8008388:	7cfb      	ldrb	r3, [r7, #19]
 800838a:	2bff      	cmp	r3, #255	; 0xff
 800838c:	f040 808d 	bne.w	80084aa <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	4413      	add	r3, r2
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	747b      	strb	r3, [r7, #17]
			Index++;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	3301      	adds	r3, #1
 800839e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 80083a0:	7c7b      	ldrb	r3, [r7, #17]
 80083a2:	2b03      	cmp	r3, #3
 80083a4:	d87e      	bhi.n	80084a4 <VL53L0X_load_tuning_settings+0x140>
 80083a6:	a201      	add	r2, pc, #4	; (adr r2, 80083ac <VL53L0X_load_tuning_settings+0x48>)
 80083a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ac:	080083bd 	.word	0x080083bd
 80083b0:	080083f7 	.word	0x080083f7
 80083b4:	08008431 	.word	0x08008431
 80083b8:	0800846b 	.word	0x0800846b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	4413      	add	r3, r2
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	743b      	strb	r3, [r7, #16]
				Index++;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	3301      	adds	r3, #1
 80083ca:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	4413      	add	r3, r2
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	73fb      	strb	r3, [r7, #15]
				Index++;
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	3301      	adds	r3, #1
 80083da:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80083dc:	7c3b      	ldrb	r3, [r7, #16]
 80083de:	b29b      	uxth	r3, r3
 80083e0:	021b      	lsls	r3, r3, #8
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	7bfb      	ldrb	r3, [r7, #15]
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	4413      	add	r3, r2
 80083ea:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	89ba      	ldrh	r2, [r7, #12]
 80083f0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 80083f4:	e087      	b.n	8008506 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	4413      	add	r3, r2
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	743b      	strb	r3, [r7, #16]
				Index++;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	3301      	adds	r3, #1
 8008404:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	683a      	ldr	r2, [r7, #0]
 800840a:	4413      	add	r3, r2
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	3301      	adds	r3, #1
 8008414:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008416:	7c3b      	ldrb	r3, [r7, #16]
 8008418:	b29b      	uxth	r3, r3
 800841a:	021b      	lsls	r3, r3, #8
 800841c:	b29a      	uxth	r2, r3
 800841e:	7bfb      	ldrb	r3, [r7, #15]
 8008420:	b29b      	uxth	r3, r3
 8008422:	4413      	add	r3, r2
 8008424:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	89ba      	ldrh	r2, [r7, #12]
 800842a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800842e:	e06a      	b.n	8008506 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	4413      	add	r3, r2
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	743b      	strb	r3, [r7, #16]
				Index++;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	3301      	adds	r3, #1
 800843e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	4413      	add	r3, r2
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	73fb      	strb	r3, [r7, #15]
				Index++;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	3301      	adds	r3, #1
 800844e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008450:	7c3b      	ldrb	r3, [r7, #16]
 8008452:	b29b      	uxth	r3, r3
 8008454:	021b      	lsls	r3, r3, #8
 8008456:	b29a      	uxth	r2, r3
 8008458:	7bfb      	ldrb	r3, [r7, #15]
 800845a:	b29b      	uxth	r3, r3
 800845c:	4413      	add	r3, r2
 800845e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	89ba      	ldrh	r2, [r7, #12]
 8008464:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8008468:	e04d      	b.n	8008506 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	683a      	ldr	r2, [r7, #0]
 800846e:	4413      	add	r3, r2
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	743b      	strb	r3, [r7, #16]
				Index++;
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	3301      	adds	r3, #1
 8008478:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	683a      	ldr	r2, [r7, #0]
 800847e:	4413      	add	r3, r2
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	3301      	adds	r3, #1
 8008488:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800848a:	7c3b      	ldrb	r3, [r7, #16]
 800848c:	b29b      	uxth	r3, r3
 800848e:	021b      	lsls	r3, r3, #8
 8008490:	b29a      	uxth	r2, r3
 8008492:	7bfb      	ldrb	r3, [r7, #15]
 8008494:	b29b      	uxth	r3, r3
 8008496:	4413      	add	r3, r2
 8008498:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	89ba      	ldrh	r2, [r7, #12]
 800849e:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
				break;
 80084a2:	e030      	b.n	8008506 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80084a4:	23fc      	movs	r3, #252	; 0xfc
 80084a6:	77fb      	strb	r3, [r7, #31]
 80084a8:	e02d      	b.n	8008506 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 80084aa:	7cfb      	ldrb	r3, [r7, #19]
 80084ac:	2b04      	cmp	r3, #4
 80084ae:	d828      	bhi.n	8008502 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	683a      	ldr	r2, [r7, #0]
 80084b4:	4413      	add	r3, r2
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	74bb      	strb	r3, [r7, #18]
			Index++;
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	3301      	adds	r3, #1
 80084be:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 80084c0:	2300      	movs	r3, #0
 80084c2:	61bb      	str	r3, [r7, #24]
 80084c4:	e00f      	b.n	80084e6 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	683a      	ldr	r2, [r7, #0]
 80084ca:	4413      	add	r3, r2
 80084cc:	7819      	ldrb	r1, [r3, #0]
 80084ce:	f107 0208 	add.w	r2, r7, #8
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	4413      	add	r3, r2
 80084d6:	460a      	mov	r2, r1
 80084d8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	3301      	adds	r3, #1
 80084de:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	3301      	adds	r3, #1
 80084e4:	61bb      	str	r3, [r7, #24]
 80084e6:	7cfb      	ldrb	r3, [r7, #19]
 80084e8:	69ba      	ldr	r2, [r7, #24]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	dbeb      	blt.n	80084c6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 80084ee:	7cfb      	ldrb	r3, [r7, #19]
 80084f0:	f107 0208 	add.w	r2, r7, #8
 80084f4:	7cb9      	ldrb	r1, [r7, #18]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fea2 	bl	8009240 <VL53L0X_WriteMulti>
 80084fc:	4603      	mov	r3, r0
 80084fe:	77fb      	strb	r3, [r7, #31]
 8008500:	e001      	b.n	8008506 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008502:	23fc      	movs	r3, #252	; 0xfc
 8008504:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	683a      	ldr	r2, [r7, #0]
 800850a:	4413      	add	r3, r2
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d004      	beq.n	800851c <VL53L0X_load_tuning_settings+0x1b8>
 8008512:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008516:	2b00      	cmp	r3, #0
 8008518:	f43f af2e 	beq.w	8008378 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800851c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008520:	4618      	mov	r0, r3
 8008522:	3720      	adds	r7, #32
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b088      	sub	sp, #32
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008534:	2300      	movs	r3, #0
 8008536:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800853e:	f107 0313 	add.w	r3, r7, #19
 8008542:	4619      	mov	r1, r3
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f7fc fd57 	bl	8004ff8 <VL53L0X_GetXTalkCompensationEnable>
 800854a:	4603      	mov	r3, r0
 800854c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800854e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d111      	bne.n	800857a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8008556:	7cfb      	ldrb	r3, [r7, #19]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00e      	beq.n	800857a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6a1b      	ldr	r3, [r3, #32]
 8008560:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	8a9b      	ldrh	r3, [r3, #20]
 8008566:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	fb02 f303 	mul.w	r3, r2, r3
 800856e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	3380      	adds	r3, #128	; 0x80
 8008574:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800857a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3720      	adds	r7, #32
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b086      	sub	sp, #24
 800858a:	af00      	add	r7, sp, #0
 800858c:	60f8      	str	r0, [r7, #12]
 800858e:	60b9      	str	r1, [r7, #8]
 8008590:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008592:	2300      	movs	r3, #0
 8008594:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800859e:	f107 0310 	add.w	r3, r7, #16
 80085a2:	461a      	mov	r2, r3
 80085a4:	68b9      	ldr	r1, [r7, #8]
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f7ff ffbe 	bl	8008528 <VL53L0X_get_total_xtalk_rate>
 80085ac:	4603      	mov	r3, r0
 80085ae:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80085b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d105      	bne.n	80085c4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	441a      	add	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	601a      	str	r2, [r3, #0]

	return Status;
 80085c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3718      	adds	r7, #24
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b09a      	sub	sp, #104	; 0x68
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
 80085dc:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 80085de:	2312      	movs	r3, #18
 80085e0:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 80085e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80085e6:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 80085e8:	2342      	movs	r3, #66	; 0x42
 80085ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 80085ec:	2306      	movs	r3, #6
 80085ee:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 80085f0:	2307      	movs	r3, #7
 80085f2:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085f4:	2300      	movs	r3, #0
 80085f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
	dmaxCalRange_mm =
 8008600:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008608:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800860a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800860c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800860e:	fb02 f303 	mul.w	r3, r2, r3
 8008612:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8008614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008616:	3380      	adds	r3, #128	; 0x80
 8008618:	0a1b      	lsrs	r3, r3, #8
 800861a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800861c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800861e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008620:	fb02 f303 	mul.w	r3, r2, r3
 8008624:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8008626:	2300      	movs	r3, #0
 8008628:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d01b      	beq.n	8008668 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	029b      	lsls	r3, r3, #10
 8008634:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800863a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800863c:	4413      	add	r3, r2
 800863e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8008640:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	fbb2 f3f3 	udiv	r3, r2, r3
 8008648:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800864a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800864c:	4613      	mov	r3, r2
 800864e:	005b      	lsls	r3, r3, #1
 8008650:	4413      	add	r3, r2
 8008652:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8008654:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008656:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008658:	fb02 f303 	mul.w	r3, r2, r3
 800865c:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800865e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008660:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008664:	0c1b      	lsrs	r3, r3, #16
 8008666:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800866c:	fb02 f303 	mul.w	r3, r2, r3
 8008670:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8008672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008674:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008678:	0c1b      	lsrs	r3, r3, #16
 800867a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800867c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008680:	fb02 f303 	mul.w	r3, r2, r3
 8008684:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8008686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008688:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800868c:	0c1b      	lsrs	r3, r3, #16
 800868e:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8008690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008692:	085a      	lsrs	r2, r3, #1
 8008694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008696:	441a      	add	r2, r3
 8008698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800869a:	fbb2 f3f3 	udiv	r3, r2, r3
 800869e:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 80086a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086a4:	fb02 f303 	mul.w	r3, r2, r3
 80086a8:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 80086aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086b0:	d302      	bcc.n	80086b8 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 80086b2:	4b55      	ldr	r3, [pc, #340]	; (8008808 <VL53L0X_calc_dmax+0x238>)
 80086b4:	663b      	str	r3, [r7, #96]	; 0x60
 80086b6:	e016      	b.n	80086e6 <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 80086b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086ba:	085a      	lsrs	r2, r3, #1
 80086bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086be:	441a      	add	r2, r3
 80086c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80086c6:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 80086c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086cc:	fb02 f303 	mul.w	r3, r2, r3
 80086d0:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80086d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80086d8:	0c1b      	lsrs	r3, r3, #16
 80086da:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 80086dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086e0:	fb02 f303 	mul.w	r3, r2, r3
 80086e4:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 80086e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086e8:	039b      	lsls	r3, r3, #14
 80086ea:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80086ee:	4a47      	ldr	r2, [pc, #284]	; (800880c <VL53L0X_calc_dmax+0x23c>)
 80086f0:	fba2 2303 	umull	r2, r3, r2, r3
 80086f4:	099b      	lsrs	r3, r3, #6
 80086f6:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 80086f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086fc:	fb02 f303 	mul.w	r3, r2, r3
 8008700:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8008702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008704:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008706:	fb02 f303 	mul.w	r3, r2, r3
 800870a:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800870c:	6a3b      	ldr	r3, [r7, #32]
 800870e:	3308      	adds	r3, #8
 8008710:	091b      	lsrs	r3, r3, #4
 8008712:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8008714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008716:	6a3b      	ldr	r3, [r7, #32]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800871c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800871e:	4613      	mov	r3, r2
 8008720:	005b      	lsls	r3, r3, #1
 8008722:	4413      	add	r3, r2
 8008724:	011b      	lsls	r3, r3, #4
 8008726:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800872e:	0b9b      	lsrs	r3, r3, #14
 8008730:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8008732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008734:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008736:	4413      	add	r3, r2
 8008738:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800873a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800873c:	085b      	lsrs	r3, r3, #1
 800873e:	69ba      	ldr	r2, [r7, #24]
 8008740:	4413      	add	r3, r2
 8008742:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8008744:	69ba      	ldr	r2, [r7, #24]
 8008746:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008748:	fbb2 f3f3 	udiv	r3, r2, r3
 800874c:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	039b      	lsls	r3, r3, #14
 8008752:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	085b      	lsrs	r3, r3, #1
 8008758:	69ba      	ldr	r2, [r7, #24]
 800875a:	4413      	add	r3, r2
 800875c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800875e:	69ba      	ldr	r2, [r7, #24]
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	fbb2 f3f3 	udiv	r3, r2, r3
 8008766:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800876c:	fb02 f303 	mul.w	r3, r2, r3
 8008770:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008778:	4a24      	ldr	r2, [pc, #144]	; (800880c <VL53L0X_calc_dmax+0x23c>)
 800877a:	fba2 2303 	umull	r2, r3, r2, r3
 800877e:	099b      	lsrs	r3, r3, #6
 8008780:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	011b      	lsls	r3, r3, #4
 8008786:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800878e:	4a1f      	ldr	r2, [pc, #124]	; (800880c <VL53L0X_calc_dmax+0x23c>)
 8008790:	fba2 2303 	umull	r2, r3, r2, r3
 8008794:	099b      	lsrs	r3, r3, #6
 8008796:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8008798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800879a:	3380      	adds	r3, #128	; 0x80
 800879c:	0a1b      	lsrs	r3, r3, #8
 800879e:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d008      	beq.n	80087b8 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	085a      	lsrs	r2, r3, #1
 80087aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ac:	441a      	add	r2, r3
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80087b6:	e001      	b.n	80087bc <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 80087b8:	2300      	movs	r3, #0
 80087ba:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 80087bc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80087be:	f7fe f9b4 	bl	8006b2a <VL53L0X_isqrt>
 80087c2:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d008      	beq.n	80087dc <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	085a      	lsrs	r2, r3, #1
 80087ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d0:	441a      	add	r2, r3
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087da:	e001      	b.n	80087e0 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 80087dc:	2300      	movs	r3, #0
 80087de:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 80087e0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80087e2:	f7fe f9a2 	bl	8006b2a <VL53L0X_isqrt>
 80087e6:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 80087e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80087ea:	693a      	ldr	r2, [r7, #16]
 80087ec:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 80087ee:	693a      	ldr	r2, [r7, #16]
 80087f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d902      	bls.n	80087fc <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 80087f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80087f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80087fa:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 80087fc:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8008800:	4618      	mov	r0, r3
 8008802:	3768      	adds	r7, #104	; 0x68
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	fff00000 	.word	0xfff00000
 800880c:	10624dd3 	.word	0x10624dd3

08008810 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b0b2      	sub	sp, #200	; 0xc8
 8008814:	af04      	add	r7, sp, #16
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
 800881c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800881e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008822:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8008826:	f44f 7316 	mov.w	r3, #600	; 0x258
 800882a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800882e:	2342      	movs	r3, #66	; 0x42
 8008830:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8008834:	f241 235c 	movw	r3, #4700	; 0x125c
 8008838:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800883c:	4b6b      	ldr	r3, [pc, #428]	; (80089ec <VL53L0X_calc_sigma_estimate+0x1dc>)
 800883e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8008842:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008846:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800884a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800884e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008852:	fbb2 f3f3 	udiv	r3, r2, r3
 8008856:	67fb      	str	r3, [r7, #124]	; 0x7c
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8008858:	4b65      	ldr	r3, [pc, #404]	; (80089f0 <VL53L0X_calc_sigma_estimate+0x1e0>)
 800885a:	67bb      	str	r3, [r7, #120]	; 0x78
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800885c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008860:	677b      	str	r3, [r7, #116]	; 0x74
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8008862:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8008866:	673b      	str	r3, [r7, #112]	; 0x70
	const uint32_t cPllPeriod_ps			= 1655;
 8008868:	f240 6377 	movw	r3, #1655	; 0x677
 800886c:	66fb      	str	r3, [r7, #108]	; 0x6c
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800886e:	2300      	movs	r3, #0
 8008870:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6a1b      	ldr	r3, [r3, #32]
 8008878:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008882:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8008886:	0c1b      	lsrs	r3, r3, #16
 8008888:	66bb      	str	r3, [r7, #104]	; 0x68

	correctedSignalRate_mcps =
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	667b      	str	r3, [r7, #100]	; 0x64
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8008890:	f107 0310 	add.w	r3, r7, #16
 8008894:	461a      	mov	r2, r3
 8008896:	68b9      	ldr	r1, [r7, #8]
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f7ff fe74 	bl	8008586 <VL53L0X_get_total_signal_rate>
 800889e:	4603      	mov	r3, r0
 80088a0:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 80088a4:	f107 0314 	add.w	r3, r7, #20
 80088a8:	461a      	mov	r2, r3
 80088aa:	68b9      	ldr	r1, [r7, #8]
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f7ff fe3b 	bl	8008528 <VL53L0X_get_total_xtalk_rate>
 80088b2:	4603      	mov	r3, r0
 80088b4:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80088be:	fb02 f303 	mul.w	r3, r2, r3
 80088c2:	663b      	str	r3, [r7, #96]	; 0x60
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80088c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088c6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80088ca:	0c1b      	lsrs	r3, r3, #16
 80088cc:	663b      	str	r3, [r7, #96]	; 0x60

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80088d4:	fb02 f303 	mul.w	r3, r2, r3
 80088d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 80088dc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80088e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d902      	bls.n	80088ec <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 80088e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (Status == VL53L0X_ERROR_NONE) {
 80088ec:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d164      	bne.n	80089be <VL53L0X_calc_sigma_estimate+0x1ae>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80088fa:	65fb      	str	r3, [r7, #92]	; 0x5c
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8008902:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008906:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800890a:	461a      	mov	r2, r3
 800890c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f7fe feac 	bl	800766c <VL53L0X_calc_timeout_mclks>
 8008914:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800891c:	653b      	str	r3, [r7, #80]	; 0x50
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8008924:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008928:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800892c:	461a      	mov	r2, r3
 800892e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f7fe fe9b 	bl	800766c <VL53L0X_calc_timeout_mclks>
 8008936:	64b8      	str	r0, [r7, #72]	; 0x48
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8008938:	2303      	movs	r3, #3
 800893a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 800893e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008942:	2b08      	cmp	r3, #8
 8008944:	d102      	bne.n	800894c <VL53L0X_calc_sigma_estimate+0x13c>
			vcselWidth = 2;
 8008946:	2302      	movs	r3, #2
 8008948:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800894c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800894e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008950:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8008952:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008956:	fb02 f303 	mul.w	r3, r2, r3
 800895a:	02db      	lsls	r3, r3, #11
 800895c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008960:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008964:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008968:	4a22      	ldr	r2, [pc, #136]	; (80089f4 <VL53L0X_calc_sigma_estimate+0x1e4>)
 800896a:	fba2 2303 	umull	r2, r3, r2, r3
 800896e:	099b      	lsrs	r3, r3, #6
 8008970:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us *= cPllPeriod_ps;
 8008974:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008978:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800897a:	fb02 f303 	mul.w	r3, r2, r3
 800897e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008982:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008986:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800898a:	4a1a      	ldr	r2, [pc, #104]	; (80089f4 <VL53L0X_calc_sigma_estimate+0x1e4>)
 800898c:	fba2 2303 	umull	r2, r3, r2, r3
 8008990:	099b      	lsrs	r3, r3, #6
 8008992:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	3380      	adds	r3, #128	; 0x80
 800899a:	0a1b      	lsrs	r3, r3, #8
 800899c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80089a4:	fb02 f303 	mul.w	r3, r2, r3
 80089a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 80089ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80089b0:	3380      	adds	r3, #128	; 0x80
 80089b2:	0a1b      	lsrs	r3, r3, #8
 80089b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	021b      	lsls	r3, r3, #8
 80089bc:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 80089be:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d002      	beq.n	80089cc <VL53L0X_calc_sigma_estimate+0x1bc>
		LOG_FUNCTION_END(Status);
		return Status;
 80089c6:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 80089ca:	e12e      	b.n	8008c2a <VL53L0X_calc_sigma_estimate+0x41a>
	}

	if (peakSignalRate_kcps == 0) {
 80089cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d112      	bne.n	80089f8 <VL53L0X_calc_sigma_estimate+0x1e8>
		*pSigmaEstimate = cSigmaEstMax;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80089d8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80089e0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		*pDmax_mm = 0;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	2200      	movs	r2, #0
 80089e8:	601a      	str	r2, [r3, #0]
 80089ea:	e11c      	b.n	8008c26 <VL53L0X_calc_sigma_estimate+0x416>
 80089ec:	028f87ae 	.word	0x028f87ae
 80089f0:	0006999a 	.word	0x0006999a
 80089f4:	10624dd3 	.word	0x10624dd3
	} else {
		if (vcselTotalEventsRtn < 1)
 80089f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d102      	bne.n	8008a06 <VL53L0X_calc_sigma_estimate+0x1f6>
			vcselTotalEventsRtn = 1;
 8008a00:	2301      	movs	r3, #1
 8008a02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		 * deltaT_ps represents the time of flight in pico secs for the
		 * current range measurement, using the "TOF per mm" constant
		 * (in ps).
		 */

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8008a06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a0a:	647b      	str	r3, [r7, #68]	; 0x44

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8008a0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a0e:	041a      	lsls	r2, r3, #16
 8008a10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8008a1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008a1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d902      	bls.n	8008a2a <VL53L0X_calc_sigma_estimate+0x21a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8008a24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8008a2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008a2e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008a32:	fb02 f303 	mul.w	r3, r2, r3
 8008a36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8008a3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a3e:	4613      	mov	r3, r2
 8008a40:	005b      	lsls	r3, r3, #1
 8008a42:	4413      	add	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fe f86f 	bl	8006b2a <VL53L0X_isqrt>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	005b      	lsls	r3, r3, #1
 8008a50:	643b      	str	r3, [r7, #64]	; 0x40

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	891b      	ldrh	r3, [r3, #8]
 8008a56:	461a      	mov	r2, r3
 8008a58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a5a:	fb02 f303 	mul.w	r3, r2, r3
 8008a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008a60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a62:	041a      	lsls	r2, r3, #16
 8008a64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008a68:	1ad3      	subs	r3, r2, r3
			xTalkCompRate_kcps) + 500)/1000;
 8008a6a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008a6e:	4a71      	ldr	r2, [pc, #452]	; (8008c34 <VL53L0X_calc_sigma_estimate+0x424>)
 8008a70:	fba2 2303 	umull	r2, r3, r2, r3
 8008a74:	099b      	lsrs	r3, r3, #6
 8008a76:	63bb      	str	r3, [r7, #56]	; 0x38

		/* vcselRate + xtalkCompRate */
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 8008a78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a7a:	041a      	lsls	r2, r3, #16
 8008a7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008a80:	4413      	add	r3, r2
			xTalkCompRate_kcps) + 500)/1000;
 8008a82:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 8008a86:	4a6b      	ldr	r2, [pc, #428]	; (8008c34 <VL53L0X_calc_sigma_estimate+0x424>)
 8008a88:	fba2 2303 	umull	r2, r3, r2, r3
 8008a8c:	099b      	lsrs	r3, r3, #6
 8008a8e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8008a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a92:	021b      	lsls	r3, r3, #8
 8008a94:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8008a96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	bfb8      	it	lt
 8008aa2:	425b      	neglt	r3, r3
 8008aa4:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8008aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa8:	021b      	lsls	r3, r3, #8
 8008aaa:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint1616/uint32 = FixPoint1616 */
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8008aac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008aae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
		 * values are small enough such that32 bits will not be
		 * exceeded.
		 */
		pwMult *= ((1 << 16) - xTalkCorrection);
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aba:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8008abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac0:	fb02 f303 	mul.w	r3, r2, r3
 8008ac4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3232 >> 16) = FixPoint1616 */
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8008ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ac8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008aca:	4413      	add	r3, r2
 8008acc:	0c1b      	lsrs	r3, r3, #16
 8008ace:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
		pwMult += (1 << 16);
 8008ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8008ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * At this point the value will be 1.xx, therefore if we square
		 * the value this will exceed 32 bits. To address this perform
		 * a single shift to the right before the multiplication.
		 */
		pwMult >>= 1;
 8008ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ada:	085b      	lsrs	r3, r3, #1
 8008adc:	62fb      	str	r3, [r7, #44]	; 0x2c
		/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
		pwMult = pwMult * pwMult;
 8008ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ae2:	fb02 f303 	mul.w	r3, r2, r3
 8008ae6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3430 >> 14) = Fix1616 */
		pwMult >>= 14;
 8008ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aea:	0b9b      	lsrs	r3, r3, #14
 8008aec:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8008aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008af2:	fb02 f303 	mul.w	r3, r2, r3
 8008af6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8008af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008afe:	0c1b      	lsrs	r3, r3, #16
 8008b00:	62bb      	str	r3, [r7, #40]	; 0x28

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8008b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b06:	fb02 f303 	mul.w	r3, r2, r3
 8008b0a:	62bb      	str	r3, [r7, #40]	; 0x28

		sqr2 = sigmaEstimateP2;
 8008b0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008b10:	627b      	str	r3, [r7, #36]	; 0x24

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8008b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b14:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008b18:	0c1b      	lsrs	r3, r3, #16
 8008b1a:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b20:	fb02 f303 	mul.w	r3, r2, r3
 8008b24:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8008b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2a:	4413      	add	r3, r2
 8008b2c:	623b      	str	r3, [r7, #32]

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8008b2e:	6a38      	ldr	r0, [r7, #32]
 8008b30:	f7fd fffb 	bl	8006b2a <VL53L0X_isqrt>
 8008b34:	61f8      	str	r0, [r7, #28]

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	041b      	lsls	r3, r3, #16
 8008b3a:	61fb      	str	r3, [r7, #28]
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	3332      	adds	r3, #50	; 0x32
 8008b40:	4a3d      	ldr	r2, [pc, #244]	; (8008c38 <VL53L0X_calc_sigma_estimate+0x428>)
 8008b42:	fba2 2303 	umull	r2, r3, r2, r3
 8008b46:	095a      	lsrs	r2, r3, #5
 8008b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8008b52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b56:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8008b5a:	fb02 f303 	mul.w	r3, r2, r3
 8008b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8008b62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b66:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008b6a:	3308      	adds	r3, #8
 8008b6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		sigmaEstRtn		 /= 10000;
 8008b70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b74:	4a31      	ldr	r2, [pc, #196]	; (8008c3c <VL53L0X_calc_sigma_estimate+0x42c>)
 8008b76:	fba2 2303 	umull	r2, r3, r2, r3
 8008b7a:	0b5b      	lsrs	r3, r3, #13
 8008b7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8008b80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008b84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d903      	bls.n	8008b94 <VL53L0X_calc_sigma_estimate+0x384>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8008b8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8008b94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008b9c:	fb02 f303 	mul.w	r3, r2, r3
 8008ba0:	62bb      	str	r3, [r7, #40]	; 0x28
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = cSigmaEstRef * cSigmaEstRef;
 8008ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ba6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008baa:	fb02 f303 	mul.w	r3, r2, r3
 8008bae:	627b      	str	r3, [r7, #36]	; 0x24

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8008bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb4:	4413      	add	r3, r2
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7fd ffb7 	bl	8006b2a <VL53L0X_isqrt>
 8008bbc:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008bc4:	fb02 f303 	mul.w	r3, r2, r3
 8008bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8008bcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d009      	beq.n	8008be6 <VL53L0X_calc_sigma_estimate+0x3d6>
 8008bd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d005      	beq.n	8008be6 <VL53L0X_calc_sigma_estimate+0x3d6>
 8008bda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008bde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d903      	bls.n	8008bee <VL53L0X_calc_sigma_estimate+0x3de>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8008be6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008bf4:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 8008c00:	6939      	ldr	r1, [r7, #16]
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	9303      	str	r3, [sp, #12]
 8008c06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c0a:	9302      	str	r3, [sp, #8]
 8008c0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008c10:	9301      	str	r3, [sp, #4]
 8008c12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c14:	9300      	str	r3, [sp, #0]
 8008c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f7ff fcd8 	bl	80085d0 <VL53L0X_calc_dmax>
 8008c20:	4603      	mov	r3, r0
 8008c22:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008c26:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	37b8      	adds	r7, #184	; 0xb8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	10624dd3 	.word	0x10624dd3
 8008c38:	51eb851f 	.word	0x51eb851f
 8008c3c:	d1b71759 	.word	0xd1b71759

08008c40 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b090      	sub	sp, #64	; 0x40
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	607a      	str	r2, [r7, #4]
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	72fb      	strb	r3, [r7, #11]
 8008c50:	4613      	mov	r3, r2
 8008c52:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c54:	2300      	movs	r3, #0
 8008c56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8008c60:	2300      	movs	r3, #0
 8008c62:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8008c66:	2300      	movs	r3, #0
 8008c68:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8008c72:	2300      	movs	r3, #0
 8008c74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8008c84:	2300      	movs	r3, #0
 8008c86:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8008c92:	7afb      	ldrb	r3, [r7, #11]
 8008c94:	10db      	asrs	r3, r3, #3
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	f003 030f 	and.w	r3, r3, #15
 8008c9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8008ca0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d017      	beq.n	8008cd8 <VL53L0X_get_pal_range_status+0x98>
 8008ca8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008cac:	2b05      	cmp	r3, #5
 8008cae:	d013      	beq.n	8008cd8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8008cb0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008cb4:	2b07      	cmp	r3, #7
 8008cb6:	d00f      	beq.n	8008cd8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8008cb8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008cbc:	2b0c      	cmp	r3, #12
 8008cbe:	d00b      	beq.n	8008cd8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8008cc0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008cc4:	2b0d      	cmp	r3, #13
 8008cc6:	d007      	beq.n	8008cd8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8008cc8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ccc:	2b0e      	cmp	r3, #14
 8008cce:	d003      	beq.n	8008cd8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8008cd0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008cd4:	2b0f      	cmp	r3, #15
 8008cd6:	d103      	bne.n	8008ce0 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008cde:	e002      	b.n	8008ce6 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
 8008ce6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d107      	bne.n	8008cfe <VL53L0X_get_pal_range_status+0xbe>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008cee:	2201      	movs	r2, #1
 8008cf0:	21ff      	movs	r1, #255	; 0xff
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f000 fb74 	bl	80093e0 <VL53L0X_WrByte>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE)
 8008cfe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d109      	bne.n	8008d1a <VL53L0X_get_pal_range_status+0xda>
		Status = VL53L0X_RdWord(Dev,
 8008d06:	f107 0316 	add.w	r3, r7, #22
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	21b6      	movs	r1, #182	; 0xb6
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f000 faf2 	bl	80092f8 <VL53L0X_RdWord>
 8008d14:	4603      	mov	r3, r0
 8008d16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8008d1a:	8afb      	ldrh	r3, [r7, #22]
 8008d1c:	025b      	lsls	r3, r3, #9
 8008d1e:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (Status == VL53L0X_ERROR_NONE)
 8008d20:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d107      	bne.n	8008d38 <VL53L0X_get_pal_range_status+0xf8>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008d28:	2200      	movs	r2, #0
 8008d2a:	21ff      	movs	r1, #255	; 0xff
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f000 fb57 	bl	80093e0 <VL53L0X_WrByte>
 8008d32:	4603      	mov	r3, r0
 8008d34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d3c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008d40:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d109      	bne.n	8008d5c <VL53L0X_get_pal_range_status+0x11c>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008d48:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	2100      	movs	r1, #0
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f7fc fa25 	bl	80051a0 <VL53L0X_GetLimitCheckEnable>
 8008d56:	4603      	mov	r3, r0
 8008d58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8008d5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d02e      	beq.n	8008dc2 <VL53L0X_get_pal_range_status+0x182>
 8008d64:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d12a      	bne.n	8008dc2 <VL53L0X_get_pal_range_status+0x182>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8008d6c:	f107 0310 	add.w	r3, r7, #16
 8008d70:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008d74:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f7ff fd4a 	bl	8008810 <VL53L0X_calc_sigma_estimate>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8008d82:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d103      	bne.n	8008d92 <VL53L0X_get_pal_range_status+0x152>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d90:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8008d92:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d113      	bne.n	8008dc2 <VL53L0X_get_pal_range_status+0x182>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8008d9a:	f107 0320 	add.w	r3, r7, #32
 8008d9e:	461a      	mov	r2, r3
 8008da0:	2100      	movs	r1, #0
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f7fc fa82 	bl	80052ac <VL53L0X_GetLimitCheckValue>
 8008da8:	4603      	mov	r3, r0
 8008daa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8008dae:	6a3b      	ldr	r3, [r7, #32]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d006      	beq.n	8008dc2 <VL53L0X_get_pal_range_status+0x182>
				(SigmaEstimate > SigmaLimitValue))
 8008db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008db6:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d902      	bls.n	8008dc2 <VL53L0X_get_pal_range_status+0x182>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008dc2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d109      	bne.n	8008dde <VL53L0X_get_pal_range_status+0x19e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008dca:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8008dce:	461a      	mov	r2, r3
 8008dd0:	2102      	movs	r1, #2
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f7fc f9e4 	bl	80051a0 <VL53L0X_GetLimitCheckEnable>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8008dde:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d017      	beq.n	8008e16 <VL53L0X_get_pal_range_status+0x1d6>
 8008de6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d113      	bne.n	8008e16 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008dee:	f107 031c 	add.w	r3, r7, #28
 8008df2:	461a      	mov	r2, r3
 8008df4:	2102      	movs	r1, #2
 8008df6:	68f8      	ldr	r0, [r7, #12]
 8008df8:	f7fc fa58 	bl	80052ac <VL53L0X_GetLimitCheckValue>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d006      	beq.n	8008e16 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8008e08:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8008e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d902      	bls.n	8008e16 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8008e10:	2301      	movs	r3, #1
 8008e12:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008e16:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d109      	bne.n	8008e32 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008e1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e22:	461a      	mov	r2, r3
 8008e24:	2103      	movs	r1, #3
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f7fc f9ba 	bl	80051a0 <VL53L0X_GetLimitCheckEnable>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8008e32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d023      	beq.n	8008e82 <VL53L0X_get_pal_range_status+0x242>
 8008e3a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d11f      	bne.n	8008e82 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8008e42:	893b      	ldrh	r3, [r7, #8]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d102      	bne.n	8008e4e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8008e4c:	e005      	b.n	8008e5a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	021a      	lsls	r2, r3, #8
 8008e52:	893b      	ldrh	r3, [r7, #8]
 8008e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e58:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008e5a:	f107 0318 	add.w	r3, r7, #24
 8008e5e:	461a      	mov	r2, r3
 8008e60:	2103      	movs	r1, #3
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	f7fc fa22 	bl	80052ac <VL53L0X_GetLimitCheckValue>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d006      	beq.n	8008e82 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8008e74:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8008e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d202      	bcs.n	8008e82 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008e82:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d14a      	bne.n	8008f20 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8008e8a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d103      	bne.n	8008e9a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8008e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e94:	22ff      	movs	r2, #255	; 0xff
 8008e96:	701a      	strb	r2, [r3, #0]
 8008e98:	e042      	b.n	8008f20 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8008e9a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d007      	beq.n	8008eb2 <VL53L0X_get_pal_range_status+0x272>
 8008ea2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ea6:	2b02      	cmp	r3, #2
 8008ea8:	d003      	beq.n	8008eb2 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8008eaa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008eae:	2b03      	cmp	r3, #3
 8008eb0:	d103      	bne.n	8008eba <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8008eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eb4:	2205      	movs	r2, #5
 8008eb6:	701a      	strb	r2, [r3, #0]
 8008eb8:	e032      	b.n	8008f20 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8008eba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ebe:	2b06      	cmp	r3, #6
 8008ec0:	d003      	beq.n	8008eca <VL53L0X_get_pal_range_status+0x28a>
 8008ec2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ec6:	2b09      	cmp	r3, #9
 8008ec8:	d103      	bne.n	8008ed2 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8008eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ecc:	2204      	movs	r2, #4
 8008ece:	701a      	strb	r2, [r3, #0]
 8008ed0:	e026      	b.n	8008f20 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8008ed2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ed6:	2b08      	cmp	r3, #8
 8008ed8:	d007      	beq.n	8008eea <VL53L0X_get_pal_range_status+0x2aa>
 8008eda:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ede:	2b0a      	cmp	r3, #10
 8008ee0:	d003      	beq.n	8008eea <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8008ee2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d103      	bne.n	8008ef2 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8008eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eec:	2203      	movs	r2, #3
 8008eee:	701a      	strb	r2, [r3, #0]
 8008ef0:	e016      	b.n	8008f20 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8008ef2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ef6:	2b04      	cmp	r3, #4
 8008ef8:	d003      	beq.n	8008f02 <VL53L0X_get_pal_range_status+0x2c2>
 8008efa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d103      	bne.n	8008f0a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8008f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f04:	2202      	movs	r2, #2
 8008f06:	701a      	strb	r2, [r3, #0]
 8008f08:	e00a      	b.n	8008f20 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8008f0a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d103      	bne.n	8008f1a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8008f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f14:	2201      	movs	r2, #1
 8008f16:	701a      	strb	r2, [r3, #0]
 8008f18:	e002      	b.n	8008f20 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8008f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8008f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d102      	bne.n	8008f2e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8008f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008f2e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8008f32:	461a      	mov	r2, r3
 8008f34:	2101      	movs	r1, #1
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f7fc f932 	bl	80051a0 <VL53L0X_GetLimitCheckEnable>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8008f42:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d14f      	bne.n	8008fea <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8008f4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d003      	beq.n	8008f5a <VL53L0X_get_pal_range_status+0x31a>
 8008f52:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d103      	bne.n	8008f62 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f60:	e002      	b.n	8008f68 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8008f62:	2300      	movs	r3, #0
 8008f64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008f6e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8008f72:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008f76:	2b04      	cmp	r3, #4
 8008f78:	d003      	beq.n	8008f82 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8008f7a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d103      	bne.n	8008f8a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8008f82:	2301      	movs	r3, #1
 8008f84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f88:	e002      	b.n	8008f90 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008f96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8008f9a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d003      	beq.n	8008faa <VL53L0X_get_pal_range_status+0x36a>
 8008fa2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d103      	bne.n	8008fb2 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8008faa:	2301      	movs	r3, #1
 8008fac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fb0:	e002      	b.n	8008fb8 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008fbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8008fc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d003      	beq.n	8008fd2 <VL53L0X_get_pal_range_status+0x392>
 8008fca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d103      	bne.n	8008fda <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fd8:	e002      	b.n	8008fe0 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008fe6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008fea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3740      	adds	r7, #64	; 0x40
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b086      	sub	sp, #24
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	60f8      	str	r0, [r7, #12]
 8008ffe:	60b9      	str	r1, [r7, #8]
 8009000:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009002:	2300      	movs	r3, #0
 8009004:	75fb      	strb	r3, [r7, #23]
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 8009006:	2102      	movs	r1, #2
 8009008:	68f8      	ldr	r0, [r7, #12]
 800900a:	f7fd fe03 	bl	8006c14 <VL53L0X_get_info_from_device>
 800900e:	4603      	mov	r3, r0
 8009010:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE) {
 8009012:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d11c      	bne.n	8009054 <VL53L0X_check_part_used+0x5e>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 8009020:	75bb      	strb	r3, [r7, #22]

	if (ModuleIdInt == 0) {
 8009022:	7dbb      	ldrb	r3, [r7, #22]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d107      	bne.n	8009038 <VL53L0X_check_part_used+0x42>
		*Revision = 0;
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	2200      	movs	r2, #0
 800902c:	701a      	strb	r2, [r3, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	3340      	adds	r3, #64	; 0x40
 8009032:	2200      	movs	r2, #0
 8009034:	701a      	strb	r2, [r3, #0]
 8009036:	e00d      	b.n	8009054 <VL53L0X_check_part_used+0x5e>
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	701a      	strb	r2, [r3, #0]
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	33f3      	adds	r3, #243	; 0xf3
 8009046:	613b      	str	r3, [r7, #16]
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	3340      	adds	r3, #64	; 0x40
 800904c:	6939      	ldr	r1, [r7, #16]
 800904e:	4618      	mov	r0, r3
 8009050:	f00a fb0c 	bl	801366c <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009054:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009058:	4618      	mov	r0, r3
 800905a:	3718      	adds	r7, #24
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8009060:	b5b0      	push	{r4, r5, r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800906a:	2300      	movs	r3, #0
 800906c:	73fb      	strb	r3, [r7, #15]
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 800906e:	f107 030d 	add.w	r3, r7, #13
 8009072:	683a      	ldr	r2, [r7, #0]
 8009074:	4619      	mov	r1, r3
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f7ff ffbd 	bl	8008ff6 <VL53L0X_check_part_used>
 800907c:	4603      	mov	r3, r0
 800907e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 8009080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d13b      	bne.n	8009100 <VL53L0X_get_device_info+0xa0>
		if (Revision == 0) {
 8009088:	7b7b      	ldrb	r3, [r7, #13]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d108      	bne.n	80090a0 <VL53L0X_get_device_info+0x40>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	4a30      	ldr	r2, [pc, #192]	; (8009154 <VL53L0X_get_device_info+0xf4>)
 8009092:	461c      	mov	r4, r3
 8009094:	4613      	mov	r3, r2
 8009096:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009098:	6020      	str	r0, [r4, #0]
 800909a:	6061      	str	r1, [r4, #4]
 800909c:	60a2      	str	r2, [r4, #8]
 800909e:	e027      	b.n	80090f0 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
		} else if ((Revision <= 34) && (Revision != 32)) {
 80090a0:	7b7b      	ldrb	r3, [r7, #13]
 80090a2:	2b22      	cmp	r3, #34	; 0x22
 80090a4:	d80b      	bhi.n	80090be <VL53L0X_get_device_info+0x5e>
 80090a6:	7b7b      	ldrb	r3, [r7, #13]
 80090a8:	2b20      	cmp	r3, #32
 80090aa:	d008      	beq.n	80090be <VL53L0X_get_device_info+0x5e>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	4a2a      	ldr	r2, [pc, #168]	; (8009158 <VL53L0X_get_device_info+0xf8>)
 80090b0:	461c      	mov	r4, r3
 80090b2:	4613      	mov	r3, r2
 80090b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80090b6:	6020      	str	r0, [r4, #0]
 80090b8:	6061      	str	r1, [r4, #4]
 80090ba:	60a2      	str	r2, [r4, #8]
 80090bc:	e018      	b.n	80090f0 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
 80090be:	7b7b      	ldrb	r3, [r7, #13]
 80090c0:	2b26      	cmp	r3, #38	; 0x26
 80090c2:	d808      	bhi.n	80090d6 <VL53L0X_get_device_info+0x76>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	4a25      	ldr	r2, [pc, #148]	; (800915c <VL53L0X_get_device_info+0xfc>)
 80090c8:	461c      	mov	r4, r3
 80090ca:	4613      	mov	r3, r2
 80090cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80090ce:	6020      	str	r0, [r4, #0]
 80090d0:	6061      	str	r1, [r4, #4]
 80090d2:	60a2      	str	r2, [r4, #8]
 80090d4:	e00c      	b.n	80090f0 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	4a21      	ldr	r2, [pc, #132]	; (8009160 <VL53L0X_get_device_info+0x100>)
 80090da:	461d      	mov	r5, r3
 80090dc:	4614      	mov	r4, r2
 80090de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80090e0:	6028      	str	r0, [r5, #0]
 80090e2:	6069      	str	r1, [r5, #4]
 80090e4:	60aa      	str	r2, [r5, #8]
 80090e6:	60eb      	str	r3, [r5, #12]
 80090e8:	6820      	ldr	r0, [r4, #0]
 80090ea:	6128      	str	r0, [r5, #16]
 80090ec:	7923      	ldrb	r3, [r4, #4]
 80090ee:	752b      	strb	r3, [r5, #20]
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	3320      	adds	r3, #32
 80090f4:	491b      	ldr	r1, [pc, #108]	; (8009164 <VL53L0X_get_device_info+0x104>)
 80090f6:	461a      	mov	r2, r3
 80090f8:	460b      	mov	r3, r1
 80090fa:	cb03      	ldmia	r3!, {r0, r1}
 80090fc:	6010      	str	r0, [r2, #0]
 80090fe:	6051      	str	r1, [r2, #4]
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d108      	bne.n	800911a <VL53L0X_get_device_info+0xba>
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	3360      	adds	r3, #96	; 0x60
 800910c:	461a      	mov	r2, r3
 800910e:	21c0      	movs	r1, #192	; 0xc0
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 f86a 	bl	80091ea <VL53L0X_RdByte>
 8009116:	4603      	mov	r3, r0
 8009118:	73fb      	strb	r3, [r7, #15]
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800911a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d112      	bne.n	8009148 <VL53L0X_get_device_info+0xe8>
		Status = VL53L0X_RdByte(Dev,
 8009122:	f107 030e 	add.w	r3, r7, #14
 8009126:	461a      	mov	r2, r3
 8009128:	21c2      	movs	r1, #194	; 0xc2
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f85d 	bl	80091ea <VL53L0X_RdByte>
 8009130:	4603      	mov	r3, r0
 8009132:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 800913c:	7bbb      	ldrb	r3, [r7, #14]
 800913e:	091b      	lsrs	r3, r3, #4
 8009140:	b2da      	uxtb	r2, r3
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}

	return Status;
 8009148:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800914c:	4618      	mov	r0, r3
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bdb0      	pop	{r4, r5, r7, pc}
 8009154:	080166a8 	.word	0x080166a8
 8009158:	080166b4 	.word	0x080166b4
 800915c:	080166c0 	.word	0x080166c0
 8009160:	080166cc 	.word	0x080166cc
 8009164:	080166e4 	.word	0x080166e4

08009168 <_I2CWrite>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8009168:	b580      	push	{r7, lr}
 800916a:	b088      	sub	sp, #32
 800916c:	af02      	add	r7, sp, #8
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	330a      	adds	r3, #10
 8009178:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8009186:	b299      	uxth	r1, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	b29a      	uxth	r2, r3
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	9300      	str	r3, [sp, #0]
 8009190:	4613      	mov	r3, r2
 8009192:	68ba      	ldr	r2, [r7, #8]
 8009194:	f001 ffa2 	bl	800b0dc <HAL_I2C_Master_Transmit>
 8009198:	4603      	mov	r3, r0
 800919a:	613b      	str	r3, [r7, #16]
    
    return status;
 800919c:	693b      	ldr	r3, [r7, #16]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3718      	adds	r7, #24
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b088      	sub	sp, #32
 80091aa:	af02      	add	r7, sp, #8
 80091ac:	60f8      	str	r0, [r7, #12]
 80091ae:	60b9      	str	r1, [r7, #8]
 80091b0:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	330a      	adds	r3, #10
 80091b6:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80091c4:	f043 0301 	orr.w	r3, r3, #1
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	b299      	uxth	r1, r3
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	9300      	str	r3, [sp, #0]
 80091d4:	4613      	mov	r3, r2
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	f002 f874 	bl	800b2c4 <HAL_I2C_Master_Receive>
 80091dc:	4603      	mov	r3, r0
 80091de:	613b      	str	r3, [r7, #16]
    
    return status;
 80091e0:	693b      	ldr	r3, [r7, #16]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b086      	sub	sp, #24
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	460b      	mov	r3, r1
 80091f4:	607a      	str	r2, [r7, #4]
 80091f6:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80091f8:	2300      	movs	r3, #0
 80091fa:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 80091fc:	f107 030b 	add.w	r3, r7, #11
 8009200:	2201      	movs	r2, #1
 8009202:	4619      	mov	r1, r3
 8009204:	68f8      	ldr	r0, [r7, #12]
 8009206:	f7ff ffaf 	bl	8009168 <_I2CWrite>
 800920a:	6138      	str	r0, [r7, #16]
    
    if( status_int ){
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d002      	beq.n	8009218 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009212:	23ec      	movs	r3, #236	; 0xec
 8009214:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009216:	e00c      	b.n	8009232 <VL53L0X_RdByte+0x48>
    }
    
    status_int = _I2CRead(Dev, data, 1);
 8009218:	2201      	movs	r2, #1
 800921a:	6879      	ldr	r1, [r7, #4]
 800921c:	68f8      	ldr	r0, [r7, #12]
 800921e:	f7ff ffc2 	bl	80091a6 <_I2CRead>
 8009222:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d002      	beq.n	8009230 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800922a:	23ec      	movs	r3, #236	; 0xec
 800922c:	75fb      	strb	r3, [r7, #23]
 800922e:	e000      	b.n	8009232 <VL53L0X_RdByte+0x48>
    }
done:
 8009230:	bf00      	nop
    return Status;
 8009232:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009236:	4618      	mov	r0, r3
 8009238:	3718      	adds	r7, #24
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
	...

08009240 <VL53L0X_WriteMulti>:

uint8_t _I2CBuffer[64];


// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8009240:	b580      	push	{r7, lr}
 8009242:	b086      	sub	sp, #24
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	607a      	str	r2, [r7, #4]
 800924a:	603b      	str	r3, [r7, #0]
 800924c:	460b      	mov	r3, r1
 800924e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009250:	2300      	movs	r3, #0
 8009252:	75fb      	strb	r3, [r7, #23]
    
    if (count > sizeof(_I2CBuffer) - 1) {
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	2b3f      	cmp	r3, #63	; 0x3f
 8009258:	d902      	bls.n	8009260 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800925a:	f06f 0303 	mvn.w	r3, #3
 800925e:	e016      	b.n	800928e <VL53L0X_WriteMulti+0x4e>
    }
    
    _I2CBuffer[0] = index;
 8009260:	4a0d      	ldr	r2, [pc, #52]	; (8009298 <VL53L0X_WriteMulti+0x58>)
 8009262:	7afb      	ldrb	r3, [r7, #11]
 8009264:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8009266:	683a      	ldr	r2, [r7, #0]
 8009268:	6879      	ldr	r1, [r7, #4]
 800926a:	480c      	ldr	r0, [pc, #48]	; (800929c <VL53L0X_WriteMulti+0x5c>)
 800926c:	f00a f91b 	bl	80134a6 <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	3301      	adds	r3, #1
 8009274:	461a      	mov	r2, r3
 8009276:	4908      	ldr	r1, [pc, #32]	; (8009298 <VL53L0X_WriteMulti+0x58>)
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f7ff ff75 	bl	8009168 <_I2CWrite>
 800927e:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d001      	beq.n	800928a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009286:	23ec      	movs	r3, #236	; 0xec
 8009288:	75fb      	strb	r3, [r7, #23]
    }
    
    return Status;
 800928a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800928e:	4618      	mov	r0, r3
 8009290:	3718      	adds	r7, #24
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	20003f3c 	.word	0x20003f3c
 800929c:	20003f3d 	.word	0x20003f3d

080092a0 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	607a      	str	r2, [r7, #4]
 80092aa:	603b      	str	r3, [r7, #0]
 80092ac:	460b      	mov	r3, r1
 80092ae:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092b0:	2300      	movs	r3, #0
 80092b2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 80092b4:	f107 030b 	add.w	r3, r7, #11
 80092b8:	2201      	movs	r2, #1
 80092ba:	4619      	mov	r1, r3
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f7ff ff53 	bl	8009168 <_I2CWrite>
 80092c2:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d002      	beq.n	80092d0 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80092ca:	23ec      	movs	r3, #236	; 0xec
 80092cc:	75fb      	strb	r3, [r7, #23]
        goto done;
 80092ce:	e00c      	b.n	80092ea <VL53L0X_ReadMulti+0x4a>
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 80092d0:	683a      	ldr	r2, [r7, #0]
 80092d2:	6879      	ldr	r1, [r7, #4]
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f7ff ff66 	bl	80091a6 <_I2CRead>
 80092da:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d002      	beq.n	80092e8 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80092e2:	23ec      	movs	r3, #236	; 0xec
 80092e4:	75fb      	strb	r3, [r7, #23]
 80092e6:	e000      	b.n	80092ea <VL53L0X_ReadMulti+0x4a>
    }
done:
 80092e8:	bf00      	nop
    return Status;
 80092ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3718      	adds	r7, #24
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
	...

080092f8 <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b086      	sub	sp, #24
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	460b      	mov	r3, r1
 8009302:	607a      	str	r2, [r7, #4]
 8009304:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009306:	2300      	movs	r3, #0
 8009308:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800930a:	f107 030b 	add.w	r3, r7, #11
 800930e:	2201      	movs	r2, #1
 8009310:	4619      	mov	r1, r3
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f7ff ff28 	bl	8009168 <_I2CWrite>
 8009318:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d002      	beq.n	8009326 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009320:	23ec      	movs	r3, #236	; 0xec
 8009322:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009324:	e017      	b.n	8009356 <VL53L0X_RdWord+0x5e>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8009326:	2202      	movs	r2, #2
 8009328:	490e      	ldr	r1, [pc, #56]	; (8009364 <VL53L0X_RdWord+0x6c>)
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f7ff ff3b 	bl	80091a6 <_I2CRead>
 8009330:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d002      	beq.n	800933e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009338:	23ec      	movs	r3, #236	; 0xec
 800933a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800933c:	e00b      	b.n	8009356 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800933e:	4b09      	ldr	r3, [pc, #36]	; (8009364 <VL53L0X_RdWord+0x6c>)
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	b29b      	uxth	r3, r3
 8009344:	021b      	lsls	r3, r3, #8
 8009346:	b29a      	uxth	r2, r3
 8009348:	4b06      	ldr	r3, [pc, #24]	; (8009364 <VL53L0X_RdWord+0x6c>)
 800934a:	785b      	ldrb	r3, [r3, #1]
 800934c:	b29b      	uxth	r3, r3
 800934e:	4413      	add	r3, r2
 8009350:	b29a      	uxth	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 8009356:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800935a:	4618      	mov	r0, r3
 800935c:	3718      	adds	r7, #24
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	20003f3c 	.word	0x20003f3c

08009368 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	460b      	mov	r3, r1
 8009372:	607a      	str	r2, [r7, #4]
 8009374:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009376:	2300      	movs	r3, #0
 8009378:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800937a:	f107 030b 	add.w	r3, r7, #11
 800937e:	2201      	movs	r2, #1
 8009380:	4619      	mov	r1, r3
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f7ff fef0 	bl	8009168 <_I2CWrite>
 8009388:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d002      	beq.n	8009396 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009390:	23ec      	movs	r3, #236	; 0xec
 8009392:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009394:	e01b      	b.n	80093ce <VL53L0X_RdDWord+0x66>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8009396:	2204      	movs	r2, #4
 8009398:	4910      	ldr	r1, [pc, #64]	; (80093dc <VL53L0X_RdDWord+0x74>)
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f7ff ff03 	bl	80091a6 <_I2CRead>
 80093a0:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d002      	beq.n	80093ae <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80093a8:	23ec      	movs	r3, #236	; 0xec
 80093aa:	75fb      	strb	r3, [r7, #23]
        goto done;
 80093ac:	e00f      	b.n	80093ce <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 80093ae:	4b0b      	ldr	r3, [pc, #44]	; (80093dc <VL53L0X_RdDWord+0x74>)
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	061a      	lsls	r2, r3, #24
 80093b4:	4b09      	ldr	r3, [pc, #36]	; (80093dc <VL53L0X_RdDWord+0x74>)
 80093b6:	785b      	ldrb	r3, [r3, #1]
 80093b8:	041b      	lsls	r3, r3, #16
 80093ba:	441a      	add	r2, r3
 80093bc:	4b07      	ldr	r3, [pc, #28]	; (80093dc <VL53L0X_RdDWord+0x74>)
 80093be:	789b      	ldrb	r3, [r3, #2]
 80093c0:	021b      	lsls	r3, r3, #8
 80093c2:	4413      	add	r3, r2
 80093c4:	4a05      	ldr	r2, [pc, #20]	; (80093dc <VL53L0X_RdDWord+0x74>)
 80093c6:	78d2      	ldrb	r2, [r2, #3]
 80093c8:	441a      	add	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	601a      	str	r2, [r3, #0]

done:
    return Status;
 80093ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3718      	adds	r7, #24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	20003f3c 	.word	0x20003f3c

080093e0 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	460b      	mov	r3, r1
 80093ea:	70fb      	strb	r3, [r7, #3]
 80093ec:	4613      	mov	r3, r2
 80093ee:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093f0:	2300      	movs	r3, #0
 80093f2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80093f4:	4a0b      	ldr	r2, [pc, #44]	; (8009424 <VL53L0X_WrByte+0x44>)
 80093f6:	78fb      	ldrb	r3, [r7, #3]
 80093f8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 80093fa:	4a0a      	ldr	r2, [pc, #40]	; (8009424 <VL53L0X_WrByte+0x44>)
 80093fc:	78bb      	ldrb	r3, [r7, #2]
 80093fe:	7053      	strb	r3, [r2, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8009400:	2202      	movs	r2, #2
 8009402:	4908      	ldr	r1, [pc, #32]	; (8009424 <VL53L0X_WrByte+0x44>)
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f7ff feaf 	bl	8009168 <_I2CWrite>
 800940a:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d001      	beq.n	8009416 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009412:	23ec      	movs	r3, #236	; 0xec
 8009414:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 8009416:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	20003f3c 	.word	0x20003f3c

08009428 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	460b      	mov	r3, r1
 8009432:	70fb      	strb	r3, [r7, #3]
 8009434:	4613      	mov	r3, r2
 8009436:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009438:	2300      	movs	r3, #0
 800943a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800943c:	4a0e      	ldr	r2, [pc, #56]	; (8009478 <VL53L0X_WrWord+0x50>)
 800943e:	78fb      	ldrb	r3, [r7, #3]
 8009440:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8009442:	883b      	ldrh	r3, [r7, #0]
 8009444:	0a1b      	lsrs	r3, r3, #8
 8009446:	b29b      	uxth	r3, r3
 8009448:	b2da      	uxtb	r2, r3
 800944a:	4b0b      	ldr	r3, [pc, #44]	; (8009478 <VL53L0X_WrWord+0x50>)
 800944c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800944e:	883b      	ldrh	r3, [r7, #0]
 8009450:	b2da      	uxtb	r2, r3
 8009452:	4b09      	ldr	r3, [pc, #36]	; (8009478 <VL53L0X_WrWord+0x50>)
 8009454:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8009456:	2203      	movs	r2, #3
 8009458:	4907      	ldr	r1, [pc, #28]	; (8009478 <VL53L0X_WrWord+0x50>)
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f7ff fe84 	bl	8009168 <_I2CWrite>
 8009460:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d001      	beq.n	800946c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009468:	23ec      	movs	r3, #236	; 0xec
 800946a:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 800946c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009470:	4618      	mov	r0, r3
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}
 8009478:	20003f3c 	.word	0x20003f3c

0800947c <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	4608      	mov	r0, r1
 8009486:	4611      	mov	r1, r2
 8009488:	461a      	mov	r2, r3
 800948a:	4603      	mov	r3, r0
 800948c:	70fb      	strb	r3, [r7, #3]
 800948e:	460b      	mov	r3, r1
 8009490:	70bb      	strb	r3, [r7, #2]
 8009492:	4613      	mov	r3, r2
 8009494:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009496:	2300      	movs	r3, #0
 8009498:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800949a:	f107 020e 	add.w	r2, r7, #14
 800949e:	78fb      	ldrb	r3, [r7, #3]
 80094a0:	4619      	mov	r1, r3
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f7ff fea1 	bl	80091ea <VL53L0X_RdByte>
 80094a8:	4603      	mov	r3, r0
 80094aa:	73fb      	strb	r3, [r7, #15]
    
    if (Status) {
 80094ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d110      	bne.n	80094d6 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 80094b4:	7bba      	ldrb	r2, [r7, #14]
 80094b6:	78bb      	ldrb	r3, [r7, #2]
 80094b8:	4013      	ands	r3, r2
 80094ba:	b2da      	uxtb	r2, r3
 80094bc:	787b      	ldrb	r3, [r7, #1]
 80094be:	4313      	orrs	r3, r2
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 80094c4:	7bba      	ldrb	r2, [r7, #14]
 80094c6:	78fb      	ldrb	r3, [r7, #3]
 80094c8:	4619      	mov	r1, r3
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f7ff ff88 	bl	80093e0 <VL53L0X_WrByte>
 80094d0:	4603      	mov	r3, r0
 80094d2:	73fb      	strb	r3, [r7, #15]
 80094d4:	e000      	b.n	80094d8 <VL53L0X_UpdateByte+0x5c>
        goto done;
 80094d6:	bf00      	nop
done:
    return Status;
 80094d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3710      	adds	r7, #16
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <VL53L0X_PollingDelay>:
    }

    return Status;
}

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80094ec:	2300      	movs	r3, #0
 80094ee:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 80094f0:	2002      	movs	r0, #2
 80094f2:	f000 ffb5 	bl	800a460 <HAL_Delay>
    return status;
 80094f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
	...

08009504 <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(VL53L0X_Dev_t Dev)
{
 8009504:	b084      	sub	sp, #16
 8009506:	b580      	push	{r7, lr}
 8009508:	b088      	sub	sp, #32
 800950a:	af00      	add	r7, sp, #0
 800950c:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8009510:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  int status;
  uint8_t VhvSettings;
  uint8_t PhaseCal;
  uint32_t refSpadCount;
	uint8_t isApertureSpads;
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 8009514:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009518:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 800951a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800951e:	61bb      	str	r3, [r7, #24]
	uint32_t timingBudget = 33000;
 8009520:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8009524:	617b      	str	r3, [r7, #20]
	uint8_t preRangeVcselPeriod = 14;
 8009526:	230e      	movs	r3, #14
 8009528:	74fb      	strb	r3, [r7, #19]
	uint8_t finalRangeVcselPeriod = 10;
 800952a:	230a      	movs	r3, #10
 800952c:	74bb      	strb	r3, [r7, #18]

                          
  if( Dev.Present){
 800952e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8009532:	2b00      	cmp	r3, #0
 8009534:	f000 80ac 	beq.w	8009690 <SetupSingleShot+0x18c>
    status=VL53L0X_StaticInit(&Dev);
 8009538:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800953c:	f7fb f8ba 	bl	80046b4 <VL53L0X_StaticInit>
 8009540:	4603      	mov	r3, r0
 8009542:	60fb      	str	r3, [r7, #12]
    if( status ){
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d002      	beq.n	8009550 <SetupSingleShot+0x4c>
      printf("VL53L0X_StaticInit failed\n");
 800954a:	4855      	ldr	r0, [pc, #340]	; (80096a0 <SetupSingleShot+0x19c>)
 800954c:	f00a f832 	bl	80135b4 <puts>
    }
    
    
    status = VL53L0X_PerformRefCalibration(&Dev, &VhvSettings, &PhaseCal);
 8009550:	f107 020a 	add.w	r2, r7, #10
 8009554:	f107 030b 	add.w	r3, r7, #11
 8009558:	4619      	mov	r1, r3
 800955a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800955e:	f7fb ff99 	bl	8005494 <VL53L0X_PerformRefCalibration>
 8009562:	4603      	mov	r3, r0
 8009564:	60fb      	str	r3, [r7, #12]
    if( status ){
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d002      	beq.n	8009572 <SetupSingleShot+0x6e>
      printf("VL53L0X_PerformRefCalibration failed\n");
 800956c:	484d      	ldr	r0, [pc, #308]	; (80096a4 <SetupSingleShot+0x1a0>)
 800956e:	f00a f821 	bl	80135b4 <puts>
    }
    
    status = VL53L0X_PerformRefSpadManagement(&Dev, &refSpadCount, &isApertureSpads);
 8009572:	1cfa      	adds	r2, r7, #3
 8009574:	1d3b      	adds	r3, r7, #4
 8009576:	4619      	mov	r1, r3
 8009578:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800957c:	f7fc fbe2 	bl	8005d44 <VL53L0X_PerformRefSpadManagement>
 8009580:	4603      	mov	r3, r0
 8009582:	60fb      	str	r3, [r7, #12]
    if( status ){
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d002      	beq.n	8009590 <SetupSingleShot+0x8c>
      printf("VL53L0X_PerformRefSpadManagement failed\n");
 800958a:	4847      	ldr	r0, [pc, #284]	; (80096a8 <SetupSingleShot+0x1a4>)
 800958c:	f00a f812 	bl	80135b4 <puts>
    }
    
    status = VL53L0X_SetDeviceMode(&Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 8009590:	2100      	movs	r1, #0
 8009592:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8009596:	f7fb fa9f 	bl	8004ad8 <VL53L0X_SetDeviceMode>
 800959a:	4603      	mov	r3, r0
 800959c:	60fb      	str	r3, [r7, #12]
    if( status ){
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d002      	beq.n	80095aa <SetupSingleShot+0xa6>
      printf("VL53L0X_SetDeviceMode failed\n");
 80095a4:	4841      	ldr	r0, [pc, #260]	; (80096ac <SetupSingleShot+0x1a8>)
 80095a6:	f00a f805 	bl	80135b4 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(&Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
 80095aa:	2201      	movs	r2, #1
 80095ac:	2100      	movs	r1, #0
 80095ae:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80095b2:	f7fb fd69 	bl	8005088 <VL53L0X_SetLimitCheckEnable>
 80095b6:	4603      	mov	r3, r0
 80095b8:	60fb      	str	r3, [r7, #12]
    if( status ){
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d002      	beq.n	80095c6 <SetupSingleShot+0xc2>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 80095c0:	483b      	ldr	r0, [pc, #236]	; (80096b0 <SetupSingleShot+0x1ac>)
 80095c2:	f009 fff7 	bl	80135b4 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(&Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
 80095c6:	2201      	movs	r2, #1
 80095c8:	2101      	movs	r1, #1
 80095ca:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80095ce:	f7fb fd5b 	bl	8005088 <VL53L0X_SetLimitCheckEnable>
 80095d2:	4603      	mov	r3, r0
 80095d4:	60fb      	str	r3, [r7, #12]
    if( status ){
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d002      	beq.n	80095e2 <SetupSingleShot+0xde>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 80095dc:	4834      	ldr	r0, [pc, #208]	; (80096b0 <SetupSingleShot+0x1ac>)
 80095de:	f009 ffe9 	bl	80135b4 <puts>
    }
    
    /* Ranging configuration */
    signalLimit = (FixPoint1616_t)(0.1*65536);
 80095e2:	f641 1399 	movw	r3, #6553	; 0x1999
 80095e6:	61fb      	str	r3, [r7, #28]
    sigmaLimit = (FixPoint1616_t)(60*65536);
 80095e8:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80095ec:	61bb      	str	r3, [r7, #24]
    timingBudget = 33000;
 80095ee:	f248 03e8 	movw	r3, #33000	; 0x80e8
 80095f2:	617b      	str	r3, [r7, #20]
    preRangeVcselPeriod = 18;
 80095f4:	2312      	movs	r3, #18
 80095f6:	74fb      	strb	r3, [r7, #19]
    finalRangeVcselPeriod = 14;
 80095f8:	230e      	movs	r3, #14
 80095fa:	74bb      	strb	r3, [r7, #18]
    
    status = VL53L0X_SetLimitCheckValue(&Dev,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 80095fc:	69fa      	ldr	r2, [r7, #28]
 80095fe:	2101      	movs	r1, #1
 8009600:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8009604:	f7fb fdf0 	bl	80051e8 <VL53L0X_SetLimitCheckValue>
 8009608:	4603      	mov	r3, r0
 800960a:	60fb      	str	r3, [r7, #12]
    
    if( status ){
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d002      	beq.n	8009618 <SetupSingleShot+0x114>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 8009612:	4828      	ldr	r0, [pc, #160]	; (80096b4 <SetupSingleShot+0x1b0>)
 8009614:	f009 ffce 	bl	80135b4 <puts>
    }
    
    status = VL53L0X_SetLimitCheckValue(&Dev,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 8009618:	69ba      	ldr	r2, [r7, #24]
 800961a:	2100      	movs	r1, #0
 800961c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8009620:	f7fb fde2 	bl	80051e8 <VL53L0X_SetLimitCheckValue>
 8009624:	4603      	mov	r3, r0
 8009626:	60fb      	str	r3, [r7, #12]
    if( status ){
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d002      	beq.n	8009634 <SetupSingleShot+0x130>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 800962e:	4821      	ldr	r0, [pc, #132]	; (80096b4 <SetupSingleShot+0x1b0>)
 8009630:	f009 ffc0 	bl	80135b4 <puts>
    }
    
    status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&Dev,  timingBudget);
 8009634:	6979      	ldr	r1, [r7, #20]
 8009636:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800963a:	f7fb fac7 	bl	8004bcc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800963e:	4603      	mov	r3, r0
 8009640:	60fb      	str	r3, [r7, #12]
    if( status ){
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d002      	beq.n	800964e <SetupSingleShot+0x14a>
      printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 8009648:	481b      	ldr	r0, [pc, #108]	; (80096b8 <SetupSingleShot+0x1b4>)
 800964a:	f009 ffb3 	bl	80135b4 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(&Dev,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 800964e:	7cfb      	ldrb	r3, [r7, #19]
 8009650:	461a      	mov	r2, r3
 8009652:	2100      	movs	r1, #0
 8009654:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8009658:	f7fb fade 	bl	8004c18 <VL53L0X_SetVcselPulsePeriod>
 800965c:	4603      	mov	r3, r0
 800965e:	60fb      	str	r3, [r7, #12]
    if( status ){
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d002      	beq.n	800966c <SetupSingleShot+0x168>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 8009666:	4815      	ldr	r0, [pc, #84]	; (80096bc <SetupSingleShot+0x1b8>)
 8009668:	f009 ffa4 	bl	80135b4 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(&Dev,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 800966c:	7cbb      	ldrb	r3, [r7, #18]
 800966e:	461a      	mov	r2, r3
 8009670:	2101      	movs	r1, #1
 8009672:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8009676:	f7fb facf 	bl	8004c18 <VL53L0X_SetVcselPulsePeriod>
 800967a:	4603      	mov	r3, r0
 800967c:	60fb      	str	r3, [r7, #12]
    if( status ){
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d002      	beq.n	800968a <SetupSingleShot+0x186>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 8009684:	480d      	ldr	r0, [pc, #52]	; (80096bc <SetupSingleShot+0x1b8>)
 8009686:	f009 ff95 	bl	80135b4 <puts>
    }
    
    Dev.LeakyFirst=1;
 800968a:	2301      	movs	r3, #1
 800968c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  }
}
 8009690:	bf00      	nop
 8009692:	3720      	adds	r7, #32
 8009694:	46bd      	mov	sp, r7
 8009696:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800969a:	b004      	add	sp, #16
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	08016b4c 	.word	0x08016b4c
 80096a4:	08016b68 	.word	0x08016b68
 80096a8:	08016b90 	.word	0x08016b90
 80096ac:	08016bb8 	.word	0x08016bb8
 80096b0:	08016bd8 	.word	0x08016bd8
 80096b4:	08016bfc 	.word	0x08016bfc
 80096b8:	08016c20 	.word	0x08016c20
 80096bc:	08016c58 	.word	0x08016c58

080096c0 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 80096ca:	4b0d      	ldr	r3, [pc, #52]	; (8009700 <WIFI_Init+0x40>)
 80096cc:	9301      	str	r3, [sp, #4]
 80096ce:	4b0d      	ldr	r3, [pc, #52]	; (8009704 <WIFI_Init+0x44>)
 80096d0:	9300      	str	r3, [sp, #0]
 80096d2:	4b0d      	ldr	r3, [pc, #52]	; (8009708 <WIFI_Init+0x48>)
 80096d4:	4a0d      	ldr	r2, [pc, #52]	; (800970c <WIFI_Init+0x4c>)
 80096d6:	490e      	ldr	r1, [pc, #56]	; (8009710 <WIFI_Init+0x50>)
 80096d8:	480e      	ldr	r0, [pc, #56]	; (8009714 <WIFI_Init+0x54>)
 80096da:	f7f7 ffc3 	bl	8001664 <ES_WIFI_RegisterBusIO>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d107      	bne.n	80096f4 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80096e4:	480b      	ldr	r0, [pc, #44]	; (8009714 <WIFI_Init+0x54>)
 80096e6:	f7f7 ff8f 	bl	8001608 <ES_WIFI_Init>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d101      	bne.n	80096f4 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 80096f0:	2300      	movs	r3, #0
 80096f2:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 80096f4:	79fb      	ldrb	r3, [r7, #7]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3708      	adds	r7, #8
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	080021bd 	.word	0x080021bd
 8009704:	080022b1 	.word	0x080022b1
 8009708:	0800238d 	.word	0x0800238d
 800970c:	080020a5 	.word	0x080020a5
 8009710:	08001f09 	.word	0x08001f09
 8009714:	20003f7c 	.word	0x20003f7c

08009718 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	4613      	mov	r3, r2
 8009724:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800972a:	79fb      	ldrb	r3, [r7, #7]
 800972c:	68ba      	ldr	r2, [r7, #8]
 800972e:	68f9      	ldr	r1, [r7, #12]
 8009730:	4809      	ldr	r0, [pc, #36]	; (8009758 <WIFI_Connect+0x40>)
 8009732:	f7f7 ffcb 	bl	80016cc <ES_WIFI_Connect>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d107      	bne.n	800974c <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800973c:	4806      	ldr	r0, [pc, #24]	; (8009758 <WIFI_Connect+0x40>)
 800973e:	f7f8 f867 	bl	8001810 <ES_WIFI_GetNetworkSettings>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d101      	bne.n	800974c <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8009748:	2300      	movs	r3, #0
 800974a:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 800974c:	7dfb      	ldrb	r3, [r7, #23]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3718      	adds	r7, #24
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	20003f7c 	.word	0x20003f7c

0800975c <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8009768:	6879      	ldr	r1, [r7, #4]
 800976a:	4806      	ldr	r0, [pc, #24]	; (8009784 <WIFI_GetMAC_Address+0x28>)
 800976c:	f7f8 f87a 	bl	8001864 <ES_WIFI_GetMACAddress>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d101      	bne.n	800977a <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 8009776:	2300      	movs	r3, #0
 8009778:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800977a:	7bfb      	ldrb	r3, [r7, #15]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	20003f7c 	.word	0x20003f7c

08009788 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8009794:	4809      	ldr	r0, [pc, #36]	; (80097bc <WIFI_GetIP_Address+0x34>)
 8009796:	f7f8 f80f 	bl	80017b8 <ES_WIFI_IsConnected>
 800979a:	4603      	mov	r3, r0
 800979c:	2b01      	cmp	r3, #1
 800979e:	d107      	bne.n	80097b0 <WIFI_GetIP_Address+0x28>
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 80097a0:	4b06      	ldr	r3, [pc, #24]	; (80097bc <WIFI_GetIP_Address+0x34>)
 80097a2:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 80097a6:	461a      	mov	r2, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 80097ac:	2300      	movs	r3, #0
 80097ae:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	20003f7c 	.word	0x20003f7c

080097c0 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b08a      	sub	sp, #40	; 0x28
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	607a      	str	r2, [r7, #4]
 80097ca:	603b      	str	r3, [r7, #0]
 80097cc:	460b      	mov	r3, r1
 80097ce:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 80097dc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80097de:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 80097e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80097e2:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 80097e4:	7afb      	ldrb	r3, [r7, #11]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	bf14      	ite	ne
 80097ea:	2301      	movne	r3, #1
 80097ec:	2300      	moveq	r3, #0
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	785b      	ldrb	r3, [r3, #1]
 80097fc:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	789b      	ldrb	r3, [r3, #2]
 8009802:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	78db      	ldrb	r3, [r3, #3]
 8009808:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800980a:	f107 0310 	add.w	r3, r7, #16
 800980e:	4619      	mov	r1, r3
 8009810:	4807      	ldr	r0, [pc, #28]	; (8009830 <WIFI_OpenClientConnection+0x70>)
 8009812:	f7f8 f857 	bl	80018c4 <ES_WIFI_StartClientConnection>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d102      	bne.n	8009822 <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8009822:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009826:	4618      	mov	r0, r3
 8009828:	3728      	adds	r7, #40	; 0x28
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	20003f7c 	.word	0x20003f7c

08009834 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b088      	sub	sp, #32
 8009838:	af02      	add	r7, sp, #8
 800983a:	60b9      	str	r1, [r7, #8]
 800983c:	607b      	str	r3, [r7, #4]
 800983e:	4603      	mov	r3, r0
 8009840:	73fb      	strb	r3, [r7, #15]
 8009842:	4613      	mov	r3, r2
 8009844:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800984a:	89ba      	ldrh	r2, [r7, #12]
 800984c:	7bf9      	ldrb	r1, [r7, #15]
 800984e:	6a3b      	ldr	r3, [r7, #32]
 8009850:	9301      	str	r3, [sp, #4]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	9300      	str	r3, [sp, #0]
 8009856:	4613      	mov	r3, r2
 8009858:	68ba      	ldr	r2, [r7, #8]
 800985a:	4806      	ldr	r0, [pc, #24]	; (8009874 <WIFI_SendData+0x40>)
 800985c:	f7f8 f91e 	bl	8001a9c <ES_WIFI_SendData>
 8009860:	4603      	mov	r3, r0
 8009862:	2b00      	cmp	r3, #0
 8009864:	d101      	bne.n	800986a <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8009866:	2300      	movs	r3, #0
 8009868:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 800986a:	7dfb      	ldrb	r3, [r7, #23]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3718      	adds	r7, #24
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	20003f7c 	.word	0x20003f7c

08009878 <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b088      	sub	sp, #32
 800987c:	af02      	add	r7, sp, #8
 800987e:	60b9      	str	r1, [r7, #8]
 8009880:	607b      	str	r3, [r7, #4]
 8009882:	4603      	mov	r3, r0
 8009884:	73fb      	strb	r3, [r7, #15]
 8009886:	4613      	mov	r3, r2
 8009888:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800988e:	89ba      	ldrh	r2, [r7, #12]
 8009890:	7bf9      	ldrb	r1, [r7, #15]
 8009892:	6a3b      	ldr	r3, [r7, #32]
 8009894:	9301      	str	r3, [sp, #4]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	9300      	str	r3, [sp, #0]
 800989a:	4613      	mov	r3, r2
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	4806      	ldr	r0, [pc, #24]	; (80098b8 <WIFI_ReceiveData+0x40>)
 80098a0:	f7f8 f9b8 	bl	8001c14 <ES_WIFI_ReceiveData>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d101      	bne.n	80098ae <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 80098aa:	2300      	movs	r3, #0
 80098ac:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 80098ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3718      	adds	r7, #24
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	20003f7c 	.word	0x20003f7c

080098bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80098bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80098f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80098c0:	f7fa fd92 	bl	80043e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80098c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80098c6:	e003      	b.n	80098d0 <LoopCopyDataInit>

080098c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80098c8:	4b0b      	ldr	r3, [pc, #44]	; (80098f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80098ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80098cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80098ce:	3104      	adds	r1, #4

080098d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80098d0:	480a      	ldr	r0, [pc, #40]	; (80098fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80098d2:	4b0b      	ldr	r3, [pc, #44]	; (8009900 <LoopForever+0xe>)
	adds	r2, r0, r1
 80098d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80098d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80098d8:	d3f6      	bcc.n	80098c8 <CopyDataInit>
	ldr	r2, =_sbss
 80098da:	4a0a      	ldr	r2, [pc, #40]	; (8009904 <LoopForever+0x12>)
	b	LoopFillZerobss
 80098dc:	e002      	b.n	80098e4 <LoopFillZerobss>

080098de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80098de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80098e0:	f842 3b04 	str.w	r3, [r2], #4

080098e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80098e4:	4b08      	ldr	r3, [pc, #32]	; (8009908 <LoopForever+0x16>)
	cmp	r2, r3
 80098e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80098e8:	d3f9      	bcc.n	80098de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80098ea:	f009 fda9 	bl	8013440 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80098ee:	f7f8 fe41 	bl	8002574 <main>

080098f2 <LoopForever>:

LoopForever:
    b LoopForever
 80098f2:	e7fe      	b.n	80098f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80098f4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80098f8:	08016fb0 	.word	0x08016fb0
	ldr	r0, =_sdata
 80098fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8009900:	20000668 	.word	0x20000668
	ldr	r2, =_sbss
 8009904:	20000668 	.word	0x20000668
	ldr	r3, = _ebss
 8009908:	20004990 	.word	0x20004990

0800990c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800990c:	e7fe      	b.n	800990c <ADC1_2_IRQHandler>
	...

08009910 <BSP_LED_Init>:
  * @param  Led  LED to be initialized.
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b088      	sub	sp, #32
 8009914:	af00      	add	r7, sp, #0
 8009916:	4603      	mov	r3, r0
 8009918:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  LEDx_GPIO_CLK_ENABLE(Led);
 800991a:	79fb      	ldrb	r3, [r7, #7]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d10b      	bne.n	8009938 <BSP_LED_Init+0x28>
 8009920:	4b11      	ldr	r3, [pc, #68]	; (8009968 <BSP_LED_Init+0x58>)
 8009922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009924:	4a10      	ldr	r2, [pc, #64]	; (8009968 <BSP_LED_Init+0x58>)
 8009926:	f043 0302 	orr.w	r3, r3, #2
 800992a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800992c:	4b0e      	ldr	r3, [pc, #56]	; (8009968 <BSP_LED_Init+0x58>)
 800992e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009930:	f003 0302 	and.w	r3, r3, #2
 8009934:	60bb      	str	r3, [r7, #8]
 8009936:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8009938:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800993c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800993e:	2301      	movs	r3, #1
 8009940:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8009942:	2300      	movs	r3, #0
 8009944:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8009946:	2302      	movs	r3, #2
 8009948:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 800994a:	79fb      	ldrb	r3, [r7, #7]
 800994c:	4a07      	ldr	r2, [pc, #28]	; (800996c <BSP_LED_Init+0x5c>)
 800994e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009952:	f107 020c 	add.w	r2, r7, #12
 8009956:	4611      	mov	r1, r2
 8009958:	4618      	mov	r0, r3
 800995a:	f001 f803 	bl	800a964 <HAL_GPIO_Init>
}
 800995e:	bf00      	nop
 8009960:	3720      	adds	r7, #32
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	40021000 	.word	0x40021000
 800996c:	2000044c 	.word	0x2000044c

08009970 <BSP_LED_On>:
  * @param  Led  LED to be set on
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	4603      	mov	r3, r0
 8009978:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800997a:	79fb      	ldrb	r3, [r7, #7]
 800997c:	4a06      	ldr	r2, [pc, #24]	; (8009998 <BSP_LED_On+0x28>)
 800997e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009982:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009986:	b291      	uxth	r1, r2
 8009988:	2201      	movs	r2, #1
 800998a:	4618      	mov	r0, r3
 800998c:	f001 fa9e 	bl	800aecc <HAL_GPIO_WritePin>
}
 8009990:	bf00      	nop
 8009992:	3708      	adds	r7, #8
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	2000044c 	.word	0x2000044c

0800999c <BSP_PB_Init>:
  *                      @arg  BUTTON_MODE_GPIO  Button will be used as simple IO
  *                      @arg  BUTTON_MODE_EXTI  Button will be connected to EXTI line
  *                                              with interrupt generation capability
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b088      	sub	sp, #32
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	4603      	mov	r3, r0
 80099a4:	460a      	mov	r2, r1
 80099a6:	71fb      	strb	r3, [r7, #7]
 80099a8:	4613      	mov	r3, r2
 80099aa:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable the BUTTON clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 80099ac:	4b23      	ldr	r3, [pc, #140]	; (8009a3c <BSP_PB_Init+0xa0>)
 80099ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099b0:	4a22      	ldr	r2, [pc, #136]	; (8009a3c <BSP_PB_Init+0xa0>)
 80099b2:	f043 0304 	orr.w	r3, r3, #4
 80099b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80099b8:	4b20      	ldr	r3, [pc, #128]	; (8009a3c <BSP_PB_Init+0xa0>)
 80099ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099bc:	f003 0304 	and.w	r3, r3, #4
 80099c0:	60bb      	str	r3, [r7, #8]
 80099c2:	68bb      	ldr	r3, [r7, #8]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80099c4:	79bb      	ldrb	r3, [r7, #6]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d112      	bne.n	80099f0 <BSP_PB_Init+0x54>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80099ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80099ce:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80099d0:	2300      	movs	r3, #0
 80099d2:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80099d4:	2301      	movs	r3, #1
 80099d6:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80099d8:	2302      	movs	r3, #2
 80099da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80099dc:	79fb      	ldrb	r3, [r7, #7]
 80099de:	4a18      	ldr	r2, [pc, #96]	; (8009a40 <BSP_PB_Init+0xa4>)
 80099e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099e4:	f107 020c 	add.w	r2, r7, #12
 80099e8:	4611      	mov	r1, r2
 80099ea:	4618      	mov	r0, r3
 80099ec:	f000 ffba 	bl	800a964 <HAL_GPIO_Init>
  }

  if(ButtonMode == BUTTON_MODE_EXTI)
 80099f0:	79bb      	ldrb	r3, [r7, #6]
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d11e      	bne.n	8009a34 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80099f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80099fa:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80099fc:	2301      	movs	r3, #1
 80099fe:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a00:	2303      	movs	r3, #3
 8009a02:	61bb      	str	r3, [r7, #24]

    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8009a04:	4b0f      	ldr	r3, [pc, #60]	; (8009a44 <BSP_PB_Init+0xa8>)
 8009a06:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8009a08:	79fb      	ldrb	r3, [r7, #7]
 8009a0a:	4a0d      	ldr	r2, [pc, #52]	; (8009a40 <BSP_PB_Init+0xa4>)
 8009a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a10:	f107 020c 	add.w	r2, r7, #12
 8009a14:	4611      	mov	r1, r2
 8009a16:	4618      	mov	r0, r3
 8009a18:	f000 ffa4 	bl	800a964 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8009a1c:	2328      	movs	r3, #40	; 0x28
 8009a1e:	b25b      	sxtb	r3, r3
 8009a20:	2200      	movs	r2, #0
 8009a22:	210f      	movs	r1, #15
 8009a24:	4618      	mov	r0, r3
 8009a26:	f000 fe18 	bl	800a65a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8009a2a:	2328      	movs	r3, #40	; 0x28
 8009a2c:	b25b      	sxtb	r3, r3
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f000 fe2f 	bl	800a692 <HAL_NVIC_EnableIRQ>
  }
}
 8009a34:	bf00      	nop
 8009a36:	3720      	adds	r7, #32
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	40021000 	.word	0x40021000
 8009a40:	20000450 	.word	0x20000450
 8009a44:	10110000 	.word	0x10110000

08009a48 <BSP_COM_Init>:
  *                @arg  COM1
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b08a      	sub	sp, #40	; 0x28
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	4603      	mov	r3, r0
 8009a50:	6039      	str	r1, [r7, #0]
 8009a52:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8009a54:	79fb      	ldrb	r3, [r7, #7]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d10b      	bne.n	8009a72 <BSP_COM_Init+0x2a>
 8009a5a:	4b2d      	ldr	r3, [pc, #180]	; (8009b10 <BSP_COM_Init+0xc8>)
 8009a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a5e:	4a2c      	ldr	r2, [pc, #176]	; (8009b10 <BSP_COM_Init+0xc8>)
 8009a60:	f043 0302 	orr.w	r3, r3, #2
 8009a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a66:	4b2a      	ldr	r3, [pc, #168]	; (8009b10 <BSP_COM_Init+0xc8>)
 8009a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a6a:	f003 0302 	and.w	r3, r3, #2
 8009a6e:	613b      	str	r3, [r7, #16]
 8009a70:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8009a72:	79fb      	ldrb	r3, [r7, #7]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d10b      	bne.n	8009a90 <BSP_COM_Init+0x48>
 8009a78:	4b25      	ldr	r3, [pc, #148]	; (8009b10 <BSP_COM_Init+0xc8>)
 8009a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a7c:	4a24      	ldr	r2, [pc, #144]	; (8009b10 <BSP_COM_Init+0xc8>)
 8009a7e:	f043 0302 	orr.w	r3, r3, #2
 8009a82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a84:	4b22      	ldr	r3, [pc, #136]	; (8009b10 <BSP_COM_Init+0xc8>)
 8009a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a88:	f003 0302 	and.w	r3, r3, #2
 8009a8c:	60fb      	str	r3, [r7, #12]
 8009a8e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8009a90:	79fb      	ldrb	r3, [r7, #7]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d10b      	bne.n	8009aae <BSP_COM_Init+0x66>
 8009a96:	4b1e      	ldr	r3, [pc, #120]	; (8009b10 <BSP_COM_Init+0xc8>)
 8009a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a9a:	4a1d      	ldr	r2, [pc, #116]	; (8009b10 <BSP_COM_Init+0xc8>)
 8009a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009aa0:	6613      	str	r3, [r2, #96]	; 0x60
 8009aa2:	4b1b      	ldr	r3, [pc, #108]	; (8009b10 <BSP_COM_Init+0xc8>)
 8009aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009aaa:	60bb      	str	r3, [r7, #8]
 8009aac:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8009aae:	2340      	movs	r3, #64	; 0x40
 8009ab0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8009ab2:	2302      	movs	r3, #2
 8009ab4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8009ab6:	2302      	movs	r3, #2
 8009ab8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8009aba:	2300      	movs	r3, #0
 8009abc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8009abe:	2307      	movs	r3, #7
 8009ac0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8009ac2:	79fb      	ldrb	r3, [r7, #7]
 8009ac4:	4a13      	ldr	r2, [pc, #76]	; (8009b14 <BSP_COM_Init+0xcc>)
 8009ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aca:	f107 0214 	add.w	r2, r7, #20
 8009ace:	4611      	mov	r1, r2
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f000 ff47 	bl	800a964 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8009ad6:	2380      	movs	r3, #128	; 0x80
 8009ad8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8009ada:	2302      	movs	r3, #2
 8009adc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8009ade:	2307      	movs	r3, #7
 8009ae0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8009ae2:	79fb      	ldrb	r3, [r7, #7]
 8009ae4:	4a0c      	ldr	r2, [pc, #48]	; (8009b18 <BSP_COM_Init+0xd0>)
 8009ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aea:	f107 0214 	add.w	r2, r7, #20
 8009aee:	4611      	mov	r1, r2
 8009af0:	4618      	mov	r0, r3
 8009af2:	f000 ff37 	bl	800a964 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8009af6:	79fb      	ldrb	r3, [r7, #7]
 8009af8:	4a08      	ldr	r2, [pc, #32]	; (8009b1c <BSP_COM_Init+0xd4>)
 8009afa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 8009b02:	6838      	ldr	r0, [r7, #0]
 8009b04:	f005 fa7d 	bl	800f002 <HAL_UART_Init>
}
 8009b08:	bf00      	nop
 8009b0a:	3728      	adds	r7, #40	; 0x28
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	40021000 	.word	0x40021000
 8009b14:	20000458 	.word	0x20000458
 8009b18:	2000045c 	.word	0x2000045c
 8009b1c:	20000454 	.word	0x20000454

08009b20 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b08a      	sub	sp, #40	; 0x28
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8009b28:	4b27      	ldr	r3, [pc, #156]	; (8009bc8 <I2Cx_MspInit+0xa8>)
 8009b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b2c:	4a26      	ldr	r2, [pc, #152]	; (8009bc8 <I2Cx_MspInit+0xa8>)
 8009b2e:	f043 0302 	orr.w	r3, r3, #2
 8009b32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b34:	4b24      	ldr	r3, [pc, #144]	; (8009bc8 <I2Cx_MspInit+0xa8>)
 8009b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b38:	f003 0302 	and.w	r3, r3, #2
 8009b3c:	613b      	str	r3, [r7, #16]
 8009b3e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8009b40:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009b44:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8009b46:	2312      	movs	r3, #18
 8009b48:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b4e:	2303      	movs	r3, #3
 8009b50:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8009b52:	2304      	movs	r3, #4
 8009b54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8009b56:	f107 0314 	add.w	r3, r7, #20
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	481b      	ldr	r0, [pc, #108]	; (8009bcc <I2Cx_MspInit+0xac>)
 8009b5e:	f000 ff01 	bl	800a964 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8009b62:	f107 0314 	add.w	r3, r7, #20
 8009b66:	4619      	mov	r1, r3
 8009b68:	4818      	ldr	r0, [pc, #96]	; (8009bcc <I2Cx_MspInit+0xac>)
 8009b6a:	f000 fefb 	bl	800a964 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8009b6e:	4b16      	ldr	r3, [pc, #88]	; (8009bc8 <I2Cx_MspInit+0xa8>)
 8009b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b72:	4a15      	ldr	r2, [pc, #84]	; (8009bc8 <I2Cx_MspInit+0xa8>)
 8009b74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009b78:	6593      	str	r3, [r2, #88]	; 0x58
 8009b7a:	4b13      	ldr	r3, [pc, #76]	; (8009bc8 <I2Cx_MspInit+0xa8>)
 8009b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b82:	60fb      	str	r3, [r7, #12]
 8009b84:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8009b86:	4b10      	ldr	r3, [pc, #64]	; (8009bc8 <I2Cx_MspInit+0xa8>)
 8009b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b8a:	4a0f      	ldr	r2, [pc, #60]	; (8009bc8 <I2Cx_MspInit+0xa8>)
 8009b8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009b90:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8009b92:	4b0d      	ldr	r3, [pc, #52]	; (8009bc8 <I2Cx_MspInit+0xa8>)
 8009b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b96:	4a0c      	ldr	r2, [pc, #48]	; (8009bc8 <I2Cx_MspInit+0xa8>)
 8009b98:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009b9c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	210f      	movs	r1, #15
 8009ba2:	2021      	movs	r0, #33	; 0x21
 8009ba4:	f000 fd59 	bl	800a65a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8009ba8:	2021      	movs	r0, #33	; 0x21
 8009baa:	f000 fd72 	bl	800a692 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8009bae:	2200      	movs	r2, #0
 8009bb0:	210f      	movs	r1, #15
 8009bb2:	2022      	movs	r0, #34	; 0x22
 8009bb4:	f000 fd51 	bl	800a65a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8009bb8:	2022      	movs	r0, #34	; 0x22
 8009bba:	f000 fd6a 	bl	800a692 <HAL_NVIC_EnableIRQ>
}
 8009bbe:	bf00      	nop
 8009bc0:	3728      	adds	r7, #40	; 0x28
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	40021000 	.word	0x40021000
 8009bcc:	48000400 	.word	0x48000400

08009bd0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	4a12      	ldr	r2, [pc, #72]	; (8009c24 <I2Cx_Init+0x54>)
 8009bdc:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	4a11      	ldr	r2, [pc, #68]	; (8009c28 <I2Cx_Init+0x58>)
 8009be2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2201      	movs	r2, #1
 8009bee:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f7ff ff89 	bl	8009b20 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f001 f9a6 	bl	800af60 <HAL_I2C_Init>

  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);
 8009c14:	2100      	movs	r1, #0
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f002 f900 	bl	800be1c <HAL_I2CEx_ConfigAnalogFilter>
}
 8009c1c:	bf00      	nop
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	40005800 	.word	0x40005800
 8009c28:	00702681 	.word	0x00702681

08009c2c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b08a      	sub	sp, #40	; 0x28
 8009c30:	af04      	add	r7, sp, #16
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	4608      	mov	r0, r1
 8009c36:	4611      	mov	r1, r2
 8009c38:	461a      	mov	r2, r3
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	72fb      	strb	r3, [r7, #11]
 8009c3e:	460b      	mov	r3, r1
 8009c40:	813b      	strh	r3, [r7, #8]
 8009c42:	4613      	mov	r3, r2
 8009c44:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009c46:	2300      	movs	r3, #0
 8009c48:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009c4a:	7afb      	ldrb	r3, [r7, #11]
 8009c4c:	b299      	uxth	r1, r3
 8009c4e:	88f8      	ldrh	r0, [r7, #6]
 8009c50:	893a      	ldrh	r2, [r7, #8]
 8009c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009c56:	9302      	str	r3, [sp, #8]
 8009c58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c5a:	9301      	str	r3, [sp, #4]
 8009c5c:	6a3b      	ldr	r3, [r7, #32]
 8009c5e:	9300      	str	r3, [sp, #0]
 8009c60:	4603      	mov	r3, r0
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f001 fd38 	bl	800b6d8 <HAL_I2C_Mem_Read>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8009c6c:	7dfb      	ldrb	r3, [r7, #23]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d004      	beq.n	8009c7c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8009c72:	7afb      	ldrb	r3, [r7, #11]
 8009c74:	4619      	mov	r1, r3
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f000 f832 	bl	8009ce0 <I2Cx_Error>
  }
  return status;
 8009c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3718      	adds	r7, #24
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b08a      	sub	sp, #40	; 0x28
 8009c8a:	af04      	add	r7, sp, #16
 8009c8c:	60f8      	str	r0, [r7, #12]
 8009c8e:	4608      	mov	r0, r1
 8009c90:	4611      	mov	r1, r2
 8009c92:	461a      	mov	r2, r3
 8009c94:	4603      	mov	r3, r0
 8009c96:	72fb      	strb	r3, [r7, #11]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	813b      	strh	r3, [r7, #8]
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009ca4:	7afb      	ldrb	r3, [r7, #11]
 8009ca6:	b299      	uxth	r1, r3
 8009ca8:	88f8      	ldrh	r0, [r7, #6]
 8009caa:	893a      	ldrh	r2, [r7, #8]
 8009cac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009cb0:	9302      	str	r3, [sp, #8]
 8009cb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cb4:	9301      	str	r3, [sp, #4]
 8009cb6:	6a3b      	ldr	r3, [r7, #32]
 8009cb8:	9300      	str	r3, [sp, #0]
 8009cba:	4603      	mov	r3, r0
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f001 fbf7 	bl	800b4b0 <HAL_I2C_Mem_Write>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8009cc6:	7dfb      	ldrb	r3, [r7, #23]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d004      	beq.n	8009cd6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8009ccc:	7afb      	ldrb	r3, [r7, #11]
 8009cce:	4619      	mov	r1, r3
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f000 f805 	bl	8009ce0 <I2Cx_Error>
  }
  return status;
 8009cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3718      	adds	r7, #24
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	460b      	mov	r3, r1
 8009cea:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f001 f9c6 	bl	800b07e <HAL_I2C_DeInit>

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f7ff ff6c 	bl	8009bd0 <I2Cx_Init>
}
 8009cf8:	bf00      	nop
 8009cfa:	3708      	adds	r7, #8
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8009d04:	4802      	ldr	r0, [pc, #8]	; (8009d10 <SENSOR_IO_Init+0x10>)
 8009d06:	f7ff ff63 	bl	8009bd0 <I2Cx_Init>
}
 8009d0a:	bf00      	nop
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	200048fc 	.word	0x200048fc

08009d14 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af02      	add	r7, sp, #8
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	71fb      	strb	r3, [r7, #7]
 8009d1e:	460b      	mov	r3, r1
 8009d20:	71bb      	strb	r3, [r7, #6]
 8009d22:	4613      	mov	r3, r2
 8009d24:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8009d26:	79bb      	ldrb	r3, [r7, #6]
 8009d28:	b29a      	uxth	r2, r3
 8009d2a:	79f9      	ldrb	r1, [r7, #7]
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	9301      	str	r3, [sp, #4]
 8009d30:	1d7b      	adds	r3, r7, #5
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	2301      	movs	r3, #1
 8009d36:	4803      	ldr	r0, [pc, #12]	; (8009d44 <SENSOR_IO_Write+0x30>)
 8009d38:	f7ff ffa5 	bl	8009c86 <I2Cx_WriteMultiple>
}
 8009d3c:	bf00      	nop
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	200048fc 	.word	0x200048fc

08009d48 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b086      	sub	sp, #24
 8009d4c:	af02      	add	r7, sp, #8
 8009d4e:	4603      	mov	r3, r0
 8009d50:	460a      	mov	r2, r1
 8009d52:	71fb      	strb	r3, [r7, #7]
 8009d54:	4613      	mov	r3, r2
 8009d56:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8009d5c:	79bb      	ldrb	r3, [r7, #6]
 8009d5e:	b29a      	uxth	r2, r3
 8009d60:	79f9      	ldrb	r1, [r7, #7]
 8009d62:	2301      	movs	r3, #1
 8009d64:	9301      	str	r3, [sp, #4]
 8009d66:	f107 030f 	add.w	r3, r7, #15
 8009d6a:	9300      	str	r3, [sp, #0]
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	4804      	ldr	r0, [pc, #16]	; (8009d80 <SENSOR_IO_Read+0x38>)
 8009d70:	f7ff ff5c 	bl	8009c2c <I2Cx_ReadMultiple>

  return read_value;
 8009d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	200048fc 	.word	0x200048fc

08009d84 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af02      	add	r7, sp, #8
 8009d8a:	603a      	str	r2, [r7, #0]
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	4603      	mov	r3, r0
 8009d90:	71fb      	strb	r3, [r7, #7]
 8009d92:	460b      	mov	r3, r1
 8009d94:	71bb      	strb	r3, [r7, #6]
 8009d96:	4613      	mov	r3, r2
 8009d98:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8009d9a:	79bb      	ldrb	r3, [r7, #6]
 8009d9c:	b29a      	uxth	r2, r3
 8009d9e:	79f9      	ldrb	r1, [r7, #7]
 8009da0:	88bb      	ldrh	r3, [r7, #4]
 8009da2:	9301      	str	r3, [sp, #4]
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	9300      	str	r3, [sp, #0]
 8009da8:	2301      	movs	r3, #1
 8009daa:	4804      	ldr	r0, [pc, #16]	; (8009dbc <SENSOR_IO_ReadMultiple+0x38>)
 8009dac:	f7ff ff3e 	bl	8009c2c <I2Cx_ReadMultiple>
 8009db0:	4603      	mov	r3, r0
 8009db2:	b29b      	uxth	r3, r3
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3708      	adds	r7, #8
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	200048fc 	.word	0x200048fc

08009dc0 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8009dc6:	4b0c      	ldr	r3, [pc, #48]	; (8009df8 <BSP_HSENSOR_Init+0x38>)
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	20be      	movs	r0, #190	; 0xbe
 8009dcc:	4798      	blx	r3
 8009dce:	4603      	mov	r3, r0
 8009dd0:	2bbc      	cmp	r3, #188	; 0xbc
 8009dd2:	d002      	beq.n	8009dda <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	607b      	str	r3, [r7, #4]
 8009dd8:	e009      	b.n	8009dee <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8009dda:	4b08      	ldr	r3, [pc, #32]	; (8009dfc <BSP_HSENSOR_Init+0x3c>)
 8009ddc:	4a06      	ldr	r2, [pc, #24]	; (8009df8 <BSP_HSENSOR_Init+0x38>)
 8009dde:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8009de0:	4b06      	ldr	r3, [pc, #24]	; (8009dfc <BSP_HSENSOR_Init+0x3c>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	20be      	movs	r0, #190	; 0xbe
 8009de8:	4798      	blx	r3
    ret = HSENSOR_OK;
 8009dea:	2300      	movs	r3, #0
 8009dec:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8009dee:	687b      	ldr	r3, [r7, #4]
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	20000460 	.word	0x20000460
 8009dfc:	20000894 	.word	0x20000894

08009e00 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8009e00:	b580      	push	{r7, lr}
 8009e02:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8009e04:	4b04      	ldr	r3, [pc, #16]	; (8009e18 <BSP_HSENSOR_ReadHumidity+0x18>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	20be      	movs	r0, #190	; 0xbe
 8009e0c:	4798      	blx	r3
 8009e0e:	eef0 7a40 	vmov.f32	s15, s0
}
 8009e12:	eeb0 0a67 	vmov.f32	s0, s15
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	20000894 	.word	0x20000894

08009e1c <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8009e22:	4b0c      	ldr	r3, [pc, #48]	; (8009e54 <BSP_PSENSOR_Init+0x38>)
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	20ba      	movs	r0, #186	; 0xba
 8009e28:	4798      	blx	r3
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2bb1      	cmp	r3, #177	; 0xb1
 8009e2e:	d002      	beq.n	8009e36 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	607b      	str	r3, [r7, #4]
 8009e34:	e009      	b.n	8009e4a <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8009e36:	4b08      	ldr	r3, [pc, #32]	; (8009e58 <BSP_PSENSOR_Init+0x3c>)
 8009e38:	4a06      	ldr	r2, [pc, #24]	; (8009e54 <BSP_PSENSOR_Init+0x38>)
 8009e3a:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8009e3c:	4b06      	ldr	r3, [pc, #24]	; (8009e58 <BSP_PSENSOR_Init+0x3c>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	20ba      	movs	r0, #186	; 0xba
 8009e44:	4798      	blx	r3
    ret = PSENSOR_OK;
 8009e46:	2300      	movs	r3, #0
 8009e48:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8009e4a:	687b      	ldr	r3, [r7, #4]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3708      	adds	r7, #8
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	2000047c 	.word	0x2000047c
 8009e58:	20000898 	.word	0x20000898

08009e5c <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8009e60:	4b04      	ldr	r3, [pc, #16]	; (8009e74 <BSP_PSENSOR_ReadPressure+0x18>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	20ba      	movs	r0, #186	; 0xba
 8009e68:	4798      	blx	r3
 8009e6a:	eef0 7a40 	vmov.f32	s15, s0
}
 8009e6e:	eeb0 0a67 	vmov.f32	s0, s15
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	20000898 	.word	0x20000898

08009e78 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8009e82:	4b09      	ldr	r3, [pc, #36]	; (8009ea8 <BSP_TSENSOR_Init+0x30>)
 8009e84:	4a09      	ldr	r2, [pc, #36]	; (8009eac <BSP_TSENSOR_Init+0x34>)
 8009e86:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8009e88:	f7ff ff3a 	bl	8009d00 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8009e8c:	4b06      	ldr	r3, [pc, #24]	; (8009ea8 <BSP_TSENSOR_Init+0x30>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2100      	movs	r1, #0
 8009e94:	20be      	movs	r0, #190	; 0xbe
 8009e96:	4798      	blx	r3

  ret = TSENSOR_OK;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8009e9c:	79fb      	ldrb	r3, [r7, #7]
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	2000089c 	.word	0x2000089c
 8009eac:	2000046c 	.word	0x2000046c

08009eb0 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8009eb4:	4b04      	ldr	r3, [pc, #16]	; (8009ec8 <BSP_TSENSOR_ReadTemp+0x18>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	20be      	movs	r0, #190	; 0xbe
 8009ebc:	4798      	blx	r3
 8009ebe:	eef0 7a40 	vmov.f32	s15, s0
}
 8009ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	2000089c 	.word	0x2000089c

08009ecc <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8009ed6:	88fb      	ldrh	r3, [r7, #6]
 8009ed8:	b2db      	uxtb	r3, r3
 8009eda:	2120      	movs	r1, #32
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7ff ff33 	bl	8009d48 <SENSOR_IO_Read>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8009ee6:	7bfb      	ldrb	r3, [r7, #15]
 8009ee8:	f023 0304 	bic.w	r3, r3, #4
 8009eec:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8009eee:	7bfb      	ldrb	r3, [r7, #15]
 8009ef0:	f043 0304 	orr.w	r3, r3, #4
 8009ef4:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8009ef6:	7bfb      	ldrb	r3, [r7, #15]
 8009ef8:	f023 0303 	bic.w	r3, r3, #3
 8009efc:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8009efe:	7bfb      	ldrb	r3, [r7, #15]
 8009f00:	f043 0301 	orr.w	r3, r3, #1
 8009f04:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8009f06:	7bfb      	ldrb	r3, [r7, #15]
 8009f08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009f0c:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8009f0e:	88fb      	ldrh	r3, [r7, #6]
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	7bfa      	ldrb	r2, [r7, #15]
 8009f14:	2120      	movs	r1, #32
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7ff fefc 	bl	8009d14 <SENSOR_IO_Write>
}
 8009f1c:	bf00      	nop
 8009f1e:	3710      	adds	r7, #16
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8009f32:	f7ff fee5 	bl	8009d00 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8009f36:	88fb      	ldrh	r3, [r7, #6]
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	210f      	movs	r1, #15
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7ff ff03 	bl	8009d48 <SENSOR_IO_Read>
 8009f42:	4603      	mov	r3, r0
 8009f44:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8009f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3710      	adds	r7, #16
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b088      	sub	sp, #32
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	4603      	mov	r3, r0
 8009f58:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8009f5a:	88fb      	ldrh	r3, [r7, #6]
 8009f5c:	b2d8      	uxtb	r0, r3
 8009f5e:	f107 020c 	add.w	r2, r7, #12
 8009f62:	2302      	movs	r3, #2
 8009f64:	21b0      	movs	r1, #176	; 0xb0
 8009f66:	f7ff ff0d 	bl	8009d84 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8009f6a:	7b3b      	ldrb	r3, [r7, #12]
 8009f6c:	085b      	lsrs	r3, r3, #1
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8009f72:	7b7b      	ldrb	r3, [r7, #13]
 8009f74:	085b      	lsrs	r3, r3, #1
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8009f7a:	88fb      	ldrh	r3, [r7, #6]
 8009f7c:	b2d8      	uxtb	r0, r3
 8009f7e:	f107 020c 	add.w	r2, r7, #12
 8009f82:	2302      	movs	r3, #2
 8009f84:	21b6      	movs	r1, #182	; 0xb6
 8009f86:	f7ff fefd 	bl	8009d84 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8009f8a:	7b7b      	ldrb	r3, [r7, #13]
 8009f8c:	021b      	lsls	r3, r3, #8
 8009f8e:	b21a      	sxth	r2, r3
 8009f90:	7b3b      	ldrb	r3, [r7, #12]
 8009f92:	b21b      	sxth	r3, r3
 8009f94:	4313      	orrs	r3, r2
 8009f96:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8009f98:	88fb      	ldrh	r3, [r7, #6]
 8009f9a:	b2d8      	uxtb	r0, r3
 8009f9c:	f107 020c 	add.w	r2, r7, #12
 8009fa0:	2302      	movs	r3, #2
 8009fa2:	21ba      	movs	r1, #186	; 0xba
 8009fa4:	f7ff feee 	bl	8009d84 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8009fa8:	7b7b      	ldrb	r3, [r7, #13]
 8009faa:	021b      	lsls	r3, r3, #8
 8009fac:	b21a      	sxth	r2, r3
 8009fae:	7b3b      	ldrb	r3, [r7, #12]
 8009fb0:	b21b      	sxth	r3, r3
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8009fb6:	88fb      	ldrh	r3, [r7, #6]
 8009fb8:	b2d8      	uxtb	r0, r3
 8009fba:	f107 020c 	add.w	r2, r7, #12
 8009fbe:	2302      	movs	r3, #2
 8009fc0:	21a8      	movs	r1, #168	; 0xa8
 8009fc2:	f7ff fedf 	bl	8009d84 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8009fc6:	7b7b      	ldrb	r3, [r7, #13]
 8009fc8:	021b      	lsls	r3, r3, #8
 8009fca:	b21a      	sxth	r2, r3
 8009fcc:	7b3b      	ldrb	r3, [r7, #12]
 8009fce:	b21b      	sxth	r3, r3
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8009fd4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009fd8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009fdc:	1ad3      	subs	r3, r2, r3
 8009fde:	ee07 3a90 	vmov	s15, r3
 8009fe2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009fe6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8009fea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009fee:	1ad3      	subs	r3, r2, r3
 8009ff0:	ee07 3a90 	vmov	s15, r3
 8009ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ff8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009ffc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800a000:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a004:	1ad3      	subs	r3, r2, r3
 800a006:	ee07 3a90 	vmov	s15, r3
 800a00a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a00e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a012:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a016:	ee07 3a90 	vmov	s15, r3
 800a01a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a01e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a022:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800a026:	edd7 7a04 	vldr	s15, [r7, #16]
 800a02a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a02e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a032:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800a036:	edd7 7a04 	vldr	s15, [r7, #16]
 800a03a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800a080 <HTS221_H_ReadHumidity+0x130>
 800a03e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a046:	dd01      	ble.n	800a04c <HTS221_H_ReadHumidity+0xfc>
 800a048:	4b0e      	ldr	r3, [pc, #56]	; (800a084 <HTS221_H_ReadHumidity+0x134>)
 800a04a:	e00a      	b.n	800a062 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 800a04c:	edd7 7a04 	vldr	s15, [r7, #16]
 800a050:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a058:	d502      	bpl.n	800a060 <HTS221_H_ReadHumidity+0x110>
 800a05a:	f04f 0300 	mov.w	r3, #0
 800a05e:	e000      	b.n	800a062 <HTS221_H_ReadHumidity+0x112>
 800a060:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800a062:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 800a064:	edd7 7a04 	vldr	s15, [r7, #16]
 800a068:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a06c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a070:	eef0 7a66 	vmov.f32	s15, s13
}
 800a074:	eeb0 0a67 	vmov.f32	s0, s15
 800a078:	3720      	adds	r7, #32
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	447a0000 	.word	0x447a0000
 800a084:	447a0000 	.word	0x447a0000

0800a088 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	4603      	mov	r3, r0
 800a090:	6039      	str	r1, [r7, #0]
 800a092:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800a094:	88fb      	ldrh	r3, [r7, #6]
 800a096:	b2db      	uxtb	r3, r3
 800a098:	2120      	movs	r1, #32
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7ff fe54 	bl	8009d48 <SENSOR_IO_Read>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800a0a4:	7bfb      	ldrb	r3, [r7, #15]
 800a0a6:	f023 0304 	bic.w	r3, r3, #4
 800a0aa:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
 800a0ae:	f043 0304 	orr.w	r3, r3, #4
 800a0b2:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800a0b4:	7bfb      	ldrb	r3, [r7, #15]
 800a0b6:	f023 0303 	bic.w	r3, r3, #3
 800a0ba:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800a0bc:	7bfb      	ldrb	r3, [r7, #15]
 800a0be:	f043 0301 	orr.w	r3, r3, #1
 800a0c2:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800a0c4:	7bfb      	ldrb	r3, [r7, #15]
 800a0c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a0ca:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800a0cc:	88fb      	ldrh	r3, [r7, #6]
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	7bfa      	ldrb	r2, [r7, #15]
 800a0d2:	2120      	movs	r1, #32
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f7ff fe1d 	bl	8009d14 <SENSOR_IO_Write>
}
 800a0da:	bf00      	nop
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b088      	sub	sp, #32
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 800a0ec:	88fb      	ldrh	r3, [r7, #6]
 800a0ee:	b2d8      	uxtb	r0, r3
 800a0f0:	f107 0208 	add.w	r2, r7, #8
 800a0f4:	2302      	movs	r3, #2
 800a0f6:	21b2      	movs	r1, #178	; 0xb2
 800a0f8:	f7ff fe44 	bl	8009d84 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 800a0fc:	88fb      	ldrh	r3, [r7, #6]
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	2135      	movs	r1, #53	; 0x35
 800a102:	4618      	mov	r0, r3
 800a104:	f7ff fe20 	bl	8009d48 <SENSOR_IO_Read>
 800a108:	4603      	mov	r3, r0
 800a10a:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800a10c:	7ffb      	ldrb	r3, [r7, #31]
 800a10e:	021b      	lsls	r3, r3, #8
 800a110:	b21b      	sxth	r3, r3
 800a112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a116:	b21a      	sxth	r2, r3
 800a118:	7a3b      	ldrb	r3, [r7, #8]
 800a11a:	b21b      	sxth	r3, r3
 800a11c:	4313      	orrs	r3, r2
 800a11e:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800a120:	7ffb      	ldrb	r3, [r7, #31]
 800a122:	019b      	lsls	r3, r3, #6
 800a124:	b21b      	sxth	r3, r3
 800a126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a12a:	b21a      	sxth	r2, r3
 800a12c:	7a7b      	ldrb	r3, [r7, #9]
 800a12e:	b21b      	sxth	r3, r3
 800a130:	4313      	orrs	r3, r2
 800a132:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 800a134:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a138:	10db      	asrs	r3, r3, #3
 800a13a:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 800a13c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800a140:	10db      	asrs	r3, r3, #3
 800a142:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800a144:	88fb      	ldrh	r3, [r7, #6]
 800a146:	b2d8      	uxtb	r0, r3
 800a148:	f107 0208 	add.w	r2, r7, #8
 800a14c:	2304      	movs	r3, #4
 800a14e:	21bc      	movs	r1, #188	; 0xbc
 800a150:	f7ff fe18 	bl	8009d84 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800a154:	7a7b      	ldrb	r3, [r7, #9]
 800a156:	021b      	lsls	r3, r3, #8
 800a158:	b21a      	sxth	r2, r3
 800a15a:	7a3b      	ldrb	r3, [r7, #8]
 800a15c:	b21b      	sxth	r3, r3
 800a15e:	4313      	orrs	r3, r2
 800a160:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800a162:	7afb      	ldrb	r3, [r7, #11]
 800a164:	021b      	lsls	r3, r3, #8
 800a166:	b21a      	sxth	r2, r3
 800a168:	7abb      	ldrb	r3, [r7, #10]
 800a16a:	b21b      	sxth	r3, r3
 800a16c:	4313      	orrs	r3, r2
 800a16e:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800a170:	88fb      	ldrh	r3, [r7, #6]
 800a172:	b2d8      	uxtb	r0, r3
 800a174:	f107 0208 	add.w	r2, r7, #8
 800a178:	2302      	movs	r3, #2
 800a17a:	21aa      	movs	r1, #170	; 0xaa
 800a17c:	f7ff fe02 	bl	8009d84 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800a180:	7a7b      	ldrb	r3, [r7, #9]
 800a182:	021b      	lsls	r3, r3, #8
 800a184:	b21a      	sxth	r2, r3
 800a186:	7a3b      	ldrb	r3, [r7, #8]
 800a188:	b21b      	sxth	r3, r3
 800a18a:	4313      	orrs	r3, r2
 800a18c:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800a18e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800a192:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a196:	1ad3      	subs	r3, r2, r3
 800a198:	ee07 3a90 	vmov	s15, r3
 800a19c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a1a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800a1a4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a1a8:	1ad3      	subs	r3, r2, r3
 800a1aa:	ee07 3a90 	vmov	s15, r3
 800a1ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1b2:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a1b6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800a1ba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	ee07 3a90 	vmov	s15, r3
 800a1c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1cc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800a1d0:	ee07 3a90 	vmov	s15, r3
 800a1d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1dc:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	ee07 3a90 	vmov	s15, r3
}
 800a1e6:	eeb0 0a67 	vmov.f32	s0, s15
 800a1ea:	3720      	adds	r7, #32
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800a1fa:	88fb      	ldrh	r3, [r7, #6]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f000 f87b 	bl	800a2f8 <LPS22HB_Init>
}
 800a202:	bf00      	nop
 800a204:	3708      	adds	r7, #8
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b084      	sub	sp, #16
 800a20e:	af00      	add	r7, sp, #0
 800a210:	4603      	mov	r3, r0
 800a212:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800a214:	2300      	movs	r3, #0
 800a216:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 800a218:	f7ff fd72 	bl	8009d00 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 800a21c:	88fb      	ldrh	r3, [r7, #6]
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	210f      	movs	r1, #15
 800a222:	4618      	mov	r0, r3
 800a224:	f7ff fd90 	bl	8009d48 <SENSOR_IO_Read>
 800a228:	4603      	mov	r3, r0
 800a22a:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800a22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
	...

0800a238 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 800a238:	b590      	push	{r4, r7, lr}
 800a23a:	b087      	sub	sp, #28
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	4603      	mov	r3, r0
 800a240:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 800a242:	2300      	movs	r3, #0
 800a244:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800a246:	2300      	movs	r3, #0
 800a248:	74fb      	strb	r3, [r7, #19]
 800a24a:	e013      	b.n	800a274 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 800a24c:	88fb      	ldrh	r3, [r7, #6]
 800a24e:	b2da      	uxtb	r2, r3
 800a250:	7cfb      	ldrb	r3, [r7, #19]
 800a252:	3328      	adds	r3, #40	; 0x28
 800a254:	b2db      	uxtb	r3, r3
 800a256:	7cfc      	ldrb	r4, [r7, #19]
 800a258:	4619      	mov	r1, r3
 800a25a:	4610      	mov	r0, r2
 800a25c:	f7ff fd74 	bl	8009d48 <SENSOR_IO_Read>
 800a260:	4603      	mov	r3, r0
 800a262:	461a      	mov	r2, r3
 800a264:	f107 0318 	add.w	r3, r7, #24
 800a268:	4423      	add	r3, r4
 800a26a:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800a26e:	7cfb      	ldrb	r3, [r7, #19]
 800a270:	3301      	adds	r3, #1
 800a272:	74fb      	strb	r3, [r7, #19]
 800a274:	7cfb      	ldrb	r3, [r7, #19]
 800a276:	2b02      	cmp	r3, #2
 800a278:	d9e8      	bls.n	800a24c <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800a27a:	2300      	movs	r3, #0
 800a27c:	74fb      	strb	r3, [r7, #19]
 800a27e:	e010      	b.n	800a2a2 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 800a280:	7cfb      	ldrb	r3, [r7, #19]
 800a282:	f107 0218 	add.w	r2, r7, #24
 800a286:	4413      	add	r3, r2
 800a288:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800a28c:	461a      	mov	r2, r3
 800a28e:	7cfb      	ldrb	r3, [r7, #19]
 800a290:	00db      	lsls	r3, r3, #3
 800a292:	fa02 f303 	lsl.w	r3, r2, r3
 800a296:	697a      	ldr	r2, [r7, #20]
 800a298:	4313      	orrs	r3, r2
 800a29a:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 800a29c:	7cfb      	ldrb	r3, [r7, #19]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	74fb      	strb	r3, [r7, #19]
 800a2a2:	7cfb      	ldrb	r3, [r7, #19]
 800a2a4:	2b02      	cmp	r3, #2
 800a2a6:	d9eb      	bls.n	800a280 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d003      	beq.n	800a2ba <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2b8:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2264      	movs	r2, #100	; 0x64
 800a2c2:	fb02 f303 	mul.w	r3, r2, r3
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	da01      	bge.n	800a2ce <LPS22HB_P_ReadPressure+0x96>
 800a2ca:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800a2ce:	131b      	asrs	r3, r3, #12
 800a2d0:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	ee07 3a90 	vmov	s15, r3
 800a2d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2dc:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800a2f4 <LPS22HB_P_ReadPressure+0xbc>
 800a2e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a2e4:	eef0 7a66 	vmov.f32	s15, s13
}
 800a2e8:	eeb0 0a67 	vmov.f32	s0, s15
 800a2ec:	371c      	adds	r7, #28
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd90      	pop	{r4, r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	42c80000 	.word	0x42c80000

0800a2f8 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	4603      	mov	r3, r0
 800a300:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800a302:	88fb      	ldrh	r3, [r7, #6]
 800a304:	b2db      	uxtb	r3, r3
 800a306:	211a      	movs	r1, #26
 800a308:	4618      	mov	r0, r3
 800a30a:	f7ff fd1d 	bl	8009d48 <SENSOR_IO_Read>
 800a30e:	4603      	mov	r3, r0
 800a310:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800a312:	7bfb      	ldrb	r3, [r7, #15]
 800a314:	f023 0301 	bic.w	r3, r3, #1
 800a318:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 800a31a:	7bfb      	ldrb	r3, [r7, #15]
 800a31c:	f043 0301 	orr.w	r3, r3, #1
 800a320:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800a322:	88fb      	ldrh	r3, [r7, #6]
 800a324:	b2db      	uxtb	r3, r3
 800a326:	7bfa      	ldrb	r2, [r7, #15]
 800a328:	211a      	movs	r1, #26
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7ff fcf2 	bl	8009d14 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 800a330:	88fb      	ldrh	r3, [r7, #6]
 800a332:	b2db      	uxtb	r3, r3
 800a334:	2110      	movs	r1, #16
 800a336:	4618      	mov	r0, r3
 800a338:	f7ff fd06 	bl	8009d48 <SENSOR_IO_Read>
 800a33c:	4603      	mov	r3, r0
 800a33e:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 800a340:	7bfb      	ldrb	r3, [r7, #15]
 800a342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a346:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 800a348:	7bfb      	ldrb	r3, [r7, #15]
 800a34a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800a34e:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 800a350:	7bfb      	ldrb	r3, [r7, #15]
 800a352:	f023 0302 	bic.w	r3, r3, #2
 800a356:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 800a358:	7bfb      	ldrb	r3, [r7, #15]
 800a35a:	f043 0302 	orr.w	r3, r3, #2
 800a35e:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 800a360:	88fb      	ldrh	r3, [r7, #6]
 800a362:	b2db      	uxtb	r3, r3
 800a364:	7bfa      	ldrb	r2, [r7, #15]
 800a366:	2110      	movs	r1, #16
 800a368:	4618      	mov	r0, r3
 800a36a:	f7ff fcd3 	bl	8009d14 <SENSOR_IO_Write>
}  
 800a36e:	bf00      	nop
 800a370:	3710      	adds	r7, #16
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b082      	sub	sp, #8
 800a37a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a37c:	2300      	movs	r3, #0
 800a37e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a380:	2003      	movs	r0, #3
 800a382:	f000 f95f 	bl	800a644 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a386:	2000      	movs	r0, #0
 800a388:	f000 f80e 	bl	800a3a8 <HAL_InitTick>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d002      	beq.n	800a398 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	71fb      	strb	r3, [r7, #7]
 800a396:	e001      	b.n	800a39c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a398:	f7f9 fcd4 	bl	8003d44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a39c:	79fb      	ldrb	r3, [r7, #7]
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
	...

0800a3a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800a3b4:	4b17      	ldr	r3, [pc, #92]	; (800a414 <HAL_InitTick+0x6c>)
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d023      	beq.n	800a404 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800a3bc:	4b16      	ldr	r3, [pc, #88]	; (800a418 <HAL_InitTick+0x70>)
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	4b14      	ldr	r3, [pc, #80]	; (800a414 <HAL_InitTick+0x6c>)
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a3ca:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f000 f96b 	bl	800a6ae <HAL_SYSTICK_Config>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d10f      	bne.n	800a3fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2b0f      	cmp	r3, #15
 800a3e2:	d809      	bhi.n	800a3f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	6879      	ldr	r1, [r7, #4]
 800a3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ec:	f000 f935 	bl	800a65a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a3f0:	4a0a      	ldr	r2, [pc, #40]	; (800a41c <HAL_InitTick+0x74>)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6013      	str	r3, [r2, #0]
 800a3f6:	e007      	b.n	800a408 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	73fb      	strb	r3, [r7, #15]
 800a3fc:	e004      	b.n	800a408 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	73fb      	strb	r3, [r7, #15]
 800a402:	e001      	b.n	800a408 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800a408:	7bfb      	ldrb	r3, [r7, #15]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	2000048c 	.word	0x2000048c
 800a418:	2000018c 	.word	0x2000018c
 800a41c:	20000488 	.word	0x20000488

0800a420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a420:	b480      	push	{r7}
 800a422:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800a424:	4b06      	ldr	r3, [pc, #24]	; (800a440 <HAL_IncTick+0x20>)
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	461a      	mov	r2, r3
 800a42a:	4b06      	ldr	r3, [pc, #24]	; (800a444 <HAL_IncTick+0x24>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4413      	add	r3, r2
 800a430:	4a04      	ldr	r2, [pc, #16]	; (800a444 <HAL_IncTick+0x24>)
 800a432:	6013      	str	r3, [r2, #0]
}
 800a434:	bf00      	nop
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	2000048c 	.word	0x2000048c
 800a444:	20004948 	.word	0x20004948

0800a448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a448:	b480      	push	{r7}
 800a44a:	af00      	add	r7, sp, #0
  return uwTick;
 800a44c:	4b03      	ldr	r3, [pc, #12]	; (800a45c <HAL_GetTick+0x14>)
 800a44e:	681b      	ldr	r3, [r3, #0]
}
 800a450:	4618      	mov	r0, r3
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr
 800a45a:	bf00      	nop
 800a45c:	20004948 	.word	0x20004948

0800a460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a468:	f7ff ffee 	bl	800a448 <HAL_GetTick>
 800a46c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a478:	d005      	beq.n	800a486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800a47a:	4b09      	ldr	r3, [pc, #36]	; (800a4a0 <HAL_Delay+0x40>)
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	461a      	mov	r2, r3
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	4413      	add	r3, r2
 800a484:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a486:	bf00      	nop
 800a488:	f7ff ffde 	bl	800a448 <HAL_GetTick>
 800a48c:	4602      	mov	r2, r0
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	1ad3      	subs	r3, r2, r3
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	429a      	cmp	r2, r3
 800a496:	d8f7      	bhi.n	800a488 <HAL_Delay+0x28>
  {
  }
}
 800a498:	bf00      	nop
 800a49a:	3710      	adds	r7, #16
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	2000048c 	.word	0x2000048c

0800a4a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f003 0307 	and.w	r3, r3, #7
 800a4b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a4b4:	4b0c      	ldr	r3, [pc, #48]	; (800a4e8 <__NVIC_SetPriorityGrouping+0x44>)
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a4ba:	68ba      	ldr	r2, [r7, #8]
 800a4bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a4cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a4d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a4d6:	4a04      	ldr	r2, [pc, #16]	; (800a4e8 <__NVIC_SetPriorityGrouping+0x44>)
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	60d3      	str	r3, [r2, #12]
}
 800a4dc:	bf00      	nop
 800a4de:	3714      	adds	r7, #20
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr
 800a4e8:	e000ed00 	.word	0xe000ed00

0800a4ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a4f0:	4b04      	ldr	r3, [pc, #16]	; (800a504 <__NVIC_GetPriorityGrouping+0x18>)
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	0a1b      	lsrs	r3, r3, #8
 800a4f6:	f003 0307 	and.w	r3, r3, #7
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr
 800a504:	e000ed00 	.word	0xe000ed00

0800a508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	4603      	mov	r3, r0
 800a510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a516:	2b00      	cmp	r3, #0
 800a518:	db0b      	blt.n	800a532 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a51a:	79fb      	ldrb	r3, [r7, #7]
 800a51c:	f003 021f 	and.w	r2, r3, #31
 800a520:	4907      	ldr	r1, [pc, #28]	; (800a540 <__NVIC_EnableIRQ+0x38>)
 800a522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a526:	095b      	lsrs	r3, r3, #5
 800a528:	2001      	movs	r0, #1
 800a52a:	fa00 f202 	lsl.w	r2, r0, r2
 800a52e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a532:	bf00      	nop
 800a534:	370c      	adds	r7, #12
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr
 800a53e:	bf00      	nop
 800a540:	e000e100 	.word	0xe000e100

0800a544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	4603      	mov	r3, r0
 800a54c:	6039      	str	r1, [r7, #0]
 800a54e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a554:	2b00      	cmp	r3, #0
 800a556:	db0a      	blt.n	800a56e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	b2da      	uxtb	r2, r3
 800a55c:	490c      	ldr	r1, [pc, #48]	; (800a590 <__NVIC_SetPriority+0x4c>)
 800a55e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a562:	0112      	lsls	r2, r2, #4
 800a564:	b2d2      	uxtb	r2, r2
 800a566:	440b      	add	r3, r1
 800a568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a56c:	e00a      	b.n	800a584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	b2da      	uxtb	r2, r3
 800a572:	4908      	ldr	r1, [pc, #32]	; (800a594 <__NVIC_SetPriority+0x50>)
 800a574:	79fb      	ldrb	r3, [r7, #7]
 800a576:	f003 030f 	and.w	r3, r3, #15
 800a57a:	3b04      	subs	r3, #4
 800a57c:	0112      	lsls	r2, r2, #4
 800a57e:	b2d2      	uxtb	r2, r2
 800a580:	440b      	add	r3, r1
 800a582:	761a      	strb	r2, [r3, #24]
}
 800a584:	bf00      	nop
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr
 800a590:	e000e100 	.word	0xe000e100
 800a594:	e000ed00 	.word	0xe000ed00

0800a598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a598:	b480      	push	{r7}
 800a59a:	b089      	sub	sp, #36	; 0x24
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f003 0307 	and.w	r3, r3, #7
 800a5aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	f1c3 0307 	rsb	r3, r3, #7
 800a5b2:	2b04      	cmp	r3, #4
 800a5b4:	bf28      	it	cs
 800a5b6:	2304      	movcs	r3, #4
 800a5b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	3304      	adds	r3, #4
 800a5be:	2b06      	cmp	r3, #6
 800a5c0:	d902      	bls.n	800a5c8 <NVIC_EncodePriority+0x30>
 800a5c2:	69fb      	ldr	r3, [r7, #28]
 800a5c4:	3b03      	subs	r3, #3
 800a5c6:	e000      	b.n	800a5ca <NVIC_EncodePriority+0x32>
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a5cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5d6:	43da      	mvns	r2, r3
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	401a      	ands	r2, r3
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a5e0:	f04f 31ff 	mov.w	r1, #4294967295
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	fa01 f303 	lsl.w	r3, r1, r3
 800a5ea:	43d9      	mvns	r1, r3
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a5f0:	4313      	orrs	r3, r2
         );
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3724      	adds	r7, #36	; 0x24
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr
	...

0800a600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	3b01      	subs	r3, #1
 800a60c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a610:	d301      	bcc.n	800a616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a612:	2301      	movs	r3, #1
 800a614:	e00f      	b.n	800a636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a616:	4a0a      	ldr	r2, [pc, #40]	; (800a640 <SysTick_Config+0x40>)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	3b01      	subs	r3, #1
 800a61c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a61e:	210f      	movs	r1, #15
 800a620:	f04f 30ff 	mov.w	r0, #4294967295
 800a624:	f7ff ff8e 	bl	800a544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a628:	4b05      	ldr	r3, [pc, #20]	; (800a640 <SysTick_Config+0x40>)
 800a62a:	2200      	movs	r2, #0
 800a62c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a62e:	4b04      	ldr	r3, [pc, #16]	; (800a640 <SysTick_Config+0x40>)
 800a630:	2207      	movs	r2, #7
 800a632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	3708      	adds	r7, #8
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	e000e010 	.word	0xe000e010

0800a644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f7ff ff29 	bl	800a4a4 <__NVIC_SetPriorityGrouping>
}
 800a652:	bf00      	nop
 800a654:	3708      	adds	r7, #8
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b086      	sub	sp, #24
 800a65e:	af00      	add	r7, sp, #0
 800a660:	4603      	mov	r3, r0
 800a662:	60b9      	str	r1, [r7, #8]
 800a664:	607a      	str	r2, [r7, #4]
 800a666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a668:	2300      	movs	r3, #0
 800a66a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a66c:	f7ff ff3e 	bl	800a4ec <__NVIC_GetPriorityGrouping>
 800a670:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	68b9      	ldr	r1, [r7, #8]
 800a676:	6978      	ldr	r0, [r7, #20]
 800a678:	f7ff ff8e 	bl	800a598 <NVIC_EncodePriority>
 800a67c:	4602      	mov	r2, r0
 800a67e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a682:	4611      	mov	r1, r2
 800a684:	4618      	mov	r0, r3
 800a686:	f7ff ff5d 	bl	800a544 <__NVIC_SetPriority>
}
 800a68a:	bf00      	nop
 800a68c:	3718      	adds	r7, #24
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}

0800a692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a692:	b580      	push	{r7, lr}
 800a694:	b082      	sub	sp, #8
 800a696:	af00      	add	r7, sp, #0
 800a698:	4603      	mov	r3, r0
 800a69a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a69c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7ff ff31 	bl	800a508 <__NVIC_EnableIRQ>
}
 800a6a6:	bf00      	nop
 800a6a8:	3708      	adds	r7, #8
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b082      	sub	sp, #8
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f7ff ffa2 	bl	800a600 <SysTick_Config>
 800a6bc:	4603      	mov	r3, r0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3708      	adds	r7, #8
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
	...

0800a6c8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d101      	bne.n	800a6da <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e0ac      	b.n	800a834 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f000 f8b2 	bl	800a848 <DFSDM_GetChannelFromInstance>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	4b55      	ldr	r3, [pc, #340]	; (800a83c <HAL_DFSDM_ChannelInit+0x174>)
 800a6e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d001      	beq.n	800a6f4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e09f      	b.n	800a834 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f7f9 fb49 	bl	8003d8c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800a6fa:	4b51      	ldr	r3, [pc, #324]	; (800a840 <HAL_DFSDM_ChannelInit+0x178>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	3301      	adds	r3, #1
 800a700:	4a4f      	ldr	r2, [pc, #316]	; (800a840 <HAL_DFSDM_ChannelInit+0x178>)
 800a702:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800a704:	4b4e      	ldr	r3, [pc, #312]	; (800a840 <HAL_DFSDM_ChannelInit+0x178>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d125      	bne.n	800a758 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800a70c:	4b4d      	ldr	r3, [pc, #308]	; (800a844 <HAL_DFSDM_ChannelInit+0x17c>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a4c      	ldr	r2, [pc, #304]	; (800a844 <HAL_DFSDM_ChannelInit+0x17c>)
 800a712:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a716:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800a718:	4b4a      	ldr	r3, [pc, #296]	; (800a844 <HAL_DFSDM_ChannelInit+0x17c>)
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	4948      	ldr	r1, [pc, #288]	; (800a844 <HAL_DFSDM_ChannelInit+0x17c>)
 800a722:	4313      	orrs	r3, r2
 800a724:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800a726:	4b47      	ldr	r3, [pc, #284]	; (800a844 <HAL_DFSDM_ChannelInit+0x17c>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a46      	ldr	r2, [pc, #280]	; (800a844 <HAL_DFSDM_ChannelInit+0x17c>)
 800a72c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800a730:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	791b      	ldrb	r3, [r3, #4]
 800a736:	2b01      	cmp	r3, #1
 800a738:	d108      	bne.n	800a74c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800a73a:	4b42      	ldr	r3, [pc, #264]	; (800a844 <HAL_DFSDM_ChannelInit+0x17c>)
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	3b01      	subs	r3, #1
 800a744:	041b      	lsls	r3, r3, #16
 800a746:	493f      	ldr	r1, [pc, #252]	; (800a844 <HAL_DFSDM_ChannelInit+0x17c>)
 800a748:	4313      	orrs	r3, r2
 800a74a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800a74c:	4b3d      	ldr	r3, [pc, #244]	; (800a844 <HAL_DFSDM_ChannelInit+0x17c>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a3c      	ldr	r2, [pc, #240]	; (800a844 <HAL_DFSDM_ChannelInit+0x17c>)
 800a752:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a756:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800a766:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	6819      	ldr	r1, [r3, #0]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800a776:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800a77c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	430a      	orrs	r2, r1
 800a784:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f022 020f 	bic.w	r2, r2, #15
 800a794:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	6819      	ldr	r1, [r3, #0]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800a7a4:	431a      	orrs	r2, r3
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	430a      	orrs	r2, r1
 800a7ac:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	689a      	ldr	r2, [r3, #8]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800a7bc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	6899      	ldr	r1, [r3, #8]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7cc:	3b01      	subs	r3, #1
 800a7ce:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800a7d0:	431a      	orrs	r2, r3
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	430a      	orrs	r2, r1
 800a7d8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	685a      	ldr	r2, [r3, #4]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f002 0207 	and.w	r2, r2, #7
 800a7e8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	6859      	ldr	r1, [r3, #4]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7fa:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800a7fc:	431a      	orrs	r2, r3
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	430a      	orrs	r2, r1
 800a804:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a814:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2201      	movs	r2, #1
 800a81a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4618      	mov	r0, r3
 800a824:	f000 f810 	bl	800a848 <DFSDM_GetChannelFromInstance>
 800a828:	4601      	mov	r1, r0
 800a82a:	4a04      	ldr	r2, [pc, #16]	; (800a83c <HAL_DFSDM_ChannelInit+0x174>)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 800a832:	2300      	movs	r3, #0
}
 800a834:	4618      	mov	r0, r3
 800a836:	3708      	adds	r7, #8
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	200008a4 	.word	0x200008a4
 800a840:	200008a0 	.word	0x200008a0
 800a844:	40016000 	.word	0x40016000

0800a848 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800a848:	b480      	push	{r7}
 800a84a:	b085      	sub	sp, #20
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4a1c      	ldr	r2, [pc, #112]	; (800a8c4 <DFSDM_GetChannelFromInstance+0x7c>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d102      	bne.n	800a85e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800a858:	2300      	movs	r3, #0
 800a85a:	60fb      	str	r3, [r7, #12]
 800a85c:	e02b      	b.n	800a8b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	4a19      	ldr	r2, [pc, #100]	; (800a8c8 <DFSDM_GetChannelFromInstance+0x80>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d102      	bne.n	800a86c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800a866:	2301      	movs	r3, #1
 800a868:	60fb      	str	r3, [r7, #12]
 800a86a:	e024      	b.n	800a8b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	4a17      	ldr	r2, [pc, #92]	; (800a8cc <DFSDM_GetChannelFromInstance+0x84>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d102      	bne.n	800a87a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800a874:	2302      	movs	r3, #2
 800a876:	60fb      	str	r3, [r7, #12]
 800a878:	e01d      	b.n	800a8b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4a14      	ldr	r2, [pc, #80]	; (800a8d0 <DFSDM_GetChannelFromInstance+0x88>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d102      	bne.n	800a888 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800a882:	2304      	movs	r3, #4
 800a884:	60fb      	str	r3, [r7, #12]
 800a886:	e016      	b.n	800a8b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4a12      	ldr	r2, [pc, #72]	; (800a8d4 <DFSDM_GetChannelFromInstance+0x8c>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d102      	bne.n	800a896 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800a890:	2305      	movs	r3, #5
 800a892:	60fb      	str	r3, [r7, #12]
 800a894:	e00f      	b.n	800a8b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	4a0f      	ldr	r2, [pc, #60]	; (800a8d8 <DFSDM_GetChannelFromInstance+0x90>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d102      	bne.n	800a8a4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800a89e:	2306      	movs	r3, #6
 800a8a0:	60fb      	str	r3, [r7, #12]
 800a8a2:	e008      	b.n	800a8b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	4a0d      	ldr	r2, [pc, #52]	; (800a8dc <DFSDM_GetChannelFromInstance+0x94>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d102      	bne.n	800a8b2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800a8ac:	2307      	movs	r3, #7
 800a8ae:	60fb      	str	r3, [r7, #12]
 800a8b0:	e001      	b.n	800a8b6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800a8b2:	2303      	movs	r3, #3
 800a8b4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3714      	adds	r7, #20
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr
 800a8c4:	40016000 	.word	0x40016000
 800a8c8:	40016020 	.word	0x40016020
 800a8cc:	40016040 	.word	0x40016040
 800a8d0:	40016080 	.word	0x40016080
 800a8d4:	400160a0 	.word	0x400160a0
 800a8d8:	400160c0 	.word	0x400160c0
 800a8dc:	400160e0 	.word	0x400160e0

0800a8e0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d005      	beq.n	800a904 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2204      	movs	r2, #4
 800a8fc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	73fb      	strb	r3, [r7, #15]
 800a902:	e029      	b.n	800a958 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f022 020e 	bic.w	r2, r2, #14
 800a912:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f022 0201 	bic.w	r2, r2, #1
 800a922:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a928:	f003 021c 	and.w	r2, r3, #28
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a930:	2101      	movs	r1, #1
 800a932:	fa01 f202 	lsl.w	r2, r1, r2
 800a936:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2201      	movs	r2, #1
 800a93c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d003      	beq.n	800a958 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	4798      	blx	r3
    }
  }
  return status;
 800a958:	7bfb      	ldrb	r3, [r7, #15]
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3710      	adds	r7, #16
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
	...

0800a964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a964:	b480      	push	{r7}
 800a966:	b087      	sub	sp, #28
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a96e:	2300      	movs	r3, #0
 800a970:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a972:	e17f      	b.n	800ac74 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	2101      	movs	r1, #1
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	fa01 f303 	lsl.w	r3, r1, r3
 800a980:	4013      	ands	r3, r2
 800a982:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2b00      	cmp	r3, #0
 800a988:	f000 8171 	beq.w	800ac6e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	2b01      	cmp	r3, #1
 800a992:	d00b      	beq.n	800a9ac <HAL_GPIO_Init+0x48>
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	2b02      	cmp	r3, #2
 800a99a:	d007      	beq.n	800a9ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a9a0:	2b11      	cmp	r3, #17
 800a9a2:	d003      	beq.n	800a9ac <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	2b12      	cmp	r3, #18
 800a9aa:	d130      	bne.n	800aa0e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	005b      	lsls	r3, r3, #1
 800a9b6:	2203      	movs	r2, #3
 800a9b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a9bc:	43db      	mvns	r3, r3
 800a9be:	693a      	ldr	r2, [r7, #16]
 800a9c0:	4013      	ands	r3, r2
 800a9c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	68da      	ldr	r2, [r3, #12]
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	005b      	lsls	r3, r3, #1
 800a9cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a9d0:	693a      	ldr	r2, [r7, #16]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	693a      	ldr	r2, [r7, #16]
 800a9da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ea:	43db      	mvns	r3, r3
 800a9ec:	693a      	ldr	r2, [r7, #16]
 800a9ee:	4013      	ands	r3, r2
 800a9f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	091b      	lsrs	r3, r3, #4
 800a9f8:	f003 0201 	and.w	r2, r3, #1
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	fa02 f303 	lsl.w	r3, r2, r3
 800aa02:	693a      	ldr	r2, [r7, #16]
 800aa04:	4313      	orrs	r3, r2
 800aa06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	693a      	ldr	r2, [r7, #16]
 800aa0c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	f003 0303 	and.w	r3, r3, #3
 800aa16:	2b03      	cmp	r3, #3
 800aa18:	d118      	bne.n	800aa4c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800aa20:	2201      	movs	r2, #1
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	fa02 f303 	lsl.w	r3, r2, r3
 800aa28:	43db      	mvns	r3, r3
 800aa2a:	693a      	ldr	r2, [r7, #16]
 800aa2c:	4013      	ands	r3, r2
 800aa2e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	08db      	lsrs	r3, r3, #3
 800aa36:	f003 0201 	and.w	r2, r3, #1
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa40:	693a      	ldr	r2, [r7, #16]
 800aa42:	4313      	orrs	r3, r2
 800aa44:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	693a      	ldr	r2, [r7, #16]
 800aa4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	005b      	lsls	r3, r3, #1
 800aa56:	2203      	movs	r2, #3
 800aa58:	fa02 f303 	lsl.w	r3, r2, r3
 800aa5c:	43db      	mvns	r3, r3
 800aa5e:	693a      	ldr	r2, [r7, #16]
 800aa60:	4013      	ands	r3, r2
 800aa62:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	689a      	ldr	r2, [r3, #8]
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	005b      	lsls	r3, r3, #1
 800aa6c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa70:	693a      	ldr	r2, [r7, #16]
 800aa72:	4313      	orrs	r3, r2
 800aa74:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	693a      	ldr	r2, [r7, #16]
 800aa7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	d003      	beq.n	800aa8c <HAL_GPIO_Init+0x128>
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	2b12      	cmp	r3, #18
 800aa8a:	d123      	bne.n	800aad4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	08da      	lsrs	r2, r3, #3
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	3208      	adds	r2, #8
 800aa94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa98:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	f003 0307 	and.w	r3, r3, #7
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	220f      	movs	r2, #15
 800aaa4:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa8:	43db      	mvns	r3, r3
 800aaaa:	693a      	ldr	r2, [r7, #16]
 800aaac:	4013      	ands	r3, r2
 800aaae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	691a      	ldr	r2, [r3, #16]
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	f003 0307 	and.w	r3, r3, #7
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	fa02 f303 	lsl.w	r3, r2, r3
 800aac0:	693a      	ldr	r2, [r7, #16]
 800aac2:	4313      	orrs	r3, r2
 800aac4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	08da      	lsrs	r2, r3, #3
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	3208      	adds	r2, #8
 800aace:	6939      	ldr	r1, [r7, #16]
 800aad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	005b      	lsls	r3, r3, #1
 800aade:	2203      	movs	r2, #3
 800aae0:	fa02 f303 	lsl.w	r3, r2, r3
 800aae4:	43db      	mvns	r3, r3
 800aae6:	693a      	ldr	r2, [r7, #16]
 800aae8:	4013      	ands	r3, r2
 800aaea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	f003 0203 	and.w	r2, r3, #3
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	005b      	lsls	r3, r3, #1
 800aaf8:	fa02 f303 	lsl.w	r3, r2, r3
 800aafc:	693a      	ldr	r2, [r7, #16]
 800aafe:	4313      	orrs	r3, r2
 800ab00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	693a      	ldr	r2, [r7, #16]
 800ab06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	f000 80ac 	beq.w	800ac6e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ab16:	4b5e      	ldr	r3, [pc, #376]	; (800ac90 <HAL_GPIO_Init+0x32c>)
 800ab18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab1a:	4a5d      	ldr	r2, [pc, #372]	; (800ac90 <HAL_GPIO_Init+0x32c>)
 800ab1c:	f043 0301 	orr.w	r3, r3, #1
 800ab20:	6613      	str	r3, [r2, #96]	; 0x60
 800ab22:	4b5b      	ldr	r3, [pc, #364]	; (800ac90 <HAL_GPIO_Init+0x32c>)
 800ab24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab26:	f003 0301 	and.w	r3, r3, #1
 800ab2a:	60bb      	str	r3, [r7, #8]
 800ab2c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800ab2e:	4a59      	ldr	r2, [pc, #356]	; (800ac94 <HAL_GPIO_Init+0x330>)
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	089b      	lsrs	r3, r3, #2
 800ab34:	3302      	adds	r3, #2
 800ab36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	f003 0303 	and.w	r3, r3, #3
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	220f      	movs	r2, #15
 800ab46:	fa02 f303 	lsl.w	r3, r2, r3
 800ab4a:	43db      	mvns	r3, r3
 800ab4c:	693a      	ldr	r2, [r7, #16]
 800ab4e:	4013      	ands	r3, r2
 800ab50:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800ab58:	d025      	beq.n	800aba6 <HAL_GPIO_Init+0x242>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a4e      	ldr	r2, [pc, #312]	; (800ac98 <HAL_GPIO_Init+0x334>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d01f      	beq.n	800aba2 <HAL_GPIO_Init+0x23e>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a4d      	ldr	r2, [pc, #308]	; (800ac9c <HAL_GPIO_Init+0x338>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d019      	beq.n	800ab9e <HAL_GPIO_Init+0x23a>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4a4c      	ldr	r2, [pc, #304]	; (800aca0 <HAL_GPIO_Init+0x33c>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d013      	beq.n	800ab9a <HAL_GPIO_Init+0x236>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4a4b      	ldr	r2, [pc, #300]	; (800aca4 <HAL_GPIO_Init+0x340>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d00d      	beq.n	800ab96 <HAL_GPIO_Init+0x232>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4a4a      	ldr	r2, [pc, #296]	; (800aca8 <HAL_GPIO_Init+0x344>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d007      	beq.n	800ab92 <HAL_GPIO_Init+0x22e>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4a49      	ldr	r2, [pc, #292]	; (800acac <HAL_GPIO_Init+0x348>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d101      	bne.n	800ab8e <HAL_GPIO_Init+0x22a>
 800ab8a:	2306      	movs	r3, #6
 800ab8c:	e00c      	b.n	800aba8 <HAL_GPIO_Init+0x244>
 800ab8e:	2307      	movs	r3, #7
 800ab90:	e00a      	b.n	800aba8 <HAL_GPIO_Init+0x244>
 800ab92:	2305      	movs	r3, #5
 800ab94:	e008      	b.n	800aba8 <HAL_GPIO_Init+0x244>
 800ab96:	2304      	movs	r3, #4
 800ab98:	e006      	b.n	800aba8 <HAL_GPIO_Init+0x244>
 800ab9a:	2303      	movs	r3, #3
 800ab9c:	e004      	b.n	800aba8 <HAL_GPIO_Init+0x244>
 800ab9e:	2302      	movs	r3, #2
 800aba0:	e002      	b.n	800aba8 <HAL_GPIO_Init+0x244>
 800aba2:	2301      	movs	r3, #1
 800aba4:	e000      	b.n	800aba8 <HAL_GPIO_Init+0x244>
 800aba6:	2300      	movs	r3, #0
 800aba8:	697a      	ldr	r2, [r7, #20]
 800abaa:	f002 0203 	and.w	r2, r2, #3
 800abae:	0092      	lsls	r2, r2, #2
 800abb0:	4093      	lsls	r3, r2
 800abb2:	693a      	ldr	r2, [r7, #16]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800abb8:	4936      	ldr	r1, [pc, #216]	; (800ac94 <HAL_GPIO_Init+0x330>)
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	089b      	lsrs	r3, r3, #2
 800abbe:	3302      	adds	r3, #2
 800abc0:	693a      	ldr	r2, [r7, #16]
 800abc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800abc6:	4b3a      	ldr	r3, [pc, #232]	; (800acb0 <HAL_GPIO_Init+0x34c>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	43db      	mvns	r3, r3
 800abd0:	693a      	ldr	r2, [r7, #16]
 800abd2:	4013      	ands	r3, r2
 800abd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d003      	beq.n	800abea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800abe2:	693a      	ldr	r2, [r7, #16]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800abea:	4a31      	ldr	r2, [pc, #196]	; (800acb0 <HAL_GPIO_Init+0x34c>)
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800abf0:	4b2f      	ldr	r3, [pc, #188]	; (800acb0 <HAL_GPIO_Init+0x34c>)
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	43db      	mvns	r3, r3
 800abfa:	693a      	ldr	r2, [r7, #16]
 800abfc:	4013      	ands	r3, r2
 800abfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d003      	beq.n	800ac14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800ac0c:	693a      	ldr	r2, [r7, #16]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	4313      	orrs	r3, r2
 800ac12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800ac14:	4a26      	ldr	r2, [pc, #152]	; (800acb0 <HAL_GPIO_Init+0x34c>)
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ac1a:	4b25      	ldr	r3, [pc, #148]	; (800acb0 <HAL_GPIO_Init+0x34c>)
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	43db      	mvns	r3, r3
 800ac24:	693a      	ldr	r2, [r7, #16]
 800ac26:	4013      	ands	r3, r2
 800ac28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d003      	beq.n	800ac3e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800ac36:	693a      	ldr	r2, [r7, #16]
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800ac3e:	4a1c      	ldr	r2, [pc, #112]	; (800acb0 <HAL_GPIO_Init+0x34c>)
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800ac44:	4b1a      	ldr	r3, [pc, #104]	; (800acb0 <HAL_GPIO_Init+0x34c>)
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	43db      	mvns	r3, r3
 800ac4e:	693a      	ldr	r2, [r7, #16]
 800ac50:	4013      	ands	r3, r2
 800ac52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d003      	beq.n	800ac68 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800ac60:	693a      	ldr	r2, [r7, #16]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	4313      	orrs	r3, r2
 800ac66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800ac68:	4a11      	ldr	r2, [pc, #68]	; (800acb0 <HAL_GPIO_Init+0x34c>)
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	3301      	adds	r3, #1
 800ac72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	f47f ae78 	bne.w	800a974 <HAL_GPIO_Init+0x10>
  }
}
 800ac84:	bf00      	nop
 800ac86:	371c      	adds	r7, #28
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr
 800ac90:	40021000 	.word	0x40021000
 800ac94:	40010000 	.word	0x40010000
 800ac98:	48000400 	.word	0x48000400
 800ac9c:	48000800 	.word	0x48000800
 800aca0:	48000c00 	.word	0x48000c00
 800aca4:	48001000 	.word	0x48001000
 800aca8:	48001400 	.word	0x48001400
 800acac:	48001800 	.word	0x48001800
 800acb0:	40010400 	.word	0x40010400

0800acb4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b087      	sub	sp, #28
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800acbe:	2300      	movs	r3, #0
 800acc0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800acc2:	e0cd      	b.n	800ae60 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800acc4:	2201      	movs	r2, #1
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	fa02 f303 	lsl.w	r3, r2, r3
 800accc:	683a      	ldr	r2, [r7, #0]
 800acce:	4013      	ands	r3, r2
 800acd0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f000 80c0 	beq.w	800ae5a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800acda:	4a68      	ldr	r2, [pc, #416]	; (800ae7c <HAL_GPIO_DeInit+0x1c8>)
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	089b      	lsrs	r3, r3, #2
 800ace0:	3302      	adds	r3, #2
 800ace2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ace6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	f003 0303 	and.w	r3, r3, #3
 800acee:	009b      	lsls	r3, r3, #2
 800acf0:	220f      	movs	r2, #15
 800acf2:	fa02 f303 	lsl.w	r3, r2, r3
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	4013      	ands	r3, r2
 800acfa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800ad02:	d025      	beq.n	800ad50 <HAL_GPIO_DeInit+0x9c>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4a5e      	ldr	r2, [pc, #376]	; (800ae80 <HAL_GPIO_DeInit+0x1cc>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d01f      	beq.n	800ad4c <HAL_GPIO_DeInit+0x98>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	4a5d      	ldr	r2, [pc, #372]	; (800ae84 <HAL_GPIO_DeInit+0x1d0>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d019      	beq.n	800ad48 <HAL_GPIO_DeInit+0x94>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	4a5c      	ldr	r2, [pc, #368]	; (800ae88 <HAL_GPIO_DeInit+0x1d4>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d013      	beq.n	800ad44 <HAL_GPIO_DeInit+0x90>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	4a5b      	ldr	r2, [pc, #364]	; (800ae8c <HAL_GPIO_DeInit+0x1d8>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d00d      	beq.n	800ad40 <HAL_GPIO_DeInit+0x8c>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4a5a      	ldr	r2, [pc, #360]	; (800ae90 <HAL_GPIO_DeInit+0x1dc>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d007      	beq.n	800ad3c <HAL_GPIO_DeInit+0x88>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4a59      	ldr	r2, [pc, #356]	; (800ae94 <HAL_GPIO_DeInit+0x1e0>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d101      	bne.n	800ad38 <HAL_GPIO_DeInit+0x84>
 800ad34:	2306      	movs	r3, #6
 800ad36:	e00c      	b.n	800ad52 <HAL_GPIO_DeInit+0x9e>
 800ad38:	2307      	movs	r3, #7
 800ad3a:	e00a      	b.n	800ad52 <HAL_GPIO_DeInit+0x9e>
 800ad3c:	2305      	movs	r3, #5
 800ad3e:	e008      	b.n	800ad52 <HAL_GPIO_DeInit+0x9e>
 800ad40:	2304      	movs	r3, #4
 800ad42:	e006      	b.n	800ad52 <HAL_GPIO_DeInit+0x9e>
 800ad44:	2303      	movs	r3, #3
 800ad46:	e004      	b.n	800ad52 <HAL_GPIO_DeInit+0x9e>
 800ad48:	2302      	movs	r3, #2
 800ad4a:	e002      	b.n	800ad52 <HAL_GPIO_DeInit+0x9e>
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e000      	b.n	800ad52 <HAL_GPIO_DeInit+0x9e>
 800ad50:	2300      	movs	r3, #0
 800ad52:	697a      	ldr	r2, [r7, #20]
 800ad54:	f002 0203 	and.w	r2, r2, #3
 800ad58:	0092      	lsls	r2, r2, #2
 800ad5a:	4093      	lsls	r3, r2
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d132      	bne.n	800adc8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800ad62:	4b4d      	ldr	r3, [pc, #308]	; (800ae98 <HAL_GPIO_DeInit+0x1e4>)
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	43db      	mvns	r3, r3
 800ad6a:	494b      	ldr	r1, [pc, #300]	; (800ae98 <HAL_GPIO_DeInit+0x1e4>)
 800ad6c:	4013      	ands	r3, r2
 800ad6e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800ad70:	4b49      	ldr	r3, [pc, #292]	; (800ae98 <HAL_GPIO_DeInit+0x1e4>)
 800ad72:	685a      	ldr	r2, [r3, #4]
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	43db      	mvns	r3, r3
 800ad78:	4947      	ldr	r1, [pc, #284]	; (800ae98 <HAL_GPIO_DeInit+0x1e4>)
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800ad7e:	4b46      	ldr	r3, [pc, #280]	; (800ae98 <HAL_GPIO_DeInit+0x1e4>)
 800ad80:	689a      	ldr	r2, [r3, #8]
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	43db      	mvns	r3, r3
 800ad86:	4944      	ldr	r1, [pc, #272]	; (800ae98 <HAL_GPIO_DeInit+0x1e4>)
 800ad88:	4013      	ands	r3, r2
 800ad8a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800ad8c:	4b42      	ldr	r3, [pc, #264]	; (800ae98 <HAL_GPIO_DeInit+0x1e4>)
 800ad8e:	68da      	ldr	r2, [r3, #12]
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	43db      	mvns	r3, r3
 800ad94:	4940      	ldr	r1, [pc, #256]	; (800ae98 <HAL_GPIO_DeInit+0x1e4>)
 800ad96:	4013      	ands	r3, r2
 800ad98:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	f003 0303 	and.w	r3, r3, #3
 800ada0:	009b      	lsls	r3, r3, #2
 800ada2:	220f      	movs	r2, #15
 800ada4:	fa02 f303 	lsl.w	r3, r2, r3
 800ada8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800adaa:	4a34      	ldr	r2, [pc, #208]	; (800ae7c <HAL_GPIO_DeInit+0x1c8>)
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	089b      	lsrs	r3, r3, #2
 800adb0:	3302      	adds	r3, #2
 800adb2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	43da      	mvns	r2, r3
 800adba:	4830      	ldr	r0, [pc, #192]	; (800ae7c <HAL_GPIO_DeInit+0x1c8>)
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	089b      	lsrs	r3, r3, #2
 800adc0:	400a      	ands	r2, r1
 800adc2:	3302      	adds	r3, #2
 800adc4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	005b      	lsls	r3, r3, #1
 800add0:	2103      	movs	r1, #3
 800add2:	fa01 f303 	lsl.w	r3, r1, r3
 800add6:	431a      	orrs	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	08da      	lsrs	r2, r3, #3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	3208      	adds	r2, #8
 800ade4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	f003 0307 	and.w	r3, r3, #7
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	220f      	movs	r2, #15
 800adf2:	fa02 f303 	lsl.w	r3, r2, r3
 800adf6:	43db      	mvns	r3, r3
 800adf8:	697a      	ldr	r2, [r7, #20]
 800adfa:	08d2      	lsrs	r2, r2, #3
 800adfc:	4019      	ands	r1, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	3208      	adds	r2, #8
 800ae02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	689a      	ldr	r2, [r3, #8]
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	005b      	lsls	r3, r3, #1
 800ae0e:	2103      	movs	r1, #3
 800ae10:	fa01 f303 	lsl.w	r3, r1, r3
 800ae14:	43db      	mvns	r3, r3
 800ae16:	401a      	ands	r2, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	685a      	ldr	r2, [r3, #4]
 800ae20:	2101      	movs	r1, #1
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	fa01 f303 	lsl.w	r3, r1, r3
 800ae28:	43db      	mvns	r3, r3
 800ae2a:	401a      	ands	r2, r3
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	68da      	ldr	r2, [r3, #12]
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	005b      	lsls	r3, r3, #1
 800ae38:	2103      	movs	r1, #3
 800ae3a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae3e:	43db      	mvns	r3, r3
 800ae40:	401a      	ands	r2, r3
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae4a:	2101      	movs	r1, #1
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae52:	43db      	mvns	r3, r3
 800ae54:	401a      	ands	r2, r3
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800ae60:	683a      	ldr	r2, [r7, #0]
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	fa22 f303 	lsr.w	r3, r2, r3
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f47f af2b 	bne.w	800acc4 <HAL_GPIO_DeInit+0x10>
  }
}
 800ae6e:	bf00      	nop
 800ae70:	371c      	adds	r7, #28
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr
 800ae7a:	bf00      	nop
 800ae7c:	40010000 	.word	0x40010000
 800ae80:	48000400 	.word	0x48000400
 800ae84:	48000800 	.word	0x48000800
 800ae88:	48000c00 	.word	0x48000c00
 800ae8c:	48001000 	.word	0x48001000
 800ae90:	48001400 	.word	0x48001400
 800ae94:	48001800 	.word	0x48001800
 800ae98:	40010400 	.word	0x40010400

0800ae9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b085      	sub	sp, #20
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	460b      	mov	r3, r1
 800aea6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	691a      	ldr	r2, [r3, #16]
 800aeac:	887b      	ldrh	r3, [r7, #2]
 800aeae:	4013      	ands	r3, r2
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d002      	beq.n	800aeba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	73fb      	strb	r3, [r7, #15]
 800aeb8:	e001      	b.n	800aebe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800aeba:	2300      	movs	r3, #0
 800aebc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800aebe:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3714      	adds	r7, #20
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aecc:	b480      	push	{r7}
 800aece:	b083      	sub	sp, #12
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	460b      	mov	r3, r1
 800aed6:	807b      	strh	r3, [r7, #2]
 800aed8:	4613      	mov	r3, r2
 800aeda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800aedc:	787b      	ldrb	r3, [r7, #1]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d003      	beq.n	800aeea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800aee2:	887a      	ldrh	r2, [r7, #2]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800aee8:	e002      	b.n	800aef0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800aeea:	887a      	ldrh	r2, [r7, #2]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	629a      	str	r2, [r3, #40]	; 0x28
}
 800aef0:	bf00      	nop
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b085      	sub	sp, #20
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	460b      	mov	r3, r1
 800af06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	695b      	ldr	r3, [r3, #20]
 800af0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800af0e:	887a      	ldrh	r2, [r7, #2]
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	4013      	ands	r3, r2
 800af14:	041a      	lsls	r2, r3, #16
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	43d9      	mvns	r1, r3
 800af1a:	887b      	ldrh	r3, [r7, #2]
 800af1c:	400b      	ands	r3, r1
 800af1e:	431a      	orrs	r2, r3
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	619a      	str	r2, [r3, #24]
}
 800af24:	bf00      	nop
 800af26:	3714      	adds	r7, #20
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	4603      	mov	r3, r0
 800af38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800af3a:	4b08      	ldr	r3, [pc, #32]	; (800af5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800af3c:	695a      	ldr	r2, [r3, #20]
 800af3e:	88fb      	ldrh	r3, [r7, #6]
 800af40:	4013      	ands	r3, r2
 800af42:	2b00      	cmp	r3, #0
 800af44:	d006      	beq.n	800af54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800af46:	4a05      	ldr	r2, [pc, #20]	; (800af5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800af48:	88fb      	ldrh	r3, [r7, #6]
 800af4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800af4c:	88fb      	ldrh	r3, [r7, #6]
 800af4e:	4618      	mov	r0, r3
 800af50:	f7f8 feca 	bl	8003ce8 <HAL_GPIO_EXTI_Callback>
  }
}
 800af54:	bf00      	nop
 800af56:	3708      	adds	r7, #8
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	40010400 	.word	0x40010400

0800af60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d101      	bne.n	800af72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	e081      	b.n	800b076 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af78:	b2db      	uxtb	r3, r3
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d106      	bne.n	800af8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2200      	movs	r2, #0
 800af82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f7f8 ff44 	bl	8003e14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2224      	movs	r2, #36	; 0x24
 800af90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f022 0201 	bic.w	r2, r2, #1
 800afa2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	685a      	ldr	r2, [r3, #4]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800afb0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	689a      	ldr	r2, [r3, #8]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800afc0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	d107      	bne.n	800afda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	689a      	ldr	r2, [r3, #8]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800afd6:	609a      	str	r2, [r3, #8]
 800afd8:	e006      	b.n	800afe8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	689a      	ldr	r2, [r3, #8]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800afe6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	2b02      	cmp	r3, #2
 800afee:	d104      	bne.n	800affa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aff8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	6812      	ldr	r2, [r2, #0]
 800b004:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b00c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	68da      	ldr	r2, [r3, #12]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b01c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	691a      	ldr	r2, [r3, #16]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	695b      	ldr	r3, [r3, #20]
 800b026:	ea42 0103 	orr.w	r1, r2, r3
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	699b      	ldr	r3, [r3, #24]
 800b02e:	021a      	lsls	r2, r3, #8
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	430a      	orrs	r2, r1
 800b036:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	69d9      	ldr	r1, [r3, #28]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6a1a      	ldr	r2, [r3, #32]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	430a      	orrs	r2, r1
 800b046:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	681a      	ldr	r2, [r3, #0]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f042 0201 	orr.w	r2, r2, #1
 800b056:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2200      	movs	r2, #0
 800b05c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2220      	movs	r2, #32
 800b062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2200      	movs	r2, #0
 800b06a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b074:	2300      	movs	r3, #0
}
 800b076:	4618      	mov	r0, r3
 800b078:	3708      	adds	r7, #8
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}

0800b07e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b07e:	b580      	push	{r7, lr}
 800b080:	b082      	sub	sp, #8
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d101      	bne.n	800b090 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b08c:	2301      	movs	r3, #1
 800b08e:	e021      	b.n	800b0d4 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2224      	movs	r2, #36	; 0x24
 800b094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f022 0201 	bic.w	r2, r2, #1
 800b0a6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f7f8 fef7 	bl	8003e9c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b0d2:	2300      	movs	r3, #0
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3708      	adds	r7, #8
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b088      	sub	sp, #32
 800b0e0:	af02      	add	r7, sp, #8
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	607a      	str	r2, [r7, #4]
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	817b      	strh	r3, [r7, #10]
 800b0ec:	4613      	mov	r3, r2
 800b0ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	2b20      	cmp	r3, #32
 800b0fa:	f040 80da 	bne.w	800b2b2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b104:	2b01      	cmp	r3, #1
 800b106:	d101      	bne.n	800b10c <HAL_I2C_Master_Transmit+0x30>
 800b108:	2302      	movs	r3, #2
 800b10a:	e0d3      	b.n	800b2b4 <HAL_I2C_Master_Transmit+0x1d8>
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2201      	movs	r2, #1
 800b110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b114:	f7ff f998 	bl	800a448 <HAL_GetTick>
 800b118:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	9300      	str	r3, [sp, #0]
 800b11e:	2319      	movs	r3, #25
 800b120:	2201      	movs	r2, #1
 800b122:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b126:	68f8      	ldr	r0, [r7, #12]
 800b128:	f000 fcbc 	bl	800baa4 <I2C_WaitOnFlagUntilTimeout>
 800b12c:	4603      	mov	r3, r0
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d001      	beq.n	800b136 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800b132:	2301      	movs	r3, #1
 800b134:	e0be      	b.n	800b2b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2221      	movs	r2, #33	; 0x21
 800b13a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2210      	movs	r2, #16
 800b142:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2200      	movs	r2, #0
 800b14a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	893a      	ldrh	r2, [r7, #8]
 800b156:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2200      	movs	r2, #0
 800b15c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b162:	b29b      	uxth	r3, r3
 800b164:	2bff      	cmp	r3, #255	; 0xff
 800b166:	d90e      	bls.n	800b186 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	22ff      	movs	r2, #255	; 0xff
 800b16c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b172:	b2da      	uxtb	r2, r3
 800b174:	8979      	ldrh	r1, [r7, #10]
 800b176:	4b51      	ldr	r3, [pc, #324]	; (800b2bc <HAL_I2C_Master_Transmit+0x1e0>)
 800b178:	9300      	str	r3, [sp, #0]
 800b17a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b17e:	68f8      	ldr	r0, [r7, #12]
 800b180:	f000 fe1e 	bl	800bdc0 <I2C_TransferConfig>
 800b184:	e06c      	b.n	800b260 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b18a:	b29a      	uxth	r2, r3
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b194:	b2da      	uxtb	r2, r3
 800b196:	8979      	ldrh	r1, [r7, #10]
 800b198:	4b48      	ldr	r3, [pc, #288]	; (800b2bc <HAL_I2C_Master_Transmit+0x1e0>)
 800b19a:	9300      	str	r3, [sp, #0]
 800b19c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f000 fe0d 	bl	800bdc0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800b1a6:	e05b      	b.n	800b260 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b1a8:	697a      	ldr	r2, [r7, #20]
 800b1aa:	6a39      	ldr	r1, [r7, #32]
 800b1ac:	68f8      	ldr	r0, [r7, #12]
 800b1ae:	f000 fcb9 	bl	800bb24 <I2C_WaitOnTXISFlagUntilTimeout>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d001      	beq.n	800b1bc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	e07b      	b.n	800b2b4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c0:	781a      	ldrb	r2, [r3, #0]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1cc:	1c5a      	adds	r2, r3, #1
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1d6:	b29b      	uxth	r3, r3
 800b1d8:	3b01      	subs	r3, #1
 800b1da:	b29a      	uxth	r2, r3
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1e4:	3b01      	subs	r3, #1
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d034      	beq.n	800b260 <HAL_I2C_Master_Transmit+0x184>
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d130      	bne.n	800b260 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	9300      	str	r3, [sp, #0]
 800b202:	6a3b      	ldr	r3, [r7, #32]
 800b204:	2200      	movs	r2, #0
 800b206:	2180      	movs	r1, #128	; 0x80
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f000 fc4b 	bl	800baa4 <I2C_WaitOnFlagUntilTimeout>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d001      	beq.n	800b218 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800b214:	2301      	movs	r3, #1
 800b216:	e04d      	b.n	800b2b4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	2bff      	cmp	r3, #255	; 0xff
 800b220:	d90e      	bls.n	800b240 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	22ff      	movs	r2, #255	; 0xff
 800b226:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b22c:	b2da      	uxtb	r2, r3
 800b22e:	8979      	ldrh	r1, [r7, #10]
 800b230:	2300      	movs	r3, #0
 800b232:	9300      	str	r3, [sp, #0]
 800b234:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f000 fdc1 	bl	800bdc0 <I2C_TransferConfig>
 800b23e:	e00f      	b.n	800b260 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b244:	b29a      	uxth	r2, r3
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b24e:	b2da      	uxtb	r2, r3
 800b250:	8979      	ldrh	r1, [r7, #10]
 800b252:	2300      	movs	r3, #0
 800b254:	9300      	str	r3, [sp, #0]
 800b256:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f000 fdb0 	bl	800bdc0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b264:	b29b      	uxth	r3, r3
 800b266:	2b00      	cmp	r3, #0
 800b268:	d19e      	bne.n	800b1a8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b26a:	697a      	ldr	r2, [r7, #20]
 800b26c:	6a39      	ldr	r1, [r7, #32]
 800b26e:	68f8      	ldr	r0, [r7, #12]
 800b270:	f000 fc98 	bl	800bba4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b274:	4603      	mov	r3, r0
 800b276:	2b00      	cmp	r3, #0
 800b278:	d001      	beq.n	800b27e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800b27a:	2301      	movs	r3, #1
 800b27c:	e01a      	b.n	800b2b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	2220      	movs	r2, #32
 800b284:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	6859      	ldr	r1, [r3, #4]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	4b0b      	ldr	r3, [pc, #44]	; (800b2c0 <HAL_I2C_Master_Transmit+0x1e4>)
 800b292:	400b      	ands	r3, r1
 800b294:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2220      	movs	r2, #32
 800b29a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	e000      	b.n	800b2b4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800b2b2:	2302      	movs	r3, #2
  }
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3718      	adds	r7, #24
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}
 800b2bc:	80002000 	.word	0x80002000
 800b2c0:	fe00e800 	.word	0xfe00e800

0800b2c4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b088      	sub	sp, #32
 800b2c8:	af02      	add	r7, sp, #8
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	607a      	str	r2, [r7, #4]
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	817b      	strh	r3, [r7, #10]
 800b2d4:	4613      	mov	r3, r2
 800b2d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	2b20      	cmp	r3, #32
 800b2e2:	f040 80db 	bne.w	800b49c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d101      	bne.n	800b2f4 <HAL_I2C_Master_Receive+0x30>
 800b2f0:	2302      	movs	r3, #2
 800b2f2:	e0d4      	b.n	800b49e <HAL_I2C_Master_Receive+0x1da>
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b2fc:	f7ff f8a4 	bl	800a448 <HAL_GetTick>
 800b300:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	9300      	str	r3, [sp, #0]
 800b306:	2319      	movs	r3, #25
 800b308:	2201      	movs	r2, #1
 800b30a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b30e:	68f8      	ldr	r0, [r7, #12]
 800b310:	f000 fbc8 	bl	800baa4 <I2C_WaitOnFlagUntilTimeout>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d001      	beq.n	800b31e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800b31a:	2301      	movs	r3, #1
 800b31c:	e0bf      	b.n	800b49e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2222      	movs	r2, #34	; 0x22
 800b322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2210      	movs	r2, #16
 800b32a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2200      	movs	r2, #0
 800b332:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	687a      	ldr	r2, [r7, #4]
 800b338:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	893a      	ldrh	r2, [r7, #8]
 800b33e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2200      	movs	r2, #0
 800b344:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b34a:	b29b      	uxth	r3, r3
 800b34c:	2bff      	cmp	r3, #255	; 0xff
 800b34e:	d90e      	bls.n	800b36e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	22ff      	movs	r2, #255	; 0xff
 800b354:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b35a:	b2da      	uxtb	r2, r3
 800b35c:	8979      	ldrh	r1, [r7, #10]
 800b35e:	4b52      	ldr	r3, [pc, #328]	; (800b4a8 <HAL_I2C_Master_Receive+0x1e4>)
 800b360:	9300      	str	r3, [sp, #0]
 800b362:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	f000 fd2a 	bl	800bdc0 <I2C_TransferConfig>
 800b36c:	e06d      	b.n	800b44a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b372:	b29a      	uxth	r2, r3
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b37c:	b2da      	uxtb	r2, r3
 800b37e:	8979      	ldrh	r1, [r7, #10]
 800b380:	4b49      	ldr	r3, [pc, #292]	; (800b4a8 <HAL_I2C_Master_Receive+0x1e4>)
 800b382:	9300      	str	r3, [sp, #0]
 800b384:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b388:	68f8      	ldr	r0, [r7, #12]
 800b38a:	f000 fd19 	bl	800bdc0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800b38e:	e05c      	b.n	800b44a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b390:	697a      	ldr	r2, [r7, #20]
 800b392:	6a39      	ldr	r1, [r7, #32]
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	f000 fc41 	bl	800bc1c <I2C_WaitOnRXNEFlagUntilTimeout>
 800b39a:	4603      	mov	r3, r0
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d001      	beq.n	800b3a4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	e07c      	b.n	800b49e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ae:	b2d2      	uxtb	r2, r2
 800b3b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b6:	1c5a      	adds	r2, r3, #1
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3c0:	3b01      	subs	r3, #1
 800b3c2:	b29a      	uxth	r2, r3
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	b29a      	uxth	r2, r3
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d034      	beq.n	800b44a <HAL_I2C_Master_Receive+0x186>
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d130      	bne.n	800b44a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	9300      	str	r3, [sp, #0]
 800b3ec:	6a3b      	ldr	r3, [r7, #32]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	2180      	movs	r1, #128	; 0x80
 800b3f2:	68f8      	ldr	r0, [r7, #12]
 800b3f4:	f000 fb56 	bl	800baa4 <I2C_WaitOnFlagUntilTimeout>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d001      	beq.n	800b402 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800b3fe:	2301      	movs	r3, #1
 800b400:	e04d      	b.n	800b49e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b406:	b29b      	uxth	r3, r3
 800b408:	2bff      	cmp	r3, #255	; 0xff
 800b40a:	d90e      	bls.n	800b42a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	22ff      	movs	r2, #255	; 0xff
 800b410:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b416:	b2da      	uxtb	r2, r3
 800b418:	8979      	ldrh	r1, [r7, #10]
 800b41a:	2300      	movs	r3, #0
 800b41c:	9300      	str	r3, [sp, #0]
 800b41e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	f000 fccc 	bl	800bdc0 <I2C_TransferConfig>
 800b428:	e00f      	b.n	800b44a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b42e:	b29a      	uxth	r2, r3
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b438:	b2da      	uxtb	r2, r3
 800b43a:	8979      	ldrh	r1, [r7, #10]
 800b43c:	2300      	movs	r3, #0
 800b43e:	9300      	str	r3, [sp, #0]
 800b440:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	f000 fcbb 	bl	800bdc0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b44e:	b29b      	uxth	r3, r3
 800b450:	2b00      	cmp	r3, #0
 800b452:	d19d      	bne.n	800b390 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b454:	697a      	ldr	r2, [r7, #20]
 800b456:	6a39      	ldr	r1, [r7, #32]
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	f000 fba3 	bl	800bba4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d001      	beq.n	800b468 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800b464:	2301      	movs	r3, #1
 800b466:	e01a      	b.n	800b49e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2220      	movs	r2, #32
 800b46e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	6859      	ldr	r1, [r3, #4]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	4b0c      	ldr	r3, [pc, #48]	; (800b4ac <HAL_I2C_Master_Receive+0x1e8>)
 800b47c:	400b      	ands	r3, r1
 800b47e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2220      	movs	r2, #32
 800b484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2200      	movs	r2, #0
 800b48c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2200      	movs	r2, #0
 800b494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b498:	2300      	movs	r3, #0
 800b49a:	e000      	b.n	800b49e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800b49c:	2302      	movs	r3, #2
  }
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3718      	adds	r7, #24
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	80002400 	.word	0x80002400
 800b4ac:	fe00e800 	.word	0xfe00e800

0800b4b0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b088      	sub	sp, #32
 800b4b4:	af02      	add	r7, sp, #8
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	4608      	mov	r0, r1
 800b4ba:	4611      	mov	r1, r2
 800b4bc:	461a      	mov	r2, r3
 800b4be:	4603      	mov	r3, r0
 800b4c0:	817b      	strh	r3, [r7, #10]
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	813b      	strh	r3, [r7, #8]
 800b4c6:	4613      	mov	r3, r2
 800b4c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	2b20      	cmp	r3, #32
 800b4d4:	f040 80f9 	bne.w	800b6ca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4d8:	6a3b      	ldr	r3, [r7, #32]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d002      	beq.n	800b4e4 <HAL_I2C_Mem_Write+0x34>
 800b4de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d105      	bne.n	800b4f0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	e0ed      	b.n	800b6cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d101      	bne.n	800b4fe <HAL_I2C_Mem_Write+0x4e>
 800b4fa:	2302      	movs	r3, #2
 800b4fc:	e0e6      	b.n	800b6cc <HAL_I2C_Mem_Write+0x21c>
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2201      	movs	r2, #1
 800b502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b506:	f7fe ff9f 	bl	800a448 <HAL_GetTick>
 800b50a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	9300      	str	r3, [sp, #0]
 800b510:	2319      	movs	r3, #25
 800b512:	2201      	movs	r2, #1
 800b514:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b518:	68f8      	ldr	r0, [r7, #12]
 800b51a:	f000 fac3 	bl	800baa4 <I2C_WaitOnFlagUntilTimeout>
 800b51e:	4603      	mov	r3, r0
 800b520:	2b00      	cmp	r3, #0
 800b522:	d001      	beq.n	800b528 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b524:	2301      	movs	r3, #1
 800b526:	e0d1      	b.n	800b6cc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2221      	movs	r2, #33	; 0x21
 800b52c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2240      	movs	r2, #64	; 0x40
 800b534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2200      	movs	r2, #0
 800b53c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	6a3a      	ldr	r2, [r7, #32]
 800b542:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b548:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2200      	movs	r2, #0
 800b54e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b550:	88f8      	ldrh	r0, [r7, #6]
 800b552:	893a      	ldrh	r2, [r7, #8]
 800b554:	8979      	ldrh	r1, [r7, #10]
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	9301      	str	r3, [sp, #4]
 800b55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55c:	9300      	str	r3, [sp, #0]
 800b55e:	4603      	mov	r3, r0
 800b560:	68f8      	ldr	r0, [r7, #12]
 800b562:	f000 f9d3 	bl	800b90c <I2C_RequestMemoryWrite>
 800b566:	4603      	mov	r3, r0
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d005      	beq.n	800b578 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2200      	movs	r2, #0
 800b570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b574:	2301      	movs	r3, #1
 800b576:	e0a9      	b.n	800b6cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b57c:	b29b      	uxth	r3, r3
 800b57e:	2bff      	cmp	r3, #255	; 0xff
 800b580:	d90e      	bls.n	800b5a0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	22ff      	movs	r2, #255	; 0xff
 800b586:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b58c:	b2da      	uxtb	r2, r3
 800b58e:	8979      	ldrh	r1, [r7, #10]
 800b590:	2300      	movs	r3, #0
 800b592:	9300      	str	r3, [sp, #0]
 800b594:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b598:	68f8      	ldr	r0, [r7, #12]
 800b59a:	f000 fc11 	bl	800bdc0 <I2C_TransferConfig>
 800b59e:	e00f      	b.n	800b5c0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5a4:	b29a      	uxth	r2, r3
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5ae:	b2da      	uxtb	r2, r3
 800b5b0:	8979      	ldrh	r1, [r7, #10]
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	9300      	str	r3, [sp, #0]
 800b5b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b5ba:	68f8      	ldr	r0, [r7, #12]
 800b5bc:	f000 fc00 	bl	800bdc0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b5c0:	697a      	ldr	r2, [r7, #20]
 800b5c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	f000 faad 	bl	800bb24 <I2C_WaitOnTXISFlagUntilTimeout>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d001      	beq.n	800b5d4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	e07b      	b.n	800b6cc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d8:	781a      	ldrb	r2, [r3, #0]
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e4:	1c5a      	adds	r2, r3, #1
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	3b01      	subs	r3, #1
 800b5f2:	b29a      	uxth	r2, r3
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5fc:	3b01      	subs	r3, #1
 800b5fe:	b29a      	uxth	r2, r3
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b608:	b29b      	uxth	r3, r3
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d034      	beq.n	800b678 <HAL_I2C_Mem_Write+0x1c8>
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b612:	2b00      	cmp	r3, #0
 800b614:	d130      	bne.n	800b678 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	9300      	str	r3, [sp, #0]
 800b61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61c:	2200      	movs	r2, #0
 800b61e:	2180      	movs	r1, #128	; 0x80
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	f000 fa3f 	bl	800baa4 <I2C_WaitOnFlagUntilTimeout>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d001      	beq.n	800b630 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b62c:	2301      	movs	r3, #1
 800b62e:	e04d      	b.n	800b6cc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b634:	b29b      	uxth	r3, r3
 800b636:	2bff      	cmp	r3, #255	; 0xff
 800b638:	d90e      	bls.n	800b658 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	22ff      	movs	r2, #255	; 0xff
 800b63e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b644:	b2da      	uxtb	r2, r3
 800b646:	8979      	ldrh	r1, [r7, #10]
 800b648:	2300      	movs	r3, #0
 800b64a:	9300      	str	r3, [sp, #0]
 800b64c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b650:	68f8      	ldr	r0, [r7, #12]
 800b652:	f000 fbb5 	bl	800bdc0 <I2C_TransferConfig>
 800b656:	e00f      	b.n	800b678 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b65c:	b29a      	uxth	r2, r3
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b666:	b2da      	uxtb	r2, r3
 800b668:	8979      	ldrh	r1, [r7, #10]
 800b66a:	2300      	movs	r3, #0
 800b66c:	9300      	str	r3, [sp, #0]
 800b66e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b672:	68f8      	ldr	r0, [r7, #12]
 800b674:	f000 fba4 	bl	800bdc0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d19e      	bne.n	800b5c0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b682:	697a      	ldr	r2, [r7, #20]
 800b684:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b686:	68f8      	ldr	r0, [r7, #12]
 800b688:	f000 fa8c 	bl	800bba4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d001      	beq.n	800b696 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b692:	2301      	movs	r3, #1
 800b694:	e01a      	b.n	800b6cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	2220      	movs	r2, #32
 800b69c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	6859      	ldr	r1, [r3, #4]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681a      	ldr	r2, [r3, #0]
 800b6a8:	4b0a      	ldr	r3, [pc, #40]	; (800b6d4 <HAL_I2C_Mem_Write+0x224>)
 800b6aa:	400b      	ands	r3, r1
 800b6ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2220      	movs	r2, #32
 800b6b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	e000      	b.n	800b6cc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b6ca:	2302      	movs	r3, #2
  }
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3718      	adds	r7, #24
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}
 800b6d4:	fe00e800 	.word	0xfe00e800

0800b6d8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b088      	sub	sp, #32
 800b6dc:	af02      	add	r7, sp, #8
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	4608      	mov	r0, r1
 800b6e2:	4611      	mov	r1, r2
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	817b      	strh	r3, [r7, #10]
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	813b      	strh	r3, [r7, #8]
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	2b20      	cmp	r3, #32
 800b6fc:	f040 80fd 	bne.w	800b8fa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b700:	6a3b      	ldr	r3, [r7, #32]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d002      	beq.n	800b70c <HAL_I2C_Mem_Read+0x34>
 800b706:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d105      	bne.n	800b718 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b712:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b714:	2301      	movs	r3, #1
 800b716:	e0f1      	b.n	800b8fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d101      	bne.n	800b726 <HAL_I2C_Mem_Read+0x4e>
 800b722:	2302      	movs	r3, #2
 800b724:	e0ea      	b.n	800b8fc <HAL_I2C_Mem_Read+0x224>
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2201      	movs	r2, #1
 800b72a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b72e:	f7fe fe8b 	bl	800a448 <HAL_GetTick>
 800b732:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	9300      	str	r3, [sp, #0]
 800b738:	2319      	movs	r3, #25
 800b73a:	2201      	movs	r2, #1
 800b73c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b740:	68f8      	ldr	r0, [r7, #12]
 800b742:	f000 f9af 	bl	800baa4 <I2C_WaitOnFlagUntilTimeout>
 800b746:	4603      	mov	r3, r0
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d001      	beq.n	800b750 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b74c:	2301      	movs	r3, #1
 800b74e:	e0d5      	b.n	800b8fc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2222      	movs	r2, #34	; 0x22
 800b754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2240      	movs	r2, #64	; 0x40
 800b75c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2200      	movs	r2, #0
 800b764:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6a3a      	ldr	r2, [r7, #32]
 800b76a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b770:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2200      	movs	r2, #0
 800b776:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b778:	88f8      	ldrh	r0, [r7, #6]
 800b77a:	893a      	ldrh	r2, [r7, #8]
 800b77c:	8979      	ldrh	r1, [r7, #10]
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	9301      	str	r3, [sp, #4]
 800b782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	4603      	mov	r3, r0
 800b788:	68f8      	ldr	r0, [r7, #12]
 800b78a:	f000 f913 	bl	800b9b4 <I2C_RequestMemoryRead>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	d005      	beq.n	800b7a0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2200      	movs	r2, #0
 800b798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b79c:	2301      	movs	r3, #1
 800b79e:	e0ad      	b.n	800b8fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	2bff      	cmp	r3, #255	; 0xff
 800b7a8:	d90e      	bls.n	800b7c8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	22ff      	movs	r2, #255	; 0xff
 800b7ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7b4:	b2da      	uxtb	r2, r3
 800b7b6:	8979      	ldrh	r1, [r7, #10]
 800b7b8:	4b52      	ldr	r3, [pc, #328]	; (800b904 <HAL_I2C_Mem_Read+0x22c>)
 800b7ba:	9300      	str	r3, [sp, #0]
 800b7bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b7c0:	68f8      	ldr	r0, [r7, #12]
 800b7c2:	f000 fafd 	bl	800bdc0 <I2C_TransferConfig>
 800b7c6:	e00f      	b.n	800b7e8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7cc:	b29a      	uxth	r2, r3
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7d6:	b2da      	uxtb	r2, r3
 800b7d8:	8979      	ldrh	r1, [r7, #10]
 800b7da:	4b4a      	ldr	r3, [pc, #296]	; (800b904 <HAL_I2C_Mem_Read+0x22c>)
 800b7dc:	9300      	str	r3, [sp, #0]
 800b7de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b7e2:	68f8      	ldr	r0, [r7, #12]
 800b7e4:	f000 faec 	bl	800bdc0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	9300      	str	r3, [sp, #0]
 800b7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	2104      	movs	r1, #4
 800b7f2:	68f8      	ldr	r0, [r7, #12]
 800b7f4:	f000 f956 	bl	800baa4 <I2C_WaitOnFlagUntilTimeout>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d001      	beq.n	800b802 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b7fe:	2301      	movs	r3, #1
 800b800:	e07c      	b.n	800b8fc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80c:	b2d2      	uxtb	r2, r2
 800b80e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b814:	1c5a      	adds	r2, r3, #1
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b81e:	3b01      	subs	r3, #1
 800b820:	b29a      	uxth	r2, r3
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b82a:	b29b      	uxth	r3, r3
 800b82c:	3b01      	subs	r3, #1
 800b82e:	b29a      	uxth	r2, r3
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b838:	b29b      	uxth	r3, r3
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d034      	beq.n	800b8a8 <HAL_I2C_Mem_Read+0x1d0>
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b842:	2b00      	cmp	r3, #0
 800b844:	d130      	bne.n	800b8a8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	9300      	str	r3, [sp, #0]
 800b84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84c:	2200      	movs	r2, #0
 800b84e:	2180      	movs	r1, #128	; 0x80
 800b850:	68f8      	ldr	r0, [r7, #12]
 800b852:	f000 f927 	bl	800baa4 <I2C_WaitOnFlagUntilTimeout>
 800b856:	4603      	mov	r3, r0
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d001      	beq.n	800b860 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b85c:	2301      	movs	r3, #1
 800b85e:	e04d      	b.n	800b8fc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b864:	b29b      	uxth	r3, r3
 800b866:	2bff      	cmp	r3, #255	; 0xff
 800b868:	d90e      	bls.n	800b888 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	22ff      	movs	r2, #255	; 0xff
 800b86e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b874:	b2da      	uxtb	r2, r3
 800b876:	8979      	ldrh	r1, [r7, #10]
 800b878:	2300      	movs	r3, #0
 800b87a:	9300      	str	r3, [sp, #0]
 800b87c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b880:	68f8      	ldr	r0, [r7, #12]
 800b882:	f000 fa9d 	bl	800bdc0 <I2C_TransferConfig>
 800b886:	e00f      	b.n	800b8a8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b88c:	b29a      	uxth	r2, r3
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b896:	b2da      	uxtb	r2, r3
 800b898:	8979      	ldrh	r1, [r7, #10]
 800b89a:	2300      	movs	r3, #0
 800b89c:	9300      	str	r3, [sp, #0]
 800b89e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b8a2:	68f8      	ldr	r0, [r7, #12]
 800b8a4:	f000 fa8c 	bl	800bdc0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8ac:	b29b      	uxth	r3, r3
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d19a      	bne.n	800b7e8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b8b2:	697a      	ldr	r2, [r7, #20]
 800b8b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	f000 f974 	bl	800bba4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d001      	beq.n	800b8c6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	e01a      	b.n	800b8fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2220      	movs	r2, #32
 800b8cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	6859      	ldr	r1, [r3, #4]
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	4b0b      	ldr	r3, [pc, #44]	; (800b908 <HAL_I2C_Mem_Read+0x230>)
 800b8da:	400b      	ands	r3, r1
 800b8dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2220      	movs	r2, #32
 800b8e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	e000      	b.n	800b8fc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b8fa:	2302      	movs	r3, #2
  }
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3718      	adds	r7, #24
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}
 800b904:	80002400 	.word	0x80002400
 800b908:	fe00e800 	.word	0xfe00e800

0800b90c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b086      	sub	sp, #24
 800b910:	af02      	add	r7, sp, #8
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	4608      	mov	r0, r1
 800b916:	4611      	mov	r1, r2
 800b918:	461a      	mov	r2, r3
 800b91a:	4603      	mov	r3, r0
 800b91c:	817b      	strh	r3, [r7, #10]
 800b91e:	460b      	mov	r3, r1
 800b920:	813b      	strh	r3, [r7, #8]
 800b922:	4613      	mov	r3, r2
 800b924:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b926:	88fb      	ldrh	r3, [r7, #6]
 800b928:	b2da      	uxtb	r2, r3
 800b92a:	8979      	ldrh	r1, [r7, #10]
 800b92c:	4b20      	ldr	r3, [pc, #128]	; (800b9b0 <I2C_RequestMemoryWrite+0xa4>)
 800b92e:	9300      	str	r3, [sp, #0]
 800b930:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b934:	68f8      	ldr	r0, [r7, #12]
 800b936:	f000 fa43 	bl	800bdc0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b93a:	69fa      	ldr	r2, [r7, #28]
 800b93c:	69b9      	ldr	r1, [r7, #24]
 800b93e:	68f8      	ldr	r0, [r7, #12]
 800b940:	f000 f8f0 	bl	800bb24 <I2C_WaitOnTXISFlagUntilTimeout>
 800b944:	4603      	mov	r3, r0
 800b946:	2b00      	cmp	r3, #0
 800b948:	d001      	beq.n	800b94e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b94a:	2301      	movs	r3, #1
 800b94c:	e02c      	b.n	800b9a8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b94e:	88fb      	ldrh	r3, [r7, #6]
 800b950:	2b01      	cmp	r3, #1
 800b952:	d105      	bne.n	800b960 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b954:	893b      	ldrh	r3, [r7, #8]
 800b956:	b2da      	uxtb	r2, r3
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	629a      	str	r2, [r3, #40]	; 0x28
 800b95e:	e015      	b.n	800b98c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b960:	893b      	ldrh	r3, [r7, #8]
 800b962:	0a1b      	lsrs	r3, r3, #8
 800b964:	b29b      	uxth	r3, r3
 800b966:	b2da      	uxtb	r2, r3
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b96e:	69fa      	ldr	r2, [r7, #28]
 800b970:	69b9      	ldr	r1, [r7, #24]
 800b972:	68f8      	ldr	r0, [r7, #12]
 800b974:	f000 f8d6 	bl	800bb24 <I2C_WaitOnTXISFlagUntilTimeout>
 800b978:	4603      	mov	r3, r0
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d001      	beq.n	800b982 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b97e:	2301      	movs	r3, #1
 800b980:	e012      	b.n	800b9a8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b982:	893b      	ldrh	r3, [r7, #8]
 800b984:	b2da      	uxtb	r2, r3
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b98c:	69fb      	ldr	r3, [r7, #28]
 800b98e:	9300      	str	r3, [sp, #0]
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	2200      	movs	r2, #0
 800b994:	2180      	movs	r1, #128	; 0x80
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	f000 f884 	bl	800baa4 <I2C_WaitOnFlagUntilTimeout>
 800b99c:	4603      	mov	r3, r0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d001      	beq.n	800b9a6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e000      	b.n	800b9a8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800b9a6:	2300      	movs	r3, #0
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3710      	adds	r7, #16
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}
 800b9b0:	80002000 	.word	0x80002000

0800b9b4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b086      	sub	sp, #24
 800b9b8:	af02      	add	r7, sp, #8
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	4608      	mov	r0, r1
 800b9be:	4611      	mov	r1, r2
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	817b      	strh	r3, [r7, #10]
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	813b      	strh	r3, [r7, #8]
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b9ce:	88fb      	ldrh	r3, [r7, #6]
 800b9d0:	b2da      	uxtb	r2, r3
 800b9d2:	8979      	ldrh	r1, [r7, #10]
 800b9d4:	4b20      	ldr	r3, [pc, #128]	; (800ba58 <I2C_RequestMemoryRead+0xa4>)
 800b9d6:	9300      	str	r3, [sp, #0]
 800b9d8:	2300      	movs	r3, #0
 800b9da:	68f8      	ldr	r0, [r7, #12]
 800b9dc:	f000 f9f0 	bl	800bdc0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b9e0:	69fa      	ldr	r2, [r7, #28]
 800b9e2:	69b9      	ldr	r1, [r7, #24]
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f000 f89d 	bl	800bb24 <I2C_WaitOnTXISFlagUntilTimeout>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d001      	beq.n	800b9f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	e02c      	b.n	800ba4e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b9f4:	88fb      	ldrh	r3, [r7, #6]
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d105      	bne.n	800ba06 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b9fa:	893b      	ldrh	r3, [r7, #8]
 800b9fc:	b2da      	uxtb	r2, r3
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	629a      	str	r2, [r3, #40]	; 0x28
 800ba04:	e015      	b.n	800ba32 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ba06:	893b      	ldrh	r3, [r7, #8]
 800ba08:	0a1b      	lsrs	r3, r3, #8
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	b2da      	uxtb	r2, r3
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba14:	69fa      	ldr	r2, [r7, #28]
 800ba16:	69b9      	ldr	r1, [r7, #24]
 800ba18:	68f8      	ldr	r0, [r7, #12]
 800ba1a:	f000 f883 	bl	800bb24 <I2C_WaitOnTXISFlagUntilTimeout>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d001      	beq.n	800ba28 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800ba24:	2301      	movs	r3, #1
 800ba26:	e012      	b.n	800ba4e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ba28:	893b      	ldrh	r3, [r7, #8]
 800ba2a:	b2da      	uxtb	r2, r3
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800ba32:	69fb      	ldr	r3, [r7, #28]
 800ba34:	9300      	str	r3, [sp, #0]
 800ba36:	69bb      	ldr	r3, [r7, #24]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	2140      	movs	r1, #64	; 0x40
 800ba3c:	68f8      	ldr	r0, [r7, #12]
 800ba3e:	f000 f831 	bl	800baa4 <I2C_WaitOnFlagUntilTimeout>
 800ba42:	4603      	mov	r3, r0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d001      	beq.n	800ba4c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e000      	b.n	800ba4e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800ba4c:	2300      	movs	r3, #0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3710      	adds	r7, #16
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop
 800ba58:	80002000 	.word	0x80002000

0800ba5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	699b      	ldr	r3, [r3, #24]
 800ba6a:	f003 0302 	and.w	r3, r3, #2
 800ba6e:	2b02      	cmp	r3, #2
 800ba70:	d103      	bne.n	800ba7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	2200      	movs	r2, #0
 800ba78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	699b      	ldr	r3, [r3, #24]
 800ba80:	f003 0301 	and.w	r3, r3, #1
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d007      	beq.n	800ba98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	699a      	ldr	r2, [r3, #24]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f042 0201 	orr.w	r2, r2, #1
 800ba96:	619a      	str	r2, [r3, #24]
  }
}
 800ba98:	bf00      	nop
 800ba9a:	370c      	adds	r7, #12
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b084      	sub	sp, #16
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	60f8      	str	r0, [r7, #12]
 800baac:	60b9      	str	r1, [r7, #8]
 800baae:	603b      	str	r3, [r7, #0]
 800bab0:	4613      	mov	r3, r2
 800bab2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bab4:	e022      	b.n	800bafc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800babc:	d01e      	beq.n	800bafc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800babe:	f7fe fcc3 	bl	800a448 <HAL_GetTick>
 800bac2:	4602      	mov	r2, r0
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	1ad3      	subs	r3, r2, r3
 800bac8:	683a      	ldr	r2, [r7, #0]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d302      	bcc.n	800bad4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d113      	bne.n	800bafc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bad8:	f043 0220 	orr.w	r2, r3, #32
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2220      	movs	r2, #32
 800bae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2200      	movs	r2, #0
 800baec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2200      	movs	r2, #0
 800baf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800baf8:	2301      	movs	r3, #1
 800bafa:	e00f      	b.n	800bb1c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	699a      	ldr	r2, [r3, #24]
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	4013      	ands	r3, r2
 800bb06:	68ba      	ldr	r2, [r7, #8]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	bf0c      	ite	eq
 800bb0c:	2301      	moveq	r3, #1
 800bb0e:	2300      	movne	r3, #0
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	461a      	mov	r2, r3
 800bb14:	79fb      	ldrb	r3, [r7, #7]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d0cd      	beq.n	800bab6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bb1a:	2300      	movs	r3, #0
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3710      	adds	r7, #16
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b084      	sub	sp, #16
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bb30:	e02c      	b.n	800bb8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb32:	687a      	ldr	r2, [r7, #4]
 800bb34:	68b9      	ldr	r1, [r7, #8]
 800bb36:	68f8      	ldr	r0, [r7, #12]
 800bb38:	f000 f8dc 	bl	800bcf4 <I2C_IsAcknowledgeFailed>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d001      	beq.n	800bb46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bb42:	2301      	movs	r3, #1
 800bb44:	e02a      	b.n	800bb9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb4c:	d01e      	beq.n	800bb8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb4e:	f7fe fc7b 	bl	800a448 <HAL_GetTick>
 800bb52:	4602      	mov	r2, r0
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	1ad3      	subs	r3, r2, r3
 800bb58:	68ba      	ldr	r2, [r7, #8]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d302      	bcc.n	800bb64 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d113      	bne.n	800bb8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb68:	f043 0220 	orr.w	r2, r3, #32
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2220      	movs	r2, #32
 800bb74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2200      	movs	r2, #0
 800bb84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	e007      	b.n	800bb9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	699b      	ldr	r3, [r3, #24]
 800bb92:	f003 0302 	and.w	r3, r3, #2
 800bb96:	2b02      	cmp	r3, #2
 800bb98:	d1cb      	bne.n	800bb32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bb9a:	2300      	movs	r3, #0
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3710      	adds	r7, #16
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b084      	sub	sp, #16
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bbb0:	e028      	b.n	800bc04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	68b9      	ldr	r1, [r7, #8]
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f000 f89c 	bl	800bcf4 <I2C_IsAcknowledgeFailed>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d001      	beq.n	800bbc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	e026      	b.n	800bc14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbc6:	f7fe fc3f 	bl	800a448 <HAL_GetTick>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	1ad3      	subs	r3, r2, r3
 800bbd0:	68ba      	ldr	r2, [r7, #8]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d302      	bcc.n	800bbdc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d113      	bne.n	800bc04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbe0:	f043 0220 	orr.w	r2, r3, #32
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2220      	movs	r2, #32
 800bbec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800bc00:	2301      	movs	r3, #1
 800bc02:	e007      	b.n	800bc14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	699b      	ldr	r3, [r3, #24]
 800bc0a:	f003 0320 	and.w	r3, r3, #32
 800bc0e:	2b20      	cmp	r3, #32
 800bc10:	d1cf      	bne.n	800bbb2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bc12:	2300      	movs	r3, #0
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bc28:	e055      	b.n	800bcd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	68b9      	ldr	r1, [r7, #8]
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f000 f860 	bl	800bcf4 <I2C_IsAcknowledgeFailed>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d001      	beq.n	800bc3e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	e053      	b.n	800bce6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	699b      	ldr	r3, [r3, #24]
 800bc44:	f003 0320 	and.w	r3, r3, #32
 800bc48:	2b20      	cmp	r3, #32
 800bc4a:	d129      	bne.n	800bca0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	699b      	ldr	r3, [r3, #24]
 800bc52:	f003 0304 	and.w	r3, r3, #4
 800bc56:	2b04      	cmp	r3, #4
 800bc58:	d105      	bne.n	800bc66 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d001      	beq.n	800bc66 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800bc62:	2300      	movs	r3, #0
 800bc64:	e03f      	b.n	800bce6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2220      	movs	r2, #32
 800bc6c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	6859      	ldr	r1, [r3, #4]
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	4b1d      	ldr	r3, [pc, #116]	; (800bcf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800bc7a:	400b      	ands	r3, r1
 800bc7c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	2200      	movs	r2, #0
 800bc82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2220      	movs	r2, #32
 800bc88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2200      	movs	r2, #0
 800bc98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	e022      	b.n	800bce6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bca0:	f7fe fbd2 	bl	800a448 <HAL_GetTick>
 800bca4:	4602      	mov	r2, r0
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	1ad3      	subs	r3, r2, r3
 800bcaa:	68ba      	ldr	r2, [r7, #8]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d302      	bcc.n	800bcb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d10f      	bne.n	800bcd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcba:	f043 0220 	orr.w	r2, r3, #32
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2220      	movs	r2, #32
 800bcc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2200      	movs	r2, #0
 800bcce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	e007      	b.n	800bce6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	699b      	ldr	r3, [r3, #24]
 800bcdc:	f003 0304 	and.w	r3, r3, #4
 800bce0:	2b04      	cmp	r3, #4
 800bce2:	d1a2      	bne.n	800bc2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bce4:	2300      	movs	r3, #0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3710      	adds	r7, #16
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	fe00e800 	.word	0xfe00e800

0800bcf4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b084      	sub	sp, #16
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	60b9      	str	r1, [r7, #8]
 800bcfe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	699b      	ldr	r3, [r3, #24]
 800bd06:	f003 0310 	and.w	r3, r3, #16
 800bd0a:	2b10      	cmp	r3, #16
 800bd0c:	d151      	bne.n	800bdb2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bd0e:	e022      	b.n	800bd56 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd16:	d01e      	beq.n	800bd56 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd18:	f7fe fb96 	bl	800a448 <HAL_GetTick>
 800bd1c:	4602      	mov	r2, r0
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	1ad3      	subs	r3, r2, r3
 800bd22:	68ba      	ldr	r2, [r7, #8]
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d302      	bcc.n	800bd2e <I2C_IsAcknowledgeFailed+0x3a>
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d113      	bne.n	800bd56 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd32:	f043 0220 	orr.w	r2, r3, #32
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2220      	movs	r2, #32
 800bd3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2200      	movs	r2, #0
 800bd46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800bd52:	2301      	movs	r3, #1
 800bd54:	e02e      	b.n	800bdb4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	699b      	ldr	r3, [r3, #24]
 800bd5c:	f003 0320 	and.w	r3, r3, #32
 800bd60:	2b20      	cmp	r3, #32
 800bd62:	d1d5      	bne.n	800bd10 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	2210      	movs	r2, #16
 800bd6a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	2220      	movs	r2, #32
 800bd72:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bd74:	68f8      	ldr	r0, [r7, #12]
 800bd76:	f7ff fe71 	bl	800ba5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	6859      	ldr	r1, [r3, #4]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	4b0d      	ldr	r3, [pc, #52]	; (800bdbc <I2C_IsAcknowledgeFailed+0xc8>)
 800bd86:	400b      	ands	r3, r1
 800bd88:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd8e:	f043 0204 	orr.w	r2, r3, #4
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2220      	movs	r2, #32
 800bd9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2200      	movs	r2, #0
 800bda2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e000      	b.n	800bdb4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800bdb2:	2300      	movs	r3, #0
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3710      	adds	r7, #16
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	fe00e800 	.word	0xfe00e800

0800bdc0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b085      	sub	sp, #20
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	60f8      	str	r0, [r7, #12]
 800bdc8:	607b      	str	r3, [r7, #4]
 800bdca:	460b      	mov	r3, r1
 800bdcc:	817b      	strh	r3, [r7, #10]
 800bdce:	4613      	mov	r3, r2
 800bdd0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	685a      	ldr	r2, [r3, #4]
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	0d5b      	lsrs	r3, r3, #21
 800bddc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800bde0:	4b0d      	ldr	r3, [pc, #52]	; (800be18 <I2C_TransferConfig+0x58>)
 800bde2:	430b      	orrs	r3, r1
 800bde4:	43db      	mvns	r3, r3
 800bde6:	ea02 0103 	and.w	r1, r2, r3
 800bdea:	897b      	ldrh	r3, [r7, #10]
 800bdec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bdf0:	7a7b      	ldrb	r3, [r7, #9]
 800bdf2:	041b      	lsls	r3, r3, #16
 800bdf4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bdf8:	431a      	orrs	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	431a      	orrs	r2, r3
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	431a      	orrs	r2, r3
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	430a      	orrs	r2, r1
 800be08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800be0a:	bf00      	nop
 800be0c:	3714      	adds	r7, #20
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr
 800be16:	bf00      	nop
 800be18:	03ff63ff 	.word	0x03ff63ff

0800be1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b083      	sub	sp, #12
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	2b20      	cmp	r3, #32
 800be30:	d138      	bne.n	800bea4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d101      	bne.n	800be40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800be3c:	2302      	movs	r3, #2
 800be3e:	e032      	b.n	800bea6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2201      	movs	r2, #1
 800be44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2224      	movs	r2, #36	; 0x24
 800be4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f022 0201 	bic.w	r2, r2, #1
 800be5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	681a      	ldr	r2, [r3, #0]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800be6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	6819      	ldr	r1, [r3, #0]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	683a      	ldr	r2, [r7, #0]
 800be7c:	430a      	orrs	r2, r1
 800be7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	681a      	ldr	r2, [r3, #0]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f042 0201 	orr.w	r2, r2, #1
 800be8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2220      	movs	r2, #32
 800be94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bea0:	2300      	movs	r3, #0
 800bea2:	e000      	b.n	800bea6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bea4:	2302      	movs	r3, #2
  }
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	370c      	adds	r7, #12
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr

0800beb2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800beb2:	b480      	push	{r7}
 800beb4:	b085      	sub	sp, #20
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
 800beba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bec2:	b2db      	uxtb	r3, r3
 800bec4:	2b20      	cmp	r3, #32
 800bec6:	d139      	bne.n	800bf3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bece:	2b01      	cmp	r3, #1
 800bed0:	d101      	bne.n	800bed6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bed2:	2302      	movs	r3, #2
 800bed4:	e033      	b.n	800bf3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2201      	movs	r2, #1
 800beda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2224      	movs	r2, #36	; 0x24
 800bee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f022 0201 	bic.w	r2, r2, #1
 800bef4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bf04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	021b      	lsls	r3, r3, #8
 800bf0a:	68fa      	ldr	r2, [r7, #12]
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	68fa      	ldr	r2, [r7, #12]
 800bf16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f042 0201 	orr.w	r2, r2, #1
 800bf26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2220      	movs	r2, #32
 800bf2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	e000      	b.n	800bf3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bf3c:	2302      	movs	r3, #2
  }
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3714      	adds	r7, #20
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr

0800bf4a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800bf4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf4c:	b08f      	sub	sp, #60	; 0x3c
 800bf4e:	af0a      	add	r7, sp, #40	; 0x28
 800bf50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d101      	bne.n	800bf5c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	e116      	b.n	800c18a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d106      	bne.n	800bf7c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2200      	movs	r2, #0
 800bf72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f7f8 f8d0 	bl	800411c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2203      	movs	r2, #3
 800bf80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d102      	bne.n	800bf96 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2200      	movs	r2, #0
 800bf94:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f003 fd50 	bl	800fa40 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	603b      	str	r3, [r7, #0]
 800bfa6:	687e      	ldr	r6, [r7, #4]
 800bfa8:	466d      	mov	r5, sp
 800bfaa:	f106 0410 	add.w	r4, r6, #16
 800bfae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bfb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bfb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bfb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bfb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bfba:	e885 0003 	stmia.w	r5, {r0, r1}
 800bfbe:	1d33      	adds	r3, r6, #4
 800bfc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bfc2:	6838      	ldr	r0, [r7, #0]
 800bfc4:	f003 fcea 	bl	800f99c <USB_CoreInit>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d005      	beq.n	800bfda <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2202      	movs	r2, #2
 800bfd2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e0d7      	b.n	800c18a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	2100      	movs	r1, #0
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f003 fd3e 	bl	800fa62 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	73fb      	strb	r3, [r7, #15]
 800bfea:	e04a      	b.n	800c082 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800bfec:	7bfa      	ldrb	r2, [r7, #15]
 800bfee:	6879      	ldr	r1, [r7, #4]
 800bff0:	4613      	mov	r3, r2
 800bff2:	00db      	lsls	r3, r3, #3
 800bff4:	1a9b      	subs	r3, r3, r2
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	440b      	add	r3, r1
 800bffa:	333d      	adds	r3, #61	; 0x3d
 800bffc:	2201      	movs	r2, #1
 800bffe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c000:	7bfa      	ldrb	r2, [r7, #15]
 800c002:	6879      	ldr	r1, [r7, #4]
 800c004:	4613      	mov	r3, r2
 800c006:	00db      	lsls	r3, r3, #3
 800c008:	1a9b      	subs	r3, r3, r2
 800c00a:	009b      	lsls	r3, r3, #2
 800c00c:	440b      	add	r3, r1
 800c00e:	333c      	adds	r3, #60	; 0x3c
 800c010:	7bfa      	ldrb	r2, [r7, #15]
 800c012:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c014:	7bfa      	ldrb	r2, [r7, #15]
 800c016:	7bfb      	ldrb	r3, [r7, #15]
 800c018:	b298      	uxth	r0, r3
 800c01a:	6879      	ldr	r1, [r7, #4]
 800c01c:	4613      	mov	r3, r2
 800c01e:	00db      	lsls	r3, r3, #3
 800c020:	1a9b      	subs	r3, r3, r2
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	440b      	add	r3, r1
 800c026:	3342      	adds	r3, #66	; 0x42
 800c028:	4602      	mov	r2, r0
 800c02a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c02c:	7bfa      	ldrb	r2, [r7, #15]
 800c02e:	6879      	ldr	r1, [r7, #4]
 800c030:	4613      	mov	r3, r2
 800c032:	00db      	lsls	r3, r3, #3
 800c034:	1a9b      	subs	r3, r3, r2
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	440b      	add	r3, r1
 800c03a:	333f      	adds	r3, #63	; 0x3f
 800c03c:	2200      	movs	r2, #0
 800c03e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c040:	7bfa      	ldrb	r2, [r7, #15]
 800c042:	6879      	ldr	r1, [r7, #4]
 800c044:	4613      	mov	r3, r2
 800c046:	00db      	lsls	r3, r3, #3
 800c048:	1a9b      	subs	r3, r3, r2
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	440b      	add	r3, r1
 800c04e:	3344      	adds	r3, #68	; 0x44
 800c050:	2200      	movs	r2, #0
 800c052:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c054:	7bfa      	ldrb	r2, [r7, #15]
 800c056:	6879      	ldr	r1, [r7, #4]
 800c058:	4613      	mov	r3, r2
 800c05a:	00db      	lsls	r3, r3, #3
 800c05c:	1a9b      	subs	r3, r3, r2
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	440b      	add	r3, r1
 800c062:	3348      	adds	r3, #72	; 0x48
 800c064:	2200      	movs	r2, #0
 800c066:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c068:	7bfa      	ldrb	r2, [r7, #15]
 800c06a:	6879      	ldr	r1, [r7, #4]
 800c06c:	4613      	mov	r3, r2
 800c06e:	00db      	lsls	r3, r3, #3
 800c070:	1a9b      	subs	r3, r3, r2
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	440b      	add	r3, r1
 800c076:	3350      	adds	r3, #80	; 0x50
 800c078:	2200      	movs	r2, #0
 800c07a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c07c:	7bfb      	ldrb	r3, [r7, #15]
 800c07e:	3301      	adds	r3, #1
 800c080:	73fb      	strb	r3, [r7, #15]
 800c082:	7bfa      	ldrb	r2, [r7, #15]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d3af      	bcc.n	800bfec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c08c:	2300      	movs	r3, #0
 800c08e:	73fb      	strb	r3, [r7, #15]
 800c090:	e044      	b.n	800c11c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c092:	7bfa      	ldrb	r2, [r7, #15]
 800c094:	6879      	ldr	r1, [r7, #4]
 800c096:	4613      	mov	r3, r2
 800c098:	00db      	lsls	r3, r3, #3
 800c09a:	1a9b      	subs	r3, r3, r2
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	440b      	add	r3, r1
 800c0a0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c0a8:	7bfa      	ldrb	r2, [r7, #15]
 800c0aa:	6879      	ldr	r1, [r7, #4]
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	00db      	lsls	r3, r3, #3
 800c0b0:	1a9b      	subs	r3, r3, r2
 800c0b2:	009b      	lsls	r3, r3, #2
 800c0b4:	440b      	add	r3, r1
 800c0b6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c0ba:	7bfa      	ldrb	r2, [r7, #15]
 800c0bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c0be:	7bfa      	ldrb	r2, [r7, #15]
 800c0c0:	6879      	ldr	r1, [r7, #4]
 800c0c2:	4613      	mov	r3, r2
 800c0c4:	00db      	lsls	r3, r3, #3
 800c0c6:	1a9b      	subs	r3, r3, r2
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	440b      	add	r3, r1
 800c0cc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c0d4:	7bfa      	ldrb	r2, [r7, #15]
 800c0d6:	6879      	ldr	r1, [r7, #4]
 800c0d8:	4613      	mov	r3, r2
 800c0da:	00db      	lsls	r3, r3, #3
 800c0dc:	1a9b      	subs	r3, r3, r2
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	440b      	add	r3, r1
 800c0e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c0ea:	7bfa      	ldrb	r2, [r7, #15]
 800c0ec:	6879      	ldr	r1, [r7, #4]
 800c0ee:	4613      	mov	r3, r2
 800c0f0:	00db      	lsls	r3, r3, #3
 800c0f2:	1a9b      	subs	r3, r3, r2
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	440b      	add	r3, r1
 800c0f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c100:	7bfa      	ldrb	r2, [r7, #15]
 800c102:	6879      	ldr	r1, [r7, #4]
 800c104:	4613      	mov	r3, r2
 800c106:	00db      	lsls	r3, r3, #3
 800c108:	1a9b      	subs	r3, r3, r2
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	440b      	add	r3, r1
 800c10e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c112:	2200      	movs	r2, #0
 800c114:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c116:	7bfb      	ldrb	r3, [r7, #15]
 800c118:	3301      	adds	r3, #1
 800c11a:	73fb      	strb	r3, [r7, #15]
 800c11c:	7bfa      	ldrb	r2, [r7, #15]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	429a      	cmp	r2, r3
 800c124:	d3b5      	bcc.n	800c092 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	603b      	str	r3, [r7, #0]
 800c12c:	687e      	ldr	r6, [r7, #4]
 800c12e:	466d      	mov	r5, sp
 800c130:	f106 0410 	add.w	r4, r6, #16
 800c134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c13a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c13c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c140:	e885 0003 	stmia.w	r5, {r0, r1}
 800c144:	1d33      	adds	r3, r6, #4
 800c146:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c148:	6838      	ldr	r0, [r7, #0]
 800c14a:	f003 fcb5 	bl	800fab8 <USB_DevInit>
 800c14e:	4603      	mov	r3, r0
 800c150:	2b00      	cmp	r3, #0
 800c152:	d005      	beq.n	800c160 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2202      	movs	r2, #2
 800c158:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800c15c:	2301      	movs	r3, #1
 800c15e:	e014      	b.n	800c18a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2200      	movs	r2, #0
 800c164:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2201      	movs	r2, #1
 800c16c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c174:	2b01      	cmp	r3, #1
 800c176:	d102      	bne.n	800c17e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 f80a 	bl	800c192 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4618      	mov	r0, r3
 800c184:	f003 fe45 	bl	800fe12 <USB_DevDisconnect>

  return HAL_OK;
 800c188:	2300      	movs	r3, #0
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3714      	adds	r7, #20
 800c18e:	46bd      	mov	sp, r7
 800c190:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c192 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c192:	b480      	push	{r7}
 800c194:	b085      	sub	sp, #20
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	699b      	ldr	r3, [r3, #24]
 800c1b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1c4:	f043 0303 	orr.w	r3, r3, #3
 800c1c8:	68fa      	ldr	r2, [r7, #12]
 800c1ca:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800c1cc:	2300      	movs	r3, #0
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3714      	adds	r7, #20
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d8:	4770      	bx	lr
	...

0800c1dc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c1e0:	4b05      	ldr	r3, [pc, #20]	; (800c1f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	4a04      	ldr	r2, [pc, #16]	; (800c1f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800c1e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1ea:	6013      	str	r3, [r2, #0]
}
 800c1ec:	bf00      	nop
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr
 800c1f6:	bf00      	nop
 800c1f8:	40007000 	.word	0x40007000

0800c1fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800c200:	4b04      	ldr	r3, [pc, #16]	; (800c214 <HAL_PWREx_GetVoltageRange+0x18>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800c208:	4618      	mov	r0, r3
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr
 800c212:	bf00      	nop
 800c214:	40007000 	.word	0x40007000

0800c218 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c218:	b480      	push	{r7}
 800c21a:	b085      	sub	sp, #20
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c226:	d130      	bne.n	800c28a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800c228:	4b23      	ldr	r3, [pc, #140]	; (800c2b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c234:	d038      	beq.n	800c2a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c236:	4b20      	ldr	r3, [pc, #128]	; (800c2b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c23e:	4a1e      	ldr	r2, [pc, #120]	; (800c2b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c240:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c244:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c246:	4b1d      	ldr	r3, [pc, #116]	; (800c2bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	2232      	movs	r2, #50	; 0x32
 800c24c:	fb02 f303 	mul.w	r3, r2, r3
 800c250:	4a1b      	ldr	r2, [pc, #108]	; (800c2c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800c252:	fba2 2303 	umull	r2, r3, r2, r3
 800c256:	0c9b      	lsrs	r3, r3, #18
 800c258:	3301      	adds	r3, #1
 800c25a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c25c:	e002      	b.n	800c264 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	3b01      	subs	r3, #1
 800c262:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c264:	4b14      	ldr	r3, [pc, #80]	; (800c2b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c266:	695b      	ldr	r3, [r3, #20]
 800c268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c26c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c270:	d102      	bne.n	800c278 <HAL_PWREx_ControlVoltageScaling+0x60>
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d1f2      	bne.n	800c25e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c278:	4b0f      	ldr	r3, [pc, #60]	; (800c2b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c27a:	695b      	ldr	r3, [r3, #20]
 800c27c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c284:	d110      	bne.n	800c2a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800c286:	2303      	movs	r3, #3
 800c288:	e00f      	b.n	800c2aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800c28a:	4b0b      	ldr	r3, [pc, #44]	; (800c2b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c296:	d007      	beq.n	800c2a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c298:	4b07      	ldr	r3, [pc, #28]	; (800c2b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c2a0:	4a05      	ldr	r2, [pc, #20]	; (800c2b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800c2a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c2a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800c2a8:	2300      	movs	r3, #0
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3714      	adds	r7, #20
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr
 800c2b6:	bf00      	nop
 800c2b8:	40007000 	.word	0x40007000
 800c2bc:	2000018c 	.word	0x2000018c
 800c2c0:	431bde83 	.word	0x431bde83

0800c2c4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800c2c8:	4b05      	ldr	r3, [pc, #20]	; (800c2e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	4a04      	ldr	r2, [pc, #16]	; (800c2e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800c2ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c2d2:	6053      	str	r3, [r2, #4]
}
 800c2d4:	bf00      	nop
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr
 800c2de:	bf00      	nop
 800c2e0:	40007000 	.word	0x40007000

0800c2e4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b086      	sub	sp, #24
 800c2e8:	af02      	add	r7, sp, #8
 800c2ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c2ec:	f7fe f8ac 	bl	800a448 <HAL_GetTick>
 800c2f0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d101      	bne.n	800c2fc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e063      	b.n	800c3c4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c302:	b2db      	uxtb	r3, r3
 800c304:	2b00      	cmp	r3, #0
 800c306:	d10b      	bne.n	800c320 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2200      	movs	r2, #0
 800c30c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f7f7 fde7 	bl	8003ee4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800c316:	f241 3188 	movw	r1, #5000	; 0x1388
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f000 f858 	bl	800c3d0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	3b01      	subs	r3, #1
 800c330:	021a      	lsls	r2, r3, #8
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	430a      	orrs	r2, r1
 800c338:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c33e:	9300      	str	r3, [sp, #0]
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2200      	movs	r2, #0
 800c344:	2120      	movs	r1, #32
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 f850 	bl	800c3ec <QSPI_WaitFlagStateUntilTimeout>
 800c34c:	4603      	mov	r3, r0
 800c34e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800c350:	7afb      	ldrb	r3, [r7, #11]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d131      	bne.n	800c3ba <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c360:	f023 0310 	bic.w	r3, r3, #16
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	6852      	ldr	r2, [r2, #4]
 800c368:	0611      	lsls	r1, r2, #24
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	68d2      	ldr	r2, [r2, #12]
 800c36e:	4311      	orrs	r1, r2
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	6812      	ldr	r2, [r2, #0]
 800c374:	430b      	orrs	r3, r1
 800c376:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	685a      	ldr	r2, [r3, #4]
 800c37e:	4b13      	ldr	r3, [pc, #76]	; (800c3cc <HAL_QSPI_Init+0xe8>)
 800c380:	4013      	ands	r3, r2
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	6912      	ldr	r2, [r2, #16]
 800c386:	0411      	lsls	r1, r2, #16
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	6952      	ldr	r2, [r2, #20]
 800c38c:	4311      	orrs	r1, r2
 800c38e:	687a      	ldr	r2, [r7, #4]
 800c390:	6992      	ldr	r2, [r2, #24]
 800c392:	4311      	orrs	r1, r2
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	6812      	ldr	r2, [r2, #0]
 800c398:	430b      	orrs	r3, r1
 800c39a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f042 0201 	orr.w	r2, r2, #1
 800c3aa:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800c3c2:	7afb      	ldrb	r3, [r7, #11]
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3710      	adds	r7, #16
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	ffe0f8fe 	.word	0xffe0f8fe

0800c3d0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	683a      	ldr	r2, [r7, #0]
 800c3de:	641a      	str	r2, [r3, #64]	; 0x40
}
 800c3e0:	bf00      	nop
 800c3e2:	370c      	adds	r7, #12
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr

0800c3ec <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	60f8      	str	r0, [r7, #12]
 800c3f4:	60b9      	str	r1, [r7, #8]
 800c3f6:	603b      	str	r3, [r7, #0]
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c3fc:	e01a      	b.n	800c434 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c3fe:	69bb      	ldr	r3, [r7, #24]
 800c400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c404:	d016      	beq.n	800c434 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c406:	f7fe f81f 	bl	800a448 <HAL_GetTick>
 800c40a:	4602      	mov	r2, r0
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	1ad3      	subs	r3, r2, r3
 800c410:	69ba      	ldr	r2, [r7, #24]
 800c412:	429a      	cmp	r2, r3
 800c414:	d302      	bcc.n	800c41c <QSPI_WaitFlagStateUntilTimeout+0x30>
 800c416:	69bb      	ldr	r3, [r7, #24]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d10b      	bne.n	800c434 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2204      	movs	r2, #4
 800c420:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c428:	f043 0201 	orr.w	r2, r3, #1
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c430:	2301      	movs	r3, #1
 800c432:	e00e      	b.n	800c452 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	689a      	ldr	r2, [r3, #8]
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	4013      	ands	r3, r2
 800c43e:	2b00      	cmp	r3, #0
 800c440:	bf14      	ite	ne
 800c442:	2301      	movne	r3, #1
 800c444:	2300      	moveq	r3, #0
 800c446:	b2db      	uxtb	r3, r3
 800c448:	461a      	mov	r2, r3
 800c44a:	79fb      	ldrb	r3, [r7, #7]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d1d6      	bne.n	800c3fe <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c450:	2300      	movs	r3, #0
}
 800c452:	4618      	mov	r0, r3
 800c454:	3710      	adds	r7, #16
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
	...

0800c45c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b088      	sub	sp, #32
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d101      	bne.n	800c46e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c46a:	2301      	movs	r3, #1
 800c46c:	e3d4      	b.n	800cc18 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c46e:	4ba1      	ldr	r3, [pc, #644]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c470:	689b      	ldr	r3, [r3, #8]
 800c472:	f003 030c 	and.w	r3, r3, #12
 800c476:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c478:	4b9e      	ldr	r3, [pc, #632]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c47a:	68db      	ldr	r3, [r3, #12]
 800c47c:	f003 0303 	and.w	r3, r3, #3
 800c480:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f003 0310 	and.w	r3, r3, #16
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	f000 80e4 	beq.w	800c658 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c490:	69bb      	ldr	r3, [r7, #24]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d007      	beq.n	800c4a6 <HAL_RCC_OscConfig+0x4a>
 800c496:	69bb      	ldr	r3, [r7, #24]
 800c498:	2b0c      	cmp	r3, #12
 800c49a:	f040 808b 	bne.w	800c5b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	f040 8087 	bne.w	800c5b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c4a6:	4b93      	ldr	r3, [pc, #588]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f003 0302 	and.w	r3, r3, #2
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d005      	beq.n	800c4be <HAL_RCC_OscConfig+0x62>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	699b      	ldr	r3, [r3, #24]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d101      	bne.n	800c4be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	e3ac      	b.n	800cc18 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6a1a      	ldr	r2, [r3, #32]
 800c4c2:	4b8c      	ldr	r3, [pc, #560]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f003 0308 	and.w	r3, r3, #8
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d004      	beq.n	800c4d8 <HAL_RCC_OscConfig+0x7c>
 800c4ce:	4b89      	ldr	r3, [pc, #548]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c4d6:	e005      	b.n	800c4e4 <HAL_RCC_OscConfig+0x88>
 800c4d8:	4b86      	ldr	r3, [pc, #536]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c4da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c4de:	091b      	lsrs	r3, r3, #4
 800c4e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d223      	bcs.n	800c530 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6a1b      	ldr	r3, [r3, #32]
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f000 fd3f 	bl	800cf70 <RCC_SetFlashLatencyFromMSIRange>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d001      	beq.n	800c4fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	e38d      	b.n	800cc18 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c4fc:	4b7d      	ldr	r3, [pc, #500]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4a7c      	ldr	r2, [pc, #496]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c502:	f043 0308 	orr.w	r3, r3, #8
 800c506:	6013      	str	r3, [r2, #0]
 800c508:	4b7a      	ldr	r3, [pc, #488]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6a1b      	ldr	r3, [r3, #32]
 800c514:	4977      	ldr	r1, [pc, #476]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c516:	4313      	orrs	r3, r2
 800c518:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c51a:	4b76      	ldr	r3, [pc, #472]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	69db      	ldr	r3, [r3, #28]
 800c526:	021b      	lsls	r3, r3, #8
 800c528:	4972      	ldr	r1, [pc, #456]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c52a:	4313      	orrs	r3, r2
 800c52c:	604b      	str	r3, [r1, #4]
 800c52e:	e025      	b.n	800c57c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c530:	4b70      	ldr	r3, [pc, #448]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4a6f      	ldr	r2, [pc, #444]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c536:	f043 0308 	orr.w	r3, r3, #8
 800c53a:	6013      	str	r3, [r2, #0]
 800c53c:	4b6d      	ldr	r3, [pc, #436]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6a1b      	ldr	r3, [r3, #32]
 800c548:	496a      	ldr	r1, [pc, #424]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c54a:	4313      	orrs	r3, r2
 800c54c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c54e:	4b69      	ldr	r3, [pc, #420]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	69db      	ldr	r3, [r3, #28]
 800c55a:	021b      	lsls	r3, r3, #8
 800c55c:	4965      	ldr	r1, [pc, #404]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c55e:	4313      	orrs	r3, r2
 800c560:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c562:	69bb      	ldr	r3, [r7, #24]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d109      	bne.n	800c57c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6a1b      	ldr	r3, [r3, #32]
 800c56c:	4618      	mov	r0, r3
 800c56e:	f000 fcff 	bl	800cf70 <RCC_SetFlashLatencyFromMSIRange>
 800c572:	4603      	mov	r3, r0
 800c574:	2b00      	cmp	r3, #0
 800c576:	d001      	beq.n	800c57c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800c578:	2301      	movs	r3, #1
 800c57a:	e34d      	b.n	800cc18 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c57c:	f000 fc36 	bl	800cdec <HAL_RCC_GetSysClockFreq>
 800c580:	4601      	mov	r1, r0
 800c582:	4b5c      	ldr	r3, [pc, #368]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	091b      	lsrs	r3, r3, #4
 800c588:	f003 030f 	and.w	r3, r3, #15
 800c58c:	4a5a      	ldr	r2, [pc, #360]	; (800c6f8 <HAL_RCC_OscConfig+0x29c>)
 800c58e:	5cd3      	ldrb	r3, [r2, r3]
 800c590:	f003 031f 	and.w	r3, r3, #31
 800c594:	fa21 f303 	lsr.w	r3, r1, r3
 800c598:	4a58      	ldr	r2, [pc, #352]	; (800c6fc <HAL_RCC_OscConfig+0x2a0>)
 800c59a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800c59c:	4b58      	ldr	r3, [pc, #352]	; (800c700 <HAL_RCC_OscConfig+0x2a4>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f7fd ff01 	bl	800a3a8 <HAL_InitTick>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800c5aa:	7bfb      	ldrb	r3, [r7, #15]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d052      	beq.n	800c656 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800c5b0:	7bfb      	ldrb	r3, [r7, #15]
 800c5b2:	e331      	b.n	800cc18 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	699b      	ldr	r3, [r3, #24]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d032      	beq.n	800c622 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c5bc:	4b4d      	ldr	r3, [pc, #308]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4a4c      	ldr	r2, [pc, #304]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c5c2:	f043 0301 	orr.w	r3, r3, #1
 800c5c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c5c8:	f7fd ff3e 	bl	800a448 <HAL_GetTick>
 800c5cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c5ce:	e008      	b.n	800c5e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c5d0:	f7fd ff3a 	bl	800a448 <HAL_GetTick>
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	1ad3      	subs	r3, r2, r3
 800c5da:	2b02      	cmp	r3, #2
 800c5dc:	d901      	bls.n	800c5e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800c5de:	2303      	movs	r3, #3
 800c5e0:	e31a      	b.n	800cc18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c5e2:	4b44      	ldr	r3, [pc, #272]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f003 0302 	and.w	r3, r3, #2
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d0f0      	beq.n	800c5d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c5ee:	4b41      	ldr	r3, [pc, #260]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4a40      	ldr	r2, [pc, #256]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c5f4:	f043 0308 	orr.w	r3, r3, #8
 800c5f8:	6013      	str	r3, [r2, #0]
 800c5fa:	4b3e      	ldr	r3, [pc, #248]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6a1b      	ldr	r3, [r3, #32]
 800c606:	493b      	ldr	r1, [pc, #236]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c608:	4313      	orrs	r3, r2
 800c60a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c60c:	4b39      	ldr	r3, [pc, #228]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	69db      	ldr	r3, [r3, #28]
 800c618:	021b      	lsls	r3, r3, #8
 800c61a:	4936      	ldr	r1, [pc, #216]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c61c:	4313      	orrs	r3, r2
 800c61e:	604b      	str	r3, [r1, #4]
 800c620:	e01a      	b.n	800c658 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c622:	4b34      	ldr	r3, [pc, #208]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4a33      	ldr	r2, [pc, #204]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c628:	f023 0301 	bic.w	r3, r3, #1
 800c62c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c62e:	f7fd ff0b 	bl	800a448 <HAL_GetTick>
 800c632:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c634:	e008      	b.n	800c648 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c636:	f7fd ff07 	bl	800a448 <HAL_GetTick>
 800c63a:	4602      	mov	r2, r0
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	1ad3      	subs	r3, r2, r3
 800c640:	2b02      	cmp	r3, #2
 800c642:	d901      	bls.n	800c648 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800c644:	2303      	movs	r3, #3
 800c646:	e2e7      	b.n	800cc18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800c648:	4b2a      	ldr	r3, [pc, #168]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f003 0302 	and.w	r3, r3, #2
 800c650:	2b00      	cmp	r3, #0
 800c652:	d1f0      	bne.n	800c636 <HAL_RCC_OscConfig+0x1da>
 800c654:	e000      	b.n	800c658 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c656:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f003 0301 	and.w	r3, r3, #1
 800c660:	2b00      	cmp	r3, #0
 800c662:	d074      	beq.n	800c74e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800c664:	69bb      	ldr	r3, [r7, #24]
 800c666:	2b08      	cmp	r3, #8
 800c668:	d005      	beq.n	800c676 <HAL_RCC_OscConfig+0x21a>
 800c66a:	69bb      	ldr	r3, [r7, #24]
 800c66c:	2b0c      	cmp	r3, #12
 800c66e:	d10e      	bne.n	800c68e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	2b03      	cmp	r3, #3
 800c674:	d10b      	bne.n	800c68e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c676:	4b1f      	ldr	r3, [pc, #124]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d064      	beq.n	800c74c <HAL_RCC_OscConfig+0x2f0>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	685b      	ldr	r3, [r3, #4]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d160      	bne.n	800c74c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800c68a:	2301      	movs	r3, #1
 800c68c:	e2c4      	b.n	800cc18 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c696:	d106      	bne.n	800c6a6 <HAL_RCC_OscConfig+0x24a>
 800c698:	4b16      	ldr	r3, [pc, #88]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	4a15      	ldr	r2, [pc, #84]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c69e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c6a2:	6013      	str	r3, [r2, #0]
 800c6a4:	e01d      	b.n	800c6e2 <HAL_RCC_OscConfig+0x286>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c6ae:	d10c      	bne.n	800c6ca <HAL_RCC_OscConfig+0x26e>
 800c6b0:	4b10      	ldr	r3, [pc, #64]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4a0f      	ldr	r2, [pc, #60]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c6b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c6ba:	6013      	str	r3, [r2, #0]
 800c6bc:	4b0d      	ldr	r3, [pc, #52]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a0c      	ldr	r2, [pc, #48]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c6c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c6c6:	6013      	str	r3, [r2, #0]
 800c6c8:	e00b      	b.n	800c6e2 <HAL_RCC_OscConfig+0x286>
 800c6ca:	4b0a      	ldr	r3, [pc, #40]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	4a09      	ldr	r2, [pc, #36]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c6d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c6d4:	6013      	str	r3, [r2, #0]
 800c6d6:	4b07      	ldr	r3, [pc, #28]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4a06      	ldr	r2, [pc, #24]	; (800c6f4 <HAL_RCC_OscConfig+0x298>)
 800c6dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c6e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d01c      	beq.n	800c724 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6ea:	f7fd fead 	bl	800a448 <HAL_GetTick>
 800c6ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c6f0:	e011      	b.n	800c716 <HAL_RCC_OscConfig+0x2ba>
 800c6f2:	bf00      	nop
 800c6f4:	40021000 	.word	0x40021000
 800c6f8:	08016d6c 	.word	0x08016d6c
 800c6fc:	2000018c 	.word	0x2000018c
 800c700:	20000488 	.word	0x20000488
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c704:	f7fd fea0 	bl	800a448 <HAL_GetTick>
 800c708:	4602      	mov	r2, r0
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	1ad3      	subs	r3, r2, r3
 800c70e:	2b64      	cmp	r3, #100	; 0x64
 800c710:	d901      	bls.n	800c716 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800c712:	2303      	movs	r3, #3
 800c714:	e280      	b.n	800cc18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c716:	4baf      	ldr	r3, [pc, #700]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d0f0      	beq.n	800c704 <HAL_RCC_OscConfig+0x2a8>
 800c722:	e014      	b.n	800c74e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c724:	f7fd fe90 	bl	800a448 <HAL_GetTick>
 800c728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c72a:	e008      	b.n	800c73e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c72c:	f7fd fe8c 	bl	800a448 <HAL_GetTick>
 800c730:	4602      	mov	r2, r0
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	1ad3      	subs	r3, r2, r3
 800c736:	2b64      	cmp	r3, #100	; 0x64
 800c738:	d901      	bls.n	800c73e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800c73a:	2303      	movs	r3, #3
 800c73c:	e26c      	b.n	800cc18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c73e:	4ba5      	ldr	r3, [pc, #660]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c746:	2b00      	cmp	r3, #0
 800c748:	d1f0      	bne.n	800c72c <HAL_RCC_OscConfig+0x2d0>
 800c74a:	e000      	b.n	800c74e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c74c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f003 0302 	and.w	r3, r3, #2
 800c756:	2b00      	cmp	r3, #0
 800c758:	d060      	beq.n	800c81c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800c75a:	69bb      	ldr	r3, [r7, #24]
 800c75c:	2b04      	cmp	r3, #4
 800c75e:	d005      	beq.n	800c76c <HAL_RCC_OscConfig+0x310>
 800c760:	69bb      	ldr	r3, [r7, #24]
 800c762:	2b0c      	cmp	r3, #12
 800c764:	d119      	bne.n	800c79a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	2b02      	cmp	r3, #2
 800c76a:	d116      	bne.n	800c79a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c76c:	4b99      	ldr	r3, [pc, #612]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c774:	2b00      	cmp	r3, #0
 800c776:	d005      	beq.n	800c784 <HAL_RCC_OscConfig+0x328>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	68db      	ldr	r3, [r3, #12]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d101      	bne.n	800c784 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800c780:	2301      	movs	r3, #1
 800c782:	e249      	b.n	800cc18 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c784:	4b93      	ldr	r3, [pc, #588]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c786:	685b      	ldr	r3, [r3, #4]
 800c788:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	691b      	ldr	r3, [r3, #16]
 800c790:	061b      	lsls	r3, r3, #24
 800c792:	4990      	ldr	r1, [pc, #576]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c794:	4313      	orrs	r3, r2
 800c796:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c798:	e040      	b.n	800c81c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d023      	beq.n	800c7ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c7a2:	4b8c      	ldr	r3, [pc, #560]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	4a8b      	ldr	r2, [pc, #556]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c7a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7ae:	f7fd fe4b 	bl	800a448 <HAL_GetTick>
 800c7b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c7b4:	e008      	b.n	800c7c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c7b6:	f7fd fe47 	bl	800a448 <HAL_GetTick>
 800c7ba:	4602      	mov	r2, r0
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	1ad3      	subs	r3, r2, r3
 800c7c0:	2b02      	cmp	r3, #2
 800c7c2:	d901      	bls.n	800c7c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800c7c4:	2303      	movs	r3, #3
 800c7c6:	e227      	b.n	800cc18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c7c8:	4b82      	ldr	r3, [pc, #520]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d0f0      	beq.n	800c7b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c7d4:	4b7f      	ldr	r3, [pc, #508]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	691b      	ldr	r3, [r3, #16]
 800c7e0:	061b      	lsls	r3, r3, #24
 800c7e2:	497c      	ldr	r1, [pc, #496]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	604b      	str	r3, [r1, #4]
 800c7e8:	e018      	b.n	800c81c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c7ea:	4b7a      	ldr	r3, [pc, #488]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4a79      	ldr	r2, [pc, #484]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c7f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7f6:	f7fd fe27 	bl	800a448 <HAL_GetTick>
 800c7fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c7fc:	e008      	b.n	800c810 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c7fe:	f7fd fe23 	bl	800a448 <HAL_GetTick>
 800c802:	4602      	mov	r2, r0
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	1ad3      	subs	r3, r2, r3
 800c808:	2b02      	cmp	r3, #2
 800c80a:	d901      	bls.n	800c810 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800c80c:	2303      	movs	r3, #3
 800c80e:	e203      	b.n	800cc18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c810:	4b70      	ldr	r3, [pc, #448]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d1f0      	bne.n	800c7fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f003 0308 	and.w	r3, r3, #8
 800c824:	2b00      	cmp	r3, #0
 800c826:	d03c      	beq.n	800c8a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	695b      	ldr	r3, [r3, #20]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d01c      	beq.n	800c86a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c830:	4b68      	ldr	r3, [pc, #416]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c836:	4a67      	ldr	r2, [pc, #412]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c838:	f043 0301 	orr.w	r3, r3, #1
 800c83c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c840:	f7fd fe02 	bl	800a448 <HAL_GetTick>
 800c844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c846:	e008      	b.n	800c85a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c848:	f7fd fdfe 	bl	800a448 <HAL_GetTick>
 800c84c:	4602      	mov	r2, r0
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	1ad3      	subs	r3, r2, r3
 800c852:	2b02      	cmp	r3, #2
 800c854:	d901      	bls.n	800c85a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800c856:	2303      	movs	r3, #3
 800c858:	e1de      	b.n	800cc18 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c85a:	4b5e      	ldr	r3, [pc, #376]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c85c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c860:	f003 0302 	and.w	r3, r3, #2
 800c864:	2b00      	cmp	r3, #0
 800c866:	d0ef      	beq.n	800c848 <HAL_RCC_OscConfig+0x3ec>
 800c868:	e01b      	b.n	800c8a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c86a:	4b5a      	ldr	r3, [pc, #360]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c86c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c870:	4a58      	ldr	r2, [pc, #352]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c872:	f023 0301 	bic.w	r3, r3, #1
 800c876:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c87a:	f7fd fde5 	bl	800a448 <HAL_GetTick>
 800c87e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c880:	e008      	b.n	800c894 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c882:	f7fd fde1 	bl	800a448 <HAL_GetTick>
 800c886:	4602      	mov	r2, r0
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	1ad3      	subs	r3, r2, r3
 800c88c:	2b02      	cmp	r3, #2
 800c88e:	d901      	bls.n	800c894 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800c890:	2303      	movs	r3, #3
 800c892:	e1c1      	b.n	800cc18 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c894:	4b4f      	ldr	r3, [pc, #316]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c89a:	f003 0302 	and.w	r3, r3, #2
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d1ef      	bne.n	800c882 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f003 0304 	and.w	r3, r3, #4
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	f000 80a6 	beq.w	800c9fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800c8b4:	4b47      	ldr	r3, [pc, #284]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c8b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d10d      	bne.n	800c8dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c8c0:	4b44      	ldr	r3, [pc, #272]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c8c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8c4:	4a43      	ldr	r2, [pc, #268]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c8c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8ca:	6593      	str	r3, [r2, #88]	; 0x58
 800c8cc:	4b41      	ldr	r3, [pc, #260]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c8ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8d4:	60bb      	str	r3, [r7, #8]
 800c8d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c8dc:	4b3e      	ldr	r3, [pc, #248]	; (800c9d8 <HAL_RCC_OscConfig+0x57c>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d118      	bne.n	800c91a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c8e8:	4b3b      	ldr	r3, [pc, #236]	; (800c9d8 <HAL_RCC_OscConfig+0x57c>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4a3a      	ldr	r2, [pc, #232]	; (800c9d8 <HAL_RCC_OscConfig+0x57c>)
 800c8ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c8f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c8f4:	f7fd fda8 	bl	800a448 <HAL_GetTick>
 800c8f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c8fa:	e008      	b.n	800c90e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c8fc:	f7fd fda4 	bl	800a448 <HAL_GetTick>
 800c900:	4602      	mov	r2, r0
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	1ad3      	subs	r3, r2, r3
 800c906:	2b02      	cmp	r3, #2
 800c908:	d901      	bls.n	800c90e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800c90a:	2303      	movs	r3, #3
 800c90c:	e184      	b.n	800cc18 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c90e:	4b32      	ldr	r3, [pc, #200]	; (800c9d8 <HAL_RCC_OscConfig+0x57c>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c916:	2b00      	cmp	r3, #0
 800c918:	d0f0      	beq.n	800c8fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	689b      	ldr	r3, [r3, #8]
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d108      	bne.n	800c934 <HAL_RCC_OscConfig+0x4d8>
 800c922:	4b2c      	ldr	r3, [pc, #176]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c928:	4a2a      	ldr	r2, [pc, #168]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c92a:	f043 0301 	orr.w	r3, r3, #1
 800c92e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c932:	e024      	b.n	800c97e <HAL_RCC_OscConfig+0x522>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	689b      	ldr	r3, [r3, #8]
 800c938:	2b05      	cmp	r3, #5
 800c93a:	d110      	bne.n	800c95e <HAL_RCC_OscConfig+0x502>
 800c93c:	4b25      	ldr	r3, [pc, #148]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c93e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c942:	4a24      	ldr	r2, [pc, #144]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c944:	f043 0304 	orr.w	r3, r3, #4
 800c948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c94c:	4b21      	ldr	r3, [pc, #132]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c94e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c952:	4a20      	ldr	r2, [pc, #128]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c954:	f043 0301 	orr.w	r3, r3, #1
 800c958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c95c:	e00f      	b.n	800c97e <HAL_RCC_OscConfig+0x522>
 800c95e:	4b1d      	ldr	r3, [pc, #116]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c964:	4a1b      	ldr	r2, [pc, #108]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c966:	f023 0301 	bic.w	r3, r3, #1
 800c96a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c96e:	4b19      	ldr	r3, [pc, #100]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c974:	4a17      	ldr	r2, [pc, #92]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c976:	f023 0304 	bic.w	r3, r3, #4
 800c97a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	689b      	ldr	r3, [r3, #8]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d016      	beq.n	800c9b4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c986:	f7fd fd5f 	bl	800a448 <HAL_GetTick>
 800c98a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c98c:	e00a      	b.n	800c9a4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c98e:	f7fd fd5b 	bl	800a448 <HAL_GetTick>
 800c992:	4602      	mov	r2, r0
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	1ad3      	subs	r3, r2, r3
 800c998:	f241 3288 	movw	r2, #5000	; 0x1388
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d901      	bls.n	800c9a4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800c9a0:	2303      	movs	r3, #3
 800c9a2:	e139      	b.n	800cc18 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c9a4:	4b0b      	ldr	r3, [pc, #44]	; (800c9d4 <HAL_RCC_OscConfig+0x578>)
 800c9a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9aa:	f003 0302 	and.w	r3, r3, #2
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d0ed      	beq.n	800c98e <HAL_RCC_OscConfig+0x532>
 800c9b2:	e01a      	b.n	800c9ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9b4:	f7fd fd48 	bl	800a448 <HAL_GetTick>
 800c9b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c9ba:	e00f      	b.n	800c9dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c9bc:	f7fd fd44 	bl	800a448 <HAL_GetTick>
 800c9c0:	4602      	mov	r2, r0
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	1ad3      	subs	r3, r2, r3
 800c9c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d906      	bls.n	800c9dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800c9ce:	2303      	movs	r3, #3
 800c9d0:	e122      	b.n	800cc18 <HAL_RCC_OscConfig+0x7bc>
 800c9d2:	bf00      	nop
 800c9d4:	40021000 	.word	0x40021000
 800c9d8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c9dc:	4b90      	ldr	r3, [pc, #576]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800c9de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9e2:	f003 0302 	and.w	r3, r3, #2
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d1e8      	bne.n	800c9bc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c9ea:	7ffb      	ldrb	r3, [r7, #31]
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d105      	bne.n	800c9fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c9f0:	4b8b      	ldr	r3, [pc, #556]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800c9f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9f4:	4a8a      	ldr	r2, [pc, #552]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800c9f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c9fa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	f000 8108 	beq.w	800cc16 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca0a:	2b02      	cmp	r3, #2
 800ca0c:	f040 80d0 	bne.w	800cbb0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800ca10:	4b83      	ldr	r3, [pc, #524]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	f003 0203 	and.w	r2, r3, #3
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d130      	bne.n	800ca86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca2e:	3b01      	subs	r3, #1
 800ca30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d127      	bne.n	800ca86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca40:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d11f      	bne.n	800ca86 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca4c:	687a      	ldr	r2, [r7, #4]
 800ca4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ca50:	2a07      	cmp	r2, #7
 800ca52:	bf14      	ite	ne
 800ca54:	2201      	movne	r2, #1
 800ca56:	2200      	moveq	r2, #0
 800ca58:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d113      	bne.n	800ca86 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca68:	085b      	lsrs	r3, r3, #1
 800ca6a:	3b01      	subs	r3, #1
 800ca6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800ca6e:	429a      	cmp	r2, r3
 800ca70:	d109      	bne.n	800ca86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca7c:	085b      	lsrs	r3, r3, #1
 800ca7e:	3b01      	subs	r3, #1
 800ca80:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d06e      	beq.n	800cb64 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ca86:	69bb      	ldr	r3, [r7, #24]
 800ca88:	2b0c      	cmp	r3, #12
 800ca8a:	d069      	beq.n	800cb60 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ca8c:	4b64      	ldr	r3, [pc, #400]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d105      	bne.n	800caa4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800ca98:	4b61      	ldr	r3, [pc, #388]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d001      	beq.n	800caa8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800caa4:	2301      	movs	r3, #1
 800caa6:	e0b7      	b.n	800cc18 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800caa8:	4b5d      	ldr	r3, [pc, #372]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a5c      	ldr	r2, [pc, #368]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800caae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cab2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800cab4:	f7fd fcc8 	bl	800a448 <HAL_GetTick>
 800cab8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800caba:	e008      	b.n	800cace <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cabc:	f7fd fcc4 	bl	800a448 <HAL_GetTick>
 800cac0:	4602      	mov	r2, r0
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	1ad3      	subs	r3, r2, r3
 800cac6:	2b02      	cmp	r3, #2
 800cac8:	d901      	bls.n	800cace <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800caca:	2303      	movs	r3, #3
 800cacc:	e0a4      	b.n	800cc18 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cace:	4b54      	ldr	r3, [pc, #336]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d1f0      	bne.n	800cabc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cada:	4b51      	ldr	r3, [pc, #324]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800cadc:	68da      	ldr	r2, [r3, #12]
 800cade:	4b51      	ldr	r3, [pc, #324]	; (800cc24 <HAL_RCC_OscConfig+0x7c8>)
 800cae0:	4013      	ands	r3, r2
 800cae2:	687a      	ldr	r2, [r7, #4]
 800cae4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800cae6:	687a      	ldr	r2, [r7, #4]
 800cae8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800caea:	3a01      	subs	r2, #1
 800caec:	0112      	lsls	r2, r2, #4
 800caee:	4311      	orrs	r1, r2
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800caf4:	0212      	lsls	r2, r2, #8
 800caf6:	4311      	orrs	r1, r2
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800cafc:	0852      	lsrs	r2, r2, #1
 800cafe:	3a01      	subs	r2, #1
 800cb00:	0552      	lsls	r2, r2, #21
 800cb02:	4311      	orrs	r1, r2
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800cb08:	0852      	lsrs	r2, r2, #1
 800cb0a:	3a01      	subs	r2, #1
 800cb0c:	0652      	lsls	r2, r2, #25
 800cb0e:	4311      	orrs	r1, r2
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cb14:	0912      	lsrs	r2, r2, #4
 800cb16:	0452      	lsls	r2, r2, #17
 800cb18:	430a      	orrs	r2, r1
 800cb1a:	4941      	ldr	r1, [pc, #260]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800cb20:	4b3f      	ldr	r3, [pc, #252]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a3e      	ldr	r2, [pc, #248]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800cb26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cb2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cb2c:	4b3c      	ldr	r3, [pc, #240]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800cb2e:	68db      	ldr	r3, [r3, #12]
 800cb30:	4a3b      	ldr	r2, [pc, #236]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800cb32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cb36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800cb38:	f7fd fc86 	bl	800a448 <HAL_GetTick>
 800cb3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cb3e:	e008      	b.n	800cb52 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cb40:	f7fd fc82 	bl	800a448 <HAL_GetTick>
 800cb44:	4602      	mov	r2, r0
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	1ad3      	subs	r3, r2, r3
 800cb4a:	2b02      	cmp	r3, #2
 800cb4c:	d901      	bls.n	800cb52 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800cb4e:	2303      	movs	r3, #3
 800cb50:	e062      	b.n	800cc18 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cb52:	4b33      	ldr	r3, [pc, #204]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d0f0      	beq.n	800cb40 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800cb5e:	e05a      	b.n	800cc16 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800cb60:	2301      	movs	r3, #1
 800cb62:	e059      	b.n	800cc18 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cb64:	4b2e      	ldr	r3, [pc, #184]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d152      	bne.n	800cc16 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800cb70:	4b2b      	ldr	r3, [pc, #172]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4a2a      	ldr	r2, [pc, #168]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800cb76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cb7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cb7c:	4b28      	ldr	r3, [pc, #160]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800cb7e:	68db      	ldr	r3, [r3, #12]
 800cb80:	4a27      	ldr	r2, [pc, #156]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800cb82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cb86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cb88:	f7fd fc5e 	bl	800a448 <HAL_GetTick>
 800cb8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cb8e:	e008      	b.n	800cba2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cb90:	f7fd fc5a 	bl	800a448 <HAL_GetTick>
 800cb94:	4602      	mov	r2, r0
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	1ad3      	subs	r3, r2, r3
 800cb9a:	2b02      	cmp	r3, #2
 800cb9c:	d901      	bls.n	800cba2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800cb9e:	2303      	movs	r3, #3
 800cba0:	e03a      	b.n	800cc18 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cba2:	4b1f      	ldr	r3, [pc, #124]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d0f0      	beq.n	800cb90 <HAL_RCC_OscConfig+0x734>
 800cbae:	e032      	b.n	800cc16 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800cbb0:	69bb      	ldr	r3, [r7, #24]
 800cbb2:	2b0c      	cmp	r3, #12
 800cbb4:	d02d      	beq.n	800cc12 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cbb6:	4b1a      	ldr	r3, [pc, #104]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	4a19      	ldr	r2, [pc, #100]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800cbbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cbc0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800cbc2:	4b17      	ldr	r3, [pc, #92]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d105      	bne.n	800cbda <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800cbce:	4b14      	ldr	r3, [pc, #80]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800cbd0:	68db      	ldr	r3, [r3, #12]
 800cbd2:	4a13      	ldr	r2, [pc, #76]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800cbd4:	f023 0303 	bic.w	r3, r3, #3
 800cbd8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800cbda:	4b11      	ldr	r3, [pc, #68]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800cbdc:	68db      	ldr	r3, [r3, #12]
 800cbde:	4a10      	ldr	r2, [pc, #64]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800cbe0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800cbe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cbe8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbea:	f7fd fc2d 	bl	800a448 <HAL_GetTick>
 800cbee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cbf0:	e008      	b.n	800cc04 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cbf2:	f7fd fc29 	bl	800a448 <HAL_GetTick>
 800cbf6:	4602      	mov	r2, r0
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	1ad3      	subs	r3, r2, r3
 800cbfc:	2b02      	cmp	r3, #2
 800cbfe:	d901      	bls.n	800cc04 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800cc00:	2303      	movs	r3, #3
 800cc02:	e009      	b.n	800cc18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cc04:	4b06      	ldr	r3, [pc, #24]	; (800cc20 <HAL_RCC_OscConfig+0x7c4>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d1f0      	bne.n	800cbf2 <HAL_RCC_OscConfig+0x796>
 800cc10:	e001      	b.n	800cc16 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800cc12:	2301      	movs	r3, #1
 800cc14:	e000      	b.n	800cc18 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800cc16:	2300      	movs	r3, #0
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3720      	adds	r7, #32
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	40021000 	.word	0x40021000
 800cc24:	f99d808c 	.word	0xf99d808c

0800cc28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
 800cc30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d101      	bne.n	800cc3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	e0c8      	b.n	800cdce <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cc3c:	4b66      	ldr	r3, [pc, #408]	; (800cdd8 <HAL_RCC_ClockConfig+0x1b0>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f003 0307 	and.w	r3, r3, #7
 800cc44:	683a      	ldr	r2, [r7, #0]
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d910      	bls.n	800cc6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc4a:	4b63      	ldr	r3, [pc, #396]	; (800cdd8 <HAL_RCC_ClockConfig+0x1b0>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f023 0207 	bic.w	r2, r3, #7
 800cc52:	4961      	ldr	r1, [pc, #388]	; (800cdd8 <HAL_RCC_ClockConfig+0x1b0>)
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	4313      	orrs	r3, r2
 800cc58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc5a:	4b5f      	ldr	r3, [pc, #380]	; (800cdd8 <HAL_RCC_ClockConfig+0x1b0>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f003 0307 	and.w	r3, r3, #7
 800cc62:	683a      	ldr	r2, [r7, #0]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d001      	beq.n	800cc6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	e0b0      	b.n	800cdce <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f003 0301 	and.w	r3, r3, #1
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d04c      	beq.n	800cd12 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	2b03      	cmp	r3, #3
 800cc7e:	d107      	bne.n	800cc90 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cc80:	4b56      	ldr	r3, [pc, #344]	; (800cddc <HAL_RCC_ClockConfig+0x1b4>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d121      	bne.n	800ccd0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	e09e      	b.n	800cdce <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	2b02      	cmp	r3, #2
 800cc96:	d107      	bne.n	800cca8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cc98:	4b50      	ldr	r3, [pc, #320]	; (800cddc <HAL_RCC_ClockConfig+0x1b4>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d115      	bne.n	800ccd0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800cca4:	2301      	movs	r3, #1
 800cca6:	e092      	b.n	800cdce <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	685b      	ldr	r3, [r3, #4]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d107      	bne.n	800ccc0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ccb0:	4b4a      	ldr	r3, [pc, #296]	; (800cddc <HAL_RCC_ClockConfig+0x1b4>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f003 0302 	and.w	r3, r3, #2
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d109      	bne.n	800ccd0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	e086      	b.n	800cdce <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ccc0:	4b46      	ldr	r3, [pc, #280]	; (800cddc <HAL_RCC_ClockConfig+0x1b4>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d101      	bne.n	800ccd0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800cccc:	2301      	movs	r3, #1
 800ccce:	e07e      	b.n	800cdce <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ccd0:	4b42      	ldr	r3, [pc, #264]	; (800cddc <HAL_RCC_ClockConfig+0x1b4>)
 800ccd2:	689b      	ldr	r3, [r3, #8]
 800ccd4:	f023 0203 	bic.w	r2, r3, #3
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	493f      	ldr	r1, [pc, #252]	; (800cddc <HAL_RCC_ClockConfig+0x1b4>)
 800ccde:	4313      	orrs	r3, r2
 800cce0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cce2:	f7fd fbb1 	bl	800a448 <HAL_GetTick>
 800cce6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cce8:	e00a      	b.n	800cd00 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ccea:	f7fd fbad 	bl	800a448 <HAL_GetTick>
 800ccee:	4602      	mov	r2, r0
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	1ad3      	subs	r3, r2, r3
 800ccf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d901      	bls.n	800cd00 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800ccfc:	2303      	movs	r3, #3
 800ccfe:	e066      	b.n	800cdce <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cd00:	4b36      	ldr	r3, [pc, #216]	; (800cddc <HAL_RCC_ClockConfig+0x1b4>)
 800cd02:	689b      	ldr	r3, [r3, #8]
 800cd04:	f003 020c 	and.w	r2, r3, #12
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	d1eb      	bne.n	800ccea <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f003 0302 	and.w	r3, r3, #2
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d008      	beq.n	800cd30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cd1e:	4b2f      	ldr	r3, [pc, #188]	; (800cddc <HAL_RCC_ClockConfig+0x1b4>)
 800cd20:	689b      	ldr	r3, [r3, #8]
 800cd22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	689b      	ldr	r3, [r3, #8]
 800cd2a:	492c      	ldr	r1, [pc, #176]	; (800cddc <HAL_RCC_ClockConfig+0x1b4>)
 800cd2c:	4313      	orrs	r3, r2
 800cd2e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cd30:	4b29      	ldr	r3, [pc, #164]	; (800cdd8 <HAL_RCC_ClockConfig+0x1b0>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f003 0307 	and.w	r3, r3, #7
 800cd38:	683a      	ldr	r2, [r7, #0]
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d210      	bcs.n	800cd60 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cd3e:	4b26      	ldr	r3, [pc, #152]	; (800cdd8 <HAL_RCC_ClockConfig+0x1b0>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f023 0207 	bic.w	r2, r3, #7
 800cd46:	4924      	ldr	r1, [pc, #144]	; (800cdd8 <HAL_RCC_ClockConfig+0x1b0>)
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	4313      	orrs	r3, r2
 800cd4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd4e:	4b22      	ldr	r3, [pc, #136]	; (800cdd8 <HAL_RCC_ClockConfig+0x1b0>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f003 0307 	and.w	r3, r3, #7
 800cd56:	683a      	ldr	r2, [r7, #0]
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d001      	beq.n	800cd60 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	e036      	b.n	800cdce <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f003 0304 	and.w	r3, r3, #4
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d008      	beq.n	800cd7e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cd6c:	4b1b      	ldr	r3, [pc, #108]	; (800cddc <HAL_RCC_ClockConfig+0x1b4>)
 800cd6e:	689b      	ldr	r3, [r3, #8]
 800cd70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	68db      	ldr	r3, [r3, #12]
 800cd78:	4918      	ldr	r1, [pc, #96]	; (800cddc <HAL_RCC_ClockConfig+0x1b4>)
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f003 0308 	and.w	r3, r3, #8
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d009      	beq.n	800cd9e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cd8a:	4b14      	ldr	r3, [pc, #80]	; (800cddc <HAL_RCC_ClockConfig+0x1b4>)
 800cd8c:	689b      	ldr	r3, [r3, #8]
 800cd8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	691b      	ldr	r3, [r3, #16]
 800cd96:	00db      	lsls	r3, r3, #3
 800cd98:	4910      	ldr	r1, [pc, #64]	; (800cddc <HAL_RCC_ClockConfig+0x1b4>)
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cd9e:	f000 f825 	bl	800cdec <HAL_RCC_GetSysClockFreq>
 800cda2:	4601      	mov	r1, r0
 800cda4:	4b0d      	ldr	r3, [pc, #52]	; (800cddc <HAL_RCC_ClockConfig+0x1b4>)
 800cda6:	689b      	ldr	r3, [r3, #8]
 800cda8:	091b      	lsrs	r3, r3, #4
 800cdaa:	f003 030f 	and.w	r3, r3, #15
 800cdae:	4a0c      	ldr	r2, [pc, #48]	; (800cde0 <HAL_RCC_ClockConfig+0x1b8>)
 800cdb0:	5cd3      	ldrb	r3, [r2, r3]
 800cdb2:	f003 031f 	and.w	r3, r3, #31
 800cdb6:	fa21 f303 	lsr.w	r3, r1, r3
 800cdba:	4a0a      	ldr	r2, [pc, #40]	; (800cde4 <HAL_RCC_ClockConfig+0x1bc>)
 800cdbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800cdbe:	4b0a      	ldr	r3, [pc, #40]	; (800cde8 <HAL_RCC_ClockConfig+0x1c0>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f7fd faf0 	bl	800a3a8 <HAL_InitTick>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	72fb      	strb	r3, [r7, #11]

  return status;
 800cdcc:	7afb      	ldrb	r3, [r7, #11]
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3710      	adds	r7, #16
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
 800cdd6:	bf00      	nop
 800cdd8:	40022000 	.word	0x40022000
 800cddc:	40021000 	.word	0x40021000
 800cde0:	08016d6c 	.word	0x08016d6c
 800cde4:	2000018c 	.word	0x2000018c
 800cde8:	20000488 	.word	0x20000488

0800cdec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b089      	sub	sp, #36	; 0x24
 800cdf0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	61fb      	str	r3, [r7, #28]
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cdfa:	4b3d      	ldr	r3, [pc, #244]	; (800cef0 <HAL_RCC_GetSysClockFreq+0x104>)
 800cdfc:	689b      	ldr	r3, [r3, #8]
 800cdfe:	f003 030c 	and.w	r3, r3, #12
 800ce02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ce04:	4b3a      	ldr	r3, [pc, #232]	; (800cef0 <HAL_RCC_GetSysClockFreq+0x104>)
 800ce06:	68db      	ldr	r3, [r3, #12]
 800ce08:	f003 0303 	and.w	r3, r3, #3
 800ce0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d005      	beq.n	800ce20 <HAL_RCC_GetSysClockFreq+0x34>
 800ce14:	693b      	ldr	r3, [r7, #16]
 800ce16:	2b0c      	cmp	r3, #12
 800ce18:	d121      	bne.n	800ce5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d11e      	bne.n	800ce5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800ce20:	4b33      	ldr	r3, [pc, #204]	; (800cef0 <HAL_RCC_GetSysClockFreq+0x104>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f003 0308 	and.w	r3, r3, #8
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d107      	bne.n	800ce3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ce2c:	4b30      	ldr	r3, [pc, #192]	; (800cef0 <HAL_RCC_GetSysClockFreq+0x104>)
 800ce2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ce32:	0a1b      	lsrs	r3, r3, #8
 800ce34:	f003 030f 	and.w	r3, r3, #15
 800ce38:	61fb      	str	r3, [r7, #28]
 800ce3a:	e005      	b.n	800ce48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ce3c:	4b2c      	ldr	r3, [pc, #176]	; (800cef0 <HAL_RCC_GetSysClockFreq+0x104>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	091b      	lsrs	r3, r3, #4
 800ce42:	f003 030f 	and.w	r3, r3, #15
 800ce46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ce48:	4a2a      	ldr	r2, [pc, #168]	; (800cef4 <HAL_RCC_GetSysClockFreq+0x108>)
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d10d      	bne.n	800ce74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ce5c:	e00a      	b.n	800ce74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	2b04      	cmp	r3, #4
 800ce62:	d102      	bne.n	800ce6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ce64:	4b24      	ldr	r3, [pc, #144]	; (800cef8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800ce66:	61bb      	str	r3, [r7, #24]
 800ce68:	e004      	b.n	800ce74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	2b08      	cmp	r3, #8
 800ce6e:	d101      	bne.n	800ce74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ce70:	4b22      	ldr	r3, [pc, #136]	; (800cefc <HAL_RCC_GetSysClockFreq+0x110>)
 800ce72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	2b0c      	cmp	r3, #12
 800ce78:	d133      	bne.n	800cee2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ce7a:	4b1d      	ldr	r3, [pc, #116]	; (800cef0 <HAL_RCC_GetSysClockFreq+0x104>)
 800ce7c:	68db      	ldr	r3, [r3, #12]
 800ce7e:	f003 0303 	and.w	r3, r3, #3
 800ce82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	2b02      	cmp	r3, #2
 800ce88:	d002      	beq.n	800ce90 <HAL_RCC_GetSysClockFreq+0xa4>
 800ce8a:	2b03      	cmp	r3, #3
 800ce8c:	d003      	beq.n	800ce96 <HAL_RCC_GetSysClockFreq+0xaa>
 800ce8e:	e005      	b.n	800ce9c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800ce90:	4b19      	ldr	r3, [pc, #100]	; (800cef8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800ce92:	617b      	str	r3, [r7, #20]
      break;
 800ce94:	e005      	b.n	800cea2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800ce96:	4b19      	ldr	r3, [pc, #100]	; (800cefc <HAL_RCC_GetSysClockFreq+0x110>)
 800ce98:	617b      	str	r3, [r7, #20]
      break;
 800ce9a:	e002      	b.n	800cea2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800ce9c:	69fb      	ldr	r3, [r7, #28]
 800ce9e:	617b      	str	r3, [r7, #20]
      break;
 800cea0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cea2:	4b13      	ldr	r3, [pc, #76]	; (800cef0 <HAL_RCC_GetSysClockFreq+0x104>)
 800cea4:	68db      	ldr	r3, [r3, #12]
 800cea6:	091b      	lsrs	r3, r3, #4
 800cea8:	f003 0307 	and.w	r3, r3, #7
 800ceac:	3301      	adds	r3, #1
 800ceae:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ceb0:	4b0f      	ldr	r3, [pc, #60]	; (800cef0 <HAL_RCC_GetSysClockFreq+0x104>)
 800ceb2:	68db      	ldr	r3, [r3, #12]
 800ceb4:	0a1b      	lsrs	r3, r3, #8
 800ceb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ceba:	697a      	ldr	r2, [r7, #20]
 800cebc:	fb02 f203 	mul.w	r2, r2, r3
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cec6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cec8:	4b09      	ldr	r3, [pc, #36]	; (800cef0 <HAL_RCC_GetSysClockFreq+0x104>)
 800ceca:	68db      	ldr	r3, [r3, #12]
 800cecc:	0e5b      	lsrs	r3, r3, #25
 800cece:	f003 0303 	and.w	r3, r3, #3
 800ced2:	3301      	adds	r3, #1
 800ced4:	005b      	lsls	r3, r3, #1
 800ced6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800ced8:	697a      	ldr	r2, [r7, #20]
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cee0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800cee2:	69bb      	ldr	r3, [r7, #24]
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3724      	adds	r7, #36	; 0x24
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr
 800cef0:	40021000 	.word	0x40021000
 800cef4:	08016d84 	.word	0x08016d84
 800cef8:	00f42400 	.word	0x00f42400
 800cefc:	007a1200 	.word	0x007a1200

0800cf00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cf00:	b480      	push	{r7}
 800cf02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cf04:	4b03      	ldr	r3, [pc, #12]	; (800cf14 <HAL_RCC_GetHCLKFreq+0x14>)
 800cf06:	681b      	ldr	r3, [r3, #0]
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr
 800cf12:	bf00      	nop
 800cf14:	2000018c 	.word	0x2000018c

0800cf18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800cf1c:	f7ff fff0 	bl	800cf00 <HAL_RCC_GetHCLKFreq>
 800cf20:	4601      	mov	r1, r0
 800cf22:	4b06      	ldr	r3, [pc, #24]	; (800cf3c <HAL_RCC_GetPCLK1Freq+0x24>)
 800cf24:	689b      	ldr	r3, [r3, #8]
 800cf26:	0a1b      	lsrs	r3, r3, #8
 800cf28:	f003 0307 	and.w	r3, r3, #7
 800cf2c:	4a04      	ldr	r2, [pc, #16]	; (800cf40 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cf2e:	5cd3      	ldrb	r3, [r2, r3]
 800cf30:	f003 031f 	and.w	r3, r3, #31
 800cf34:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	40021000 	.word	0x40021000
 800cf40:	08016d7c 	.word	0x08016d7c

0800cf44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800cf48:	f7ff ffda 	bl	800cf00 <HAL_RCC_GetHCLKFreq>
 800cf4c:	4601      	mov	r1, r0
 800cf4e:	4b06      	ldr	r3, [pc, #24]	; (800cf68 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	0adb      	lsrs	r3, r3, #11
 800cf54:	f003 0307 	and.w	r3, r3, #7
 800cf58:	4a04      	ldr	r2, [pc, #16]	; (800cf6c <HAL_RCC_GetPCLK2Freq+0x28>)
 800cf5a:	5cd3      	ldrb	r3, [r2, r3]
 800cf5c:	f003 031f 	and.w	r3, r3, #31
 800cf60:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	40021000 	.word	0x40021000
 800cf6c:	08016d7c 	.word	0x08016d7c

0800cf70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b086      	sub	sp, #24
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800cf78:	2300      	movs	r3, #0
 800cf7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800cf7c:	4b2a      	ldr	r3, [pc, #168]	; (800d028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cf7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d003      	beq.n	800cf90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800cf88:	f7ff f938 	bl	800c1fc <HAL_PWREx_GetVoltageRange>
 800cf8c:	6178      	str	r0, [r7, #20]
 800cf8e:	e014      	b.n	800cfba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800cf90:	4b25      	ldr	r3, [pc, #148]	; (800d028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cf92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf94:	4a24      	ldr	r2, [pc, #144]	; (800d028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cf96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf9a:	6593      	str	r3, [r2, #88]	; 0x58
 800cf9c:	4b22      	ldr	r3, [pc, #136]	; (800d028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cf9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfa4:	60fb      	str	r3, [r7, #12]
 800cfa6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800cfa8:	f7ff f928 	bl	800c1fc <HAL_PWREx_GetVoltageRange>
 800cfac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800cfae:	4b1e      	ldr	r3, [pc, #120]	; (800d028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cfb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfb2:	4a1d      	ldr	r2, [pc, #116]	; (800d028 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800cfb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cfb8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfc0:	d10b      	bne.n	800cfda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2b80      	cmp	r3, #128	; 0x80
 800cfc6:	d919      	bls.n	800cffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2ba0      	cmp	r3, #160	; 0xa0
 800cfcc:	d902      	bls.n	800cfd4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800cfce:	2302      	movs	r3, #2
 800cfd0:	613b      	str	r3, [r7, #16]
 800cfd2:	e013      	b.n	800cffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	613b      	str	r3, [r7, #16]
 800cfd8:	e010      	b.n	800cffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2b80      	cmp	r3, #128	; 0x80
 800cfde:	d902      	bls.n	800cfe6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800cfe0:	2303      	movs	r3, #3
 800cfe2:	613b      	str	r3, [r7, #16]
 800cfe4:	e00a      	b.n	800cffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2b80      	cmp	r3, #128	; 0x80
 800cfea:	d102      	bne.n	800cff2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800cfec:	2302      	movs	r3, #2
 800cfee:	613b      	str	r3, [r7, #16]
 800cff0:	e004      	b.n	800cffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2b70      	cmp	r3, #112	; 0x70
 800cff6:	d101      	bne.n	800cffc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800cff8:	2301      	movs	r3, #1
 800cffa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800cffc:	4b0b      	ldr	r3, [pc, #44]	; (800d02c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f023 0207 	bic.w	r2, r3, #7
 800d004:	4909      	ldr	r1, [pc, #36]	; (800d02c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	4313      	orrs	r3, r2
 800d00a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800d00c:	4b07      	ldr	r3, [pc, #28]	; (800d02c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	f003 0307 	and.w	r3, r3, #7
 800d014:	693a      	ldr	r2, [r7, #16]
 800d016:	429a      	cmp	r2, r3
 800d018:	d001      	beq.n	800d01e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800d01a:	2301      	movs	r3, #1
 800d01c:	e000      	b.n	800d020 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800d01e:	2300      	movs	r3, #0
}
 800d020:	4618      	mov	r0, r3
 800d022:	3718      	adds	r7, #24
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}
 800d028:	40021000 	.word	0x40021000
 800d02c:	40022000 	.word	0x40022000

0800d030 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b086      	sub	sp, #24
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d038:	2300      	movs	r3, #0
 800d03a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d03c:	2300      	movs	r3, #0
 800d03e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d03f      	beq.n	800d0cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d050:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d054:	d01c      	beq.n	800d090 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800d056:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d05a:	d802      	bhi.n	800d062 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d00e      	beq.n	800d07e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800d060:	e01f      	b.n	800d0a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 800d062:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d066:	d003      	beq.n	800d070 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800d068:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800d06c:	d01c      	beq.n	800d0a8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800d06e:	e018      	b.n	800d0a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800d070:	4b85      	ldr	r3, [pc, #532]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d072:	68db      	ldr	r3, [r3, #12]
 800d074:	4a84      	ldr	r2, [pc, #528]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d07a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d07c:	e015      	b.n	800d0aa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	3304      	adds	r3, #4
 800d082:	2100      	movs	r1, #0
 800d084:	4618      	mov	r0, r3
 800d086:	f000 fac9 	bl	800d61c <RCCEx_PLLSAI1_Config>
 800d08a:	4603      	mov	r3, r0
 800d08c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d08e:	e00c      	b.n	800d0aa <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	3320      	adds	r3, #32
 800d094:	2100      	movs	r1, #0
 800d096:	4618      	mov	r0, r3
 800d098:	f000 fbb0 	bl	800d7fc <RCCEx_PLLSAI2_Config>
 800d09c:	4603      	mov	r3, r0
 800d09e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800d0a0:	e003      	b.n	800d0aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	74fb      	strb	r3, [r7, #19]
      break;
 800d0a6:	e000      	b.n	800d0aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800d0a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d0aa:	7cfb      	ldrb	r3, [r7, #19]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d10b      	bne.n	800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d0b0:	4b75      	ldr	r3, [pc, #468]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d0b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0be:	4972      	ldr	r1, [pc, #456]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d0c0:	4313      	orrs	r3, r2
 800d0c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d0c6:	e001      	b.n	800d0cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0c8:	7cfb      	ldrb	r3, [r7, #19]
 800d0ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d03f      	beq.n	800d158 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d0e0:	d01c      	beq.n	800d11c <HAL_RCCEx_PeriphCLKConfig+0xec>
 800d0e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d0e6:	d802      	bhi.n	800d0ee <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d00e      	beq.n	800d10a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800d0ec:	e01f      	b.n	800d12e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800d0ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d0f2:	d003      	beq.n	800d0fc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800d0f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d0f8:	d01c      	beq.n	800d134 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800d0fa:	e018      	b.n	800d12e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800d0fc:	4b62      	ldr	r3, [pc, #392]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d0fe:	68db      	ldr	r3, [r3, #12]
 800d100:	4a61      	ldr	r2, [pc, #388]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d106:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d108:	e015      	b.n	800d136 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	3304      	adds	r3, #4
 800d10e:	2100      	movs	r1, #0
 800d110:	4618      	mov	r0, r3
 800d112:	f000 fa83 	bl	800d61c <RCCEx_PLLSAI1_Config>
 800d116:	4603      	mov	r3, r0
 800d118:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d11a:	e00c      	b.n	800d136 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	3320      	adds	r3, #32
 800d120:	2100      	movs	r1, #0
 800d122:	4618      	mov	r0, r3
 800d124:	f000 fb6a 	bl	800d7fc <RCCEx_PLLSAI2_Config>
 800d128:	4603      	mov	r3, r0
 800d12a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800d12c:	e003      	b.n	800d136 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d12e:	2301      	movs	r3, #1
 800d130:	74fb      	strb	r3, [r7, #19]
      break;
 800d132:	e000      	b.n	800d136 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800d134:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d136:	7cfb      	ldrb	r3, [r7, #19]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d10b      	bne.n	800d154 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d13c:	4b52      	ldr	r3, [pc, #328]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d13e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d142:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d14a:	494f      	ldr	r1, [pc, #316]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d14c:	4313      	orrs	r3, r2
 800d14e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d152:	e001      	b.n	800d158 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d154:	7cfb      	ldrb	r3, [r7, #19]
 800d156:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d160:	2b00      	cmp	r3, #0
 800d162:	f000 80a0 	beq.w	800d2a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d166:	2300      	movs	r3, #0
 800d168:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d16a:	4b47      	ldr	r3, [pc, #284]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d16c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d16e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d172:	2b00      	cmp	r3, #0
 800d174:	d101      	bne.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800d176:	2301      	movs	r3, #1
 800d178:	e000      	b.n	800d17c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800d17a:	2300      	movs	r3, #0
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d00d      	beq.n	800d19c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d180:	4b41      	ldr	r3, [pc, #260]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d184:	4a40      	ldr	r2, [pc, #256]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d18a:	6593      	str	r3, [r2, #88]	; 0x58
 800d18c:	4b3e      	ldr	r3, [pc, #248]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d18e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d194:	60bb      	str	r3, [r7, #8]
 800d196:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d198:	2301      	movs	r3, #1
 800d19a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d19c:	4b3b      	ldr	r3, [pc, #236]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4a3a      	ldr	r2, [pc, #232]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d1a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d1a8:	f7fd f94e 	bl	800a448 <HAL_GetTick>
 800d1ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d1ae:	e009      	b.n	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d1b0:	f7fd f94a 	bl	800a448 <HAL_GetTick>
 800d1b4:	4602      	mov	r2, r0
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	1ad3      	subs	r3, r2, r3
 800d1ba:	2b02      	cmp	r3, #2
 800d1bc:	d902      	bls.n	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800d1be:	2303      	movs	r3, #3
 800d1c0:	74fb      	strb	r3, [r7, #19]
        break;
 800d1c2:	e005      	b.n	800d1d0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800d1c4:	4b31      	ldr	r3, [pc, #196]	; (800d28c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d0ef      	beq.n	800d1b0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800d1d0:	7cfb      	ldrb	r3, [r7, #19]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d15c      	bne.n	800d290 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d1d6:	4b2c      	ldr	r3, [pc, #176]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d1d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d01f      	beq.n	800d228 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1ee:	697a      	ldr	r2, [r7, #20]
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d019      	beq.n	800d228 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d1f4:	4b24      	ldr	r3, [pc, #144]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d1f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d1fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d200:	4b21      	ldr	r3, [pc, #132]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d206:	4a20      	ldr	r2, [pc, #128]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d20c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d210:	4b1d      	ldr	r3, [pc, #116]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d216:	4a1c      	ldr	r2, [pc, #112]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d21c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d220:	4a19      	ldr	r2, [pc, #100]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	f003 0301 	and.w	r3, r3, #1
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d016      	beq.n	800d260 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d232:	f7fd f909 	bl	800a448 <HAL_GetTick>
 800d236:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d238:	e00b      	b.n	800d252 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d23a:	f7fd f905 	bl	800a448 <HAL_GetTick>
 800d23e:	4602      	mov	r2, r0
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	1ad3      	subs	r3, r2, r3
 800d244:	f241 3288 	movw	r2, #5000	; 0x1388
 800d248:	4293      	cmp	r3, r2
 800d24a:	d902      	bls.n	800d252 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800d24c:	2303      	movs	r3, #3
 800d24e:	74fb      	strb	r3, [r7, #19]
            break;
 800d250:	e006      	b.n	800d260 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d252:	4b0d      	ldr	r3, [pc, #52]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d258:	f003 0302 	and.w	r3, r3, #2
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d0ec      	beq.n	800d23a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800d260:	7cfb      	ldrb	r3, [r7, #19]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d10c      	bne.n	800d280 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d266:	4b08      	ldr	r3, [pc, #32]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d26c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d276:	4904      	ldr	r1, [pc, #16]	; (800d288 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d278:	4313      	orrs	r3, r2
 800d27a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d27e:	e009      	b.n	800d294 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d280:	7cfb      	ldrb	r3, [r7, #19]
 800d282:	74bb      	strb	r3, [r7, #18]
 800d284:	e006      	b.n	800d294 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800d286:	bf00      	nop
 800d288:	40021000 	.word	0x40021000
 800d28c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d290:	7cfb      	ldrb	r3, [r7, #19]
 800d292:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d294:	7c7b      	ldrb	r3, [r7, #17]
 800d296:	2b01      	cmp	r3, #1
 800d298:	d105      	bne.n	800d2a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d29a:	4b9e      	ldr	r3, [pc, #632]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d29c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d29e:	4a9d      	ldr	r2, [pc, #628]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d2a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d2a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f003 0301 	and.w	r3, r3, #1
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d00a      	beq.n	800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d2b2:	4b98      	ldr	r3, [pc, #608]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d2b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2b8:	f023 0203 	bic.w	r2, r3, #3
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2c0:	4994      	ldr	r1, [pc, #592]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d2c2:	4313      	orrs	r3, r2
 800d2c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f003 0302 	and.w	r3, r3, #2
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d00a      	beq.n	800d2ea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d2d4:	4b8f      	ldr	r3, [pc, #572]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d2d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2da:	f023 020c 	bic.w	r2, r3, #12
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2e2:	498c      	ldr	r1, [pc, #560]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d2e4:	4313      	orrs	r3, r2
 800d2e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f003 0304 	and.w	r3, r3, #4
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d00a      	beq.n	800d30c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d2f6:	4b87      	ldr	r3, [pc, #540]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d2f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d304:	4983      	ldr	r1, [pc, #524]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d306:	4313      	orrs	r3, r2
 800d308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f003 0308 	and.w	r3, r3, #8
 800d314:	2b00      	cmp	r3, #0
 800d316:	d00a      	beq.n	800d32e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d318:	4b7e      	ldr	r3, [pc, #504]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d31a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d31e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d326:	497b      	ldr	r1, [pc, #492]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d328:	4313      	orrs	r3, r2
 800d32a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	f003 0310 	and.w	r3, r3, #16
 800d336:	2b00      	cmp	r3, #0
 800d338:	d00a      	beq.n	800d350 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d33a:	4b76      	ldr	r3, [pc, #472]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d33c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d340:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d348:	4972      	ldr	r1, [pc, #456]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d34a:	4313      	orrs	r3, r2
 800d34c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	f003 0320 	and.w	r3, r3, #32
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d00a      	beq.n	800d372 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d35c:	4b6d      	ldr	r3, [pc, #436]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d35e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d362:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d36a:	496a      	ldr	r1, [pc, #424]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d36c:	4313      	orrs	r3, r2
 800d36e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d00a      	beq.n	800d394 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d37e:	4b65      	ldr	r3, [pc, #404]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d384:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d38c:	4961      	ldr	r1, [pc, #388]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d38e:	4313      	orrs	r3, r2
 800d390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d00a      	beq.n	800d3b6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d3a0:	4b5c      	ldr	r3, [pc, #368]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d3a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3ae:	4959      	ldr	r1, [pc, #356]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d00a      	beq.n	800d3d8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d3c2:	4b54      	ldr	r3, [pc, #336]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d3c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3d0:	4950      	ldr	r1, [pc, #320]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d3d2:	4313      	orrs	r3, r2
 800d3d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d00a      	beq.n	800d3fa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d3e4:	4b4b      	ldr	r3, [pc, #300]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d3e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3f2:	4948      	ldr	r1, [pc, #288]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d3f4:	4313      	orrs	r3, r2
 800d3f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d402:	2b00      	cmp	r3, #0
 800d404:	d00a      	beq.n	800d41c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d406:	4b43      	ldr	r3, [pc, #268]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d40c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d414:	493f      	ldr	r1, [pc, #252]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d416:	4313      	orrs	r3, r2
 800d418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d424:	2b00      	cmp	r3, #0
 800d426:	d028      	beq.n	800d47a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d428:	4b3a      	ldr	r3, [pc, #232]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d42a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d42e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d436:	4937      	ldr	r1, [pc, #220]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d438:	4313      	orrs	r3, r2
 800d43a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d442:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d446:	d106      	bne.n	800d456 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d448:	4b32      	ldr	r3, [pc, #200]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d44a:	68db      	ldr	r3, [r3, #12]
 800d44c:	4a31      	ldr	r2, [pc, #196]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d44e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d452:	60d3      	str	r3, [r2, #12]
 800d454:	e011      	b.n	800d47a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d45a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d45e:	d10c      	bne.n	800d47a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	3304      	adds	r3, #4
 800d464:	2101      	movs	r1, #1
 800d466:	4618      	mov	r0, r3
 800d468:	f000 f8d8 	bl	800d61c <RCCEx_PLLSAI1_Config>
 800d46c:	4603      	mov	r3, r0
 800d46e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800d470:	7cfb      	ldrb	r3, [r7, #19]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d001      	beq.n	800d47a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800d476:	7cfb      	ldrb	r3, [r7, #19]
 800d478:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d482:	2b00      	cmp	r3, #0
 800d484:	d028      	beq.n	800d4d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d486:	4b23      	ldr	r3, [pc, #140]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d48c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d494:	491f      	ldr	r1, [pc, #124]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d496:	4313      	orrs	r3, r2
 800d498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d4a4:	d106      	bne.n	800d4b4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d4a6:	4b1b      	ldr	r3, [pc, #108]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d4a8:	68db      	ldr	r3, [r3, #12]
 800d4aa:	4a1a      	ldr	r2, [pc, #104]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d4ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4b0:	60d3      	str	r3, [r2, #12]
 800d4b2:	e011      	b.n	800d4d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d4bc:	d10c      	bne.n	800d4d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	3304      	adds	r3, #4
 800d4c2:	2101      	movs	r1, #1
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f000 f8a9 	bl	800d61c <RCCEx_PLLSAI1_Config>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d4ce:	7cfb      	ldrb	r3, [r7, #19]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d001      	beq.n	800d4d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800d4d4:	7cfb      	ldrb	r3, [r7, #19]
 800d4d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d02b      	beq.n	800d53c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d4e4:	4b0b      	ldr	r3, [pc, #44]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d4e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4f2:	4908      	ldr	r1, [pc, #32]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d4f4:	4313      	orrs	r3, r2
 800d4f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d502:	d109      	bne.n	800d518 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d504:	4b03      	ldr	r3, [pc, #12]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d506:	68db      	ldr	r3, [r3, #12]
 800d508:	4a02      	ldr	r2, [pc, #8]	; (800d514 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800d50a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d50e:	60d3      	str	r3, [r2, #12]
 800d510:	e014      	b.n	800d53c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800d512:	bf00      	nop
 800d514:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d51c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d520:	d10c      	bne.n	800d53c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	3304      	adds	r3, #4
 800d526:	2101      	movs	r1, #1
 800d528:	4618      	mov	r0, r3
 800d52a:	f000 f877 	bl	800d61c <RCCEx_PLLSAI1_Config>
 800d52e:	4603      	mov	r3, r0
 800d530:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d532:	7cfb      	ldrb	r3, [r7, #19]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d001      	beq.n	800d53c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800d538:	7cfb      	ldrb	r3, [r7, #19]
 800d53a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d544:	2b00      	cmp	r3, #0
 800d546:	d02f      	beq.n	800d5a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d548:	4b2b      	ldr	r3, [pc, #172]	; (800d5f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d54a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d54e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d556:	4928      	ldr	r1, [pc, #160]	; (800d5f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d558:	4313      	orrs	r3, r2
 800d55a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d566:	d10d      	bne.n	800d584 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	3304      	adds	r3, #4
 800d56c:	2102      	movs	r1, #2
 800d56e:	4618      	mov	r0, r3
 800d570:	f000 f854 	bl	800d61c <RCCEx_PLLSAI1_Config>
 800d574:	4603      	mov	r3, r0
 800d576:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d578:	7cfb      	ldrb	r3, [r7, #19]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d014      	beq.n	800d5a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800d57e:	7cfb      	ldrb	r3, [r7, #19]
 800d580:	74bb      	strb	r3, [r7, #18]
 800d582:	e011      	b.n	800d5a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d58c:	d10c      	bne.n	800d5a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	3320      	adds	r3, #32
 800d592:	2102      	movs	r1, #2
 800d594:	4618      	mov	r0, r3
 800d596:	f000 f931 	bl	800d7fc <RCCEx_PLLSAI2_Config>
 800d59a:	4603      	mov	r3, r0
 800d59c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800d59e:	7cfb      	ldrb	r3, [r7, #19]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d001      	beq.n	800d5a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800d5a4:	7cfb      	ldrb	r3, [r7, #19]
 800d5a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d00a      	beq.n	800d5ca <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d5b4:	4b10      	ldr	r3, [pc, #64]	; (800d5f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d5b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5c2:	490d      	ldr	r1, [pc, #52]	; (800d5f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d5c4:	4313      	orrs	r3, r2
 800d5c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d00b      	beq.n	800d5ee <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d5d6:	4b08      	ldr	r3, [pc, #32]	; (800d5f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d5d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5e6:	4904      	ldr	r1, [pc, #16]	; (800d5f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d5e8:	4313      	orrs	r3, r2
 800d5ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800d5ee:	7cbb      	ldrb	r3, [r7, #18]
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3718      	adds	r7, #24
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	40021000 	.word	0x40021000

0800d5fc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800d600:	4b05      	ldr	r3, [pc, #20]	; (800d618 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	4a04      	ldr	r2, [pc, #16]	; (800d618 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800d606:	f043 0304 	orr.w	r3, r3, #4
 800d60a:	6013      	str	r3, [r2, #0]
}
 800d60c:	bf00      	nop
 800d60e:	46bd      	mov	sp, r7
 800d610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d614:	4770      	bx	lr
 800d616:	bf00      	nop
 800d618:	40021000 	.word	0x40021000

0800d61c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b084      	sub	sp, #16
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d626:	2300      	movs	r3, #0
 800d628:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d62a:	4b73      	ldr	r3, [pc, #460]	; (800d7f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d62c:	68db      	ldr	r3, [r3, #12]
 800d62e:	f003 0303 	and.w	r3, r3, #3
 800d632:	2b00      	cmp	r3, #0
 800d634:	d018      	beq.n	800d668 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800d636:	4b70      	ldr	r3, [pc, #448]	; (800d7f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d638:	68db      	ldr	r3, [r3, #12]
 800d63a:	f003 0203 	and.w	r2, r3, #3
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	429a      	cmp	r2, r3
 800d644:	d10d      	bne.n	800d662 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
       ||
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d009      	beq.n	800d662 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800d64e:	4b6a      	ldr	r3, [pc, #424]	; (800d7f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d650:	68db      	ldr	r3, [r3, #12]
 800d652:	091b      	lsrs	r3, r3, #4
 800d654:	f003 0307 	and.w	r3, r3, #7
 800d658:	1c5a      	adds	r2, r3, #1
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	685b      	ldr	r3, [r3, #4]
       ||
 800d65e:	429a      	cmp	r2, r3
 800d660:	d044      	beq.n	800d6ec <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800d662:	2301      	movs	r3, #1
 800d664:	73fb      	strb	r3, [r7, #15]
 800d666:	e041      	b.n	800d6ec <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	2b02      	cmp	r3, #2
 800d66e:	d00c      	beq.n	800d68a <RCCEx_PLLSAI1_Config+0x6e>
 800d670:	2b03      	cmp	r3, #3
 800d672:	d013      	beq.n	800d69c <RCCEx_PLLSAI1_Config+0x80>
 800d674:	2b01      	cmp	r3, #1
 800d676:	d120      	bne.n	800d6ba <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d678:	4b5f      	ldr	r3, [pc, #380]	; (800d7f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f003 0302 	and.w	r3, r3, #2
 800d680:	2b00      	cmp	r3, #0
 800d682:	d11d      	bne.n	800d6c0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800d684:	2301      	movs	r3, #1
 800d686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d688:	e01a      	b.n	800d6c0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d68a:	4b5b      	ldr	r3, [pc, #364]	; (800d7f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d692:	2b00      	cmp	r3, #0
 800d694:	d116      	bne.n	800d6c4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800d696:	2301      	movs	r3, #1
 800d698:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d69a:	e013      	b.n	800d6c4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d69c:	4b56      	ldr	r3, [pc, #344]	; (800d7f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d10f      	bne.n	800d6c8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d6a8:	4b53      	ldr	r3, [pc, #332]	; (800d7f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d109      	bne.n	800d6c8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d6b8:	e006      	b.n	800d6c8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	73fb      	strb	r3, [r7, #15]
      break;
 800d6be:	e004      	b.n	800d6ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 800d6c0:	bf00      	nop
 800d6c2:	e002      	b.n	800d6ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 800d6c4:	bf00      	nop
 800d6c6:	e000      	b.n	800d6ca <RCCEx_PLLSAI1_Config+0xae>
      break;
 800d6c8:	bf00      	nop
    }

    if(status == HAL_OK)
 800d6ca:	7bfb      	ldrb	r3, [r7, #15]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d10d      	bne.n	800d6ec <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d6d0:	4b49      	ldr	r3, [pc, #292]	; (800d7f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d6d2:	68db      	ldr	r3, [r3, #12]
 800d6d4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6819      	ldr	r1, [r3, #0]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	3b01      	subs	r3, #1
 800d6e2:	011b      	lsls	r3, r3, #4
 800d6e4:	430b      	orrs	r3, r1
 800d6e6:	4944      	ldr	r1, [pc, #272]	; (800d7f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d6e8:	4313      	orrs	r3, r2
 800d6ea:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d6ec:	7bfb      	ldrb	r3, [r7, #15]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d17d      	bne.n	800d7ee <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800d6f2:	4b41      	ldr	r3, [pc, #260]	; (800d7f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4a40      	ldr	r2, [pc, #256]	; (800d7f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d6f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d6fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6fe:	f7fc fea3 	bl	800a448 <HAL_GetTick>
 800d702:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d704:	e009      	b.n	800d71a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d706:	f7fc fe9f 	bl	800a448 <HAL_GetTick>
 800d70a:	4602      	mov	r2, r0
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	1ad3      	subs	r3, r2, r3
 800d710:	2b02      	cmp	r3, #2
 800d712:	d902      	bls.n	800d71a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800d714:	2303      	movs	r3, #3
 800d716:	73fb      	strb	r3, [r7, #15]
        break;
 800d718:	e005      	b.n	800d726 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800d71a:	4b37      	ldr	r3, [pc, #220]	; (800d7f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d722:	2b00      	cmp	r3, #0
 800d724:	d1ef      	bne.n	800d706 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800d726:	7bfb      	ldrb	r3, [r7, #15]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d160      	bne.n	800d7ee <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d111      	bne.n	800d756 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d732:	4b31      	ldr	r3, [pc, #196]	; (800d7f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d734:	691b      	ldr	r3, [r3, #16]
 800d736:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800d73a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	6892      	ldr	r2, [r2, #8]
 800d742:	0211      	lsls	r1, r2, #8
 800d744:	687a      	ldr	r2, [r7, #4]
 800d746:	68d2      	ldr	r2, [r2, #12]
 800d748:	0912      	lsrs	r2, r2, #4
 800d74a:	0452      	lsls	r2, r2, #17
 800d74c:	430a      	orrs	r2, r1
 800d74e:	492a      	ldr	r1, [pc, #168]	; (800d7f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d750:	4313      	orrs	r3, r2
 800d752:	610b      	str	r3, [r1, #16]
 800d754:	e027      	b.n	800d7a6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d112      	bne.n	800d782 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d75c:	4b26      	ldr	r3, [pc, #152]	; (800d7f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d75e:	691b      	ldr	r3, [r3, #16]
 800d760:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800d764:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d768:	687a      	ldr	r2, [r7, #4]
 800d76a:	6892      	ldr	r2, [r2, #8]
 800d76c:	0211      	lsls	r1, r2, #8
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	6912      	ldr	r2, [r2, #16]
 800d772:	0852      	lsrs	r2, r2, #1
 800d774:	3a01      	subs	r2, #1
 800d776:	0552      	lsls	r2, r2, #21
 800d778:	430a      	orrs	r2, r1
 800d77a:	491f      	ldr	r1, [pc, #124]	; (800d7f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d77c:	4313      	orrs	r3, r2
 800d77e:	610b      	str	r3, [r1, #16]
 800d780:	e011      	b.n	800d7a6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800d782:	4b1d      	ldr	r3, [pc, #116]	; (800d7f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d784:	691b      	ldr	r3, [r3, #16]
 800d786:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800d78a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d78e:	687a      	ldr	r2, [r7, #4]
 800d790:	6892      	ldr	r2, [r2, #8]
 800d792:	0211      	lsls	r1, r2, #8
 800d794:	687a      	ldr	r2, [r7, #4]
 800d796:	6952      	ldr	r2, [r2, #20]
 800d798:	0852      	lsrs	r2, r2, #1
 800d79a:	3a01      	subs	r2, #1
 800d79c:	0652      	lsls	r2, r2, #25
 800d79e:	430a      	orrs	r2, r1
 800d7a0:	4915      	ldr	r1, [pc, #84]	; (800d7f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800d7a6:	4b14      	ldr	r3, [pc, #80]	; (800d7f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	4a13      	ldr	r2, [pc, #76]	; (800d7f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d7ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d7b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d7b2:	f7fc fe49 	bl	800a448 <HAL_GetTick>
 800d7b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d7b8:	e009      	b.n	800d7ce <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d7ba:	f7fc fe45 	bl	800a448 <HAL_GetTick>
 800d7be:	4602      	mov	r2, r0
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	1ad3      	subs	r3, r2, r3
 800d7c4:	2b02      	cmp	r3, #2
 800d7c6:	d902      	bls.n	800d7ce <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800d7c8:	2303      	movs	r3, #3
 800d7ca:	73fb      	strb	r3, [r7, #15]
          break;
 800d7cc:	e005      	b.n	800d7da <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d7ce:	4b0a      	ldr	r3, [pc, #40]	; (800d7f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d0ef      	beq.n	800d7ba <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800d7da:	7bfb      	ldrb	r3, [r7, #15]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d106      	bne.n	800d7ee <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800d7e0:	4b05      	ldr	r3, [pc, #20]	; (800d7f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d7e2:	691a      	ldr	r2, [r3, #16]
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	699b      	ldr	r3, [r3, #24]
 800d7e8:	4903      	ldr	r1, [pc, #12]	; (800d7f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800d7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3710      	adds	r7, #16
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}
 800d7f8:	40021000 	.word	0x40021000

0800d7fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b084      	sub	sp, #16
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d806:	2300      	movs	r3, #0
 800d808:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d80a:	4b68      	ldr	r3, [pc, #416]	; (800d9ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800d80c:	68db      	ldr	r3, [r3, #12]
 800d80e:	f003 0303 	and.w	r3, r3, #3
 800d812:	2b00      	cmp	r3, #0
 800d814:	d018      	beq.n	800d848 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800d816:	4b65      	ldr	r3, [pc, #404]	; (800d9ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800d818:	68db      	ldr	r3, [r3, #12]
 800d81a:	f003 0203 	and.w	r2, r3, #3
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	429a      	cmp	r2, r3
 800d824:	d10d      	bne.n	800d842 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
       ||
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d009      	beq.n	800d842 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800d82e:	4b5f      	ldr	r3, [pc, #380]	; (800d9ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800d830:	68db      	ldr	r3, [r3, #12]
 800d832:	091b      	lsrs	r3, r3, #4
 800d834:	f003 0307 	and.w	r3, r3, #7
 800d838:	1c5a      	adds	r2, r3, #1
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	685b      	ldr	r3, [r3, #4]
       ||
 800d83e:	429a      	cmp	r2, r3
 800d840:	d044      	beq.n	800d8cc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800d842:	2301      	movs	r3, #1
 800d844:	73fb      	strb	r3, [r7, #15]
 800d846:	e041      	b.n	800d8cc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	2b02      	cmp	r3, #2
 800d84e:	d00c      	beq.n	800d86a <RCCEx_PLLSAI2_Config+0x6e>
 800d850:	2b03      	cmp	r3, #3
 800d852:	d013      	beq.n	800d87c <RCCEx_PLLSAI2_Config+0x80>
 800d854:	2b01      	cmp	r3, #1
 800d856:	d120      	bne.n	800d89a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d858:	4b54      	ldr	r3, [pc, #336]	; (800d9ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	f003 0302 	and.w	r3, r3, #2
 800d860:	2b00      	cmp	r3, #0
 800d862:	d11d      	bne.n	800d8a0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800d864:	2301      	movs	r3, #1
 800d866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d868:	e01a      	b.n	800d8a0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d86a:	4b50      	ldr	r3, [pc, #320]	; (800d9ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d872:	2b00      	cmp	r3, #0
 800d874:	d116      	bne.n	800d8a4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800d876:	2301      	movs	r3, #1
 800d878:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d87a:	e013      	b.n	800d8a4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d87c:	4b4b      	ldr	r3, [pc, #300]	; (800d9ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d884:	2b00      	cmp	r3, #0
 800d886:	d10f      	bne.n	800d8a8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d888:	4b48      	ldr	r3, [pc, #288]	; (800d9ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d890:	2b00      	cmp	r3, #0
 800d892:	d109      	bne.n	800d8a8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800d894:	2301      	movs	r3, #1
 800d896:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d898:	e006      	b.n	800d8a8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800d89a:	2301      	movs	r3, #1
 800d89c:	73fb      	strb	r3, [r7, #15]
      break;
 800d89e:	e004      	b.n	800d8aa <RCCEx_PLLSAI2_Config+0xae>
      break;
 800d8a0:	bf00      	nop
 800d8a2:	e002      	b.n	800d8aa <RCCEx_PLLSAI2_Config+0xae>
      break;
 800d8a4:	bf00      	nop
 800d8a6:	e000      	b.n	800d8aa <RCCEx_PLLSAI2_Config+0xae>
      break;
 800d8a8:	bf00      	nop
    }

    if(status == HAL_OK)
 800d8aa:	7bfb      	ldrb	r3, [r7, #15]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d10d      	bne.n	800d8cc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800d8b0:	4b3e      	ldr	r3, [pc, #248]	; (800d9ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800d8b2:	68db      	ldr	r3, [r3, #12]
 800d8b4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6819      	ldr	r1, [r3, #0]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	3b01      	subs	r3, #1
 800d8c2:	011b      	lsls	r3, r3, #4
 800d8c4:	430b      	orrs	r3, r1
 800d8c6:	4939      	ldr	r1, [pc, #228]	; (800d9ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800d8c8:	4313      	orrs	r3, r2
 800d8ca:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800d8cc:	7bfb      	ldrb	r3, [r7, #15]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d167      	bne.n	800d9a2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800d8d2:	4b36      	ldr	r3, [pc, #216]	; (800d9ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	4a35      	ldr	r2, [pc, #212]	; (800d9ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800d8d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d8dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d8de:	f7fc fdb3 	bl	800a448 <HAL_GetTick>
 800d8e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d8e4:	e009      	b.n	800d8fa <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d8e6:	f7fc fdaf 	bl	800a448 <HAL_GetTick>
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	1ad3      	subs	r3, r2, r3
 800d8f0:	2b02      	cmp	r3, #2
 800d8f2:	d902      	bls.n	800d8fa <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800d8f4:	2303      	movs	r3, #3
 800d8f6:	73fb      	strb	r3, [r7, #15]
        break;
 800d8f8:	e005      	b.n	800d906 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d8fa:	4b2c      	ldr	r3, [pc, #176]	; (800d9ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d902:	2b00      	cmp	r3, #0
 800d904:	d1ef      	bne.n	800d8e6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800d906:	7bfb      	ldrb	r3, [r7, #15]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d14a      	bne.n	800d9a2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d111      	bne.n	800d936 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d912:	4b26      	ldr	r3, [pc, #152]	; (800d9ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800d914:	695b      	ldr	r3, [r3, #20]
 800d916:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800d91a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d91e:	687a      	ldr	r2, [r7, #4]
 800d920:	6892      	ldr	r2, [r2, #8]
 800d922:	0211      	lsls	r1, r2, #8
 800d924:	687a      	ldr	r2, [r7, #4]
 800d926:	68d2      	ldr	r2, [r2, #12]
 800d928:	0912      	lsrs	r2, r2, #4
 800d92a:	0452      	lsls	r2, r2, #17
 800d92c:	430a      	orrs	r2, r1
 800d92e:	491f      	ldr	r1, [pc, #124]	; (800d9ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800d930:	4313      	orrs	r3, r2
 800d932:	614b      	str	r3, [r1, #20]
 800d934:	e011      	b.n	800d95a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d936:	4b1d      	ldr	r3, [pc, #116]	; (800d9ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800d938:	695b      	ldr	r3, [r3, #20]
 800d93a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800d93e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800d942:	687a      	ldr	r2, [r7, #4]
 800d944:	6892      	ldr	r2, [r2, #8]
 800d946:	0211      	lsls	r1, r2, #8
 800d948:	687a      	ldr	r2, [r7, #4]
 800d94a:	6912      	ldr	r2, [r2, #16]
 800d94c:	0852      	lsrs	r2, r2, #1
 800d94e:	3a01      	subs	r2, #1
 800d950:	0652      	lsls	r2, r2, #25
 800d952:	430a      	orrs	r2, r1
 800d954:	4915      	ldr	r1, [pc, #84]	; (800d9ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800d956:	4313      	orrs	r3, r2
 800d958:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800d95a:	4b14      	ldr	r3, [pc, #80]	; (800d9ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	4a13      	ldr	r2, [pc, #76]	; (800d9ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800d960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d964:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d966:	f7fc fd6f 	bl	800a448 <HAL_GetTick>
 800d96a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d96c:	e009      	b.n	800d982 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d96e:	f7fc fd6b 	bl	800a448 <HAL_GetTick>
 800d972:	4602      	mov	r2, r0
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	1ad3      	subs	r3, r2, r3
 800d978:	2b02      	cmp	r3, #2
 800d97a:	d902      	bls.n	800d982 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800d97c:	2303      	movs	r3, #3
 800d97e:	73fb      	strb	r3, [r7, #15]
          break;
 800d980:	e005      	b.n	800d98e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d982:	4b0a      	ldr	r3, [pc, #40]	; (800d9ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d0ef      	beq.n	800d96e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800d98e:	7bfb      	ldrb	r3, [r7, #15]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d106      	bne.n	800d9a2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800d994:	4b05      	ldr	r3, [pc, #20]	; (800d9ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800d996:	695a      	ldr	r2, [r3, #20]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	695b      	ldr	r3, [r3, #20]
 800d99c:	4903      	ldr	r1, [pc, #12]	; (800d9ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800d9a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3710      	adds	r7, #16
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}
 800d9ac:	40021000 	.word	0x40021000

0800d9b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b084      	sub	sp, #16
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d101      	bne.n	800d9c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d9be:	2301      	movs	r3, #1
 800d9c0:	e095      	b.n	800daee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d108      	bne.n	800d9dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	685b      	ldr	r3, [r3, #4]
 800d9ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d9d2:	d009      	beq.n	800d9e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	61da      	str	r2, [r3, #28]
 800d9da:	e005      	b.n	800d9e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2200      	movs	r2, #0
 800d9e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d9f4:	b2db      	uxtb	r3, r3
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d106      	bne.n	800da08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f7f6 fab2 	bl	8003f6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2202      	movs	r2, #2
 800da0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	681a      	ldr	r2, [r3, #0]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800da1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	68db      	ldr	r3, [r3, #12]
 800da24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800da28:	d902      	bls.n	800da30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800da2a:	2300      	movs	r3, #0
 800da2c:	60fb      	str	r3, [r7, #12]
 800da2e:	e002      	b.n	800da36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800da30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	68db      	ldr	r3, [r3, #12]
 800da3a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800da3e:	d007      	beq.n	800da50 <HAL_SPI_Init+0xa0>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800da48:	d002      	beq.n	800da50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2200      	movs	r2, #0
 800da4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	685b      	ldr	r3, [r3, #4]
 800da54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	689b      	ldr	r3, [r3, #8]
 800da5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800da60:	431a      	orrs	r2, r3
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	691b      	ldr	r3, [r3, #16]
 800da66:	f003 0302 	and.w	r3, r3, #2
 800da6a:	431a      	orrs	r2, r3
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	695b      	ldr	r3, [r3, #20]
 800da70:	f003 0301 	and.w	r3, r3, #1
 800da74:	431a      	orrs	r2, r3
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	699b      	ldr	r3, [r3, #24]
 800da7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800da7e:	431a      	orrs	r2, r3
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	69db      	ldr	r3, [r3, #28]
 800da84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800da88:	431a      	orrs	r2, r3
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6a1b      	ldr	r3, [r3, #32]
 800da8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da92:	ea42 0103 	orr.w	r1, r2, r3
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da9a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	430a      	orrs	r2, r1
 800daa4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	699b      	ldr	r3, [r3, #24]
 800daaa:	0c1b      	lsrs	r3, r3, #16
 800daac:	f003 0204 	and.w	r2, r3, #4
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dab4:	f003 0310 	and.w	r3, r3, #16
 800dab8:	431a      	orrs	r2, r3
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dabe:	f003 0308 	and.w	r3, r3, #8
 800dac2:	431a      	orrs	r2, r3
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	68db      	ldr	r3, [r3, #12]
 800dac8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800dacc:	ea42 0103 	orr.w	r1, r2, r3
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	430a      	orrs	r2, r1
 800dadc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2200      	movs	r2, #0
 800dae2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2201      	movs	r2, #1
 800dae8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800daec:	2300      	movs	r3, #0
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3710      	adds	r7, #16
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}

0800daf6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800daf6:	b580      	push	{r7, lr}
 800daf8:	b082      	sub	sp, #8
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d101      	bne.n	800db08 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800db04:	2301      	movs	r3, #1
 800db06:	e01a      	b.n	800db3e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2202      	movs	r2, #2
 800db0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	681a      	ldr	r2, [r3, #0]
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800db1e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f7f6 fa67 	bl	8003ff4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2200      	movs	r2, #0
 800db2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2200      	movs	r2, #0
 800db30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2200      	movs	r2, #0
 800db38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800db3c:	2300      	movs	r3, #0
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3708      	adds	r7, #8
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}

0800db46 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800db46:	b580      	push	{r7, lr}
 800db48:	b088      	sub	sp, #32
 800db4a:	af02      	add	r7, sp, #8
 800db4c:	60f8      	str	r0, [r7, #12]
 800db4e:	60b9      	str	r1, [r7, #8]
 800db50:	603b      	str	r3, [r7, #0]
 800db52:	4613      	mov	r3, r2
 800db54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800db56:	2300      	movs	r3, #0
 800db58:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800db62:	d112      	bne.n	800db8a <HAL_SPI_Receive+0x44>
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	689b      	ldr	r3, [r3, #8]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d10e      	bne.n	800db8a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	2204      	movs	r2, #4
 800db70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800db74:	88fa      	ldrh	r2, [r7, #6]
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	9300      	str	r3, [sp, #0]
 800db7a:	4613      	mov	r3, r2
 800db7c:	68ba      	ldr	r2, [r7, #8]
 800db7e:	68b9      	ldr	r1, [r7, #8]
 800db80:	68f8      	ldr	r0, [r7, #12]
 800db82:	f000 f910 	bl	800dda6 <HAL_SPI_TransmitReceive>
 800db86:	4603      	mov	r3, r0
 800db88:	e109      	b.n	800dd9e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800db90:	2b01      	cmp	r3, #1
 800db92:	d101      	bne.n	800db98 <HAL_SPI_Receive+0x52>
 800db94:	2302      	movs	r3, #2
 800db96:	e102      	b.n	800dd9e <HAL_SPI_Receive+0x258>
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2201      	movs	r2, #1
 800db9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dba0:	f7fc fc52 	bl	800a448 <HAL_GetTick>
 800dba4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dbac:	b2db      	uxtb	r3, r3
 800dbae:	2b01      	cmp	r3, #1
 800dbb0:	d002      	beq.n	800dbb8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800dbb2:	2302      	movs	r3, #2
 800dbb4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800dbb6:	e0e9      	b.n	800dd8c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d002      	beq.n	800dbc4 <HAL_SPI_Receive+0x7e>
 800dbbe:	88fb      	ldrh	r3, [r7, #6]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d102      	bne.n	800dbca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800dbc8:	e0e0      	b.n	800dd8c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	2204      	movs	r2, #4
 800dbce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	68ba      	ldr	r2, [r7, #8]
 800dbdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	88fa      	ldrh	r2, [r7, #6]
 800dbe2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	88fa      	ldrh	r2, [r7, #6]
 800dbea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	2200      	movs	r2, #0
 800dc04:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	68db      	ldr	r3, [r3, #12]
 800dc10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dc14:	d908      	bls.n	800dc28 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	685a      	ldr	r2, [r3, #4]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dc24:	605a      	str	r2, [r3, #4]
 800dc26:	e007      	b.n	800dc38 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	685a      	ldr	r2, [r3, #4]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dc36:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	689b      	ldr	r3, [r3, #8]
 800dc3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc40:	d10f      	bne.n	800dc62 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	681a      	ldr	r2, [r3, #0]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dc50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	681a      	ldr	r2, [r3, #0]
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800dc60:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc6c:	2b40      	cmp	r3, #64	; 0x40
 800dc6e:	d007      	beq.n	800dc80 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	681a      	ldr	r2, [r3, #0]
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc7e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	68db      	ldr	r3, [r3, #12]
 800dc84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dc88:	d867      	bhi.n	800dd5a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800dc8a:	e030      	b.n	800dcee <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	689b      	ldr	r3, [r3, #8]
 800dc92:	f003 0301 	and.w	r3, r3, #1
 800dc96:	2b01      	cmp	r3, #1
 800dc98:	d117      	bne.n	800dcca <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f103 020c 	add.w	r2, r3, #12
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dca6:	7812      	ldrb	r2, [r2, #0]
 800dca8:	b2d2      	uxtb	r2, r2
 800dcaa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcb0:	1c5a      	adds	r2, r3, #1
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dcbc:	b29b      	uxth	r3, r3
 800dcbe:	3b01      	subs	r3, #1
 800dcc0:	b29a      	uxth	r2, r3
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800dcc8:	e011      	b.n	800dcee <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dcca:	f7fc fbbd 	bl	800a448 <HAL_GetTick>
 800dcce:	4602      	mov	r2, r0
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	1ad3      	subs	r3, r2, r3
 800dcd4:	683a      	ldr	r2, [r7, #0]
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d803      	bhi.n	800dce2 <HAL_SPI_Receive+0x19c>
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dce0:	d102      	bne.n	800dce8 <HAL_SPI_Receive+0x1a2>
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d102      	bne.n	800dcee <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800dce8:	2303      	movs	r3, #3
 800dcea:	75fb      	strb	r3, [r7, #23]
          goto error;
 800dcec:	e04e      	b.n	800dd8c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d1c8      	bne.n	800dc8c <HAL_SPI_Receive+0x146>
 800dcfa:	e034      	b.n	800dd66 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	689b      	ldr	r3, [r3, #8]
 800dd02:	f003 0301 	and.w	r3, r3, #1
 800dd06:	2b01      	cmp	r3, #1
 800dd08:	d115      	bne.n	800dd36 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	68da      	ldr	r2, [r3, #12]
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd14:	b292      	uxth	r2, r2
 800dd16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd1c:	1c9a      	adds	r2, r3, #2
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd28:	b29b      	uxth	r3, r3
 800dd2a:	3b01      	subs	r3, #1
 800dd2c:	b29a      	uxth	r2, r3
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800dd34:	e011      	b.n	800dd5a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd36:	f7fc fb87 	bl	800a448 <HAL_GetTick>
 800dd3a:	4602      	mov	r2, r0
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	1ad3      	subs	r3, r2, r3
 800dd40:	683a      	ldr	r2, [r7, #0]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d803      	bhi.n	800dd4e <HAL_SPI_Receive+0x208>
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd4c:	d102      	bne.n	800dd54 <HAL_SPI_Receive+0x20e>
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d102      	bne.n	800dd5a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800dd54:	2303      	movs	r3, #3
 800dd56:	75fb      	strb	r3, [r7, #23]
          goto error;
 800dd58:	e018      	b.n	800dd8c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dd60:	b29b      	uxth	r3, r3
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d1ca      	bne.n	800dcfc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dd66:	693a      	ldr	r2, [r7, #16]
 800dd68:	6839      	ldr	r1, [r7, #0]
 800dd6a:	68f8      	ldr	r0, [r7, #12]
 800dd6c:	f000 fffa 	bl	800ed64 <SPI_EndRxTransaction>
 800dd70:	4603      	mov	r3, r0
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d002      	beq.n	800dd7c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	2220      	movs	r2, #32
 800dd7a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d002      	beq.n	800dd8a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800dd84:	2301      	movs	r3, #1
 800dd86:	75fb      	strb	r3, [r7, #23]
 800dd88:	e000      	b.n	800dd8c <HAL_SPI_Receive+0x246>
  }

error :
 800dd8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	2201      	movs	r2, #1
 800dd90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2200      	movs	r2, #0
 800dd98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800dd9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3718      	adds	r7, #24
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}

0800dda6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800dda6:	b580      	push	{r7, lr}
 800dda8:	b08a      	sub	sp, #40	; 0x28
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	60f8      	str	r0, [r7, #12]
 800ddae:	60b9      	str	r1, [r7, #8]
 800ddb0:	607a      	str	r2, [r7, #4]
 800ddb2:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ddb4:	2301      	movs	r3, #1
 800ddb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d101      	bne.n	800ddcc <HAL_SPI_TransmitReceive+0x26>
 800ddc8:	2302      	movs	r3, #2
 800ddca:	e1fb      	b.n	800e1c4 <HAL_SPI_TransmitReceive+0x41e>
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	2201      	movs	r2, #1
 800ddd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ddd4:	f7fc fb38 	bl	800a448 <HAL_GetTick>
 800ddd8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dde0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	685b      	ldr	r3, [r3, #4]
 800dde6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800dde8:	887b      	ldrh	r3, [r7, #2]
 800ddea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800ddec:	887b      	ldrh	r3, [r7, #2]
 800ddee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ddf0:	7efb      	ldrb	r3, [r7, #27]
 800ddf2:	2b01      	cmp	r3, #1
 800ddf4:	d00e      	beq.n	800de14 <HAL_SPI_TransmitReceive+0x6e>
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ddfc:	d106      	bne.n	800de0c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	689b      	ldr	r3, [r3, #8]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d102      	bne.n	800de0c <HAL_SPI_TransmitReceive+0x66>
 800de06:	7efb      	ldrb	r3, [r7, #27]
 800de08:	2b04      	cmp	r3, #4
 800de0a:	d003      	beq.n	800de14 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800de0c:	2302      	movs	r3, #2
 800de0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800de12:	e1cd      	b.n	800e1b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d005      	beq.n	800de26 <HAL_SPI_TransmitReceive+0x80>
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d002      	beq.n	800de26 <HAL_SPI_TransmitReceive+0x80>
 800de20:	887b      	ldrh	r3, [r7, #2]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d103      	bne.n	800de2e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800de26:	2301      	movs	r3, #1
 800de28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800de2c:	e1c0      	b.n	800e1b0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800de34:	b2db      	uxtb	r3, r3
 800de36:	2b04      	cmp	r3, #4
 800de38:	d003      	beq.n	800de42 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	2205      	movs	r2, #5
 800de3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2200      	movs	r2, #0
 800de46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	687a      	ldr	r2, [r7, #4]
 800de4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	887a      	ldrh	r2, [r7, #2]
 800de52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	887a      	ldrh	r2, [r7, #2]
 800de5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	68ba      	ldr	r2, [r7, #8]
 800de62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	887a      	ldrh	r2, [r7, #2]
 800de68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	887a      	ldrh	r2, [r7, #2]
 800de6e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	2200      	movs	r2, #0
 800de74:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	2200      	movs	r2, #0
 800de7a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	68db      	ldr	r3, [r3, #12]
 800de80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800de84:	d802      	bhi.n	800de8c <HAL_SPI_TransmitReceive+0xe6>
 800de86:	8a3b      	ldrh	r3, [r7, #16]
 800de88:	2b01      	cmp	r3, #1
 800de8a:	d908      	bls.n	800de9e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	685a      	ldr	r2, [r3, #4]
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800de9a:	605a      	str	r2, [r3, #4]
 800de9c:	e007      	b.n	800deae <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	685a      	ldr	r2, [r3, #4]
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800deac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800deb8:	2b40      	cmp	r3, #64	; 0x40
 800deba:	d007      	beq.n	800decc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	681a      	ldr	r2, [r3, #0]
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800deca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	68db      	ldr	r3, [r3, #12]
 800ded0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ded4:	d97c      	bls.n	800dfd0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	685b      	ldr	r3, [r3, #4]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d002      	beq.n	800dee4 <HAL_SPI_TransmitReceive+0x13e>
 800dede:	8a7b      	ldrh	r3, [r7, #18]
 800dee0:	2b01      	cmp	r3, #1
 800dee2:	d169      	bne.n	800dfb8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dee8:	881a      	ldrh	r2, [r3, #0]
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800def4:	1c9a      	adds	r2, r3, #2
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800defe:	b29b      	uxth	r3, r3
 800df00:	3b01      	subs	r3, #1
 800df02:	b29a      	uxth	r2, r3
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800df08:	e056      	b.n	800dfb8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	689b      	ldr	r3, [r3, #8]
 800df10:	f003 0302 	and.w	r3, r3, #2
 800df14:	2b02      	cmp	r3, #2
 800df16:	d11b      	bne.n	800df50 <HAL_SPI_TransmitReceive+0x1aa>
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df1c:	b29b      	uxth	r3, r3
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d016      	beq.n	800df50 <HAL_SPI_TransmitReceive+0x1aa>
 800df22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df24:	2b01      	cmp	r3, #1
 800df26:	d113      	bne.n	800df50 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df2c:	881a      	ldrh	r2, [r3, #0]
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df38:	1c9a      	adds	r2, r3, #2
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df42:	b29b      	uxth	r3, r3
 800df44:	3b01      	subs	r3, #1
 800df46:	b29a      	uxth	r2, r3
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800df4c:	2300      	movs	r3, #0
 800df4e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	689b      	ldr	r3, [r3, #8]
 800df56:	f003 0301 	and.w	r3, r3, #1
 800df5a:	2b01      	cmp	r3, #1
 800df5c:	d11c      	bne.n	800df98 <HAL_SPI_TransmitReceive+0x1f2>
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800df64:	b29b      	uxth	r3, r3
 800df66:	2b00      	cmp	r3, #0
 800df68:	d016      	beq.n	800df98 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	68da      	ldr	r2, [r3, #12]
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df74:	b292      	uxth	r2, r2
 800df76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df7c:	1c9a      	adds	r2, r3, #2
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800df88:	b29b      	uxth	r3, r3
 800df8a:	3b01      	subs	r3, #1
 800df8c:	b29a      	uxth	r2, r3
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800df94:	2301      	movs	r3, #1
 800df96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800df98:	f7fc fa56 	bl	800a448 <HAL_GetTick>
 800df9c:	4602      	mov	r2, r0
 800df9e:	69fb      	ldr	r3, [r7, #28]
 800dfa0:	1ad3      	subs	r3, r2, r3
 800dfa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d807      	bhi.n	800dfb8 <HAL_SPI_TransmitReceive+0x212>
 800dfa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfae:	d003      	beq.n	800dfb8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800dfb0:	2303      	movs	r3, #3
 800dfb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800dfb6:	e0fb      	b.n	800e1b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfbc:	b29b      	uxth	r3, r3
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d1a3      	bne.n	800df0a <HAL_SPI_TransmitReceive+0x164>
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dfc8:	b29b      	uxth	r3, r3
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d19d      	bne.n	800df0a <HAL_SPI_TransmitReceive+0x164>
 800dfce:	e0df      	b.n	800e190 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	685b      	ldr	r3, [r3, #4]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d003      	beq.n	800dfe0 <HAL_SPI_TransmitReceive+0x23a>
 800dfd8:	8a7b      	ldrh	r3, [r7, #18]
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	f040 80cb 	bne.w	800e176 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	d912      	bls.n	800e010 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfee:	881a      	ldrh	r2, [r3, #0]
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dffa:	1c9a      	adds	r2, r3, #2
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e004:	b29b      	uxth	r3, r3
 800e006:	3b02      	subs	r3, #2
 800e008:	b29a      	uxth	r2, r3
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e00e:	e0b2      	b.n	800e176 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	330c      	adds	r3, #12
 800e01a:	7812      	ldrb	r2, [r2, #0]
 800e01c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e022:	1c5a      	adds	r2, r3, #1
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e02c:	b29b      	uxth	r3, r3
 800e02e:	3b01      	subs	r3, #1
 800e030:	b29a      	uxth	r2, r3
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e036:	e09e      	b.n	800e176 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	689b      	ldr	r3, [r3, #8]
 800e03e:	f003 0302 	and.w	r3, r3, #2
 800e042:	2b02      	cmp	r3, #2
 800e044:	d134      	bne.n	800e0b0 <HAL_SPI_TransmitReceive+0x30a>
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e04a:	b29b      	uxth	r3, r3
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d02f      	beq.n	800e0b0 <HAL_SPI_TransmitReceive+0x30a>
 800e050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e052:	2b01      	cmp	r3, #1
 800e054:	d12c      	bne.n	800e0b0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d912      	bls.n	800e086 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e064:	881a      	ldrh	r2, [r3, #0]
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e070:	1c9a      	adds	r2, r3, #2
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	3b02      	subs	r3, #2
 800e07e:	b29a      	uxth	r2, r3
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e084:	e012      	b.n	800e0ac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	330c      	adds	r3, #12
 800e090:	7812      	ldrb	r2, [r2, #0]
 800e092:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e098:	1c5a      	adds	r2, r3, #1
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e0a2:	b29b      	uxth	r3, r3
 800e0a4:	3b01      	subs	r3, #1
 800e0a6:	b29a      	uxth	r2, r3
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	689b      	ldr	r3, [r3, #8]
 800e0b6:	f003 0301 	and.w	r3, r3, #1
 800e0ba:	2b01      	cmp	r3, #1
 800e0bc:	d148      	bne.n	800e150 <HAL_SPI_TransmitReceive+0x3aa>
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d042      	beq.n	800e150 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e0d0:	b29b      	uxth	r3, r3
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	d923      	bls.n	800e11e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	68da      	ldr	r2, [r3, #12]
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0e0:	b292      	uxth	r2, r2
 800e0e2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0e8:	1c9a      	adds	r2, r3, #2
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e0f4:	b29b      	uxth	r3, r3
 800e0f6:	3b02      	subs	r3, #2
 800e0f8:	b29a      	uxth	r2, r3
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e106:	b29b      	uxth	r3, r3
 800e108:	2b01      	cmp	r3, #1
 800e10a:	d81f      	bhi.n	800e14c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	685a      	ldr	r2, [r3, #4]
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e11a:	605a      	str	r2, [r3, #4]
 800e11c:	e016      	b.n	800e14c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	f103 020c 	add.w	r2, r3, #12
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e12a:	7812      	ldrb	r2, [r2, #0]
 800e12c:	b2d2      	uxtb	r2, r2
 800e12e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e134:	1c5a      	adds	r2, r3, #1
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e140:	b29b      	uxth	r3, r3
 800e142:	3b01      	subs	r3, #1
 800e144:	b29a      	uxth	r2, r3
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e14c:	2301      	movs	r3, #1
 800e14e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e150:	f7fc f97a 	bl	800a448 <HAL_GetTick>
 800e154:	4602      	mov	r2, r0
 800e156:	69fb      	ldr	r3, [r7, #28]
 800e158:	1ad3      	subs	r3, r2, r3
 800e15a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e15c:	429a      	cmp	r2, r3
 800e15e:	d803      	bhi.n	800e168 <HAL_SPI_TransmitReceive+0x3c2>
 800e160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e162:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e166:	d102      	bne.n	800e16e <HAL_SPI_TransmitReceive+0x3c8>
 800e168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d103      	bne.n	800e176 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800e16e:	2303      	movs	r3, #3
 800e170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800e174:	e01c      	b.n	800e1b0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e17a:	b29b      	uxth	r3, r3
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	f47f af5b 	bne.w	800e038 <HAL_SPI_TransmitReceive+0x292>
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e188:	b29b      	uxth	r3, r3
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	f47f af54 	bne.w	800e038 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e190:	69fa      	ldr	r2, [r7, #28]
 800e192:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e194:	68f8      	ldr	r0, [r7, #12]
 800e196:	f000 fe3d 	bl	800ee14 <SPI_EndRxTxTransaction>
 800e19a:	4603      	mov	r3, r0
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d006      	beq.n	800e1ae <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	2220      	movs	r2, #32
 800e1aa:	661a      	str	r2, [r3, #96]	; 0x60
 800e1ac:	e000      	b.n	800e1b0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800e1ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e1c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3728      	adds	r7, #40	; 0x28
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}

0800e1cc <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800e1cc:	b480      	push	{r7}
 800e1ce:	b087      	sub	sp, #28
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	60f8      	str	r0, [r7, #12]
 800e1d4:	60b9      	str	r1, [r7, #8]
 800e1d6:	4613      	mov	r3, r2
 800e1d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e1e4:	2b01      	cmp	r3, #1
 800e1e6:	d101      	bne.n	800e1ec <HAL_SPI_Transmit_IT+0x20>
 800e1e8:	2302      	movs	r3, #2
 800e1ea:	e072      	b.n	800e2d2 <HAL_SPI_Transmit_IT+0x106>
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d002      	beq.n	800e200 <HAL_SPI_Transmit_IT+0x34>
 800e1fa:	88fb      	ldrh	r3, [r7, #6]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d102      	bne.n	800e206 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 800e200:	2301      	movs	r3, #1
 800e202:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e204:	e060      	b.n	800e2c8 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e20c:	b2db      	uxtb	r3, r3
 800e20e:	2b01      	cmp	r3, #1
 800e210:	d002      	beq.n	800e218 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 800e212:	2302      	movs	r3, #2
 800e214:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e216:	e057      	b.n	800e2c8 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	2203      	movs	r2, #3
 800e21c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	2200      	movs	r2, #0
 800e224:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	68ba      	ldr	r2, [r7, #8]
 800e22a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	88fa      	ldrh	r2, [r7, #6]
 800e230:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	88fa      	ldrh	r2, [r7, #6]
 800e236:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2200      	movs	r2, #0
 800e23c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	2200      	movs	r2, #0
 800e242:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	2200      	movs	r2, #0
 800e24a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	2200      	movs	r2, #0
 800e252:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	68db      	ldr	r3, [r3, #12]
 800e258:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e25c:	d903      	bls.n	800e266 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	4a1f      	ldr	r2, [pc, #124]	; (800e2e0 <HAL_SPI_Transmit_IT+0x114>)
 800e262:	651a      	str	r2, [r3, #80]	; 0x50
 800e264:	e002      	b.n	800e26c <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	4a1e      	ldr	r2, [pc, #120]	; (800e2e4 <HAL_SPI_Transmit_IT+0x118>)
 800e26a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	689b      	ldr	r3, [r3, #8]
 800e270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e274:	d10f      	bne.n	800e296 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e284:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	681a      	ldr	r2, [r3, #0]
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e294:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	685a      	ldr	r2, [r3, #4]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800e2a4:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2b0:	2b40      	cmp	r3, #64	; 0x40
 800e2b2:	d008      	beq.n	800e2c6 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e2c2:	601a      	str	r2, [r3, #0]
 800e2c4:	e000      	b.n	800e2c8 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800e2c6:	bf00      	nop
  __HAL_UNLOCK(hspi);
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e2d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	371c      	adds	r7, #28
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2dc:	4770      	bx	lr
 800e2de:	bf00      	nop
 800e2e0:	0800eaf3 	.word	0x0800eaf3
 800e2e4:	0800eaad 	.word	0x0800eaad

0800e2e8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b086      	sub	sp, #24
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	60f8      	str	r0, [r7, #12]
 800e2f0:	60b9      	str	r1, [r7, #8]
 800e2f2:	4613      	mov	r3, r2
 800e2f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	689b      	ldr	r3, [r3, #8]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d110      	bne.n	800e324 <HAL_SPI_Receive_IT+0x3c>
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	685b      	ldr	r3, [r3, #4]
 800e306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e30a:	d10b      	bne.n	800e324 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	2204      	movs	r2, #4
 800e310:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800e314:	88fb      	ldrh	r3, [r7, #6]
 800e316:	68ba      	ldr	r2, [r7, #8]
 800e318:	68b9      	ldr	r1, [r7, #8]
 800e31a:	68f8      	ldr	r0, [r7, #12]
 800e31c:	f000 f894 	bl	800e448 <HAL_SPI_TransmitReceive_IT>
 800e320:	4603      	mov	r3, r0
 800e322:	e089      	b.n	800e438 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	d101      	bne.n	800e332 <HAL_SPI_Receive_IT+0x4a>
 800e32e:	2302      	movs	r3, #2
 800e330:	e082      	b.n	800e438 <HAL_SPI_Receive_IT+0x150>
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2201      	movs	r2, #1
 800e336:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e340:	b2db      	uxtb	r3, r3
 800e342:	2b01      	cmp	r3, #1
 800e344:	d002      	beq.n	800e34c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800e346:	2302      	movs	r3, #2
 800e348:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e34a:	e070      	b.n	800e42e <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d002      	beq.n	800e358 <HAL_SPI_Receive_IT+0x70>
 800e352:	88fb      	ldrh	r3, [r7, #6]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d102      	bne.n	800e35e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800e358:	2301      	movs	r3, #1
 800e35a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e35c:	e067      	b.n	800e42e <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2204      	movs	r2, #4
 800e362:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	2200      	movs	r2, #0
 800e36a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	68ba      	ldr	r2, [r7, #8]
 800e370:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	88fa      	ldrh	r2, [r7, #6]
 800e376:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	88fa      	ldrh	r2, [r7, #6]
 800e37e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	2200      	movs	r2, #0
 800e386:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	2200      	movs	r2, #0
 800e38c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	2200      	movs	r2, #0
 800e392:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2200      	movs	r2, #0
 800e398:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	68db      	ldr	r3, [r3, #12]
 800e39e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e3a2:	d90b      	bls.n	800e3bc <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	685a      	ldr	r2, [r3, #4]
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e3b2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	4a22      	ldr	r2, [pc, #136]	; (800e440 <HAL_SPI_Receive_IT+0x158>)
 800e3b8:	64da      	str	r2, [r3, #76]	; 0x4c
 800e3ba:	e00a      	b.n	800e3d2 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	685a      	ldr	r2, [r3, #4]
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e3ca:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	4a1d      	ldr	r2, [pc, #116]	; (800e444 <HAL_SPI_Receive_IT+0x15c>)
 800e3d0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	689b      	ldr	r3, [r3, #8]
 800e3d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e3da:	d10f      	bne.n	800e3fc <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	681a      	ldr	r2, [r3, #0]
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e3ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	681a      	ldr	r2, [r3, #0]
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e3fa:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	685a      	ldr	r2, [r3, #4]
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800e40a:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e416:	2b40      	cmp	r3, #64	; 0x40
 800e418:	d008      	beq.n	800e42c <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	681a      	ldr	r2, [r3, #0]
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e428:	601a      	str	r2, [r3, #0]
 800e42a:	e000      	b.n	800e42e <HAL_SPI_Receive_IT+0x146>
  }

error :
 800e42c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	2200      	movs	r2, #0
 800e432:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e436:	7dfb      	ldrb	r3, [r7, #23]
}
 800e438:	4618      	mov	r0, r3
 800e43a:	3718      	adds	r7, #24
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}
 800e440:	0800ea61 	.word	0x0800ea61
 800e444:	0800ea11 	.word	0x0800ea11

0800e448 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800e448:	b480      	push	{r7}
 800e44a:	b087      	sub	sp, #28
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	60f8      	str	r0, [r7, #12]
 800e450:	60b9      	str	r1, [r7, #8]
 800e452:	607a      	str	r2, [r7, #4]
 800e454:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e456:	2300      	movs	r3, #0
 800e458:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e460:	2b01      	cmp	r3, #1
 800e462:	d101      	bne.n	800e468 <HAL_SPI_TransmitReceive_IT+0x20>
 800e464:	2302      	movs	r3, #2
 800e466:	e091      	b.n	800e58c <HAL_SPI_TransmitReceive_IT+0x144>
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	2201      	movs	r2, #1
 800e46c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e476:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	685b      	ldr	r3, [r3, #4]
 800e47c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e47e:	7dbb      	ldrb	r3, [r7, #22]
 800e480:	2b01      	cmp	r3, #1
 800e482:	d00d      	beq.n	800e4a0 <HAL_SPI_TransmitReceive_IT+0x58>
 800e484:	693b      	ldr	r3, [r7, #16]
 800e486:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e48a:	d106      	bne.n	800e49a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	689b      	ldr	r3, [r3, #8]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d102      	bne.n	800e49a <HAL_SPI_TransmitReceive_IT+0x52>
 800e494:	7dbb      	ldrb	r3, [r7, #22]
 800e496:	2b04      	cmp	r3, #4
 800e498:	d002      	beq.n	800e4a0 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800e49a:	2302      	movs	r3, #2
 800e49c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e49e:	e070      	b.n	800e582 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d005      	beq.n	800e4b2 <HAL_SPI_TransmitReceive_IT+0x6a>
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d002      	beq.n	800e4b2 <HAL_SPI_TransmitReceive_IT+0x6a>
 800e4ac:	887b      	ldrh	r3, [r7, #2]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d102      	bne.n	800e4b8 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e4b6:	e064      	b.n	800e582 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e4be:	b2db      	uxtb	r3, r3
 800e4c0:	2b04      	cmp	r3, #4
 800e4c2:	d003      	beq.n	800e4cc <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	2205      	movs	r2, #5
 800e4c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	68ba      	ldr	r2, [r7, #8]
 800e4d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	887a      	ldrh	r2, [r7, #2]
 800e4dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	887a      	ldrh	r2, [r7, #2]
 800e4e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	687a      	ldr	r2, [r7, #4]
 800e4e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	887a      	ldrh	r2, [r7, #2]
 800e4ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	887a      	ldrh	r2, [r7, #2]
 800e4f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	68db      	ldr	r3, [r3, #12]
 800e4fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e502:	d906      	bls.n	800e512 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	4a24      	ldr	r2, [pc, #144]	; (800e598 <HAL_SPI_TransmitReceive_IT+0x150>)
 800e508:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	4a23      	ldr	r2, [pc, #140]	; (800e59c <HAL_SPI_TransmitReceive_IT+0x154>)
 800e50e:	651a      	str	r2, [r3, #80]	; 0x50
 800e510:	e005      	b.n	800e51e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	4a22      	ldr	r2, [pc, #136]	; (800e5a0 <HAL_SPI_TransmitReceive_IT+0x158>)
 800e516:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	4a22      	ldr	r2, [pc, #136]	; (800e5a4 <HAL_SPI_TransmitReceive_IT+0x15c>)
 800e51c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	68db      	ldr	r3, [r3, #12]
 800e522:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e526:	d802      	bhi.n	800e52e <HAL_SPI_TransmitReceive_IT+0xe6>
 800e528:	887b      	ldrh	r3, [r7, #2]
 800e52a:	2b01      	cmp	r3, #1
 800e52c:	d908      	bls.n	800e540 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	685a      	ldr	r2, [r3, #4]
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e53c:	605a      	str	r2, [r3, #4]
 800e53e:	e007      	b.n	800e550 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	685a      	ldr	r2, [r3, #4]
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e54e:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	685a      	ldr	r2, [r3, #4]
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800e55e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e56a:	2b40      	cmp	r3, #64	; 0x40
 800e56c:	d008      	beq.n	800e580 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	681a      	ldr	r2, [r3, #0]
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e57c:	601a      	str	r2, [r3, #0]
 800e57e:	e000      	b.n	800e582 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 800e580:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2200      	movs	r2, #0
 800e586:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e58a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	371c      	adds	r7, #28
 800e590:	46bd      	mov	sp, r7
 800e592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e596:	4770      	bx	lr
 800e598:	0800e94b 	.word	0x0800e94b
 800e59c:	0800e9b1 	.word	0x0800e9b1
 800e5a0:	0800e7fb 	.word	0x0800e7fb
 800e5a4:	0800e8b9 	.word	0x0800e8b9

0800e5a8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b088      	sub	sp, #32
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	685b      	ldr	r3, [r3, #4]
 800e5b6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	689b      	ldr	r3, [r3, #8]
 800e5be:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e5c0:	69bb      	ldr	r3, [r7, #24]
 800e5c2:	099b      	lsrs	r3, r3, #6
 800e5c4:	f003 0301 	and.w	r3, r3, #1
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d10f      	bne.n	800e5ec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e5cc:	69bb      	ldr	r3, [r7, #24]
 800e5ce:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d00a      	beq.n	800e5ec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e5d6:	69fb      	ldr	r3, [r7, #28]
 800e5d8:	099b      	lsrs	r3, r3, #6
 800e5da:	f003 0301 	and.w	r3, r3, #1
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d004      	beq.n	800e5ec <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	4798      	blx	r3
    return;
 800e5ea:	e0d8      	b.n	800e79e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800e5ec:	69bb      	ldr	r3, [r7, #24]
 800e5ee:	085b      	lsrs	r3, r3, #1
 800e5f0:	f003 0301 	and.w	r3, r3, #1
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d00a      	beq.n	800e60e <HAL_SPI_IRQHandler+0x66>
 800e5f8:	69fb      	ldr	r3, [r7, #28]
 800e5fa:	09db      	lsrs	r3, r3, #7
 800e5fc:	f003 0301 	and.w	r3, r3, #1
 800e600:	2b00      	cmp	r3, #0
 800e602:	d004      	beq.n	800e60e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	4798      	blx	r3
    return;
 800e60c:	e0c7      	b.n	800e79e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e60e:	69bb      	ldr	r3, [r7, #24]
 800e610:	095b      	lsrs	r3, r3, #5
 800e612:	f003 0301 	and.w	r3, r3, #1
 800e616:	2b00      	cmp	r3, #0
 800e618:	d10c      	bne.n	800e634 <HAL_SPI_IRQHandler+0x8c>
 800e61a:	69bb      	ldr	r3, [r7, #24]
 800e61c:	099b      	lsrs	r3, r3, #6
 800e61e:	f003 0301 	and.w	r3, r3, #1
 800e622:	2b00      	cmp	r3, #0
 800e624:	d106      	bne.n	800e634 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800e626:	69bb      	ldr	r3, [r7, #24]
 800e628:	0a1b      	lsrs	r3, r3, #8
 800e62a:	f003 0301 	and.w	r3, r3, #1
 800e62e:	2b00      	cmp	r3, #0
 800e630:	f000 80b5 	beq.w	800e79e <HAL_SPI_IRQHandler+0x1f6>
 800e634:	69fb      	ldr	r3, [r7, #28]
 800e636:	095b      	lsrs	r3, r3, #5
 800e638:	f003 0301 	and.w	r3, r3, #1
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	f000 80ae 	beq.w	800e79e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e642:	69bb      	ldr	r3, [r7, #24]
 800e644:	099b      	lsrs	r3, r3, #6
 800e646:	f003 0301 	and.w	r3, r3, #1
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d023      	beq.n	800e696 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e654:	b2db      	uxtb	r3, r3
 800e656:	2b03      	cmp	r3, #3
 800e658:	d011      	beq.n	800e67e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e65e:	f043 0204 	orr.w	r2, r3, #4
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e666:	2300      	movs	r3, #0
 800e668:	617b      	str	r3, [r7, #20]
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	68db      	ldr	r3, [r3, #12]
 800e670:	617b      	str	r3, [r7, #20]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	689b      	ldr	r3, [r3, #8]
 800e678:	617b      	str	r3, [r7, #20]
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	e00b      	b.n	800e696 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e67e:	2300      	movs	r3, #0
 800e680:	613b      	str	r3, [r7, #16]
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	68db      	ldr	r3, [r3, #12]
 800e688:	613b      	str	r3, [r7, #16]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	689b      	ldr	r3, [r3, #8]
 800e690:	613b      	str	r3, [r7, #16]
 800e692:	693b      	ldr	r3, [r7, #16]
        return;
 800e694:	e083      	b.n	800e79e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800e696:	69bb      	ldr	r3, [r7, #24]
 800e698:	095b      	lsrs	r3, r3, #5
 800e69a:	f003 0301 	and.w	r3, r3, #1
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d014      	beq.n	800e6cc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6a6:	f043 0201 	orr.w	r2, r3, #1
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	60fb      	str	r3, [r7, #12]
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	689b      	ldr	r3, [r3, #8]
 800e6b8:	60fb      	str	r3, [r7, #12]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e6c8:	601a      	str	r2, [r3, #0]
 800e6ca:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800e6cc:	69bb      	ldr	r3, [r7, #24]
 800e6ce:	0a1b      	lsrs	r3, r3, #8
 800e6d0:	f003 0301 	and.w	r3, r3, #1
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d00c      	beq.n	800e6f2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6dc:	f043 0208 	orr.w	r2, r3, #8
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	60bb      	str	r3, [r7, #8]
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	689b      	ldr	r3, [r3, #8]
 800e6ee:	60bb      	str	r3, [r7, #8]
 800e6f0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d050      	beq.n	800e79c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	685a      	ldr	r2, [r3, #4]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e708:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2201      	movs	r2, #1
 800e70e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800e712:	69fb      	ldr	r3, [r7, #28]
 800e714:	f003 0302 	and.w	r3, r3, #2
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d104      	bne.n	800e726 <HAL_SPI_IRQHandler+0x17e>
 800e71c:	69fb      	ldr	r3, [r7, #28]
 800e71e:	f003 0301 	and.w	r3, r3, #1
 800e722:	2b00      	cmp	r3, #0
 800e724:	d034      	beq.n	800e790 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	685a      	ldr	r2, [r3, #4]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	f022 0203 	bic.w	r2, r2, #3
 800e734:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d011      	beq.n	800e762 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e742:	4a18      	ldr	r2, [pc, #96]	; (800e7a4 <HAL_SPI_IRQHandler+0x1fc>)
 800e744:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e74a:	4618      	mov	r0, r3
 800e74c:	f7fc f8c8 	bl	800a8e0 <HAL_DMA_Abort_IT>
 800e750:	4603      	mov	r3, r0
 800e752:	2b00      	cmp	r3, #0
 800e754:	d005      	beq.n	800e762 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e75a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e766:	2b00      	cmp	r3, #0
 800e768:	d016      	beq.n	800e798 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e76e:	4a0d      	ldr	r2, [pc, #52]	; (800e7a4 <HAL_SPI_IRQHandler+0x1fc>)
 800e770:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e776:	4618      	mov	r0, r3
 800e778:	f7fc f8b2 	bl	800a8e0 <HAL_DMA_Abort_IT>
 800e77c:	4603      	mov	r3, r0
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d00a      	beq.n	800e798 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e786:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800e78e:	e003      	b.n	800e798 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f000 f813 	bl	800e7bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800e796:	e000      	b.n	800e79a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800e798:	bf00      	nop
    return;
 800e79a:	bf00      	nop
 800e79c:	bf00      	nop
  }
}
 800e79e:	3720      	adds	r7, #32
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}
 800e7a4:	0800e7d1 	.word	0x0800e7d1

0800e7a8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b083      	sub	sp, #12
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800e7b0:	bf00      	nop
 800e7b2:	370c      	adds	r7, #12
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ba:	4770      	bx	lr

0800e7bc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b083      	sub	sp, #12
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e7c4:	bf00      	nop
 800e7c6:	370c      	adds	r7, #12
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ce:	4770      	bx	lr

0800e7d0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b084      	sub	sp, #16
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7dc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e7ec:	68f8      	ldr	r0, [r7, #12]
 800e7ee:	f7ff ffe5 	bl	800e7bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e7f2:	bf00      	nop
 800e7f4:	3710      	adds	r7, #16
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}

0800e7fa <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800e7fa:	b580      	push	{r7, lr}
 800e7fc:	b082      	sub	sp, #8
 800e7fe:	af00      	add	r7, sp, #0
 800e800:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e808:	b29b      	uxth	r3, r3
 800e80a:	2b01      	cmp	r3, #1
 800e80c:	d923      	bls.n	800e856 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	68da      	ldr	r2, [r3, #12]
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e818:	b292      	uxth	r2, r2
 800e81a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e820:	1c9a      	adds	r2, r3, #2
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	3b02      	subs	r3, #2
 800e830:	b29a      	uxth	r2, r3
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e83e:	b29b      	uxth	r3, r3
 800e840:	2b01      	cmp	r3, #1
 800e842:	d11f      	bne.n	800e884 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	685a      	ldr	r2, [r3, #4]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e852:	605a      	str	r2, [r3, #4]
 800e854:	e016      	b.n	800e884 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	f103 020c 	add.w	r2, r3, #12
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e862:	7812      	ldrb	r2, [r2, #0]
 800e864:	b2d2      	uxtb	r2, r2
 800e866:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e86c:	1c5a      	adds	r2, r3, #1
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e878:	b29b      	uxth	r3, r3
 800e87a:	3b01      	subs	r3, #1
 800e87c:	b29a      	uxth	r2, r3
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e88a:	b29b      	uxth	r3, r3
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d10f      	bne.n	800e8b0 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	685a      	ldr	r2, [r3, #4]
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800e89e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e8a4:	b29b      	uxth	r3, r3
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d102      	bne.n	800e8b0 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f000 faf8 	bl	800eea0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800e8b0:	bf00      	nop
 800e8b2:	3708      	adds	r7, #8
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b082      	sub	sp, #8
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e8c4:	b29b      	uxth	r3, r3
 800e8c6:	2b01      	cmp	r3, #1
 800e8c8:	d912      	bls.n	800e8f0 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8ce:	881a      	ldrh	r2, [r3, #0]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8da:	1c9a      	adds	r2, r3, #2
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e8e4:	b29b      	uxth	r3, r3
 800e8e6:	3b02      	subs	r3, #2
 800e8e8:	b29a      	uxth	r2, r3
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e8ee:	e012      	b.n	800e916 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	330c      	adds	r3, #12
 800e8fa:	7812      	ldrb	r2, [r2, #0]
 800e8fc:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e902:	1c5a      	adds	r2, r3, #1
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e90c:	b29b      	uxth	r3, r3
 800e90e:	3b01      	subs	r3, #1
 800e910:	b29a      	uxth	r2, r3
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e91a:	b29b      	uxth	r3, r3
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d110      	bne.n	800e942 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	685a      	ldr	r2, [r3, #4]
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e92e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e936:	b29b      	uxth	r3, r3
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d102      	bne.n	800e942 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f000 faaf 	bl	800eea0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800e942:	bf00      	nop
 800e944:	3708      	adds	r7, #8
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}

0800e94a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800e94a:	b580      	push	{r7, lr}
 800e94c:	b082      	sub	sp, #8
 800e94e:	af00      	add	r7, sp, #0
 800e950:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	68da      	ldr	r2, [r3, #12]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e95c:	b292      	uxth	r2, r2
 800e95e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e964:	1c9a      	adds	r2, r3, #2
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e970:	b29b      	uxth	r3, r3
 800e972:	3b01      	subs	r3, #1
 800e974:	b29a      	uxth	r2, r3
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e982:	b29b      	uxth	r3, r3
 800e984:	2b00      	cmp	r3, #0
 800e986:	d10f      	bne.n	800e9a8 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	685a      	ldr	r2, [r3, #4]
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e996:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d102      	bne.n	800e9a8 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f000 fa7c 	bl	800eea0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800e9a8:	bf00      	nop
 800e9aa:	3708      	adds	r7, #8
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}

0800e9b0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b082      	sub	sp, #8
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9bc:	881a      	ldrh	r2, [r3, #0]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9c8:	1c9a      	adds	r2, r3, #2
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	3b01      	subs	r3, #1
 800e9d6:	b29a      	uxth	r2, r3
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9e0:	b29b      	uxth	r3, r3
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d110      	bne.n	800ea08 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	685a      	ldr	r2, [r3, #4]
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e9f4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e9fc:	b29b      	uxth	r3, r3
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d102      	bne.n	800ea08 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f000 fa4c 	bl	800eea0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800ea08:	bf00      	nop
 800ea0a:	3708      	adds	r7, #8
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}

0800ea10 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b082      	sub	sp, #8
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	f103 020c 	add.w	r2, r3, #12
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea24:	7812      	ldrb	r2, [r2, #0]
 800ea26:	b2d2      	uxtb	r2, r2
 800ea28:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea2e:	1c5a      	adds	r2, r3, #1
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ea3a:	b29b      	uxth	r3, r3
 800ea3c:	3b01      	subs	r3, #1
 800ea3e:	b29a      	uxth	r2, r3
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ea4c:	b29b      	uxth	r3, r3
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d102      	bne.n	800ea58 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	f000 fa66 	bl	800ef24 <SPI_CloseRx_ISR>
  }
}
 800ea58:	bf00      	nop
 800ea5a:	3708      	adds	r7, #8
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}

0800ea60 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b082      	sub	sp, #8
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	68da      	ldr	r2, [r3, #12]
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea72:	b292      	uxth	r2, r2
 800ea74:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea7a:	1c9a      	adds	r2, r3, #2
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ea86:	b29b      	uxth	r3, r3
 800ea88:	3b01      	subs	r3, #1
 800ea8a:	b29a      	uxth	r2, r3
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ea98:	b29b      	uxth	r3, r3
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d102      	bne.n	800eaa4 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f000 fa40 	bl	800ef24 <SPI_CloseRx_ISR>
  }
}
 800eaa4:	bf00      	nop
 800eaa6:	3708      	adds	r7, #8
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b082      	sub	sp, #8
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	330c      	adds	r3, #12
 800eabe:	7812      	ldrb	r2, [r2, #0]
 800eac0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eac6:	1c5a      	adds	r2, r3, #1
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ead0:	b29b      	uxth	r3, r3
 800ead2:	3b01      	subs	r3, #1
 800ead4:	b29a      	uxth	r2, r3
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eade:	b29b      	uxth	r3, r3
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d102      	bne.n	800eaea <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f000 fa4d 	bl	800ef84 <SPI_CloseTx_ISR>
  }
}
 800eaea:	bf00      	nop
 800eaec:	3708      	adds	r7, #8
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}

0800eaf2 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800eaf2:	b580      	push	{r7, lr}
 800eaf4:	b082      	sub	sp, #8
 800eaf6:	af00      	add	r7, sp, #0
 800eaf8:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eafe:	881a      	ldrh	r2, [r3, #0]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb0a:	1c9a      	adds	r2, r3, #2
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb14:	b29b      	uxth	r3, r3
 800eb16:	3b01      	subs	r3, #1
 800eb18:	b29a      	uxth	r2, r3
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb22:	b29b      	uxth	r3, r3
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d102      	bne.n	800eb2e <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f000 fa2b 	bl	800ef84 <SPI_CloseTx_ISR>
  }
}
 800eb2e:	bf00      	nop
 800eb30:	3708      	adds	r7, #8
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}
	...

0800eb38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b088      	sub	sp, #32
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	60b9      	str	r1, [r7, #8]
 800eb42:	603b      	str	r3, [r7, #0]
 800eb44:	4613      	mov	r3, r2
 800eb46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800eb48:	f7fb fc7e 	bl	800a448 <HAL_GetTick>
 800eb4c:	4602      	mov	r2, r0
 800eb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb50:	1a9b      	subs	r3, r3, r2
 800eb52:	683a      	ldr	r2, [r7, #0]
 800eb54:	4413      	add	r3, r2
 800eb56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800eb58:	f7fb fc76 	bl	800a448 <HAL_GetTick>
 800eb5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800eb5e:	4b39      	ldr	r3, [pc, #228]	; (800ec44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	015b      	lsls	r3, r3, #5
 800eb64:	0d1b      	lsrs	r3, r3, #20
 800eb66:	69fa      	ldr	r2, [r7, #28]
 800eb68:	fb02 f303 	mul.w	r3, r2, r3
 800eb6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eb6e:	e054      	b.n	800ec1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb76:	d050      	beq.n	800ec1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800eb78:	f7fb fc66 	bl	800a448 <HAL_GetTick>
 800eb7c:	4602      	mov	r2, r0
 800eb7e:	69bb      	ldr	r3, [r7, #24]
 800eb80:	1ad3      	subs	r3, r2, r3
 800eb82:	69fa      	ldr	r2, [r7, #28]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d902      	bls.n	800eb8e <SPI_WaitFlagStateUntilTimeout+0x56>
 800eb88:	69fb      	ldr	r3, [r7, #28]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d13d      	bne.n	800ec0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	685a      	ldr	r2, [r3, #4]
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800eb9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	685b      	ldr	r3, [r3, #4]
 800eba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eba6:	d111      	bne.n	800ebcc <SPI_WaitFlagStateUntilTimeout+0x94>
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	689b      	ldr	r3, [r3, #8]
 800ebac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ebb0:	d004      	beq.n	800ebbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	689b      	ldr	r3, [r3, #8]
 800ebb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ebba:	d107      	bne.n	800ebcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	681a      	ldr	r2, [r3, #0]
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ebca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ebd4:	d10f      	bne.n	800ebf6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	681a      	ldr	r2, [r3, #0]
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ebe4:	601a      	str	r2, [r3, #0]
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	681a      	ldr	r2, [r3, #0]
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ebf4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	2201      	movs	r2, #1
 800ebfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	2200      	movs	r2, #0
 800ec02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ec06:	2303      	movs	r3, #3
 800ec08:	e017      	b.n	800ec3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d101      	bne.n	800ec14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ec10:	2300      	movs	r3, #0
 800ec12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ec14:	697b      	ldr	r3, [r7, #20]
 800ec16:	3b01      	subs	r3, #1
 800ec18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	689a      	ldr	r2, [r3, #8]
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	4013      	ands	r3, r2
 800ec24:	68ba      	ldr	r2, [r7, #8]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	bf0c      	ite	eq
 800ec2a:	2301      	moveq	r3, #1
 800ec2c:	2300      	movne	r3, #0
 800ec2e:	b2db      	uxtb	r3, r3
 800ec30:	461a      	mov	r2, r3
 800ec32:	79fb      	ldrb	r3, [r7, #7]
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d19b      	bne.n	800eb70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ec38:	2300      	movs	r3, #0
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3720      	adds	r7, #32
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}
 800ec42:	bf00      	nop
 800ec44:	2000018c 	.word	0x2000018c

0800ec48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b088      	sub	sp, #32
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	60f8      	str	r0, [r7, #12]
 800ec50:	60b9      	str	r1, [r7, #8]
 800ec52:	607a      	str	r2, [r7, #4]
 800ec54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ec56:	f7fb fbf7 	bl	800a448 <HAL_GetTick>
 800ec5a:	4602      	mov	r2, r0
 800ec5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec5e:	1a9b      	subs	r3, r3, r2
 800ec60:	683a      	ldr	r2, [r7, #0]
 800ec62:	4413      	add	r3, r2
 800ec64:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ec66:	f7fb fbef 	bl	800a448 <HAL_GetTick>
 800ec6a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ec6c:	4b3c      	ldr	r3, [pc, #240]	; (800ed60 <SPI_WaitFifoStateUntilTimeout+0x118>)
 800ec6e:	681a      	ldr	r2, [r3, #0]
 800ec70:	4613      	mov	r3, r2
 800ec72:	009b      	lsls	r3, r3, #2
 800ec74:	4413      	add	r3, r2
 800ec76:	00da      	lsls	r2, r3, #3
 800ec78:	1ad3      	subs	r3, r2, r3
 800ec7a:	0d1b      	lsrs	r3, r3, #20
 800ec7c:	69fa      	ldr	r2, [r7, #28]
 800ec7e:	fb02 f303 	mul.w	r3, r2, r3
 800ec82:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800ec84:	e05f      	b.n	800ed46 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ec8c:	d106      	bne.n	800ec9c <SPI_WaitFifoStateUntilTimeout+0x54>
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d103      	bne.n	800ec9c <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	330c      	adds	r3, #12
 800ec9a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eca2:	d050      	beq.n	800ed46 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800eca4:	f7fb fbd0 	bl	800a448 <HAL_GetTick>
 800eca8:	4602      	mov	r2, r0
 800ecaa:	69bb      	ldr	r3, [r7, #24]
 800ecac:	1ad3      	subs	r3, r2, r3
 800ecae:	69fa      	ldr	r2, [r7, #28]
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d902      	bls.n	800ecba <SPI_WaitFifoStateUntilTimeout+0x72>
 800ecb4:	69fb      	ldr	r3, [r7, #28]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d13d      	bne.n	800ed36 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	685a      	ldr	r2, [r3, #4]
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ecc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	685b      	ldr	r3, [r3, #4]
 800ecce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ecd2:	d111      	bne.n	800ecf8 <SPI_WaitFifoStateUntilTimeout+0xb0>
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	689b      	ldr	r3, [r3, #8]
 800ecd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ecdc:	d004      	beq.n	800ece8 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	689b      	ldr	r3, [r3, #8]
 800ece2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ece6:	d107      	bne.n	800ecf8 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	681a      	ldr	r2, [r3, #0]
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ecf6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ed00:	d10f      	bne.n	800ed22 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	681a      	ldr	r2, [r3, #0]
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ed10:	601a      	str	r2, [r3, #0]
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	681a      	ldr	r2, [r3, #0]
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ed20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2201      	movs	r2, #1
 800ed26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ed32:	2303      	movs	r3, #3
 800ed34:	e010      	b.n	800ed58 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d101      	bne.n	800ed40 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800ed40:	697b      	ldr	r3, [r7, #20]
 800ed42:	3b01      	subs	r3, #1
 800ed44:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	689a      	ldr	r2, [r3, #8]
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	4013      	ands	r3, r2
 800ed50:	687a      	ldr	r2, [r7, #4]
 800ed52:	429a      	cmp	r2, r3
 800ed54:	d197      	bne.n	800ec86 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800ed56:	2300      	movs	r3, #0
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3720      	adds	r7, #32
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}
 800ed60:	2000018c 	.word	0x2000018c

0800ed64 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b086      	sub	sp, #24
 800ed68:	af02      	add	r7, sp, #8
 800ed6a:	60f8      	str	r0, [r7, #12]
 800ed6c:	60b9      	str	r1, [r7, #8]
 800ed6e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	685b      	ldr	r3, [r3, #4]
 800ed74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ed78:	d111      	bne.n	800ed9e <SPI_EndRxTransaction+0x3a>
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	689b      	ldr	r3, [r3, #8]
 800ed7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed82:	d004      	beq.n	800ed8e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	689b      	ldr	r3, [r3, #8]
 800ed88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed8c:	d107      	bne.n	800ed9e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	681a      	ldr	r2, [r3, #0]
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ed9c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	9300      	str	r3, [sp, #0]
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	2200      	movs	r2, #0
 800eda6:	2180      	movs	r1, #128	; 0x80
 800eda8:	68f8      	ldr	r0, [r7, #12]
 800edaa:	f7ff fec5 	bl	800eb38 <SPI_WaitFlagStateUntilTimeout>
 800edae:	4603      	mov	r3, r0
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d007      	beq.n	800edc4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800edb8:	f043 0220 	orr.w	r2, r3, #32
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800edc0:	2303      	movs	r3, #3
 800edc2:	e023      	b.n	800ee0c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	685b      	ldr	r3, [r3, #4]
 800edc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800edcc:	d11d      	bne.n	800ee0a <SPI_EndRxTransaction+0xa6>
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	689b      	ldr	r3, [r3, #8]
 800edd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800edd6:	d004      	beq.n	800ede2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	689b      	ldr	r3, [r3, #8]
 800eddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ede0:	d113      	bne.n	800ee0a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	9300      	str	r3, [sp, #0]
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	2200      	movs	r2, #0
 800edea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800edee:	68f8      	ldr	r0, [r7, #12]
 800edf0:	f7ff ff2a 	bl	800ec48 <SPI_WaitFifoStateUntilTimeout>
 800edf4:	4603      	mov	r3, r0
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d007      	beq.n	800ee0a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800edfe:	f043 0220 	orr.w	r2, r3, #32
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800ee06:	2303      	movs	r3, #3
 800ee08:	e000      	b.n	800ee0c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800ee0a:	2300      	movs	r3, #0
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3710      	adds	r7, #16
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}

0800ee14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b086      	sub	sp, #24
 800ee18:	af02      	add	r7, sp, #8
 800ee1a:	60f8      	str	r0, [r7, #12]
 800ee1c:	60b9      	str	r1, [r7, #8]
 800ee1e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	9300      	str	r3, [sp, #0]
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	2200      	movs	r2, #0
 800ee28:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ee2c:	68f8      	ldr	r0, [r7, #12]
 800ee2e:	f7ff ff0b 	bl	800ec48 <SPI_WaitFifoStateUntilTimeout>
 800ee32:	4603      	mov	r3, r0
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d007      	beq.n	800ee48 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee3c:	f043 0220 	orr.w	r2, r3, #32
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ee44:	2303      	movs	r3, #3
 800ee46:	e027      	b.n	800ee98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	9300      	str	r3, [sp, #0]
 800ee4c:	68bb      	ldr	r3, [r7, #8]
 800ee4e:	2200      	movs	r2, #0
 800ee50:	2180      	movs	r1, #128	; 0x80
 800ee52:	68f8      	ldr	r0, [r7, #12]
 800ee54:	f7ff fe70 	bl	800eb38 <SPI_WaitFlagStateUntilTimeout>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d007      	beq.n	800ee6e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee62:	f043 0220 	orr.w	r2, r3, #32
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ee6a:	2303      	movs	r3, #3
 800ee6c:	e014      	b.n	800ee98 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	9300      	str	r3, [sp, #0]
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	2200      	movs	r2, #0
 800ee76:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ee7a:	68f8      	ldr	r0, [r7, #12]
 800ee7c:	f7ff fee4 	bl	800ec48 <SPI_WaitFifoStateUntilTimeout>
 800ee80:	4603      	mov	r3, r0
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d007      	beq.n	800ee96 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee8a:	f043 0220 	orr.w	r2, r3, #32
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ee92:	2303      	movs	r3, #3
 800ee94:	e000      	b.n	800ee98 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ee96:	2300      	movs	r3, #0
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	3710      	adds	r7, #16
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}

0800eea0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b084      	sub	sp, #16
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eea8:	f7fb face 	bl	800a448 <HAL_GetTick>
 800eeac:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	685a      	ldr	r2, [r3, #4]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	f022 0220 	bic.w	r2, r2, #32
 800eebc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800eebe:	68fa      	ldr	r2, [r7, #12]
 800eec0:	2164      	movs	r1, #100	; 0x64
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f7ff ffa6 	bl	800ee14 <SPI_EndRxTxTransaction>
 800eec8:	4603      	mov	r3, r0
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d005      	beq.n	800eeda <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eed2:	f043 0220 	orr.w	r2, r3, #32
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d115      	bne.n	800ef0e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800eee8:	b2db      	uxtb	r3, r3
 800eeea:	2b04      	cmp	r3, #4
 800eeec:	d107      	bne.n	800eefe <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2201      	movs	r2, #1
 800eef2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f7f3 faa6 	bl	8002448 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800eefc:	e00e      	b.n	800ef1c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2201      	movs	r2, #1
 800ef02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f7ff fc4e 	bl	800e7a8 <HAL_SPI_TxRxCpltCallback>
}
 800ef0c:	e006      	b.n	800ef1c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	2201      	movs	r2, #1
 800ef12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f7ff fc50 	bl	800e7bc <HAL_SPI_ErrorCallback>
}
 800ef1c:	bf00      	nop
 800ef1e:	3710      	adds	r7, #16
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b082      	sub	sp, #8
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	685a      	ldr	r2, [r3, #4]
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800ef3a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800ef3c:	f7fb fa84 	bl	800a448 <HAL_GetTick>
 800ef40:	4603      	mov	r3, r0
 800ef42:	461a      	mov	r2, r3
 800ef44:	2164      	movs	r1, #100	; 0x64
 800ef46:	6878      	ldr	r0, [r7, #4]
 800ef48:	f7ff ff0c 	bl	800ed64 <SPI_EndRxTransaction>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d005      	beq.n	800ef5e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ef56:	f043 0220 	orr.w	r2, r3, #32
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2201      	movs	r2, #1
 800ef62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d103      	bne.n	800ef76 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f7f3 fa6a 	bl	8002448 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800ef74:	e002      	b.n	800ef7c <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800ef76:	6878      	ldr	r0, [r7, #4]
 800ef78:	f7ff fc20 	bl	800e7bc <HAL_SPI_ErrorCallback>
}
 800ef7c:	bf00      	nop
 800ef7e:	3708      	adds	r7, #8
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}

0800ef84 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b084      	sub	sp, #16
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ef8c:	f7fb fa5c 	bl	800a448 <HAL_GetTick>
 800ef90:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	685a      	ldr	r2, [r3, #4]
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800efa0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800efa2:	68fa      	ldr	r2, [r7, #12]
 800efa4:	2164      	movs	r1, #100	; 0x64
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f7ff ff34 	bl	800ee14 <SPI_EndRxTxTransaction>
 800efac:	4603      	mov	r3, r0
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d005      	beq.n	800efbe <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800efb6:	f043 0220 	orr.w	r2, r3, #32
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	689b      	ldr	r3, [r3, #8]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d10a      	bne.n	800efdc <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800efc6:	2300      	movs	r3, #0
 800efc8:	60bb      	str	r3, [r7, #8]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	68db      	ldr	r3, [r3, #12]
 800efd0:	60bb      	str	r3, [r7, #8]
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	689b      	ldr	r3, [r3, #8]
 800efd8:	60bb      	str	r3, [r7, #8]
 800efda:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2201      	movs	r2, #1
 800efe0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d003      	beq.n	800eff4 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f7ff fbe5 	bl	800e7bc <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800eff2:	e002      	b.n	800effa <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	f7f3 fa3b 	bl	8002470 <HAL_SPI_TxCpltCallback>
}
 800effa:	bf00      	nop
 800effc:	3710      	adds	r7, #16
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}

0800f002 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f002:	b580      	push	{r7, lr}
 800f004:	b082      	sub	sp, #8
 800f006:	af00      	add	r7, sp, #0
 800f008:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d101      	bne.n	800f014 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f010:	2301      	movs	r3, #1
 800f012:	e040      	b.n	800f096 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d106      	bne.n	800f02a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2200      	movs	r2, #0
 800f020:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f7f5 f803 	bl	8004030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	2224      	movs	r2, #36	; 0x24
 800f02e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	681a      	ldr	r2, [r3, #0]
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	f022 0201 	bic.w	r2, r2, #1
 800f03e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	f000 f8bf 	bl	800f1c4 <UART_SetConfig>
 800f046:	4603      	mov	r3, r0
 800f048:	2b01      	cmp	r3, #1
 800f04a:	d101      	bne.n	800f050 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800f04c:	2301      	movs	r3, #1
 800f04e:	e022      	b.n	800f096 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f054:	2b00      	cmp	r3, #0
 800f056:	d002      	beq.n	800f05e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f000 fb3d 	bl	800f6d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	685a      	ldr	r2, [r3, #4]
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f06c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	689a      	ldr	r2, [r3, #8]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f07c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	681a      	ldr	r2, [r3, #0]
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f042 0201 	orr.w	r2, r2, #1
 800f08c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f000 fbc4 	bl	800f81c <UART_CheckIdleState>
 800f094:	4603      	mov	r3, r0
}
 800f096:	4618      	mov	r0, r3
 800f098:	3708      	adds	r7, #8
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bd80      	pop	{r7, pc}

0800f09e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f09e:	b580      	push	{r7, lr}
 800f0a0:	b08a      	sub	sp, #40	; 0x28
 800f0a2:	af02      	add	r7, sp, #8
 800f0a4:	60f8      	str	r0, [r7, #12]
 800f0a6:	60b9      	str	r1, [r7, #8]
 800f0a8:	603b      	str	r3, [r7, #0]
 800f0aa:	4613      	mov	r3, r2
 800f0ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0b2:	2b20      	cmp	r3, #32
 800f0b4:	f040 8081 	bne.w	800f1ba <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d002      	beq.n	800f0c4 <HAL_UART_Transmit+0x26>
 800f0be:	88fb      	ldrh	r3, [r7, #6]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d101      	bne.n	800f0c8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	e079      	b.n	800f1bc <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800f0ce:	2b01      	cmp	r3, #1
 800f0d0:	d101      	bne.n	800f0d6 <HAL_UART_Transmit+0x38>
 800f0d2:	2302      	movs	r3, #2
 800f0d4:	e072      	b.n	800f1bc <HAL_UART_Transmit+0x11e>
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	2201      	movs	r2, #1
 800f0da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	2221      	movs	r2, #33	; 0x21
 800f0e8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800f0ea:	f7fb f9ad 	bl	800a448 <HAL_GetTick>
 800f0ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	88fa      	ldrh	r2, [r7, #6]
 800f0f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	88fa      	ldrh	r2, [r7, #6]
 800f0fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	689b      	ldr	r3, [r3, #8]
 800f104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f108:	d108      	bne.n	800f11c <HAL_UART_Transmit+0x7e>
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	691b      	ldr	r3, [r3, #16]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d104      	bne.n	800f11c <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800f112:	2300      	movs	r3, #0
 800f114:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	61bb      	str	r3, [r7, #24]
 800f11a:	e003      	b.n	800f124 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f120:	2300      	movs	r3, #0
 800f122:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	2200      	movs	r2, #0
 800f128:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800f12c:	e02d      	b.n	800f18a <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	9300      	str	r3, [sp, #0]
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	2200      	movs	r2, #0
 800f136:	2180      	movs	r1, #128	; 0x80
 800f138:	68f8      	ldr	r0, [r7, #12]
 800f13a:	f000 fbb4 	bl	800f8a6 <UART_WaitOnFlagUntilTimeout>
 800f13e:	4603      	mov	r3, r0
 800f140:	2b00      	cmp	r3, #0
 800f142:	d001      	beq.n	800f148 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800f144:	2303      	movs	r3, #3
 800f146:	e039      	b.n	800f1bc <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800f148:	69fb      	ldr	r3, [r7, #28]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d10b      	bne.n	800f166 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f14e:	69bb      	ldr	r3, [r7, #24]
 800f150:	881a      	ldrh	r2, [r3, #0]
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f15a:	b292      	uxth	r2, r2
 800f15c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f15e:	69bb      	ldr	r3, [r7, #24]
 800f160:	3302      	adds	r3, #2
 800f162:	61bb      	str	r3, [r7, #24]
 800f164:	e008      	b.n	800f178 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f166:	69fb      	ldr	r3, [r7, #28]
 800f168:	781a      	ldrb	r2, [r3, #0]
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	b292      	uxth	r2, r2
 800f170:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f172:	69fb      	ldr	r3, [r7, #28]
 800f174:	3301      	adds	r3, #1
 800f176:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f17e:	b29b      	uxth	r3, r3
 800f180:	3b01      	subs	r3, #1
 800f182:	b29a      	uxth	r2, r3
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f190:	b29b      	uxth	r3, r3
 800f192:	2b00      	cmp	r3, #0
 800f194:	d1cb      	bne.n	800f12e <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	9300      	str	r3, [sp, #0]
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	2200      	movs	r2, #0
 800f19e:	2140      	movs	r1, #64	; 0x40
 800f1a0:	68f8      	ldr	r0, [r7, #12]
 800f1a2:	f000 fb80 	bl	800f8a6 <UART_WaitOnFlagUntilTimeout>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d001      	beq.n	800f1b0 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800f1ac:	2303      	movs	r3, #3
 800f1ae:	e005      	b.n	800f1bc <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	2220      	movs	r2, #32
 800f1b4:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	e000      	b.n	800f1bc <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800f1ba:	2302      	movs	r3, #2
  }
}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	3720      	adds	r7, #32
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}

0800f1c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f1c4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800f1c8:	b088      	sub	sp, #32
 800f1ca:	af00      	add	r7, sp, #0
 800f1cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	689a      	ldr	r2, [r3, #8]
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	691b      	ldr	r3, [r3, #16]
 800f1da:	431a      	orrs	r2, r3
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	695b      	ldr	r3, [r3, #20]
 800f1e0:	431a      	orrs	r2, r3
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	69db      	ldr	r3, [r3, #28]
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	681a      	ldr	r2, [r3, #0]
 800f1f0:	4bac      	ldr	r3, [pc, #688]	; (800f4a4 <UART_SetConfig+0x2e0>)
 800f1f2:	4013      	ands	r3, r2
 800f1f4:	687a      	ldr	r2, [r7, #4]
 800f1f6:	6812      	ldr	r2, [r2, #0]
 800f1f8:	69f9      	ldr	r1, [r7, #28]
 800f1fa:	430b      	orrs	r3, r1
 800f1fc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	685b      	ldr	r3, [r3, #4]
 800f204:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	68da      	ldr	r2, [r3, #12]
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	430a      	orrs	r2, r1
 800f212:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	699b      	ldr	r3, [r3, #24]
 800f218:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	4aa2      	ldr	r2, [pc, #648]	; (800f4a8 <UART_SetConfig+0x2e4>)
 800f220:	4293      	cmp	r3, r2
 800f222:	d004      	beq.n	800f22e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	6a1b      	ldr	r3, [r3, #32]
 800f228:	69fa      	ldr	r2, [r7, #28]
 800f22a:	4313      	orrs	r3, r2
 800f22c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	689b      	ldr	r3, [r3, #8]
 800f234:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	69fa      	ldr	r2, [r7, #28]
 800f23e:	430a      	orrs	r2, r1
 800f240:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	4a99      	ldr	r2, [pc, #612]	; (800f4ac <UART_SetConfig+0x2e8>)
 800f248:	4293      	cmp	r3, r2
 800f24a:	d121      	bne.n	800f290 <UART_SetConfig+0xcc>
 800f24c:	4b98      	ldr	r3, [pc, #608]	; (800f4b0 <UART_SetConfig+0x2ec>)
 800f24e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f252:	f003 0303 	and.w	r3, r3, #3
 800f256:	2b03      	cmp	r3, #3
 800f258:	d816      	bhi.n	800f288 <UART_SetConfig+0xc4>
 800f25a:	a201      	add	r2, pc, #4	; (adr r2, 800f260 <UART_SetConfig+0x9c>)
 800f25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f260:	0800f271 	.word	0x0800f271
 800f264:	0800f27d 	.word	0x0800f27d
 800f268:	0800f277 	.word	0x0800f277
 800f26c:	0800f283 	.word	0x0800f283
 800f270:	2301      	movs	r3, #1
 800f272:	76fb      	strb	r3, [r7, #27]
 800f274:	e0e8      	b.n	800f448 <UART_SetConfig+0x284>
 800f276:	2302      	movs	r3, #2
 800f278:	76fb      	strb	r3, [r7, #27]
 800f27a:	e0e5      	b.n	800f448 <UART_SetConfig+0x284>
 800f27c:	2304      	movs	r3, #4
 800f27e:	76fb      	strb	r3, [r7, #27]
 800f280:	e0e2      	b.n	800f448 <UART_SetConfig+0x284>
 800f282:	2308      	movs	r3, #8
 800f284:	76fb      	strb	r3, [r7, #27]
 800f286:	e0df      	b.n	800f448 <UART_SetConfig+0x284>
 800f288:	2310      	movs	r3, #16
 800f28a:	76fb      	strb	r3, [r7, #27]
 800f28c:	bf00      	nop
 800f28e:	e0db      	b.n	800f448 <UART_SetConfig+0x284>
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	4a87      	ldr	r2, [pc, #540]	; (800f4b4 <UART_SetConfig+0x2f0>)
 800f296:	4293      	cmp	r3, r2
 800f298:	d134      	bne.n	800f304 <UART_SetConfig+0x140>
 800f29a:	4b85      	ldr	r3, [pc, #532]	; (800f4b0 <UART_SetConfig+0x2ec>)
 800f29c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f2a0:	f003 030c 	and.w	r3, r3, #12
 800f2a4:	2b0c      	cmp	r3, #12
 800f2a6:	d829      	bhi.n	800f2fc <UART_SetConfig+0x138>
 800f2a8:	a201      	add	r2, pc, #4	; (adr r2, 800f2b0 <UART_SetConfig+0xec>)
 800f2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2ae:	bf00      	nop
 800f2b0:	0800f2e5 	.word	0x0800f2e5
 800f2b4:	0800f2fd 	.word	0x0800f2fd
 800f2b8:	0800f2fd 	.word	0x0800f2fd
 800f2bc:	0800f2fd 	.word	0x0800f2fd
 800f2c0:	0800f2f1 	.word	0x0800f2f1
 800f2c4:	0800f2fd 	.word	0x0800f2fd
 800f2c8:	0800f2fd 	.word	0x0800f2fd
 800f2cc:	0800f2fd 	.word	0x0800f2fd
 800f2d0:	0800f2eb 	.word	0x0800f2eb
 800f2d4:	0800f2fd 	.word	0x0800f2fd
 800f2d8:	0800f2fd 	.word	0x0800f2fd
 800f2dc:	0800f2fd 	.word	0x0800f2fd
 800f2e0:	0800f2f7 	.word	0x0800f2f7
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	76fb      	strb	r3, [r7, #27]
 800f2e8:	e0ae      	b.n	800f448 <UART_SetConfig+0x284>
 800f2ea:	2302      	movs	r3, #2
 800f2ec:	76fb      	strb	r3, [r7, #27]
 800f2ee:	e0ab      	b.n	800f448 <UART_SetConfig+0x284>
 800f2f0:	2304      	movs	r3, #4
 800f2f2:	76fb      	strb	r3, [r7, #27]
 800f2f4:	e0a8      	b.n	800f448 <UART_SetConfig+0x284>
 800f2f6:	2308      	movs	r3, #8
 800f2f8:	76fb      	strb	r3, [r7, #27]
 800f2fa:	e0a5      	b.n	800f448 <UART_SetConfig+0x284>
 800f2fc:	2310      	movs	r3, #16
 800f2fe:	76fb      	strb	r3, [r7, #27]
 800f300:	bf00      	nop
 800f302:	e0a1      	b.n	800f448 <UART_SetConfig+0x284>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	4a6b      	ldr	r2, [pc, #428]	; (800f4b8 <UART_SetConfig+0x2f4>)
 800f30a:	4293      	cmp	r3, r2
 800f30c:	d120      	bne.n	800f350 <UART_SetConfig+0x18c>
 800f30e:	4b68      	ldr	r3, [pc, #416]	; (800f4b0 <UART_SetConfig+0x2ec>)
 800f310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f314:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f318:	2b10      	cmp	r3, #16
 800f31a:	d00f      	beq.n	800f33c <UART_SetConfig+0x178>
 800f31c:	2b10      	cmp	r3, #16
 800f31e:	d802      	bhi.n	800f326 <UART_SetConfig+0x162>
 800f320:	2b00      	cmp	r3, #0
 800f322:	d005      	beq.n	800f330 <UART_SetConfig+0x16c>
 800f324:	e010      	b.n	800f348 <UART_SetConfig+0x184>
 800f326:	2b20      	cmp	r3, #32
 800f328:	d005      	beq.n	800f336 <UART_SetConfig+0x172>
 800f32a:	2b30      	cmp	r3, #48	; 0x30
 800f32c:	d009      	beq.n	800f342 <UART_SetConfig+0x17e>
 800f32e:	e00b      	b.n	800f348 <UART_SetConfig+0x184>
 800f330:	2300      	movs	r3, #0
 800f332:	76fb      	strb	r3, [r7, #27]
 800f334:	e088      	b.n	800f448 <UART_SetConfig+0x284>
 800f336:	2302      	movs	r3, #2
 800f338:	76fb      	strb	r3, [r7, #27]
 800f33a:	e085      	b.n	800f448 <UART_SetConfig+0x284>
 800f33c:	2304      	movs	r3, #4
 800f33e:	76fb      	strb	r3, [r7, #27]
 800f340:	e082      	b.n	800f448 <UART_SetConfig+0x284>
 800f342:	2308      	movs	r3, #8
 800f344:	76fb      	strb	r3, [r7, #27]
 800f346:	e07f      	b.n	800f448 <UART_SetConfig+0x284>
 800f348:	2310      	movs	r3, #16
 800f34a:	76fb      	strb	r3, [r7, #27]
 800f34c:	bf00      	nop
 800f34e:	e07b      	b.n	800f448 <UART_SetConfig+0x284>
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	4a59      	ldr	r2, [pc, #356]	; (800f4bc <UART_SetConfig+0x2f8>)
 800f356:	4293      	cmp	r3, r2
 800f358:	d120      	bne.n	800f39c <UART_SetConfig+0x1d8>
 800f35a:	4b55      	ldr	r3, [pc, #340]	; (800f4b0 <UART_SetConfig+0x2ec>)
 800f35c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f360:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f364:	2b40      	cmp	r3, #64	; 0x40
 800f366:	d00f      	beq.n	800f388 <UART_SetConfig+0x1c4>
 800f368:	2b40      	cmp	r3, #64	; 0x40
 800f36a:	d802      	bhi.n	800f372 <UART_SetConfig+0x1ae>
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d005      	beq.n	800f37c <UART_SetConfig+0x1b8>
 800f370:	e010      	b.n	800f394 <UART_SetConfig+0x1d0>
 800f372:	2b80      	cmp	r3, #128	; 0x80
 800f374:	d005      	beq.n	800f382 <UART_SetConfig+0x1be>
 800f376:	2bc0      	cmp	r3, #192	; 0xc0
 800f378:	d009      	beq.n	800f38e <UART_SetConfig+0x1ca>
 800f37a:	e00b      	b.n	800f394 <UART_SetConfig+0x1d0>
 800f37c:	2300      	movs	r3, #0
 800f37e:	76fb      	strb	r3, [r7, #27]
 800f380:	e062      	b.n	800f448 <UART_SetConfig+0x284>
 800f382:	2302      	movs	r3, #2
 800f384:	76fb      	strb	r3, [r7, #27]
 800f386:	e05f      	b.n	800f448 <UART_SetConfig+0x284>
 800f388:	2304      	movs	r3, #4
 800f38a:	76fb      	strb	r3, [r7, #27]
 800f38c:	e05c      	b.n	800f448 <UART_SetConfig+0x284>
 800f38e:	2308      	movs	r3, #8
 800f390:	76fb      	strb	r3, [r7, #27]
 800f392:	e059      	b.n	800f448 <UART_SetConfig+0x284>
 800f394:	2310      	movs	r3, #16
 800f396:	76fb      	strb	r3, [r7, #27]
 800f398:	bf00      	nop
 800f39a:	e055      	b.n	800f448 <UART_SetConfig+0x284>
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	4a47      	ldr	r2, [pc, #284]	; (800f4c0 <UART_SetConfig+0x2fc>)
 800f3a2:	4293      	cmp	r3, r2
 800f3a4:	d124      	bne.n	800f3f0 <UART_SetConfig+0x22c>
 800f3a6:	4b42      	ldr	r3, [pc, #264]	; (800f4b0 <UART_SetConfig+0x2ec>)
 800f3a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f3b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f3b4:	d012      	beq.n	800f3dc <UART_SetConfig+0x218>
 800f3b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f3ba:	d802      	bhi.n	800f3c2 <UART_SetConfig+0x1fe>
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d007      	beq.n	800f3d0 <UART_SetConfig+0x20c>
 800f3c0:	e012      	b.n	800f3e8 <UART_SetConfig+0x224>
 800f3c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f3c6:	d006      	beq.n	800f3d6 <UART_SetConfig+0x212>
 800f3c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f3cc:	d009      	beq.n	800f3e2 <UART_SetConfig+0x21e>
 800f3ce:	e00b      	b.n	800f3e8 <UART_SetConfig+0x224>
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	76fb      	strb	r3, [r7, #27]
 800f3d4:	e038      	b.n	800f448 <UART_SetConfig+0x284>
 800f3d6:	2302      	movs	r3, #2
 800f3d8:	76fb      	strb	r3, [r7, #27]
 800f3da:	e035      	b.n	800f448 <UART_SetConfig+0x284>
 800f3dc:	2304      	movs	r3, #4
 800f3de:	76fb      	strb	r3, [r7, #27]
 800f3e0:	e032      	b.n	800f448 <UART_SetConfig+0x284>
 800f3e2:	2308      	movs	r3, #8
 800f3e4:	76fb      	strb	r3, [r7, #27]
 800f3e6:	e02f      	b.n	800f448 <UART_SetConfig+0x284>
 800f3e8:	2310      	movs	r3, #16
 800f3ea:	76fb      	strb	r3, [r7, #27]
 800f3ec:	bf00      	nop
 800f3ee:	e02b      	b.n	800f448 <UART_SetConfig+0x284>
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	4a2c      	ldr	r2, [pc, #176]	; (800f4a8 <UART_SetConfig+0x2e4>)
 800f3f6:	4293      	cmp	r3, r2
 800f3f8:	d124      	bne.n	800f444 <UART_SetConfig+0x280>
 800f3fa:	4b2d      	ldr	r3, [pc, #180]	; (800f4b0 <UART_SetConfig+0x2ec>)
 800f3fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f400:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f408:	d012      	beq.n	800f430 <UART_SetConfig+0x26c>
 800f40a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f40e:	d802      	bhi.n	800f416 <UART_SetConfig+0x252>
 800f410:	2b00      	cmp	r3, #0
 800f412:	d007      	beq.n	800f424 <UART_SetConfig+0x260>
 800f414:	e012      	b.n	800f43c <UART_SetConfig+0x278>
 800f416:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f41a:	d006      	beq.n	800f42a <UART_SetConfig+0x266>
 800f41c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f420:	d009      	beq.n	800f436 <UART_SetConfig+0x272>
 800f422:	e00b      	b.n	800f43c <UART_SetConfig+0x278>
 800f424:	2300      	movs	r3, #0
 800f426:	76fb      	strb	r3, [r7, #27]
 800f428:	e00e      	b.n	800f448 <UART_SetConfig+0x284>
 800f42a:	2302      	movs	r3, #2
 800f42c:	76fb      	strb	r3, [r7, #27]
 800f42e:	e00b      	b.n	800f448 <UART_SetConfig+0x284>
 800f430:	2304      	movs	r3, #4
 800f432:	76fb      	strb	r3, [r7, #27]
 800f434:	e008      	b.n	800f448 <UART_SetConfig+0x284>
 800f436:	2308      	movs	r3, #8
 800f438:	76fb      	strb	r3, [r7, #27]
 800f43a:	e005      	b.n	800f448 <UART_SetConfig+0x284>
 800f43c:	2310      	movs	r3, #16
 800f43e:	76fb      	strb	r3, [r7, #27]
 800f440:	bf00      	nop
 800f442:	e001      	b.n	800f448 <UART_SetConfig+0x284>
 800f444:	2310      	movs	r3, #16
 800f446:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	4a16      	ldr	r2, [pc, #88]	; (800f4a8 <UART_SetConfig+0x2e4>)
 800f44e:	4293      	cmp	r3, r2
 800f450:	f040 8087 	bne.w	800f562 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f454:	7efb      	ldrb	r3, [r7, #27]
 800f456:	2b08      	cmp	r3, #8
 800f458:	d836      	bhi.n	800f4c8 <UART_SetConfig+0x304>
 800f45a:	a201      	add	r2, pc, #4	; (adr r2, 800f460 <UART_SetConfig+0x29c>)
 800f45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f460:	0800f485 	.word	0x0800f485
 800f464:	0800f4c9 	.word	0x0800f4c9
 800f468:	0800f48d 	.word	0x0800f48d
 800f46c:	0800f4c9 	.word	0x0800f4c9
 800f470:	0800f493 	.word	0x0800f493
 800f474:	0800f4c9 	.word	0x0800f4c9
 800f478:	0800f4c9 	.word	0x0800f4c9
 800f47c:	0800f4c9 	.word	0x0800f4c9
 800f480:	0800f49b 	.word	0x0800f49b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f484:	f7fd fd48 	bl	800cf18 <HAL_RCC_GetPCLK1Freq>
 800f488:	6178      	str	r0, [r7, #20]
        break;
 800f48a:	e022      	b.n	800f4d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f48c:	4b0d      	ldr	r3, [pc, #52]	; (800f4c4 <UART_SetConfig+0x300>)
 800f48e:	617b      	str	r3, [r7, #20]
        break;
 800f490:	e01f      	b.n	800f4d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f492:	f7fd fcab 	bl	800cdec <HAL_RCC_GetSysClockFreq>
 800f496:	6178      	str	r0, [r7, #20]
        break;
 800f498:	e01b      	b.n	800f4d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f49a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f49e:	617b      	str	r3, [r7, #20]
        break;
 800f4a0:	e017      	b.n	800f4d2 <UART_SetConfig+0x30e>
 800f4a2:	bf00      	nop
 800f4a4:	efff69f3 	.word	0xefff69f3
 800f4a8:	40008000 	.word	0x40008000
 800f4ac:	40013800 	.word	0x40013800
 800f4b0:	40021000 	.word	0x40021000
 800f4b4:	40004400 	.word	0x40004400
 800f4b8:	40004800 	.word	0x40004800
 800f4bc:	40004c00 	.word	0x40004c00
 800f4c0:	40005000 	.word	0x40005000
 800f4c4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	76bb      	strb	r3, [r7, #26]
        break;
 800f4d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	f000 80f1 	beq.w	800f6bc <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	685a      	ldr	r2, [r3, #4]
 800f4de:	4613      	mov	r3, r2
 800f4e0:	005b      	lsls	r3, r3, #1
 800f4e2:	4413      	add	r3, r2
 800f4e4:	697a      	ldr	r2, [r7, #20]
 800f4e6:	429a      	cmp	r2, r3
 800f4e8:	d305      	bcc.n	800f4f6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	685b      	ldr	r3, [r3, #4]
 800f4ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800f4f0:	697a      	ldr	r2, [r7, #20]
 800f4f2:	429a      	cmp	r2, r3
 800f4f4:	d902      	bls.n	800f4fc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800f4f6:	2301      	movs	r3, #1
 800f4f8:	76bb      	strb	r3, [r7, #26]
 800f4fa:	e0df      	b.n	800f6bc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800f4fc:	697b      	ldr	r3, [r7, #20]
 800f4fe:	4619      	mov	r1, r3
 800f500:	f04f 0200 	mov.w	r2, #0
 800f504:	f04f 0300 	mov.w	r3, #0
 800f508:	f04f 0400 	mov.w	r4, #0
 800f50c:	0214      	lsls	r4, r2, #8
 800f50e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800f512:	020b      	lsls	r3, r1, #8
 800f514:	687a      	ldr	r2, [r7, #4]
 800f516:	6852      	ldr	r2, [r2, #4]
 800f518:	0852      	lsrs	r2, r2, #1
 800f51a:	4611      	mov	r1, r2
 800f51c:	f04f 0200 	mov.w	r2, #0
 800f520:	eb13 0b01 	adds.w	fp, r3, r1
 800f524:	eb44 0c02 	adc.w	ip, r4, r2
 800f528:	4658      	mov	r0, fp
 800f52a:	4661      	mov	r1, ip
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	685b      	ldr	r3, [r3, #4]
 800f530:	f04f 0400 	mov.w	r4, #0
 800f534:	461a      	mov	r2, r3
 800f536:	4623      	mov	r3, r4
 800f538:	f7f1 fb36 	bl	8000ba8 <__aeabi_uldivmod>
 800f53c:	4603      	mov	r3, r0
 800f53e:	460c      	mov	r4, r1
 800f540:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f548:	d308      	bcc.n	800f55c <UART_SetConfig+0x398>
 800f54a:	693b      	ldr	r3, [r7, #16]
 800f54c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f550:	d204      	bcs.n	800f55c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	693a      	ldr	r2, [r7, #16]
 800f558:	60da      	str	r2, [r3, #12]
 800f55a:	e0af      	b.n	800f6bc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800f55c:	2301      	movs	r3, #1
 800f55e:	76bb      	strb	r3, [r7, #26]
 800f560:	e0ac      	b.n	800f6bc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	69db      	ldr	r3, [r3, #28]
 800f566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f56a:	d15b      	bne.n	800f624 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800f56c:	7efb      	ldrb	r3, [r7, #27]
 800f56e:	2b08      	cmp	r3, #8
 800f570:	d827      	bhi.n	800f5c2 <UART_SetConfig+0x3fe>
 800f572:	a201      	add	r2, pc, #4	; (adr r2, 800f578 <UART_SetConfig+0x3b4>)
 800f574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f578:	0800f59d 	.word	0x0800f59d
 800f57c:	0800f5a5 	.word	0x0800f5a5
 800f580:	0800f5ad 	.word	0x0800f5ad
 800f584:	0800f5c3 	.word	0x0800f5c3
 800f588:	0800f5b3 	.word	0x0800f5b3
 800f58c:	0800f5c3 	.word	0x0800f5c3
 800f590:	0800f5c3 	.word	0x0800f5c3
 800f594:	0800f5c3 	.word	0x0800f5c3
 800f598:	0800f5bb 	.word	0x0800f5bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f59c:	f7fd fcbc 	bl	800cf18 <HAL_RCC_GetPCLK1Freq>
 800f5a0:	6178      	str	r0, [r7, #20]
        break;
 800f5a2:	e013      	b.n	800f5cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f5a4:	f7fd fcce 	bl	800cf44 <HAL_RCC_GetPCLK2Freq>
 800f5a8:	6178      	str	r0, [r7, #20]
        break;
 800f5aa:	e00f      	b.n	800f5cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f5ac:	4b49      	ldr	r3, [pc, #292]	; (800f6d4 <UART_SetConfig+0x510>)
 800f5ae:	617b      	str	r3, [r7, #20]
        break;
 800f5b0:	e00c      	b.n	800f5cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f5b2:	f7fd fc1b 	bl	800cdec <HAL_RCC_GetSysClockFreq>
 800f5b6:	6178      	str	r0, [r7, #20]
        break;
 800f5b8:	e008      	b.n	800f5cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f5ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f5be:	617b      	str	r3, [r7, #20]
        break;
 800f5c0:	e004      	b.n	800f5cc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800f5c6:	2301      	movs	r3, #1
 800f5c8:	76bb      	strb	r3, [r7, #26]
        break;
 800f5ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d074      	beq.n	800f6bc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f5d2:	697b      	ldr	r3, [r7, #20]
 800f5d4:	005a      	lsls	r2, r3, #1
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	085b      	lsrs	r3, r3, #1
 800f5dc:	441a      	add	r2, r3
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	685b      	ldr	r3, [r3, #4]
 800f5e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5e6:	b29b      	uxth	r3, r3
 800f5e8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f5ea:	693b      	ldr	r3, [r7, #16]
 800f5ec:	2b0f      	cmp	r3, #15
 800f5ee:	d916      	bls.n	800f61e <UART_SetConfig+0x45a>
 800f5f0:	693b      	ldr	r3, [r7, #16]
 800f5f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5f6:	d212      	bcs.n	800f61e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f5f8:	693b      	ldr	r3, [r7, #16]
 800f5fa:	b29b      	uxth	r3, r3
 800f5fc:	f023 030f 	bic.w	r3, r3, #15
 800f600:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f602:	693b      	ldr	r3, [r7, #16]
 800f604:	085b      	lsrs	r3, r3, #1
 800f606:	b29b      	uxth	r3, r3
 800f608:	f003 0307 	and.w	r3, r3, #7
 800f60c:	b29a      	uxth	r2, r3
 800f60e:	89fb      	ldrh	r3, [r7, #14]
 800f610:	4313      	orrs	r3, r2
 800f612:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	89fa      	ldrh	r2, [r7, #14]
 800f61a:	60da      	str	r2, [r3, #12]
 800f61c:	e04e      	b.n	800f6bc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800f61e:	2301      	movs	r3, #1
 800f620:	76bb      	strb	r3, [r7, #26]
 800f622:	e04b      	b.n	800f6bc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f624:	7efb      	ldrb	r3, [r7, #27]
 800f626:	2b08      	cmp	r3, #8
 800f628:	d827      	bhi.n	800f67a <UART_SetConfig+0x4b6>
 800f62a:	a201      	add	r2, pc, #4	; (adr r2, 800f630 <UART_SetConfig+0x46c>)
 800f62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f630:	0800f655 	.word	0x0800f655
 800f634:	0800f65d 	.word	0x0800f65d
 800f638:	0800f665 	.word	0x0800f665
 800f63c:	0800f67b 	.word	0x0800f67b
 800f640:	0800f66b 	.word	0x0800f66b
 800f644:	0800f67b 	.word	0x0800f67b
 800f648:	0800f67b 	.word	0x0800f67b
 800f64c:	0800f67b 	.word	0x0800f67b
 800f650:	0800f673 	.word	0x0800f673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f654:	f7fd fc60 	bl	800cf18 <HAL_RCC_GetPCLK1Freq>
 800f658:	6178      	str	r0, [r7, #20]
        break;
 800f65a:	e013      	b.n	800f684 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f65c:	f7fd fc72 	bl	800cf44 <HAL_RCC_GetPCLK2Freq>
 800f660:	6178      	str	r0, [r7, #20]
        break;
 800f662:	e00f      	b.n	800f684 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f664:	4b1b      	ldr	r3, [pc, #108]	; (800f6d4 <UART_SetConfig+0x510>)
 800f666:	617b      	str	r3, [r7, #20]
        break;
 800f668:	e00c      	b.n	800f684 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f66a:	f7fd fbbf 	bl	800cdec <HAL_RCC_GetSysClockFreq>
 800f66e:	6178      	str	r0, [r7, #20]
        break;
 800f670:	e008      	b.n	800f684 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f676:	617b      	str	r3, [r7, #20]
        break;
 800f678:	e004      	b.n	800f684 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800f67a:	2300      	movs	r3, #0
 800f67c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800f67e:	2301      	movs	r3, #1
 800f680:	76bb      	strb	r3, [r7, #26]
        break;
 800f682:	bf00      	nop
    }

    if (pclk != 0U)
 800f684:	697b      	ldr	r3, [r7, #20]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d018      	beq.n	800f6bc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	685b      	ldr	r3, [r3, #4]
 800f68e:	085a      	lsrs	r2, r3, #1
 800f690:	697b      	ldr	r3, [r7, #20]
 800f692:	441a      	add	r2, r3
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	685b      	ldr	r3, [r3, #4]
 800f698:	fbb2 f3f3 	udiv	r3, r2, r3
 800f69c:	b29b      	uxth	r3, r3
 800f69e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f6a0:	693b      	ldr	r3, [r7, #16]
 800f6a2:	2b0f      	cmp	r3, #15
 800f6a4:	d908      	bls.n	800f6b8 <UART_SetConfig+0x4f4>
 800f6a6:	693b      	ldr	r3, [r7, #16]
 800f6a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6ac:	d204      	bcs.n	800f6b8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	693a      	ldr	r2, [r7, #16]
 800f6b4:	60da      	str	r2, [r3, #12]
 800f6b6:	e001      	b.n	800f6bc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2200      	movs	r2, #0
 800f6c0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800f6c8:	7ebb      	ldrb	r3, [r7, #26]
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3720      	adds	r7, #32
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800f6d4:	00f42400 	.word	0x00f42400

0800f6d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b083      	sub	sp, #12
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6e4:	f003 0301 	and.w	r3, r3, #1
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d00a      	beq.n	800f702 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	685b      	ldr	r3, [r3, #4]
 800f6f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	430a      	orrs	r2, r1
 800f700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f706:	f003 0302 	and.w	r3, r3, #2
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d00a      	beq.n	800f724 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	685b      	ldr	r3, [r3, #4]
 800f714:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	430a      	orrs	r2, r1
 800f722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f728:	f003 0304 	and.w	r3, r3, #4
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d00a      	beq.n	800f746 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	685b      	ldr	r3, [r3, #4]
 800f736:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	430a      	orrs	r2, r1
 800f744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f74a:	f003 0308 	and.w	r3, r3, #8
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d00a      	beq.n	800f768 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	685b      	ldr	r3, [r3, #4]
 800f758:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	430a      	orrs	r2, r1
 800f766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f76c:	f003 0310 	and.w	r3, r3, #16
 800f770:	2b00      	cmp	r3, #0
 800f772:	d00a      	beq.n	800f78a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	689b      	ldr	r3, [r3, #8]
 800f77a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	430a      	orrs	r2, r1
 800f788:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f78e:	f003 0320 	and.w	r3, r3, #32
 800f792:	2b00      	cmp	r3, #0
 800f794:	d00a      	beq.n	800f7ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	689b      	ldr	r3, [r3, #8]
 800f79c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	430a      	orrs	r2, r1
 800f7aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d01a      	beq.n	800f7ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	685b      	ldr	r3, [r3, #4]
 800f7be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	430a      	orrs	r2, r1
 800f7cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f7d6:	d10a      	bne.n	800f7ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	685b      	ldr	r3, [r3, #4]
 800f7de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	430a      	orrs	r2, r1
 800f7ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d00a      	beq.n	800f810 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	685b      	ldr	r3, [r3, #4]
 800f800:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	430a      	orrs	r2, r1
 800f80e:	605a      	str	r2, [r3, #4]
  }
}
 800f810:	bf00      	nop
 800f812:	370c      	adds	r7, #12
 800f814:	46bd      	mov	sp, r7
 800f816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81a:	4770      	bx	lr

0800f81c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b086      	sub	sp, #24
 800f820:	af02      	add	r7, sp, #8
 800f822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2200      	movs	r2, #0
 800f828:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800f82a:	f7fa fe0d 	bl	800a448 <HAL_GetTick>
 800f82e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	f003 0308 	and.w	r3, r3, #8
 800f83a:	2b08      	cmp	r3, #8
 800f83c:	d10e      	bne.n	800f85c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f83e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f842:	9300      	str	r3, [sp, #0]
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	2200      	movs	r2, #0
 800f848:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f84c:	6878      	ldr	r0, [r7, #4]
 800f84e:	f000 f82a 	bl	800f8a6 <UART_WaitOnFlagUntilTimeout>
 800f852:	4603      	mov	r3, r0
 800f854:	2b00      	cmp	r3, #0
 800f856:	d001      	beq.n	800f85c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f858:	2303      	movs	r3, #3
 800f85a:	e020      	b.n	800f89e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	f003 0304 	and.w	r3, r3, #4
 800f866:	2b04      	cmp	r3, #4
 800f868:	d10e      	bne.n	800f888 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f86a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f86e:	9300      	str	r3, [sp, #0]
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	2200      	movs	r2, #0
 800f874:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f000 f814 	bl	800f8a6 <UART_WaitOnFlagUntilTimeout>
 800f87e:	4603      	mov	r3, r0
 800f880:	2b00      	cmp	r3, #0
 800f882:	d001      	beq.n	800f888 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f884:	2303      	movs	r3, #3
 800f886:	e00a      	b.n	800f89e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2220      	movs	r2, #32
 800f88c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2220      	movs	r2, #32
 800f892:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2200      	movs	r2, #0
 800f898:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800f89c:	2300      	movs	r3, #0
}
 800f89e:	4618      	mov	r0, r3
 800f8a0:	3710      	adds	r7, #16
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	bd80      	pop	{r7, pc}

0800f8a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f8a6:	b580      	push	{r7, lr}
 800f8a8:	b084      	sub	sp, #16
 800f8aa:	af00      	add	r7, sp, #0
 800f8ac:	60f8      	str	r0, [r7, #12]
 800f8ae:	60b9      	str	r1, [r7, #8]
 800f8b0:	603b      	str	r3, [r7, #0]
 800f8b2:	4613      	mov	r3, r2
 800f8b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f8b6:	e05d      	b.n	800f974 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f8b8:	69bb      	ldr	r3, [r7, #24]
 800f8ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8be:	d059      	beq.n	800f974 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f8c0:	f7fa fdc2 	bl	800a448 <HAL_GetTick>
 800f8c4:	4602      	mov	r2, r0
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	1ad3      	subs	r3, r2, r3
 800f8ca:	69ba      	ldr	r2, [r7, #24]
 800f8cc:	429a      	cmp	r2, r3
 800f8ce:	d302      	bcc.n	800f8d6 <UART_WaitOnFlagUntilTimeout+0x30>
 800f8d0:	69bb      	ldr	r3, [r7, #24]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d11b      	bne.n	800f90e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	681a      	ldr	r2, [r3, #0]
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f8e4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	689a      	ldr	r2, [r3, #8]
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	f022 0201 	bic.w	r2, r2, #1
 800f8f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	2220      	movs	r2, #32
 800f8fa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	2220      	movs	r2, #32
 800f900:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	2200      	movs	r2, #0
 800f906:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800f90a:	2303      	movs	r3, #3
 800f90c:	e042      	b.n	800f994 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	f003 0304 	and.w	r3, r3, #4
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d02b      	beq.n	800f974 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	69db      	ldr	r3, [r3, #28]
 800f922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f92a:	d123      	bne.n	800f974 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f934:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	681a      	ldr	r2, [r3, #0]
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f944:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	689a      	ldr	r2, [r3, #8]
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	f022 0201 	bic.w	r2, r2, #1
 800f954:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	2220      	movs	r2, #32
 800f95a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	2220      	movs	r2, #32
 800f960:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	2220      	movs	r2, #32
 800f966:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	2200      	movs	r2, #0
 800f96c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800f970:	2303      	movs	r3, #3
 800f972:	e00f      	b.n	800f994 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	69da      	ldr	r2, [r3, #28]
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	4013      	ands	r3, r2
 800f97e:	68ba      	ldr	r2, [r7, #8]
 800f980:	429a      	cmp	r2, r3
 800f982:	bf0c      	ite	eq
 800f984:	2301      	moveq	r3, #1
 800f986:	2300      	movne	r3, #0
 800f988:	b2db      	uxtb	r3, r3
 800f98a:	461a      	mov	r2, r3
 800f98c:	79fb      	ldrb	r3, [r7, #7]
 800f98e:	429a      	cmp	r2, r3
 800f990:	d092      	beq.n	800f8b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f992:	2300      	movs	r3, #0
}
 800f994:	4618      	mov	r0, r3
 800f996:	3710      	adds	r7, #16
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}

0800f99c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f99c:	b084      	sub	sp, #16
 800f99e:	b580      	push	{r7, lr}
 800f9a0:	b084      	sub	sp, #16
 800f9a2:	af00      	add	r7, sp, #0
 800f9a4:	6078      	str	r0, [r7, #4]
 800f9a6:	f107 001c 	add.w	r0, r7, #28
 800f9aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b0:	2b01      	cmp	r3, #1
 800f9b2:	d122      	bne.n	800f9fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	68db      	ldr	r3, [r3, #12]
 800f9c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f9c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f9cc:	687a      	ldr	r2, [r7, #4]
 800f9ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	68db      	ldr	r3, [r3, #12]
 800f9d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f9dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9de:	2b01      	cmp	r3, #1
 800f9e0:	d105      	bne.n	800f9ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	68db      	ldr	r3, [r3, #12]
 800f9e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f000 fa30 	bl	800fe54 <USB_CoreReset>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	73fb      	strb	r3, [r7, #15]
 800f9f8:	e01a      	b.n	800fa30 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	68db      	ldr	r3, [r3, #12]
 800f9fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	f000 fa24 	bl	800fe54 <USB_CoreReset>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800fa10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d106      	bne.n	800fa24 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	639a      	str	r2, [r3, #56]	; 0x38
 800fa22:	e005      	b.n	800fa30 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 800fa30:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3710      	adds	r7, #16
 800fa36:	46bd      	mov	sp, r7
 800fa38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fa3c:	b004      	add	sp, #16
 800fa3e:	4770      	bx	lr

0800fa40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fa40:	b480      	push	{r7}
 800fa42:	b083      	sub	sp, #12
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	689b      	ldr	r3, [r3, #8]
 800fa4c:	f023 0201 	bic.w	r2, r3, #1
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fa54:	2300      	movs	r3, #0
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	370c      	adds	r7, #12
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa60:	4770      	bx	lr

0800fa62 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800fa62:	b580      	push	{r7, lr}
 800fa64:	b082      	sub	sp, #8
 800fa66:	af00      	add	r7, sp, #0
 800fa68:	6078      	str	r0, [r7, #4]
 800fa6a:	460b      	mov	r3, r1
 800fa6c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	68db      	ldr	r3, [r3, #12]
 800fa72:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fa7a:	78fb      	ldrb	r3, [r7, #3]
 800fa7c:	2b01      	cmp	r3, #1
 800fa7e:	d106      	bne.n	800fa8e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	68db      	ldr	r3, [r3, #12]
 800fa84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	60da      	str	r2, [r3, #12]
 800fa8c:	e00b      	b.n	800faa6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800fa8e:	78fb      	ldrb	r3, [r7, #3]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d106      	bne.n	800faa2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	68db      	ldr	r3, [r3, #12]
 800fa98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	60da      	str	r2, [r3, #12]
 800faa0:	e001      	b.n	800faa6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800faa2:	2301      	movs	r3, #1
 800faa4:	e003      	b.n	800faae <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800faa6:	2032      	movs	r0, #50	; 0x32
 800faa8:	f7fa fcda 	bl	800a460 <HAL_Delay>

  return HAL_OK;
 800faac:	2300      	movs	r3, #0
}
 800faae:	4618      	mov	r0, r3
 800fab0:	3708      	adds	r7, #8
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}
	...

0800fab8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fab8:	b084      	sub	sp, #16
 800faba:	b580      	push	{r7, lr}
 800fabc:	b086      	sub	sp, #24
 800fabe:	af00      	add	r7, sp, #0
 800fac0:	6078      	str	r0, [r7, #4]
 800fac2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fac6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800faca:	2300      	movs	r3, #0
 800facc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fad2:	2300      	movs	r3, #0
 800fad4:	613b      	str	r3, [r7, #16]
 800fad6:	e009      	b.n	800faec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fad8:	687a      	ldr	r2, [r7, #4]
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	3340      	adds	r3, #64	; 0x40
 800fade:	009b      	lsls	r3, r3, #2
 800fae0:	4413      	add	r3, r2
 800fae2:	2200      	movs	r2, #0
 800fae4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	3301      	adds	r3, #1
 800faea:	613b      	str	r3, [r7, #16]
 800faec:	693b      	ldr	r3, [r7, #16]
 800faee:	2b0e      	cmp	r3, #14
 800faf0:	d9f2      	bls.n	800fad8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800faf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d11c      	bne.n	800fb32 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fafe:	685b      	ldr	r3, [r3, #4]
 800fb00:	68fa      	ldr	r2, [r7, #12]
 800fb02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fb06:	f043 0302 	orr.w	r3, r3, #2
 800fb0a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb10:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	601a      	str	r2, [r3, #0]
 800fb30:	e005      	b.n	800fb3e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fb44:	461a      	mov	r2, r3
 800fb46:	2300      	movs	r3, #0
 800fb48:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb50:	4619      	mov	r1, r3
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb58:	461a      	mov	r2, r3
 800fb5a:	680b      	ldr	r3, [r1, #0]
 800fb5c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fb5e:	2103      	movs	r1, #3
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f000 f93d 	bl	800fde0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fb66:	2110      	movs	r1, #16
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f000 f8f1 	bl	800fd50 <USB_FlushTxFifo>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d001      	beq.n	800fb78 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800fb74:	2301      	movs	r3, #1
 800fb76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	f000 f90f 	bl	800fd9c <USB_FlushRxFifo>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d001      	beq.n	800fb88 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800fb84:	2301      	movs	r3, #1
 800fb86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb8e:	461a      	mov	r2, r3
 800fb90:	2300      	movs	r3, #0
 800fb92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb9a:	461a      	mov	r2, r3
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fba6:	461a      	mov	r2, r3
 800fba8:	2300      	movs	r3, #0
 800fbaa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fbac:	2300      	movs	r3, #0
 800fbae:	613b      	str	r3, [r7, #16]
 800fbb0:	e043      	b.n	800fc3a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fbb2:	693b      	ldr	r3, [r7, #16]
 800fbb4:	015a      	lsls	r2, r3, #5
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	4413      	add	r3, r2
 800fbba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fbc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fbc8:	d118      	bne.n	800fbfc <USB_DevInit+0x144>
    {
      if (i == 0U)
 800fbca:	693b      	ldr	r3, [r7, #16]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d10a      	bne.n	800fbe6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	015a      	lsls	r2, r3, #5
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	4413      	add	r3, r2
 800fbd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbdc:	461a      	mov	r2, r3
 800fbde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fbe2:	6013      	str	r3, [r2, #0]
 800fbe4:	e013      	b.n	800fc0e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	015a      	lsls	r2, r3, #5
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	4413      	add	r3, r2
 800fbee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbf2:	461a      	mov	r2, r3
 800fbf4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fbf8:	6013      	str	r3, [r2, #0]
 800fbfa:	e008      	b.n	800fc0e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fbfc:	693b      	ldr	r3, [r7, #16]
 800fbfe:	015a      	lsls	r2, r3, #5
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	4413      	add	r3, r2
 800fc04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc08:	461a      	mov	r2, r3
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fc0e:	693b      	ldr	r3, [r7, #16]
 800fc10:	015a      	lsls	r2, r3, #5
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	4413      	add	r3, r2
 800fc16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc1a:	461a      	mov	r2, r3
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fc20:	693b      	ldr	r3, [r7, #16]
 800fc22:	015a      	lsls	r2, r3, #5
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	4413      	add	r3, r2
 800fc28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc2c:	461a      	mov	r2, r3
 800fc2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fc32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fc34:	693b      	ldr	r3, [r7, #16]
 800fc36:	3301      	adds	r3, #1
 800fc38:	613b      	str	r3, [r7, #16]
 800fc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc3c:	693a      	ldr	r2, [r7, #16]
 800fc3e:	429a      	cmp	r2, r3
 800fc40:	d3b7      	bcc.n	800fbb2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fc42:	2300      	movs	r3, #0
 800fc44:	613b      	str	r3, [r7, #16]
 800fc46:	e043      	b.n	800fcd0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fc48:	693b      	ldr	r3, [r7, #16]
 800fc4a:	015a      	lsls	r2, r3, #5
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	4413      	add	r3, r2
 800fc50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fc5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fc5e:	d118      	bne.n	800fc92 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800fc60:	693b      	ldr	r3, [r7, #16]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d10a      	bne.n	800fc7c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fc66:	693b      	ldr	r3, [r7, #16]
 800fc68:	015a      	lsls	r2, r3, #5
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	4413      	add	r3, r2
 800fc6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc72:	461a      	mov	r2, r3
 800fc74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fc78:	6013      	str	r3, [r2, #0]
 800fc7a:	e013      	b.n	800fca4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fc7c:	693b      	ldr	r3, [r7, #16]
 800fc7e:	015a      	lsls	r2, r3, #5
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	4413      	add	r3, r2
 800fc84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc88:	461a      	mov	r2, r3
 800fc8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fc8e:	6013      	str	r3, [r2, #0]
 800fc90:	e008      	b.n	800fca4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fc92:	693b      	ldr	r3, [r7, #16]
 800fc94:	015a      	lsls	r2, r3, #5
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	4413      	add	r3, r2
 800fc9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc9e:	461a      	mov	r2, r3
 800fca0:	2300      	movs	r3, #0
 800fca2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fca4:	693b      	ldr	r3, [r7, #16]
 800fca6:	015a      	lsls	r2, r3, #5
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	4413      	add	r3, r2
 800fcac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcb0:	461a      	mov	r2, r3
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fcb6:	693b      	ldr	r3, [r7, #16]
 800fcb8:	015a      	lsls	r2, r3, #5
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	4413      	add	r3, r2
 800fcbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fcc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fcca:	693b      	ldr	r3, [r7, #16]
 800fccc:	3301      	adds	r3, #1
 800fcce:	613b      	str	r3, [r7, #16]
 800fcd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcd2:	693a      	ldr	r2, [r7, #16]
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d3b7      	bcc.n	800fc48 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcde:	691b      	ldr	r3, [r3, #16]
 800fce0:	68fa      	ldr	r2, [r7, #12]
 800fce2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fce6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fcea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2200      	movs	r2, #0
 800fcf0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fcf8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	699b      	ldr	r3, [r3, #24]
 800fcfe:	f043 0210 	orr.w	r2, r3, #16
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	699a      	ldr	r2, [r3, #24]
 800fd0a:	4b10      	ldr	r3, [pc, #64]	; (800fd4c <USB_DevInit+0x294>)
 800fd0c:	4313      	orrs	r3, r2
 800fd0e:	687a      	ldr	r2, [r7, #4]
 800fd10:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fd12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d005      	beq.n	800fd24 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	699b      	ldr	r3, [r3, #24]
 800fd1c:	f043 0208 	orr.w	r2, r3, #8
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fd24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd26:	2b01      	cmp	r3, #1
 800fd28:	d107      	bne.n	800fd3a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	699b      	ldr	r3, [r3, #24]
 800fd2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fd32:	f043 0304 	orr.w	r3, r3, #4
 800fd36:	687a      	ldr	r2, [r7, #4]
 800fd38:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fd3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	3718      	adds	r7, #24
 800fd40:	46bd      	mov	sp, r7
 800fd42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fd46:	b004      	add	sp, #16
 800fd48:	4770      	bx	lr
 800fd4a:	bf00      	nop
 800fd4c:	803c3800 	.word	0x803c3800

0800fd50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fd50:	b480      	push	{r7}
 800fd52:	b085      	sub	sp, #20
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	019b      	lsls	r3, r3, #6
 800fd62:	f043 0220 	orr.w	r2, r3, #32
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	3301      	adds	r3, #1
 800fd6e:	60fb      	str	r3, [r7, #12]
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	4a09      	ldr	r2, [pc, #36]	; (800fd98 <USB_FlushTxFifo+0x48>)
 800fd74:	4293      	cmp	r3, r2
 800fd76:	d901      	bls.n	800fd7c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800fd78:	2303      	movs	r3, #3
 800fd7a:	e006      	b.n	800fd8a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	691b      	ldr	r3, [r3, #16]
 800fd80:	f003 0320 	and.w	r3, r3, #32
 800fd84:	2b20      	cmp	r3, #32
 800fd86:	d0f0      	beq.n	800fd6a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800fd88:	2300      	movs	r3, #0
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3714      	adds	r7, #20
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd94:	4770      	bx	lr
 800fd96:	bf00      	nop
 800fd98:	00030d40 	.word	0x00030d40

0800fd9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b085      	sub	sp, #20
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800fda4:	2300      	movs	r3, #0
 800fda6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2210      	movs	r2, #16
 800fdac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	60fb      	str	r3, [r7, #12]
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	4a09      	ldr	r2, [pc, #36]	; (800fddc <USB_FlushRxFifo+0x40>)
 800fdb8:	4293      	cmp	r3, r2
 800fdba:	d901      	bls.n	800fdc0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800fdbc:	2303      	movs	r3, #3
 800fdbe:	e006      	b.n	800fdce <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	691b      	ldr	r3, [r3, #16]
 800fdc4:	f003 0310 	and.w	r3, r3, #16
 800fdc8:	2b10      	cmp	r3, #16
 800fdca:	d0f0      	beq.n	800fdae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800fdcc:	2300      	movs	r3, #0
}
 800fdce:	4618      	mov	r0, r3
 800fdd0:	3714      	adds	r7, #20
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd8:	4770      	bx	lr
 800fdda:	bf00      	nop
 800fddc:	00030d40 	.word	0x00030d40

0800fde0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fde0:	b480      	push	{r7}
 800fde2:	b085      	sub	sp, #20
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
 800fde8:	460b      	mov	r3, r1
 800fdea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fdf6:	681a      	ldr	r2, [r3, #0]
 800fdf8:	78fb      	ldrb	r3, [r7, #3]
 800fdfa:	68f9      	ldr	r1, [r7, #12]
 800fdfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe00:	4313      	orrs	r3, r2
 800fe02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fe04:	2300      	movs	r3, #0
}
 800fe06:	4618      	mov	r0, r3
 800fe08:	3714      	adds	r7, #20
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe10:	4770      	bx	lr

0800fe12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fe12:	b480      	push	{r7}
 800fe14:	b085      	sub	sp, #20
 800fe16:	af00      	add	r7, sp, #0
 800fe18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	68fa      	ldr	r2, [r7, #12]
 800fe28:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fe2c:	f023 0303 	bic.w	r3, r3, #3
 800fe30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe38:	685b      	ldr	r3, [r3, #4]
 800fe3a:	68fa      	ldr	r2, [r7, #12]
 800fe3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fe40:	f043 0302 	orr.w	r3, r3, #2
 800fe44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fe46:	2300      	movs	r3, #0
}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	3714      	adds	r7, #20
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe52:	4770      	bx	lr

0800fe54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fe54:	b480      	push	{r7}
 800fe56:	b085      	sub	sp, #20
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	3301      	adds	r3, #1
 800fe64:	60fb      	str	r3, [r7, #12]
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	4a13      	ldr	r2, [pc, #76]	; (800feb8 <USB_CoreReset+0x64>)
 800fe6a:	4293      	cmp	r3, r2
 800fe6c:	d901      	bls.n	800fe72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fe6e:	2303      	movs	r3, #3
 800fe70:	e01b      	b.n	800feaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	691b      	ldr	r3, [r3, #16]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	daf2      	bge.n	800fe60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	691b      	ldr	r3, [r3, #16]
 800fe82:	f043 0201 	orr.w	r2, r3, #1
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	3301      	adds	r3, #1
 800fe8e:	60fb      	str	r3, [r7, #12]
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	4a09      	ldr	r2, [pc, #36]	; (800feb8 <USB_CoreReset+0x64>)
 800fe94:	4293      	cmp	r3, r2
 800fe96:	d901      	bls.n	800fe9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fe98:	2303      	movs	r3, #3
 800fe9a:	e006      	b.n	800feaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	691b      	ldr	r3, [r3, #16]
 800fea0:	f003 0301 	and.w	r3, r3, #1
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	d0f0      	beq.n	800fe8a <USB_CoreReset+0x36>

  return HAL_OK;
 800fea8:	2300      	movs	r3, #0
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3714      	adds	r7, #20
 800feae:	46bd      	mov	sp, r7
 800feb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb4:	4770      	bx	lr
 800feb6:	bf00      	nop
 800feb8:	00030d40 	.word	0x00030d40

0800febc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800febc:	b480      	push	{r7}
 800febe:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800fec0:	bf00      	nop
 800fec2:	46bd      	mov	sp, r7
 800fec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec8:	4770      	bx	lr
	...

0800fecc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fecc:	b480      	push	{r7}
 800fece:	b085      	sub	sp, #20
 800fed0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fed2:	f3ef 8305 	mrs	r3, IPSR
 800fed6:	60bb      	str	r3, [r7, #8]
  return(result);
 800fed8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d10f      	bne.n	800fefe <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fede:	f3ef 8310 	mrs	r3, PRIMASK
 800fee2:	607b      	str	r3, [r7, #4]
  return(result);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d105      	bne.n	800fef6 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800feea:	f3ef 8311 	mrs	r3, BASEPRI
 800feee:	603b      	str	r3, [r7, #0]
  return(result);
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d007      	beq.n	800ff06 <osKernelInitialize+0x3a>
 800fef6:	4b0e      	ldr	r3, [pc, #56]	; (800ff30 <osKernelInitialize+0x64>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	2b02      	cmp	r3, #2
 800fefc:	d103      	bne.n	800ff06 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800fefe:	f06f 0305 	mvn.w	r3, #5
 800ff02:	60fb      	str	r3, [r7, #12]
 800ff04:	e00c      	b.n	800ff20 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ff06:	4b0a      	ldr	r3, [pc, #40]	; (800ff30 <osKernelInitialize+0x64>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d105      	bne.n	800ff1a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ff0e:	4b08      	ldr	r3, [pc, #32]	; (800ff30 <osKernelInitialize+0x64>)
 800ff10:	2201      	movs	r2, #1
 800ff12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ff14:	2300      	movs	r3, #0
 800ff16:	60fb      	str	r3, [r7, #12]
 800ff18:	e002      	b.n	800ff20 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800ff1a:	f04f 33ff 	mov.w	r3, #4294967295
 800ff1e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ff20:	68fb      	ldr	r3, [r7, #12]
}
 800ff22:	4618      	mov	r0, r3
 800ff24:	3714      	adds	r7, #20
 800ff26:	46bd      	mov	sp, r7
 800ff28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2c:	4770      	bx	lr
 800ff2e:	bf00      	nop
 800ff30:	200008c4 	.word	0x200008c4

0800ff34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b084      	sub	sp, #16
 800ff38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff3a:	f3ef 8305 	mrs	r3, IPSR
 800ff3e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ff40:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d10f      	bne.n	800ff66 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff46:	f3ef 8310 	mrs	r3, PRIMASK
 800ff4a:	607b      	str	r3, [r7, #4]
  return(result);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d105      	bne.n	800ff5e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ff52:	f3ef 8311 	mrs	r3, BASEPRI
 800ff56:	603b      	str	r3, [r7, #0]
  return(result);
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d007      	beq.n	800ff6e <osKernelStart+0x3a>
 800ff5e:	4b0f      	ldr	r3, [pc, #60]	; (800ff9c <osKernelStart+0x68>)
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	2b02      	cmp	r3, #2
 800ff64:	d103      	bne.n	800ff6e <osKernelStart+0x3a>
    stat = osErrorISR;
 800ff66:	f06f 0305 	mvn.w	r3, #5
 800ff6a:	60fb      	str	r3, [r7, #12]
 800ff6c:	e010      	b.n	800ff90 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ff6e:	4b0b      	ldr	r3, [pc, #44]	; (800ff9c <osKernelStart+0x68>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	2b01      	cmp	r3, #1
 800ff74:	d109      	bne.n	800ff8a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ff76:	f7ff ffa1 	bl	800febc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ff7a:	4b08      	ldr	r3, [pc, #32]	; (800ff9c <osKernelStart+0x68>)
 800ff7c:	2202      	movs	r2, #2
 800ff7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ff80:	f001 fce6 	bl	8011950 <vTaskStartScheduler>
      stat = osOK;
 800ff84:	2300      	movs	r3, #0
 800ff86:	60fb      	str	r3, [r7, #12]
 800ff88:	e002      	b.n	800ff90 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800ff8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ff8e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ff90:	68fb      	ldr	r3, [r7, #12]
}
 800ff92:	4618      	mov	r0, r3
 800ff94:	3710      	adds	r7, #16
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}
 800ff9a:	bf00      	nop
 800ff9c:	200008c4 	.word	0x200008c4

0800ffa0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b090      	sub	sp, #64	; 0x40
 800ffa4:	af04      	add	r7, sp, #16
 800ffa6:	60f8      	str	r0, [r7, #12]
 800ffa8:	60b9      	str	r1, [r7, #8]
 800ffaa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ffac:	2300      	movs	r3, #0
 800ffae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ffb0:	f3ef 8305 	mrs	r3, IPSR
 800ffb4:	61fb      	str	r3, [r7, #28]
  return(result);
 800ffb6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	f040 808f 	bne.w	80100dc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ffbe:	f3ef 8310 	mrs	r3, PRIMASK
 800ffc2:	61bb      	str	r3, [r7, #24]
  return(result);
 800ffc4:	69bb      	ldr	r3, [r7, #24]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d105      	bne.n	800ffd6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ffca:	f3ef 8311 	mrs	r3, BASEPRI
 800ffce:	617b      	str	r3, [r7, #20]
  return(result);
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d003      	beq.n	800ffde <osThreadNew+0x3e>
 800ffd6:	4b44      	ldr	r3, [pc, #272]	; (80100e8 <osThreadNew+0x148>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	2b02      	cmp	r3, #2
 800ffdc:	d07e      	beq.n	80100dc <osThreadNew+0x13c>
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d07b      	beq.n	80100dc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800ffe4:	2340      	movs	r3, #64	; 0x40
 800ffe6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800ffe8:	2318      	movs	r3, #24
 800ffea:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800ffec:	2300      	movs	r3, #0
 800ffee:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800fff0:	f04f 33ff 	mov.w	r3, #4294967295
 800fff4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d045      	beq.n	8010088 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d002      	beq.n	801000a <osThreadNew+0x6a>
        name = attr->name;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	699b      	ldr	r3, [r3, #24]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d002      	beq.n	8010018 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	699b      	ldr	r3, [r3, #24]
 8010016:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801001a:	2b00      	cmp	r3, #0
 801001c:	d008      	beq.n	8010030 <osThreadNew+0x90>
 801001e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010020:	2b38      	cmp	r3, #56	; 0x38
 8010022:	d805      	bhi.n	8010030 <osThreadNew+0x90>
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	685b      	ldr	r3, [r3, #4]
 8010028:	f003 0301 	and.w	r3, r3, #1
 801002c:	2b00      	cmp	r3, #0
 801002e:	d001      	beq.n	8010034 <osThreadNew+0x94>
        return (NULL);
 8010030:	2300      	movs	r3, #0
 8010032:	e054      	b.n	80100de <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	695b      	ldr	r3, [r3, #20]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d003      	beq.n	8010044 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	695b      	ldr	r3, [r3, #20]
 8010040:	089b      	lsrs	r3, r3, #2
 8010042:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	689b      	ldr	r3, [r3, #8]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d00e      	beq.n	801006a <osThreadNew+0xca>
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	68db      	ldr	r3, [r3, #12]
 8010050:	2b5b      	cmp	r3, #91	; 0x5b
 8010052:	d90a      	bls.n	801006a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010058:	2b00      	cmp	r3, #0
 801005a:	d006      	beq.n	801006a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	695b      	ldr	r3, [r3, #20]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d002      	beq.n	801006a <osThreadNew+0xca>
        mem = 1;
 8010064:	2301      	movs	r3, #1
 8010066:	623b      	str	r3, [r7, #32]
 8010068:	e010      	b.n	801008c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	689b      	ldr	r3, [r3, #8]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d10c      	bne.n	801008c <osThreadNew+0xec>
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	68db      	ldr	r3, [r3, #12]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d108      	bne.n	801008c <osThreadNew+0xec>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	691b      	ldr	r3, [r3, #16]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d104      	bne.n	801008c <osThreadNew+0xec>
          mem = 0;
 8010082:	2300      	movs	r3, #0
 8010084:	623b      	str	r3, [r7, #32]
 8010086:	e001      	b.n	801008c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8010088:	2300      	movs	r3, #0
 801008a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 801008c:	6a3b      	ldr	r3, [r7, #32]
 801008e:	2b01      	cmp	r3, #1
 8010090:	d110      	bne.n	80100b4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8010096:	687a      	ldr	r2, [r7, #4]
 8010098:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801009a:	9202      	str	r2, [sp, #8]
 801009c:	9301      	str	r3, [sp, #4]
 801009e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100a0:	9300      	str	r3, [sp, #0]
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80100a8:	68f8      	ldr	r0, [r7, #12]
 80100aa:	f001 fa7f 	bl	80115ac <xTaskCreateStatic>
 80100ae:	4603      	mov	r3, r0
 80100b0:	613b      	str	r3, [r7, #16]
 80100b2:	e013      	b.n	80100dc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80100b4:	6a3b      	ldr	r3, [r7, #32]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d110      	bne.n	80100dc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80100ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100bc:	b29a      	uxth	r2, r3
 80100be:	f107 0310 	add.w	r3, r7, #16
 80100c2:	9301      	str	r3, [sp, #4]
 80100c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c6:	9300      	str	r3, [sp, #0]
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80100cc:	68f8      	ldr	r0, [r7, #12]
 80100ce:	f001 fac7 	bl	8011660 <xTaskCreate>
 80100d2:	4603      	mov	r3, r0
 80100d4:	2b01      	cmp	r3, #1
 80100d6:	d001      	beq.n	80100dc <osThreadNew+0x13c>
          hTask = NULL;
 80100d8:	2300      	movs	r3, #0
 80100da:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80100dc:	693b      	ldr	r3, [r7, #16]
}
 80100de:	4618      	mov	r0, r3
 80100e0:	3730      	adds	r7, #48	; 0x30
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}
 80100e6:	bf00      	nop
 80100e8:	200008c4 	.word	0x200008c4

080100ec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b086      	sub	sp, #24
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80100f4:	f3ef 8305 	mrs	r3, IPSR
 80100f8:	613b      	str	r3, [r7, #16]
  return(result);
 80100fa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d10f      	bne.n	8010120 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010100:	f3ef 8310 	mrs	r3, PRIMASK
 8010104:	60fb      	str	r3, [r7, #12]
  return(result);
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d105      	bne.n	8010118 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801010c:	f3ef 8311 	mrs	r3, BASEPRI
 8010110:	60bb      	str	r3, [r7, #8]
  return(result);
 8010112:	68bb      	ldr	r3, [r7, #8]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d007      	beq.n	8010128 <osDelay+0x3c>
 8010118:	4b0a      	ldr	r3, [pc, #40]	; (8010144 <osDelay+0x58>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	2b02      	cmp	r3, #2
 801011e:	d103      	bne.n	8010128 <osDelay+0x3c>
    stat = osErrorISR;
 8010120:	f06f 0305 	mvn.w	r3, #5
 8010124:	617b      	str	r3, [r7, #20]
 8010126:	e007      	b.n	8010138 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8010128:	2300      	movs	r3, #0
 801012a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d002      	beq.n	8010138 <osDelay+0x4c>
      vTaskDelay(ticks);
 8010132:	6878      	ldr	r0, [r7, #4]
 8010134:	f001 fbd8 	bl	80118e8 <vTaskDelay>
    }
  }

  return (stat);
 8010138:	697b      	ldr	r3, [r7, #20]
}
 801013a:	4618      	mov	r0, r3
 801013c:	3718      	adds	r7, #24
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}
 8010142:	bf00      	nop
 8010144:	200008c4 	.word	0x200008c4

08010148 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010148:	b580      	push	{r7, lr}
 801014a:	b08c      	sub	sp, #48	; 0x30
 801014c:	af02      	add	r7, sp, #8
 801014e:	60f8      	str	r0, [r7, #12]
 8010150:	60b9      	str	r1, [r7, #8]
 8010152:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8010154:	2300      	movs	r3, #0
 8010156:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010158:	f3ef 8305 	mrs	r3, IPSR
 801015c:	61bb      	str	r3, [r7, #24]
  return(result);
 801015e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8010160:	2b00      	cmp	r3, #0
 8010162:	f040 8087 	bne.w	8010274 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010166:	f3ef 8310 	mrs	r3, PRIMASK
 801016a:	617b      	str	r3, [r7, #20]
  return(result);
 801016c:	697b      	ldr	r3, [r7, #20]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d105      	bne.n	801017e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010172:	f3ef 8311 	mrs	r3, BASEPRI
 8010176:	613b      	str	r3, [r7, #16]
  return(result);
 8010178:	693b      	ldr	r3, [r7, #16]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d003      	beq.n	8010186 <osSemaphoreNew+0x3e>
 801017e:	4b40      	ldr	r3, [pc, #256]	; (8010280 <osSemaphoreNew+0x138>)
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	2b02      	cmp	r3, #2
 8010184:	d076      	beq.n	8010274 <osSemaphoreNew+0x12c>
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d073      	beq.n	8010274 <osSemaphoreNew+0x12c>
 801018c:	68ba      	ldr	r2, [r7, #8]
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	429a      	cmp	r2, r3
 8010192:	d86f      	bhi.n	8010274 <osSemaphoreNew+0x12c>
    mem = -1;
 8010194:	f04f 33ff 	mov.w	r3, #4294967295
 8010198:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d015      	beq.n	80101cc <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	689b      	ldr	r3, [r3, #8]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d006      	beq.n	80101b6 <osSemaphoreNew+0x6e>
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	68db      	ldr	r3, [r3, #12]
 80101ac:	2b4f      	cmp	r3, #79	; 0x4f
 80101ae:	d902      	bls.n	80101b6 <osSemaphoreNew+0x6e>
        mem = 1;
 80101b0:	2301      	movs	r3, #1
 80101b2:	623b      	str	r3, [r7, #32]
 80101b4:	e00c      	b.n	80101d0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	689b      	ldr	r3, [r3, #8]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d108      	bne.n	80101d0 <osSemaphoreNew+0x88>
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	68db      	ldr	r3, [r3, #12]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d104      	bne.n	80101d0 <osSemaphoreNew+0x88>
          mem = 0;
 80101c6:	2300      	movs	r3, #0
 80101c8:	623b      	str	r3, [r7, #32]
 80101ca:	e001      	b.n	80101d0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80101cc:	2300      	movs	r3, #0
 80101ce:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80101d0:	6a3b      	ldr	r3, [r7, #32]
 80101d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101d6:	d04d      	beq.n	8010274 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	2b01      	cmp	r3, #1
 80101dc:	d129      	bne.n	8010232 <osSemaphoreNew+0xea>
        if (mem == 1) {
 80101de:	6a3b      	ldr	r3, [r7, #32]
 80101e0:	2b01      	cmp	r3, #1
 80101e2:	d10b      	bne.n	80101fc <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	689a      	ldr	r2, [r3, #8]
 80101e8:	2303      	movs	r3, #3
 80101ea:	9300      	str	r3, [sp, #0]
 80101ec:	4613      	mov	r3, r2
 80101ee:	2200      	movs	r2, #0
 80101f0:	2100      	movs	r1, #0
 80101f2:	2001      	movs	r0, #1
 80101f4:	f000 fa54 	bl	80106a0 <xQueueGenericCreateStatic>
 80101f8:	6278      	str	r0, [r7, #36]	; 0x24
 80101fa:	e005      	b.n	8010208 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80101fc:	2203      	movs	r2, #3
 80101fe:	2100      	movs	r1, #0
 8010200:	2001      	movs	r0, #1
 8010202:	f000 fac0 	bl	8010786 <xQueueGenericCreate>
 8010206:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801020a:	2b00      	cmp	r3, #0
 801020c:	d022      	beq.n	8010254 <osSemaphoreNew+0x10c>
 801020e:	68bb      	ldr	r3, [r7, #8]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d01f      	beq.n	8010254 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010214:	2300      	movs	r3, #0
 8010216:	2200      	movs	r2, #0
 8010218:	2100      	movs	r1, #0
 801021a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801021c:	f000 fb7c 	bl	8010918 <xQueueGenericSend>
 8010220:	4603      	mov	r3, r0
 8010222:	2b01      	cmp	r3, #1
 8010224:	d016      	beq.n	8010254 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8010226:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010228:	f000 ffef 	bl	801120a <vQueueDelete>
            hSemaphore = NULL;
 801022c:	2300      	movs	r3, #0
 801022e:	627b      	str	r3, [r7, #36]	; 0x24
 8010230:	e010      	b.n	8010254 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8010232:	6a3b      	ldr	r3, [r7, #32]
 8010234:	2b01      	cmp	r3, #1
 8010236:	d108      	bne.n	801024a <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	689b      	ldr	r3, [r3, #8]
 801023c:	461a      	mov	r2, r3
 801023e:	68b9      	ldr	r1, [r7, #8]
 8010240:	68f8      	ldr	r0, [r7, #12]
 8010242:	f000 fb02 	bl	801084a <xQueueCreateCountingSemaphoreStatic>
 8010246:	6278      	str	r0, [r7, #36]	; 0x24
 8010248:	e004      	b.n	8010254 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801024a:	68b9      	ldr	r1, [r7, #8]
 801024c:	68f8      	ldr	r0, [r7, #12]
 801024e:	f000 fb31 	bl	80108b4 <xQueueCreateCountingSemaphore>
 8010252:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8010254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010256:	2b00      	cmp	r3, #0
 8010258:	d00c      	beq.n	8010274 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d003      	beq.n	8010268 <osSemaphoreNew+0x120>
          name = attr->name;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	61fb      	str	r3, [r7, #28]
 8010266:	e001      	b.n	801026c <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8010268:	2300      	movs	r3, #0
 801026a:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801026c:	69f9      	ldr	r1, [r7, #28]
 801026e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010270:	f001 f916 	bl	80114a0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8010274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010276:	4618      	mov	r0, r3
 8010278:	3728      	adds	r7, #40	; 0x28
 801027a:	46bd      	mov	sp, r7
 801027c:	bd80      	pop	{r7, pc}
 801027e:	bf00      	nop
 8010280:	200008c4 	.word	0x200008c4

08010284 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8010284:	b580      	push	{r7, lr}
 8010286:	b088      	sub	sp, #32
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010292:	2300      	movs	r3, #0
 8010294:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8010296:	69bb      	ldr	r3, [r7, #24]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d103      	bne.n	80102a4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 801029c:	f06f 0303 	mvn.w	r3, #3
 80102a0:	61fb      	str	r3, [r7, #28]
 80102a2:	e04b      	b.n	801033c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102a4:	f3ef 8305 	mrs	r3, IPSR
 80102a8:	617b      	str	r3, [r7, #20]
  return(result);
 80102aa:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d10f      	bne.n	80102d0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102b0:	f3ef 8310 	mrs	r3, PRIMASK
 80102b4:	613b      	str	r3, [r7, #16]
  return(result);
 80102b6:	693b      	ldr	r3, [r7, #16]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d105      	bne.n	80102c8 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80102bc:	f3ef 8311 	mrs	r3, BASEPRI
 80102c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d026      	beq.n	8010316 <osSemaphoreAcquire+0x92>
 80102c8:	4b1f      	ldr	r3, [pc, #124]	; (8010348 <osSemaphoreAcquire+0xc4>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	2b02      	cmp	r3, #2
 80102ce:	d122      	bne.n	8010316 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d003      	beq.n	80102de <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80102d6:	f06f 0303 	mvn.w	r3, #3
 80102da:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80102dc:	e02d      	b.n	801033a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80102de:	2300      	movs	r3, #0
 80102e0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80102e2:	f107 0308 	add.w	r3, r7, #8
 80102e6:	461a      	mov	r2, r3
 80102e8:	2100      	movs	r1, #0
 80102ea:	69b8      	ldr	r0, [r7, #24]
 80102ec:	f000 ff10 	bl	8011110 <xQueueReceiveFromISR>
 80102f0:	4603      	mov	r3, r0
 80102f2:	2b01      	cmp	r3, #1
 80102f4:	d003      	beq.n	80102fe <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80102f6:	f06f 0302 	mvn.w	r3, #2
 80102fa:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80102fc:	e01d      	b.n	801033a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80102fe:	68bb      	ldr	r3, [r7, #8]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d01a      	beq.n	801033a <osSemaphoreAcquire+0xb6>
 8010304:	4b11      	ldr	r3, [pc, #68]	; (801034c <osSemaphoreAcquire+0xc8>)
 8010306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801030a:	601a      	str	r2, [r3, #0]
 801030c:	f3bf 8f4f 	dsb	sy
 8010310:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8010314:	e011      	b.n	801033a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8010316:	6839      	ldr	r1, [r7, #0]
 8010318:	69b8      	ldr	r0, [r7, #24]
 801031a:	f000 fdf1 	bl	8010f00 <xQueueSemaphoreTake>
 801031e:	4603      	mov	r3, r0
 8010320:	2b01      	cmp	r3, #1
 8010322:	d00b      	beq.n	801033c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d003      	beq.n	8010332 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 801032a:	f06f 0301 	mvn.w	r3, #1
 801032e:	61fb      	str	r3, [r7, #28]
 8010330:	e004      	b.n	801033c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8010332:	f06f 0302 	mvn.w	r3, #2
 8010336:	61fb      	str	r3, [r7, #28]
 8010338:	e000      	b.n	801033c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 801033a:	bf00      	nop
      }
    }
  }

  return (stat);
 801033c:	69fb      	ldr	r3, [r7, #28]
}
 801033e:	4618      	mov	r0, r3
 8010340:	3720      	adds	r7, #32
 8010342:	46bd      	mov	sp, r7
 8010344:	bd80      	pop	{r7, pc}
 8010346:	bf00      	nop
 8010348:	200008c4 	.word	0x200008c4
 801034c:	e000ed04 	.word	0xe000ed04

08010350 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010350:	b580      	push	{r7, lr}
 8010352:	b088      	sub	sp, #32
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801035c:	2300      	movs	r3, #0
 801035e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8010360:	69bb      	ldr	r3, [r7, #24]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d103      	bne.n	801036e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8010366:	f06f 0303 	mvn.w	r3, #3
 801036a:	61fb      	str	r3, [r7, #28]
 801036c:	e03e      	b.n	80103ec <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801036e:	f3ef 8305 	mrs	r3, IPSR
 8010372:	617b      	str	r3, [r7, #20]
  return(result);
 8010374:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010376:	2b00      	cmp	r3, #0
 8010378:	d10f      	bne.n	801039a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801037a:	f3ef 8310 	mrs	r3, PRIMASK
 801037e:	613b      	str	r3, [r7, #16]
  return(result);
 8010380:	693b      	ldr	r3, [r7, #16]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d105      	bne.n	8010392 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010386:	f3ef 8311 	mrs	r3, BASEPRI
 801038a:	60fb      	str	r3, [r7, #12]
  return(result);
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d01e      	beq.n	80103d0 <osSemaphoreRelease+0x80>
 8010392:	4b19      	ldr	r3, [pc, #100]	; (80103f8 <osSemaphoreRelease+0xa8>)
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	2b02      	cmp	r3, #2
 8010398:	d11a      	bne.n	80103d0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 801039a:	2300      	movs	r3, #0
 801039c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801039e:	f107 0308 	add.w	r3, r7, #8
 80103a2:	4619      	mov	r1, r3
 80103a4:	69b8      	ldr	r0, [r7, #24]
 80103a6:	f000 fc45 	bl	8010c34 <xQueueGiveFromISR>
 80103aa:	4603      	mov	r3, r0
 80103ac:	2b01      	cmp	r3, #1
 80103ae:	d003      	beq.n	80103b8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80103b0:	f06f 0302 	mvn.w	r3, #2
 80103b4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80103b6:	e018      	b.n	80103ea <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d015      	beq.n	80103ea <osSemaphoreRelease+0x9a>
 80103be:	4b0f      	ldr	r3, [pc, #60]	; (80103fc <osSemaphoreRelease+0xac>)
 80103c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103c4:	601a      	str	r2, [r3, #0]
 80103c6:	f3bf 8f4f 	dsb	sy
 80103ca:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80103ce:	e00c      	b.n	80103ea <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80103d0:	2300      	movs	r3, #0
 80103d2:	2200      	movs	r2, #0
 80103d4:	2100      	movs	r1, #0
 80103d6:	69b8      	ldr	r0, [r7, #24]
 80103d8:	f000 fa9e 	bl	8010918 <xQueueGenericSend>
 80103dc:	4603      	mov	r3, r0
 80103de:	2b01      	cmp	r3, #1
 80103e0:	d004      	beq.n	80103ec <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80103e2:	f06f 0302 	mvn.w	r3, #2
 80103e6:	61fb      	str	r3, [r7, #28]
 80103e8:	e000      	b.n	80103ec <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80103ea:	bf00      	nop
    }
  }

  return (stat);
 80103ec:	69fb      	ldr	r3, [r7, #28]
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3720      	adds	r7, #32
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}
 80103f6:	bf00      	nop
 80103f8:	200008c4 	.word	0x200008c4
 80103fc:	e000ed04 	.word	0xe000ed04

08010400 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010400:	b480      	push	{r7}
 8010402:	b085      	sub	sp, #20
 8010404:	af00      	add	r7, sp, #0
 8010406:	60f8      	str	r0, [r7, #12]
 8010408:	60b9      	str	r1, [r7, #8]
 801040a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	4a07      	ldr	r2, [pc, #28]	; (801042c <vApplicationGetIdleTaskMemory+0x2c>)
 8010410:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	4a06      	ldr	r2, [pc, #24]	; (8010430 <vApplicationGetIdleTaskMemory+0x30>)
 8010416:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2240      	movs	r2, #64	; 0x40
 801041c:	601a      	str	r2, [r3, #0]
}
 801041e:	bf00      	nop
 8010420:	3714      	adds	r7, #20
 8010422:	46bd      	mov	sp, r7
 8010424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010428:	4770      	bx	lr
 801042a:	bf00      	nop
 801042c:	200008c8 	.word	0x200008c8
 8010430:	20000924 	.word	0x20000924

08010434 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010434:	b480      	push	{r7}
 8010436:	b085      	sub	sp, #20
 8010438:	af00      	add	r7, sp, #0
 801043a:	60f8      	str	r0, [r7, #12]
 801043c:	60b9      	str	r1, [r7, #8]
 801043e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	4a07      	ldr	r2, [pc, #28]	; (8010460 <vApplicationGetTimerTaskMemory+0x2c>)
 8010444:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010446:	68bb      	ldr	r3, [r7, #8]
 8010448:	4a06      	ldr	r2, [pc, #24]	; (8010464 <vApplicationGetTimerTaskMemory+0x30>)
 801044a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010452:	601a      	str	r2, [r3, #0]
}
 8010454:	bf00      	nop
 8010456:	3714      	adds	r7, #20
 8010458:	46bd      	mov	sp, r7
 801045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045e:	4770      	bx	lr
 8010460:	20000a24 	.word	0x20000a24
 8010464:	20000a80 	.word	0x20000a80

08010468 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010468:	b480      	push	{r7}
 801046a:	b083      	sub	sp, #12
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f103 0208 	add.w	r2, r3, #8
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f04f 32ff 	mov.w	r2, #4294967295
 8010480:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f103 0208 	add.w	r2, r3, #8
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	f103 0208 	add.w	r2, r3, #8
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	2200      	movs	r2, #0
 801049a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801049c:	bf00      	nop
 801049e:	370c      	adds	r7, #12
 80104a0:	46bd      	mov	sp, r7
 80104a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a6:	4770      	bx	lr

080104a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80104a8:	b480      	push	{r7}
 80104aa:	b083      	sub	sp, #12
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2200      	movs	r2, #0
 80104b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80104b6:	bf00      	nop
 80104b8:	370c      	adds	r7, #12
 80104ba:	46bd      	mov	sp, r7
 80104bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c0:	4770      	bx	lr

080104c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80104c2:	b480      	push	{r7}
 80104c4:	b085      	sub	sp, #20
 80104c6:	af00      	add	r7, sp, #0
 80104c8:	6078      	str	r0, [r7, #4]
 80104ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	685b      	ldr	r3, [r3, #4]
 80104d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80104d2:	683b      	ldr	r3, [r7, #0]
 80104d4:	68fa      	ldr	r2, [r7, #12]
 80104d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	689a      	ldr	r2, [r3, #8]
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	689b      	ldr	r3, [r3, #8]
 80104e4:	683a      	ldr	r2, [r7, #0]
 80104e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	683a      	ldr	r2, [r7, #0]
 80104ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	687a      	ldr	r2, [r7, #4]
 80104f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	1c5a      	adds	r2, r3, #1
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	601a      	str	r2, [r3, #0]
}
 80104fe:	bf00      	nop
 8010500:	3714      	adds	r7, #20
 8010502:	46bd      	mov	sp, r7
 8010504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010508:	4770      	bx	lr

0801050a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801050a:	b480      	push	{r7}
 801050c:	b085      	sub	sp, #20
 801050e:	af00      	add	r7, sp, #0
 8010510:	6078      	str	r0, [r7, #4]
 8010512:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010514:	683b      	ldr	r3, [r7, #0]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010520:	d103      	bne.n	801052a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	691b      	ldr	r3, [r3, #16]
 8010526:	60fb      	str	r3, [r7, #12]
 8010528:	e00c      	b.n	8010544 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	3308      	adds	r3, #8
 801052e:	60fb      	str	r3, [r7, #12]
 8010530:	e002      	b.n	8010538 <vListInsert+0x2e>
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	685b      	ldr	r3, [r3, #4]
 8010536:	60fb      	str	r3, [r7, #12]
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	685b      	ldr	r3, [r3, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	68ba      	ldr	r2, [r7, #8]
 8010540:	429a      	cmp	r2, r3
 8010542:	d2f6      	bcs.n	8010532 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	685a      	ldr	r2, [r3, #4]
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	685b      	ldr	r3, [r3, #4]
 8010550:	683a      	ldr	r2, [r7, #0]
 8010552:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	68fa      	ldr	r2, [r7, #12]
 8010558:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	683a      	ldr	r2, [r7, #0]
 801055e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010560:	683b      	ldr	r3, [r7, #0]
 8010562:	687a      	ldr	r2, [r7, #4]
 8010564:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	1c5a      	adds	r2, r3, #1
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	601a      	str	r2, [r3, #0]
}
 8010570:	bf00      	nop
 8010572:	3714      	adds	r7, #20
 8010574:	46bd      	mov	sp, r7
 8010576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057a:	4770      	bx	lr

0801057c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801057c:	b480      	push	{r7}
 801057e:	b085      	sub	sp, #20
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	691b      	ldr	r3, [r3, #16]
 8010588:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	685b      	ldr	r3, [r3, #4]
 801058e:	687a      	ldr	r2, [r7, #4]
 8010590:	6892      	ldr	r2, [r2, #8]
 8010592:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	689b      	ldr	r3, [r3, #8]
 8010598:	687a      	ldr	r2, [r7, #4]
 801059a:	6852      	ldr	r2, [r2, #4]
 801059c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	685b      	ldr	r3, [r3, #4]
 80105a2:	687a      	ldr	r2, [r7, #4]
 80105a4:	429a      	cmp	r2, r3
 80105a6:	d103      	bne.n	80105b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	689a      	ldr	r2, [r3, #8]
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2200      	movs	r2, #0
 80105b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	1e5a      	subs	r2, r3, #1
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	681b      	ldr	r3, [r3, #0]
}
 80105c4:	4618      	mov	r0, r3
 80105c6:	3714      	adds	r7, #20
 80105c8:	46bd      	mov	sp, r7
 80105ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ce:	4770      	bx	lr

080105d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b084      	sub	sp, #16
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
 80105d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d109      	bne.n	80105f8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80105e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e8:	f383 8811 	msr	BASEPRI, r3
 80105ec:	f3bf 8f6f 	isb	sy
 80105f0:	f3bf 8f4f 	dsb	sy
 80105f4:	60bb      	str	r3, [r7, #8]
 80105f6:	e7fe      	b.n	80105f6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80105f8:	f002 fc28 	bl	8012e4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	681a      	ldr	r2, [r3, #0]
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010604:	68f9      	ldr	r1, [r7, #12]
 8010606:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010608:	fb01 f303 	mul.w	r3, r1, r3
 801060c:	441a      	add	r2, r3
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	2200      	movs	r2, #0
 8010616:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	681a      	ldr	r2, [r3, #0]
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	681a      	ldr	r2, [r3, #0]
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010628:	3b01      	subs	r3, #1
 801062a:	68f9      	ldr	r1, [r7, #12]
 801062c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801062e:	fb01 f303 	mul.w	r3, r1, r3
 8010632:	441a      	add	r2, r3
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	22ff      	movs	r2, #255	; 0xff
 801063c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	22ff      	movs	r2, #255	; 0xff
 8010644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010648:	683b      	ldr	r3, [r7, #0]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d114      	bne.n	8010678 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	691b      	ldr	r3, [r3, #16]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d01a      	beq.n	801068c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	3310      	adds	r3, #16
 801065a:	4618      	mov	r0, r3
 801065c:	f001 fbf8 	bl	8011e50 <xTaskRemoveFromEventList>
 8010660:	4603      	mov	r3, r0
 8010662:	2b00      	cmp	r3, #0
 8010664:	d012      	beq.n	801068c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010666:	4b0d      	ldr	r3, [pc, #52]	; (801069c <xQueueGenericReset+0xcc>)
 8010668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801066c:	601a      	str	r2, [r3, #0]
 801066e:	f3bf 8f4f 	dsb	sy
 8010672:	f3bf 8f6f 	isb	sy
 8010676:	e009      	b.n	801068c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	3310      	adds	r3, #16
 801067c:	4618      	mov	r0, r3
 801067e:	f7ff fef3 	bl	8010468 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	3324      	adds	r3, #36	; 0x24
 8010686:	4618      	mov	r0, r3
 8010688:	f7ff feee 	bl	8010468 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801068c:	f002 fc0c 	bl	8012ea8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010690:	2301      	movs	r3, #1
}
 8010692:	4618      	mov	r0, r3
 8010694:	3710      	adds	r7, #16
 8010696:	46bd      	mov	sp, r7
 8010698:	bd80      	pop	{r7, pc}
 801069a:	bf00      	nop
 801069c:	e000ed04 	.word	0xe000ed04

080106a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b08e      	sub	sp, #56	; 0x38
 80106a4:	af02      	add	r7, sp, #8
 80106a6:	60f8      	str	r0, [r7, #12]
 80106a8:	60b9      	str	r1, [r7, #8]
 80106aa:	607a      	str	r2, [r7, #4]
 80106ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d109      	bne.n	80106c8 <xQueueGenericCreateStatic+0x28>
 80106b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106b8:	f383 8811 	msr	BASEPRI, r3
 80106bc:	f3bf 8f6f 	isb	sy
 80106c0:	f3bf 8f4f 	dsb	sy
 80106c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80106c6:	e7fe      	b.n	80106c6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d109      	bne.n	80106e2 <xQueueGenericCreateStatic+0x42>
 80106ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106d2:	f383 8811 	msr	BASEPRI, r3
 80106d6:	f3bf 8f6f 	isb	sy
 80106da:	f3bf 8f4f 	dsb	sy
 80106de:	627b      	str	r3, [r7, #36]	; 0x24
 80106e0:	e7fe      	b.n	80106e0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d002      	beq.n	80106ee <xQueueGenericCreateStatic+0x4e>
 80106e8:	68bb      	ldr	r3, [r7, #8]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d001      	beq.n	80106f2 <xQueueGenericCreateStatic+0x52>
 80106ee:	2301      	movs	r3, #1
 80106f0:	e000      	b.n	80106f4 <xQueueGenericCreateStatic+0x54>
 80106f2:	2300      	movs	r3, #0
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d109      	bne.n	801070c <xQueueGenericCreateStatic+0x6c>
 80106f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106fc:	f383 8811 	msr	BASEPRI, r3
 8010700:	f3bf 8f6f 	isb	sy
 8010704:	f3bf 8f4f 	dsb	sy
 8010708:	623b      	str	r3, [r7, #32]
 801070a:	e7fe      	b.n	801070a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d102      	bne.n	8010718 <xQueueGenericCreateStatic+0x78>
 8010712:	68bb      	ldr	r3, [r7, #8]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d101      	bne.n	801071c <xQueueGenericCreateStatic+0x7c>
 8010718:	2301      	movs	r3, #1
 801071a:	e000      	b.n	801071e <xQueueGenericCreateStatic+0x7e>
 801071c:	2300      	movs	r3, #0
 801071e:	2b00      	cmp	r3, #0
 8010720:	d109      	bne.n	8010736 <xQueueGenericCreateStatic+0x96>
 8010722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010726:	f383 8811 	msr	BASEPRI, r3
 801072a:	f3bf 8f6f 	isb	sy
 801072e:	f3bf 8f4f 	dsb	sy
 8010732:	61fb      	str	r3, [r7, #28]
 8010734:	e7fe      	b.n	8010734 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010736:	2350      	movs	r3, #80	; 0x50
 8010738:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801073a:	697b      	ldr	r3, [r7, #20]
 801073c:	2b50      	cmp	r3, #80	; 0x50
 801073e:	d009      	beq.n	8010754 <xQueueGenericCreateStatic+0xb4>
 8010740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010744:	f383 8811 	msr	BASEPRI, r3
 8010748:	f3bf 8f6f 	isb	sy
 801074c:	f3bf 8f4f 	dsb	sy
 8010750:	61bb      	str	r3, [r7, #24]
 8010752:	e7fe      	b.n	8010752 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010754:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801075a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801075c:	2b00      	cmp	r3, #0
 801075e:	d00d      	beq.n	801077c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010762:	2201      	movs	r2, #1
 8010764:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010768:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801076c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801076e:	9300      	str	r3, [sp, #0]
 8010770:	4613      	mov	r3, r2
 8010772:	687a      	ldr	r2, [r7, #4]
 8010774:	68b9      	ldr	r1, [r7, #8]
 8010776:	68f8      	ldr	r0, [r7, #12]
 8010778:	f000 f844 	bl	8010804 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801077c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801077e:	4618      	mov	r0, r3
 8010780:	3730      	adds	r7, #48	; 0x30
 8010782:	46bd      	mov	sp, r7
 8010784:	bd80      	pop	{r7, pc}

08010786 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010786:	b580      	push	{r7, lr}
 8010788:	b08a      	sub	sp, #40	; 0x28
 801078a:	af02      	add	r7, sp, #8
 801078c:	60f8      	str	r0, [r7, #12]
 801078e:	60b9      	str	r1, [r7, #8]
 8010790:	4613      	mov	r3, r2
 8010792:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d109      	bne.n	80107ae <xQueueGenericCreate+0x28>
 801079a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801079e:	f383 8811 	msr	BASEPRI, r3
 80107a2:	f3bf 8f6f 	isb	sy
 80107a6:	f3bf 8f4f 	dsb	sy
 80107aa:	613b      	str	r3, [r7, #16]
 80107ac:	e7fe      	b.n	80107ac <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80107ae:	68bb      	ldr	r3, [r7, #8]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d102      	bne.n	80107ba <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80107b4:	2300      	movs	r3, #0
 80107b6:	61fb      	str	r3, [r7, #28]
 80107b8:	e004      	b.n	80107c4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	68ba      	ldr	r2, [r7, #8]
 80107be:	fb02 f303 	mul.w	r3, r2, r3
 80107c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80107c4:	69fb      	ldr	r3, [r7, #28]
 80107c6:	3350      	adds	r3, #80	; 0x50
 80107c8:	4618      	mov	r0, r3
 80107ca:	f002 fc59 	bl	8013080 <pvPortMalloc>
 80107ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80107d0:	69bb      	ldr	r3, [r7, #24]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d011      	beq.n	80107fa <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80107d6:	69bb      	ldr	r3, [r7, #24]
 80107d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80107da:	697b      	ldr	r3, [r7, #20]
 80107dc:	3350      	adds	r3, #80	; 0x50
 80107de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80107e0:	69bb      	ldr	r3, [r7, #24]
 80107e2:	2200      	movs	r2, #0
 80107e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80107e8:	79fa      	ldrb	r2, [r7, #7]
 80107ea:	69bb      	ldr	r3, [r7, #24]
 80107ec:	9300      	str	r3, [sp, #0]
 80107ee:	4613      	mov	r3, r2
 80107f0:	697a      	ldr	r2, [r7, #20]
 80107f2:	68b9      	ldr	r1, [r7, #8]
 80107f4:	68f8      	ldr	r0, [r7, #12]
 80107f6:	f000 f805 	bl	8010804 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80107fa:	69bb      	ldr	r3, [r7, #24]
	}
 80107fc:	4618      	mov	r0, r3
 80107fe:	3720      	adds	r7, #32
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}

08010804 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b084      	sub	sp, #16
 8010808:	af00      	add	r7, sp, #0
 801080a:	60f8      	str	r0, [r7, #12]
 801080c:	60b9      	str	r1, [r7, #8]
 801080e:	607a      	str	r2, [r7, #4]
 8010810:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010812:	68bb      	ldr	r3, [r7, #8]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d103      	bne.n	8010820 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010818:	69bb      	ldr	r3, [r7, #24]
 801081a:	69ba      	ldr	r2, [r7, #24]
 801081c:	601a      	str	r2, [r3, #0]
 801081e:	e002      	b.n	8010826 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010820:	69bb      	ldr	r3, [r7, #24]
 8010822:	687a      	ldr	r2, [r7, #4]
 8010824:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010826:	69bb      	ldr	r3, [r7, #24]
 8010828:	68fa      	ldr	r2, [r7, #12]
 801082a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801082c:	69bb      	ldr	r3, [r7, #24]
 801082e:	68ba      	ldr	r2, [r7, #8]
 8010830:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010832:	2101      	movs	r1, #1
 8010834:	69b8      	ldr	r0, [r7, #24]
 8010836:	f7ff fecb 	bl	80105d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801083a:	69bb      	ldr	r3, [r7, #24]
 801083c:	78fa      	ldrb	r2, [r7, #3]
 801083e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010842:	bf00      	nop
 8010844:	3710      	adds	r7, #16
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}

0801084a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801084a:	b580      	push	{r7, lr}
 801084c:	b08a      	sub	sp, #40	; 0x28
 801084e:	af02      	add	r7, sp, #8
 8010850:	60f8      	str	r0, [r7, #12]
 8010852:	60b9      	str	r1, [r7, #8]
 8010854:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d109      	bne.n	8010870 <xQueueCreateCountingSemaphoreStatic+0x26>
 801085c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010860:	f383 8811 	msr	BASEPRI, r3
 8010864:	f3bf 8f6f 	isb	sy
 8010868:	f3bf 8f4f 	dsb	sy
 801086c:	61bb      	str	r3, [r7, #24]
 801086e:	e7fe      	b.n	801086e <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010870:	68ba      	ldr	r2, [r7, #8]
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	429a      	cmp	r2, r3
 8010876:	d909      	bls.n	801088c <xQueueCreateCountingSemaphoreStatic+0x42>
 8010878:	f04f 0350 	mov.w	r3, #80	; 0x50
 801087c:	f383 8811 	msr	BASEPRI, r3
 8010880:	f3bf 8f6f 	isb	sy
 8010884:	f3bf 8f4f 	dsb	sy
 8010888:	617b      	str	r3, [r7, #20]
 801088a:	e7fe      	b.n	801088a <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801088c:	2302      	movs	r3, #2
 801088e:	9300      	str	r3, [sp, #0]
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2200      	movs	r2, #0
 8010894:	2100      	movs	r1, #0
 8010896:	68f8      	ldr	r0, [r7, #12]
 8010898:	f7ff ff02 	bl	80106a0 <xQueueGenericCreateStatic>
 801089c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801089e:	69fb      	ldr	r3, [r7, #28]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d002      	beq.n	80108aa <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80108a4:	69fb      	ldr	r3, [r7, #28]
 80108a6:	68ba      	ldr	r2, [r7, #8]
 80108a8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80108aa:	69fb      	ldr	r3, [r7, #28]
	}
 80108ac:	4618      	mov	r0, r3
 80108ae:	3720      	adds	r7, #32
 80108b0:	46bd      	mov	sp, r7
 80108b2:	bd80      	pop	{r7, pc}

080108b4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b086      	sub	sp, #24
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
 80108bc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d109      	bne.n	80108d8 <xQueueCreateCountingSemaphore+0x24>
 80108c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108c8:	f383 8811 	msr	BASEPRI, r3
 80108cc:	f3bf 8f6f 	isb	sy
 80108d0:	f3bf 8f4f 	dsb	sy
 80108d4:	613b      	str	r3, [r7, #16]
 80108d6:	e7fe      	b.n	80108d6 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80108d8:	683a      	ldr	r2, [r7, #0]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	429a      	cmp	r2, r3
 80108de:	d909      	bls.n	80108f4 <xQueueCreateCountingSemaphore+0x40>
 80108e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e4:	f383 8811 	msr	BASEPRI, r3
 80108e8:	f3bf 8f6f 	isb	sy
 80108ec:	f3bf 8f4f 	dsb	sy
 80108f0:	60fb      	str	r3, [r7, #12]
 80108f2:	e7fe      	b.n	80108f2 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80108f4:	2202      	movs	r2, #2
 80108f6:	2100      	movs	r1, #0
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f7ff ff44 	bl	8010786 <xQueueGenericCreate>
 80108fe:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d002      	beq.n	801090c <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	683a      	ldr	r2, [r7, #0]
 801090a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801090c:	697b      	ldr	r3, [r7, #20]
	}
 801090e:	4618      	mov	r0, r3
 8010910:	3718      	adds	r7, #24
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}
	...

08010918 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b08e      	sub	sp, #56	; 0x38
 801091c:	af00      	add	r7, sp, #0
 801091e:	60f8      	str	r0, [r7, #12]
 8010920:	60b9      	str	r1, [r7, #8]
 8010922:	607a      	str	r2, [r7, #4]
 8010924:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010926:	2300      	movs	r3, #0
 8010928:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801092e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010930:	2b00      	cmp	r3, #0
 8010932:	d109      	bne.n	8010948 <xQueueGenericSend+0x30>
 8010934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010938:	f383 8811 	msr	BASEPRI, r3
 801093c:	f3bf 8f6f 	isb	sy
 8010940:	f3bf 8f4f 	dsb	sy
 8010944:	62bb      	str	r3, [r7, #40]	; 0x28
 8010946:	e7fe      	b.n	8010946 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d103      	bne.n	8010956 <xQueueGenericSend+0x3e>
 801094e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010952:	2b00      	cmp	r3, #0
 8010954:	d101      	bne.n	801095a <xQueueGenericSend+0x42>
 8010956:	2301      	movs	r3, #1
 8010958:	e000      	b.n	801095c <xQueueGenericSend+0x44>
 801095a:	2300      	movs	r3, #0
 801095c:	2b00      	cmp	r3, #0
 801095e:	d109      	bne.n	8010974 <xQueueGenericSend+0x5c>
 8010960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010964:	f383 8811 	msr	BASEPRI, r3
 8010968:	f3bf 8f6f 	isb	sy
 801096c:	f3bf 8f4f 	dsb	sy
 8010970:	627b      	str	r3, [r7, #36]	; 0x24
 8010972:	e7fe      	b.n	8010972 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010974:	683b      	ldr	r3, [r7, #0]
 8010976:	2b02      	cmp	r3, #2
 8010978:	d103      	bne.n	8010982 <xQueueGenericSend+0x6a>
 801097a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801097c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801097e:	2b01      	cmp	r3, #1
 8010980:	d101      	bne.n	8010986 <xQueueGenericSend+0x6e>
 8010982:	2301      	movs	r3, #1
 8010984:	e000      	b.n	8010988 <xQueueGenericSend+0x70>
 8010986:	2300      	movs	r3, #0
 8010988:	2b00      	cmp	r3, #0
 801098a:	d109      	bne.n	80109a0 <xQueueGenericSend+0x88>
 801098c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010990:	f383 8811 	msr	BASEPRI, r3
 8010994:	f3bf 8f6f 	isb	sy
 8010998:	f3bf 8f4f 	dsb	sy
 801099c:	623b      	str	r3, [r7, #32]
 801099e:	e7fe      	b.n	801099e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80109a0:	f001 fc0c 	bl	80121bc <xTaskGetSchedulerState>
 80109a4:	4603      	mov	r3, r0
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d102      	bne.n	80109b0 <xQueueGenericSend+0x98>
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d101      	bne.n	80109b4 <xQueueGenericSend+0x9c>
 80109b0:	2301      	movs	r3, #1
 80109b2:	e000      	b.n	80109b6 <xQueueGenericSend+0x9e>
 80109b4:	2300      	movs	r3, #0
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d109      	bne.n	80109ce <xQueueGenericSend+0xb6>
 80109ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109be:	f383 8811 	msr	BASEPRI, r3
 80109c2:	f3bf 8f6f 	isb	sy
 80109c6:	f3bf 8f4f 	dsb	sy
 80109ca:	61fb      	str	r3, [r7, #28]
 80109cc:	e7fe      	b.n	80109cc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80109ce:	f002 fa3d 	bl	8012e4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80109d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80109d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109da:	429a      	cmp	r2, r3
 80109dc:	d302      	bcc.n	80109e4 <xQueueGenericSend+0xcc>
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	2b02      	cmp	r3, #2
 80109e2:	d129      	bne.n	8010a38 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80109e4:	683a      	ldr	r2, [r7, #0]
 80109e6:	68b9      	ldr	r1, [r7, #8]
 80109e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80109ea:	f000 fc48 	bl	801127e <prvCopyDataToQueue>
 80109ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80109f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d010      	beq.n	8010a1a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80109f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109fa:	3324      	adds	r3, #36	; 0x24
 80109fc:	4618      	mov	r0, r3
 80109fe:	f001 fa27 	bl	8011e50 <xTaskRemoveFromEventList>
 8010a02:	4603      	mov	r3, r0
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d013      	beq.n	8010a30 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010a08:	4b3f      	ldr	r3, [pc, #252]	; (8010b08 <xQueueGenericSend+0x1f0>)
 8010a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a0e:	601a      	str	r2, [r3, #0]
 8010a10:	f3bf 8f4f 	dsb	sy
 8010a14:	f3bf 8f6f 	isb	sy
 8010a18:	e00a      	b.n	8010a30 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d007      	beq.n	8010a30 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010a20:	4b39      	ldr	r3, [pc, #228]	; (8010b08 <xQueueGenericSend+0x1f0>)
 8010a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a26:	601a      	str	r2, [r3, #0]
 8010a28:	f3bf 8f4f 	dsb	sy
 8010a2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010a30:	f002 fa3a 	bl	8012ea8 <vPortExitCritical>
				return pdPASS;
 8010a34:	2301      	movs	r3, #1
 8010a36:	e063      	b.n	8010b00 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d103      	bne.n	8010a46 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010a3e:	f002 fa33 	bl	8012ea8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010a42:	2300      	movs	r3, #0
 8010a44:	e05c      	b.n	8010b00 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d106      	bne.n	8010a5a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010a4c:	f107 0314 	add.w	r3, r7, #20
 8010a50:	4618      	mov	r0, r3
 8010a52:	f001 fa5f 	bl	8011f14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010a56:	2301      	movs	r3, #1
 8010a58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010a5a:	f002 fa25 	bl	8012ea8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010a5e:	f000 ffdb 	bl	8011a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010a62:	f002 f9f3 	bl	8012e4c <vPortEnterCritical>
 8010a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a6c:	b25b      	sxtb	r3, r3
 8010a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a72:	d103      	bne.n	8010a7c <xQueueGenericSend+0x164>
 8010a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a76:	2200      	movs	r2, #0
 8010a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a82:	b25b      	sxtb	r3, r3
 8010a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a88:	d103      	bne.n	8010a92 <xQueueGenericSend+0x17a>
 8010a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010a92:	f002 fa09 	bl	8012ea8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010a96:	1d3a      	adds	r2, r7, #4
 8010a98:	f107 0314 	add.w	r3, r7, #20
 8010a9c:	4611      	mov	r1, r2
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f001 fa4e 	bl	8011f40 <xTaskCheckForTimeOut>
 8010aa4:	4603      	mov	r3, r0
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d124      	bne.n	8010af4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010aaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010aac:	f000 fcdf 	bl	801146e <prvIsQueueFull>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d018      	beq.n	8010ae8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ab8:	3310      	adds	r3, #16
 8010aba:	687a      	ldr	r2, [r7, #4]
 8010abc:	4611      	mov	r1, r2
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f001 f978 	bl	8011db4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010ac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ac6:	f000 fc6a 	bl	801139e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010aca:	f000 ffb3 	bl	8011a34 <xTaskResumeAll>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	f47f af7c 	bne.w	80109ce <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8010ad6:	4b0c      	ldr	r3, [pc, #48]	; (8010b08 <xQueueGenericSend+0x1f0>)
 8010ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010adc:	601a      	str	r2, [r3, #0]
 8010ade:	f3bf 8f4f 	dsb	sy
 8010ae2:	f3bf 8f6f 	isb	sy
 8010ae6:	e772      	b.n	80109ce <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010ae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010aea:	f000 fc58 	bl	801139e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010aee:	f000 ffa1 	bl	8011a34 <xTaskResumeAll>
 8010af2:	e76c      	b.n	80109ce <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010af4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010af6:	f000 fc52 	bl	801139e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010afa:	f000 ff9b 	bl	8011a34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010afe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010b00:	4618      	mov	r0, r3
 8010b02:	3738      	adds	r7, #56	; 0x38
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}
 8010b08:	e000ed04 	.word	0xe000ed04

08010b0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b08e      	sub	sp, #56	; 0x38
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	60f8      	str	r0, [r7, #12]
 8010b14:	60b9      	str	r1, [r7, #8]
 8010b16:	607a      	str	r2, [r7, #4]
 8010b18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d109      	bne.n	8010b38 <xQueueGenericSendFromISR+0x2c>
 8010b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b28:	f383 8811 	msr	BASEPRI, r3
 8010b2c:	f3bf 8f6f 	isb	sy
 8010b30:	f3bf 8f4f 	dsb	sy
 8010b34:	627b      	str	r3, [r7, #36]	; 0x24
 8010b36:	e7fe      	b.n	8010b36 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b38:	68bb      	ldr	r3, [r7, #8]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d103      	bne.n	8010b46 <xQueueGenericSendFromISR+0x3a>
 8010b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d101      	bne.n	8010b4a <xQueueGenericSendFromISR+0x3e>
 8010b46:	2301      	movs	r3, #1
 8010b48:	e000      	b.n	8010b4c <xQueueGenericSendFromISR+0x40>
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d109      	bne.n	8010b64 <xQueueGenericSendFromISR+0x58>
 8010b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b54:	f383 8811 	msr	BASEPRI, r3
 8010b58:	f3bf 8f6f 	isb	sy
 8010b5c:	f3bf 8f4f 	dsb	sy
 8010b60:	623b      	str	r3, [r7, #32]
 8010b62:	e7fe      	b.n	8010b62 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	2b02      	cmp	r3, #2
 8010b68:	d103      	bne.n	8010b72 <xQueueGenericSendFromISR+0x66>
 8010b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b6e:	2b01      	cmp	r3, #1
 8010b70:	d101      	bne.n	8010b76 <xQueueGenericSendFromISR+0x6a>
 8010b72:	2301      	movs	r3, #1
 8010b74:	e000      	b.n	8010b78 <xQueueGenericSendFromISR+0x6c>
 8010b76:	2300      	movs	r3, #0
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d109      	bne.n	8010b90 <xQueueGenericSendFromISR+0x84>
 8010b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b80:	f383 8811 	msr	BASEPRI, r3
 8010b84:	f3bf 8f6f 	isb	sy
 8010b88:	f3bf 8f4f 	dsb	sy
 8010b8c:	61fb      	str	r3, [r7, #28]
 8010b8e:	e7fe      	b.n	8010b8e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010b90:	f002 fa38 	bl	8013004 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010b94:	f3ef 8211 	mrs	r2, BASEPRI
 8010b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b9c:	f383 8811 	msr	BASEPRI, r3
 8010ba0:	f3bf 8f6f 	isb	sy
 8010ba4:	f3bf 8f4f 	dsb	sy
 8010ba8:	61ba      	str	r2, [r7, #24]
 8010baa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010bac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010bae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bb8:	429a      	cmp	r2, r3
 8010bba:	d302      	bcc.n	8010bc2 <xQueueGenericSendFromISR+0xb6>
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	2b02      	cmp	r3, #2
 8010bc0:	d12c      	bne.n	8010c1c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010bc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010bcc:	683a      	ldr	r2, [r7, #0]
 8010bce:	68b9      	ldr	r1, [r7, #8]
 8010bd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010bd2:	f000 fb54 	bl	801127e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010bd6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bde:	d112      	bne.n	8010c06 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d016      	beq.n	8010c16 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bea:	3324      	adds	r3, #36	; 0x24
 8010bec:	4618      	mov	r0, r3
 8010bee:	f001 f92f 	bl	8011e50 <xTaskRemoveFromEventList>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d00e      	beq.n	8010c16 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d00b      	beq.n	8010c16 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	2201      	movs	r2, #1
 8010c02:	601a      	str	r2, [r3, #0]
 8010c04:	e007      	b.n	8010c16 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010c06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010c0a:	3301      	adds	r3, #1
 8010c0c:	b2db      	uxtb	r3, r3
 8010c0e:	b25a      	sxtb	r2, r3
 8010c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010c16:	2301      	movs	r3, #1
 8010c18:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010c1a:	e001      	b.n	8010c20 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8010c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c22:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010c24:	693b      	ldr	r3, [r7, #16]
 8010c26:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	3738      	adds	r7, #56	; 0x38
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}

08010c34 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b08e      	sub	sp, #56	; 0x38
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
 8010c3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d109      	bne.n	8010c5c <xQueueGiveFromISR+0x28>
	__asm volatile
 8010c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c4c:	f383 8811 	msr	BASEPRI, r3
 8010c50:	f3bf 8f6f 	isb	sy
 8010c54:	f3bf 8f4f 	dsb	sy
 8010c58:	623b      	str	r3, [r7, #32]
 8010c5a:	e7fe      	b.n	8010c5a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d009      	beq.n	8010c78 <xQueueGiveFromISR+0x44>
 8010c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c68:	f383 8811 	msr	BASEPRI, r3
 8010c6c:	f3bf 8f6f 	isb	sy
 8010c70:	f3bf 8f4f 	dsb	sy
 8010c74:	61fb      	str	r3, [r7, #28]
 8010c76:	e7fe      	b.n	8010c76 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d103      	bne.n	8010c88 <xQueueGiveFromISR+0x54>
 8010c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c82:	689b      	ldr	r3, [r3, #8]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d101      	bne.n	8010c8c <xQueueGiveFromISR+0x58>
 8010c88:	2301      	movs	r3, #1
 8010c8a:	e000      	b.n	8010c8e <xQueueGiveFromISR+0x5a>
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d109      	bne.n	8010ca6 <xQueueGiveFromISR+0x72>
 8010c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c96:	f383 8811 	msr	BASEPRI, r3
 8010c9a:	f3bf 8f6f 	isb	sy
 8010c9e:	f3bf 8f4f 	dsb	sy
 8010ca2:	61bb      	str	r3, [r7, #24]
 8010ca4:	e7fe      	b.n	8010ca4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010ca6:	f002 f9ad 	bl	8013004 <vPortValidateInterruptPriority>
	__asm volatile
 8010caa:	f3ef 8211 	mrs	r2, BASEPRI
 8010cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cb2:	f383 8811 	msr	BASEPRI, r3
 8010cb6:	f3bf 8f6f 	isb	sy
 8010cba:	f3bf 8f4f 	dsb	sy
 8010cbe:	617a      	str	r2, [r7, #20]
 8010cc0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010cc2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cd2:	429a      	cmp	r2, r3
 8010cd4:	d22b      	bcs.n	8010d2e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010cdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce2:	1c5a      	adds	r2, r3, #1
 8010ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010ce8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cf0:	d112      	bne.n	8010d18 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d016      	beq.n	8010d28 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cfc:	3324      	adds	r3, #36	; 0x24
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f001 f8a6 	bl	8011e50 <xTaskRemoveFromEventList>
 8010d04:	4603      	mov	r3, r0
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d00e      	beq.n	8010d28 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010d0a:	683b      	ldr	r3, [r7, #0]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d00b      	beq.n	8010d28 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	2201      	movs	r2, #1
 8010d14:	601a      	str	r2, [r3, #0]
 8010d16:	e007      	b.n	8010d28 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d1c:	3301      	adds	r3, #1
 8010d1e:	b2db      	uxtb	r3, r3
 8010d20:	b25a      	sxtb	r2, r3
 8010d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010d28:	2301      	movs	r3, #1
 8010d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8010d2c:	e001      	b.n	8010d32 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010d2e:	2300      	movs	r3, #0
 8010d30:	637b      	str	r3, [r7, #52]	; 0x34
 8010d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d34:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010d3e:	4618      	mov	r0, r3
 8010d40:	3738      	adds	r7, #56	; 0x38
 8010d42:	46bd      	mov	sp, r7
 8010d44:	bd80      	pop	{r7, pc}
	...

08010d48 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b08c      	sub	sp, #48	; 0x30
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	60f8      	str	r0, [r7, #12]
 8010d50:	60b9      	str	r1, [r7, #8]
 8010d52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010d54:	2300      	movs	r3, #0
 8010d56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d109      	bne.n	8010d76 <xQueueReceive+0x2e>
	__asm volatile
 8010d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d66:	f383 8811 	msr	BASEPRI, r3
 8010d6a:	f3bf 8f6f 	isb	sy
 8010d6e:	f3bf 8f4f 	dsb	sy
 8010d72:	623b      	str	r3, [r7, #32]
 8010d74:	e7fe      	b.n	8010d74 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010d76:	68bb      	ldr	r3, [r7, #8]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d103      	bne.n	8010d84 <xQueueReceive+0x3c>
 8010d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d101      	bne.n	8010d88 <xQueueReceive+0x40>
 8010d84:	2301      	movs	r3, #1
 8010d86:	e000      	b.n	8010d8a <xQueueReceive+0x42>
 8010d88:	2300      	movs	r3, #0
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d109      	bne.n	8010da2 <xQueueReceive+0x5a>
 8010d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d92:	f383 8811 	msr	BASEPRI, r3
 8010d96:	f3bf 8f6f 	isb	sy
 8010d9a:	f3bf 8f4f 	dsb	sy
 8010d9e:	61fb      	str	r3, [r7, #28]
 8010da0:	e7fe      	b.n	8010da0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010da2:	f001 fa0b 	bl	80121bc <xTaskGetSchedulerState>
 8010da6:	4603      	mov	r3, r0
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d102      	bne.n	8010db2 <xQueueReceive+0x6a>
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d101      	bne.n	8010db6 <xQueueReceive+0x6e>
 8010db2:	2301      	movs	r3, #1
 8010db4:	e000      	b.n	8010db8 <xQueueReceive+0x70>
 8010db6:	2300      	movs	r3, #0
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d109      	bne.n	8010dd0 <xQueueReceive+0x88>
 8010dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc0:	f383 8811 	msr	BASEPRI, r3
 8010dc4:	f3bf 8f6f 	isb	sy
 8010dc8:	f3bf 8f4f 	dsb	sy
 8010dcc:	61bb      	str	r3, [r7, #24]
 8010dce:	e7fe      	b.n	8010dce <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010dd0:	f002 f83c 	bl	8012e4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dd8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d01f      	beq.n	8010e20 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010de0:	68b9      	ldr	r1, [r7, #8]
 8010de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010de4:	f000 fab5 	bl	8011352 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dea:	1e5a      	subs	r2, r3, #1
 8010dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dee:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010df2:	691b      	ldr	r3, [r3, #16]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d00f      	beq.n	8010e18 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dfa:	3310      	adds	r3, #16
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f001 f827 	bl	8011e50 <xTaskRemoveFromEventList>
 8010e02:	4603      	mov	r3, r0
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d007      	beq.n	8010e18 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010e08:	4b3c      	ldr	r3, [pc, #240]	; (8010efc <xQueueReceive+0x1b4>)
 8010e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e0e:	601a      	str	r2, [r3, #0]
 8010e10:	f3bf 8f4f 	dsb	sy
 8010e14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010e18:	f002 f846 	bl	8012ea8 <vPortExitCritical>
				return pdPASS;
 8010e1c:	2301      	movs	r3, #1
 8010e1e:	e069      	b.n	8010ef4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d103      	bne.n	8010e2e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010e26:	f002 f83f 	bl	8012ea8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	e062      	b.n	8010ef4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d106      	bne.n	8010e42 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010e34:	f107 0310 	add.w	r3, r7, #16
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f001 f86b 	bl	8011f14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010e3e:	2301      	movs	r3, #1
 8010e40:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010e42:	f002 f831 	bl	8012ea8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010e46:	f000 fde7 	bl	8011a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010e4a:	f001 ffff 	bl	8012e4c <vPortEnterCritical>
 8010e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010e54:	b25b      	sxtb	r3, r3
 8010e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e5a:	d103      	bne.n	8010e64 <xQueueReceive+0x11c>
 8010e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e5e:	2200      	movs	r2, #0
 8010e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010e6a:	b25b      	sxtb	r3, r3
 8010e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e70:	d103      	bne.n	8010e7a <xQueueReceive+0x132>
 8010e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e74:	2200      	movs	r2, #0
 8010e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010e7a:	f002 f815 	bl	8012ea8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010e7e:	1d3a      	adds	r2, r7, #4
 8010e80:	f107 0310 	add.w	r3, r7, #16
 8010e84:	4611      	mov	r1, r2
 8010e86:	4618      	mov	r0, r3
 8010e88:	f001 f85a 	bl	8011f40 <xTaskCheckForTimeOut>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d123      	bne.n	8010eda <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e94:	f000 fad5 	bl	8011442 <prvIsQueueEmpty>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d017      	beq.n	8010ece <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ea0:	3324      	adds	r3, #36	; 0x24
 8010ea2:	687a      	ldr	r2, [r7, #4]
 8010ea4:	4611      	mov	r1, r2
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f000 ff84 	bl	8011db4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010eac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010eae:	f000 fa76 	bl	801139e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010eb2:	f000 fdbf 	bl	8011a34 <xTaskResumeAll>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d189      	bne.n	8010dd0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8010ebc:	4b0f      	ldr	r3, [pc, #60]	; (8010efc <xQueueReceive+0x1b4>)
 8010ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ec2:	601a      	str	r2, [r3, #0]
 8010ec4:	f3bf 8f4f 	dsb	sy
 8010ec8:	f3bf 8f6f 	isb	sy
 8010ecc:	e780      	b.n	8010dd0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ed0:	f000 fa65 	bl	801139e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010ed4:	f000 fdae 	bl	8011a34 <xTaskResumeAll>
 8010ed8:	e77a      	b.n	8010dd0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010edc:	f000 fa5f 	bl	801139e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010ee0:	f000 fda8 	bl	8011a34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010ee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ee6:	f000 faac 	bl	8011442 <prvIsQueueEmpty>
 8010eea:	4603      	mov	r3, r0
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	f43f af6f 	beq.w	8010dd0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010ef2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	3730      	adds	r7, #48	; 0x30
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd80      	pop	{r7, pc}
 8010efc:	e000ed04 	.word	0xe000ed04

08010f00 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b08e      	sub	sp, #56	; 0x38
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
 8010f08:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010f12:	2300      	movs	r3, #0
 8010f14:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d109      	bne.n	8010f30 <xQueueSemaphoreTake+0x30>
 8010f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f20:	f383 8811 	msr	BASEPRI, r3
 8010f24:	f3bf 8f6f 	isb	sy
 8010f28:	f3bf 8f4f 	dsb	sy
 8010f2c:	623b      	str	r3, [r7, #32]
 8010f2e:	e7fe      	b.n	8010f2e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d009      	beq.n	8010f4c <xQueueSemaphoreTake+0x4c>
 8010f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f3c:	f383 8811 	msr	BASEPRI, r3
 8010f40:	f3bf 8f6f 	isb	sy
 8010f44:	f3bf 8f4f 	dsb	sy
 8010f48:	61fb      	str	r3, [r7, #28]
 8010f4a:	e7fe      	b.n	8010f4a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010f4c:	f001 f936 	bl	80121bc <xTaskGetSchedulerState>
 8010f50:	4603      	mov	r3, r0
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d102      	bne.n	8010f5c <xQueueSemaphoreTake+0x5c>
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d101      	bne.n	8010f60 <xQueueSemaphoreTake+0x60>
 8010f5c:	2301      	movs	r3, #1
 8010f5e:	e000      	b.n	8010f62 <xQueueSemaphoreTake+0x62>
 8010f60:	2300      	movs	r3, #0
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d109      	bne.n	8010f7a <xQueueSemaphoreTake+0x7a>
 8010f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f6a:	f383 8811 	msr	BASEPRI, r3
 8010f6e:	f3bf 8f6f 	isb	sy
 8010f72:	f3bf 8f4f 	dsb	sy
 8010f76:	61bb      	str	r3, [r7, #24]
 8010f78:	e7fe      	b.n	8010f78 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010f7a:	f001 ff67 	bl	8012e4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f82:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d024      	beq.n	8010fd4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f8c:	1e5a      	subs	r2, r3, #1
 8010f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f90:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d104      	bne.n	8010fa4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010f9a:	f001 fa81 	bl	80124a0 <pvTaskIncrementMutexHeldCount>
 8010f9e:	4602      	mov	r2, r0
 8010fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fa2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fa6:	691b      	ldr	r3, [r3, #16]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d00f      	beq.n	8010fcc <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fae:	3310      	adds	r3, #16
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f000 ff4d 	bl	8011e50 <xTaskRemoveFromEventList>
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d007      	beq.n	8010fcc <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010fbc:	4b53      	ldr	r3, [pc, #332]	; (801110c <xQueueSemaphoreTake+0x20c>)
 8010fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fc2:	601a      	str	r2, [r3, #0]
 8010fc4:	f3bf 8f4f 	dsb	sy
 8010fc8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010fcc:	f001 ff6c 	bl	8012ea8 <vPortExitCritical>
				return pdPASS;
 8010fd0:	2301      	movs	r3, #1
 8010fd2:	e096      	b.n	8011102 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d110      	bne.n	8010ffc <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d009      	beq.n	8010ff4 <xQueueSemaphoreTake+0xf4>
 8010fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fe4:	f383 8811 	msr	BASEPRI, r3
 8010fe8:	f3bf 8f6f 	isb	sy
 8010fec:	f3bf 8f4f 	dsb	sy
 8010ff0:	617b      	str	r3, [r7, #20]
 8010ff2:	e7fe      	b.n	8010ff2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010ff4:	f001 ff58 	bl	8012ea8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	e082      	b.n	8011102 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d106      	bne.n	8011010 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011002:	f107 030c 	add.w	r3, r7, #12
 8011006:	4618      	mov	r0, r3
 8011008:	f000 ff84 	bl	8011f14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801100c:	2301      	movs	r3, #1
 801100e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011010:	f001 ff4a 	bl	8012ea8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011014:	f000 fd00 	bl	8011a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011018:	f001 ff18 	bl	8012e4c <vPortEnterCritical>
 801101c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801101e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011022:	b25b      	sxtb	r3, r3
 8011024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011028:	d103      	bne.n	8011032 <xQueueSemaphoreTake+0x132>
 801102a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801102c:	2200      	movs	r2, #0
 801102e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011038:	b25b      	sxtb	r3, r3
 801103a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801103e:	d103      	bne.n	8011048 <xQueueSemaphoreTake+0x148>
 8011040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011042:	2200      	movs	r2, #0
 8011044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011048:	f001 ff2e 	bl	8012ea8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801104c:	463a      	mov	r2, r7
 801104e:	f107 030c 	add.w	r3, r7, #12
 8011052:	4611      	mov	r1, r2
 8011054:	4618      	mov	r0, r3
 8011056:	f000 ff73 	bl	8011f40 <xTaskCheckForTimeOut>
 801105a:	4603      	mov	r3, r0
 801105c:	2b00      	cmp	r3, #0
 801105e:	d132      	bne.n	80110c6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011060:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011062:	f000 f9ee 	bl	8011442 <prvIsQueueEmpty>
 8011066:	4603      	mov	r3, r0
 8011068:	2b00      	cmp	r3, #0
 801106a:	d026      	beq.n	80110ba <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801106c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d109      	bne.n	8011088 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8011074:	f001 feea 	bl	8012e4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801107a:	689b      	ldr	r3, [r3, #8]
 801107c:	4618      	mov	r0, r3
 801107e:	f001 f8bb 	bl	80121f8 <xTaskPriorityInherit>
 8011082:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011084:	f001 ff10 	bl	8012ea8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801108a:	3324      	adds	r3, #36	; 0x24
 801108c:	683a      	ldr	r2, [r7, #0]
 801108e:	4611      	mov	r1, r2
 8011090:	4618      	mov	r0, r3
 8011092:	f000 fe8f 	bl	8011db4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011096:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011098:	f000 f981 	bl	801139e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801109c:	f000 fcca 	bl	8011a34 <xTaskResumeAll>
 80110a0:	4603      	mov	r3, r0
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	f47f af69 	bne.w	8010f7a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80110a8:	4b18      	ldr	r3, [pc, #96]	; (801110c <xQueueSemaphoreTake+0x20c>)
 80110aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110ae:	601a      	str	r2, [r3, #0]
 80110b0:	f3bf 8f4f 	dsb	sy
 80110b4:	f3bf 8f6f 	isb	sy
 80110b8:	e75f      	b.n	8010f7a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80110ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110bc:	f000 f96f 	bl	801139e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80110c0:	f000 fcb8 	bl	8011a34 <xTaskResumeAll>
 80110c4:	e759      	b.n	8010f7a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80110c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110c8:	f000 f969 	bl	801139e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80110cc:	f000 fcb2 	bl	8011a34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80110d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110d2:	f000 f9b6 	bl	8011442 <prvIsQueueEmpty>
 80110d6:	4603      	mov	r3, r0
 80110d8:	2b00      	cmp	r3, #0
 80110da:	f43f af4e 	beq.w	8010f7a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80110de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d00d      	beq.n	8011100 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80110e4:	f001 feb2 	bl	8012e4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80110e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110ea:	f000 f8b0 	bl	801124e <prvGetDisinheritPriorityAfterTimeout>
 80110ee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80110f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110f2:	689b      	ldr	r3, [r3, #8]
 80110f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80110f6:	4618      	mov	r0, r3
 80110f8:	f001 f952 	bl	80123a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80110fc:	f001 fed4 	bl	8012ea8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011100:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011102:	4618      	mov	r0, r3
 8011104:	3738      	adds	r7, #56	; 0x38
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}
 801110a:	bf00      	nop
 801110c:	e000ed04 	.word	0xe000ed04

08011110 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b08e      	sub	sp, #56	; 0x38
 8011114:	af00      	add	r7, sp, #0
 8011116:	60f8      	str	r0, [r7, #12]
 8011118:	60b9      	str	r1, [r7, #8]
 801111a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011122:	2b00      	cmp	r3, #0
 8011124:	d109      	bne.n	801113a <xQueueReceiveFromISR+0x2a>
 8011126:	f04f 0350 	mov.w	r3, #80	; 0x50
 801112a:	f383 8811 	msr	BASEPRI, r3
 801112e:	f3bf 8f6f 	isb	sy
 8011132:	f3bf 8f4f 	dsb	sy
 8011136:	623b      	str	r3, [r7, #32]
 8011138:	e7fe      	b.n	8011138 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801113a:	68bb      	ldr	r3, [r7, #8]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d103      	bne.n	8011148 <xQueueReceiveFromISR+0x38>
 8011140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011144:	2b00      	cmp	r3, #0
 8011146:	d101      	bne.n	801114c <xQueueReceiveFromISR+0x3c>
 8011148:	2301      	movs	r3, #1
 801114a:	e000      	b.n	801114e <xQueueReceiveFromISR+0x3e>
 801114c:	2300      	movs	r3, #0
 801114e:	2b00      	cmp	r3, #0
 8011150:	d109      	bne.n	8011166 <xQueueReceiveFromISR+0x56>
 8011152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011156:	f383 8811 	msr	BASEPRI, r3
 801115a:	f3bf 8f6f 	isb	sy
 801115e:	f3bf 8f4f 	dsb	sy
 8011162:	61fb      	str	r3, [r7, #28]
 8011164:	e7fe      	b.n	8011164 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011166:	f001 ff4d 	bl	8013004 <vPortValidateInterruptPriority>
	__asm volatile
 801116a:	f3ef 8211 	mrs	r2, BASEPRI
 801116e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011172:	f383 8811 	msr	BASEPRI, r3
 8011176:	f3bf 8f6f 	isb	sy
 801117a:	f3bf 8f4f 	dsb	sy
 801117e:	61ba      	str	r2, [r7, #24]
 8011180:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011182:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011184:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801118a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801118c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801118e:	2b00      	cmp	r3, #0
 8011190:	d02f      	beq.n	80111f2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011194:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801119c:	68b9      	ldr	r1, [r7, #8]
 801119e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111a0:	f000 f8d7 	bl	8011352 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80111a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111a6:	1e5a      	subs	r2, r3, #1
 80111a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80111ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80111b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111b4:	d112      	bne.n	80111dc <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80111b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b8:	691b      	ldr	r3, [r3, #16]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d016      	beq.n	80111ec <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80111be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c0:	3310      	adds	r3, #16
 80111c2:	4618      	mov	r0, r3
 80111c4:	f000 fe44 	bl	8011e50 <xTaskRemoveFromEventList>
 80111c8:	4603      	mov	r3, r0
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d00e      	beq.n	80111ec <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d00b      	beq.n	80111ec <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	2201      	movs	r2, #1
 80111d8:	601a      	str	r2, [r3, #0]
 80111da:	e007      	b.n	80111ec <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80111dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111e0:	3301      	adds	r3, #1
 80111e2:	b2db      	uxtb	r3, r3
 80111e4:	b25a      	sxtb	r2, r3
 80111e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80111ec:	2301      	movs	r3, #1
 80111ee:	637b      	str	r3, [r7, #52]	; 0x34
 80111f0:	e001      	b.n	80111f6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80111f2:	2300      	movs	r3, #0
 80111f4:	637b      	str	r3, [r7, #52]	; 0x34
 80111f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80111fa:	693b      	ldr	r3, [r7, #16]
 80111fc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011202:	4618      	mov	r0, r3
 8011204:	3738      	adds	r7, #56	; 0x38
 8011206:	46bd      	mov	sp, r7
 8011208:	bd80      	pop	{r7, pc}

0801120a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801120a:	b580      	push	{r7, lr}
 801120c:	b084      	sub	sp, #16
 801120e:	af00      	add	r7, sp, #0
 8011210:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d109      	bne.n	8011230 <vQueueDelete+0x26>
	__asm volatile
 801121c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011220:	f383 8811 	msr	BASEPRI, r3
 8011224:	f3bf 8f6f 	isb	sy
 8011228:	f3bf 8f4f 	dsb	sy
 801122c:	60bb      	str	r3, [r7, #8]
 801122e:	e7fe      	b.n	801122e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011230:	68f8      	ldr	r0, [r7, #12]
 8011232:	f000 f95d 	bl	80114f0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801123c:	2b00      	cmp	r3, #0
 801123e:	d102      	bne.n	8011246 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8011240:	68f8      	ldr	r0, [r7, #12]
 8011242:	f001 ffdf 	bl	8013204 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011246:	bf00      	nop
 8011248:	3710      	adds	r7, #16
 801124a:	46bd      	mov	sp, r7
 801124c:	bd80      	pop	{r7, pc}

0801124e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801124e:	b480      	push	{r7}
 8011250:	b085      	sub	sp, #20
 8011252:	af00      	add	r7, sp, #0
 8011254:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801125a:	2b00      	cmp	r3, #0
 801125c:	d006      	beq.n	801126c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8011268:	60fb      	str	r3, [r7, #12]
 801126a:	e001      	b.n	8011270 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801126c:	2300      	movs	r3, #0
 801126e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011270:	68fb      	ldr	r3, [r7, #12]
	}
 8011272:	4618      	mov	r0, r3
 8011274:	3714      	adds	r7, #20
 8011276:	46bd      	mov	sp, r7
 8011278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127c:	4770      	bx	lr

0801127e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801127e:	b580      	push	{r7, lr}
 8011280:	b086      	sub	sp, #24
 8011282:	af00      	add	r7, sp, #0
 8011284:	60f8      	str	r0, [r7, #12]
 8011286:	60b9      	str	r1, [r7, #8]
 8011288:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801128a:	2300      	movs	r3, #0
 801128c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011292:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011298:	2b00      	cmp	r3, #0
 801129a:	d10d      	bne.n	80112b8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d14d      	bne.n	8011340 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	689b      	ldr	r3, [r3, #8]
 80112a8:	4618      	mov	r0, r3
 80112aa:	f001 f80d 	bl	80122c8 <xTaskPriorityDisinherit>
 80112ae:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	2200      	movs	r2, #0
 80112b4:	609a      	str	r2, [r3, #8]
 80112b6:	e043      	b.n	8011340 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d119      	bne.n	80112f2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	6858      	ldr	r0, [r3, #4]
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112c6:	461a      	mov	r2, r3
 80112c8:	68b9      	ldr	r1, [r7, #8]
 80112ca:	f002 f8ec 	bl	80134a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	685a      	ldr	r2, [r3, #4]
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112d6:	441a      	add	r2, r3
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	685a      	ldr	r2, [r3, #4]
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	689b      	ldr	r3, [r3, #8]
 80112e4:	429a      	cmp	r2, r3
 80112e6:	d32b      	bcc.n	8011340 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	681a      	ldr	r2, [r3, #0]
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	605a      	str	r2, [r3, #4]
 80112f0:	e026      	b.n	8011340 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	68d8      	ldr	r0, [r3, #12]
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112fa:	461a      	mov	r2, r3
 80112fc:	68b9      	ldr	r1, [r7, #8]
 80112fe:	f002 f8d2 	bl	80134a6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	68da      	ldr	r2, [r3, #12]
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801130a:	425b      	negs	r3, r3
 801130c:	441a      	add	r2, r3
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	68da      	ldr	r2, [r3, #12]
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	429a      	cmp	r2, r3
 801131c:	d207      	bcs.n	801132e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	689a      	ldr	r2, [r3, #8]
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011326:	425b      	negs	r3, r3
 8011328:	441a      	add	r2, r3
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	2b02      	cmp	r3, #2
 8011332:	d105      	bne.n	8011340 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011334:	693b      	ldr	r3, [r7, #16]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d002      	beq.n	8011340 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801133a:	693b      	ldr	r3, [r7, #16]
 801133c:	3b01      	subs	r3, #1
 801133e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011340:	693b      	ldr	r3, [r7, #16]
 8011342:	1c5a      	adds	r2, r3, #1
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011348:	697b      	ldr	r3, [r7, #20]
}
 801134a:	4618      	mov	r0, r3
 801134c:	3718      	adds	r7, #24
 801134e:	46bd      	mov	sp, r7
 8011350:	bd80      	pop	{r7, pc}

08011352 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011352:	b580      	push	{r7, lr}
 8011354:	b082      	sub	sp, #8
 8011356:	af00      	add	r7, sp, #0
 8011358:	6078      	str	r0, [r7, #4]
 801135a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011360:	2b00      	cmp	r3, #0
 8011362:	d018      	beq.n	8011396 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	68da      	ldr	r2, [r3, #12]
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801136c:	441a      	add	r2, r3
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	68da      	ldr	r2, [r3, #12]
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	689b      	ldr	r3, [r3, #8]
 801137a:	429a      	cmp	r2, r3
 801137c:	d303      	bcc.n	8011386 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	681a      	ldr	r2, [r3, #0]
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	68d9      	ldr	r1, [r3, #12]
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801138e:	461a      	mov	r2, r3
 8011390:	6838      	ldr	r0, [r7, #0]
 8011392:	f002 f888 	bl	80134a6 <memcpy>
	}
}
 8011396:	bf00      	nop
 8011398:	3708      	adds	r7, #8
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}

0801139e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801139e:	b580      	push	{r7, lr}
 80113a0:	b084      	sub	sp, #16
 80113a2:	af00      	add	r7, sp, #0
 80113a4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80113a6:	f001 fd51 	bl	8012e4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80113b0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80113b2:	e011      	b.n	80113d8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d012      	beq.n	80113e2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	3324      	adds	r3, #36	; 0x24
 80113c0:	4618      	mov	r0, r3
 80113c2:	f000 fd45 	bl	8011e50 <xTaskRemoveFromEventList>
 80113c6:	4603      	mov	r3, r0
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d001      	beq.n	80113d0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80113cc:	f000 fe18 	bl	8012000 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80113d0:	7bfb      	ldrb	r3, [r7, #15]
 80113d2:	3b01      	subs	r3, #1
 80113d4:	b2db      	uxtb	r3, r3
 80113d6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80113d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	dce9      	bgt.n	80113b4 <prvUnlockQueue+0x16>
 80113e0:	e000      	b.n	80113e4 <prvUnlockQueue+0x46>
					break;
 80113e2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	22ff      	movs	r2, #255	; 0xff
 80113e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80113ec:	f001 fd5c 	bl	8012ea8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80113f0:	f001 fd2c 	bl	8012e4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80113fa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80113fc:	e011      	b.n	8011422 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	691b      	ldr	r3, [r3, #16]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d012      	beq.n	801142c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	3310      	adds	r3, #16
 801140a:	4618      	mov	r0, r3
 801140c:	f000 fd20 	bl	8011e50 <xTaskRemoveFromEventList>
 8011410:	4603      	mov	r3, r0
 8011412:	2b00      	cmp	r3, #0
 8011414:	d001      	beq.n	801141a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011416:	f000 fdf3 	bl	8012000 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801141a:	7bbb      	ldrb	r3, [r7, #14]
 801141c:	3b01      	subs	r3, #1
 801141e:	b2db      	uxtb	r3, r3
 8011420:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011422:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011426:	2b00      	cmp	r3, #0
 8011428:	dce9      	bgt.n	80113fe <prvUnlockQueue+0x60>
 801142a:	e000      	b.n	801142e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801142c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	22ff      	movs	r2, #255	; 0xff
 8011432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011436:	f001 fd37 	bl	8012ea8 <vPortExitCritical>
}
 801143a:	bf00      	nop
 801143c:	3710      	adds	r7, #16
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}

08011442 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011442:	b580      	push	{r7, lr}
 8011444:	b084      	sub	sp, #16
 8011446:	af00      	add	r7, sp, #0
 8011448:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801144a:	f001 fcff 	bl	8012e4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011452:	2b00      	cmp	r3, #0
 8011454:	d102      	bne.n	801145c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011456:	2301      	movs	r3, #1
 8011458:	60fb      	str	r3, [r7, #12]
 801145a:	e001      	b.n	8011460 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801145c:	2300      	movs	r3, #0
 801145e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011460:	f001 fd22 	bl	8012ea8 <vPortExitCritical>

	return xReturn;
 8011464:	68fb      	ldr	r3, [r7, #12]
}
 8011466:	4618      	mov	r0, r3
 8011468:	3710      	adds	r7, #16
 801146a:	46bd      	mov	sp, r7
 801146c:	bd80      	pop	{r7, pc}

0801146e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801146e:	b580      	push	{r7, lr}
 8011470:	b084      	sub	sp, #16
 8011472:	af00      	add	r7, sp, #0
 8011474:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011476:	f001 fce9 	bl	8012e4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011482:	429a      	cmp	r2, r3
 8011484:	d102      	bne.n	801148c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011486:	2301      	movs	r3, #1
 8011488:	60fb      	str	r3, [r7, #12]
 801148a:	e001      	b.n	8011490 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801148c:	2300      	movs	r3, #0
 801148e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011490:	f001 fd0a 	bl	8012ea8 <vPortExitCritical>

	return xReturn;
 8011494:	68fb      	ldr	r3, [r7, #12]
}
 8011496:	4618      	mov	r0, r3
 8011498:	3710      	adds	r7, #16
 801149a:	46bd      	mov	sp, r7
 801149c:	bd80      	pop	{r7, pc}
	...

080114a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80114a0:	b480      	push	{r7}
 80114a2:	b085      	sub	sp, #20
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
 80114a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80114aa:	2300      	movs	r3, #0
 80114ac:	60fb      	str	r3, [r7, #12]
 80114ae:	e014      	b.n	80114da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80114b0:	4a0e      	ldr	r2, [pc, #56]	; (80114ec <vQueueAddToRegistry+0x4c>)
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d10b      	bne.n	80114d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80114bc:	490b      	ldr	r1, [pc, #44]	; (80114ec <vQueueAddToRegistry+0x4c>)
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	683a      	ldr	r2, [r7, #0]
 80114c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80114c6:	4a09      	ldr	r2, [pc, #36]	; (80114ec <vQueueAddToRegistry+0x4c>)
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	00db      	lsls	r3, r3, #3
 80114cc:	4413      	add	r3, r2
 80114ce:	687a      	ldr	r2, [r7, #4]
 80114d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80114d2:	e005      	b.n	80114e0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	3301      	adds	r3, #1
 80114d8:	60fb      	str	r3, [r7, #12]
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	2b07      	cmp	r3, #7
 80114de:	d9e7      	bls.n	80114b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80114e0:	bf00      	nop
 80114e2:	3714      	adds	r7, #20
 80114e4:	46bd      	mov	sp, r7
 80114e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ea:	4770      	bx	lr
 80114ec:	2000494c 	.word	0x2000494c

080114f0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80114f0:	b480      	push	{r7}
 80114f2:	b085      	sub	sp, #20
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80114f8:	2300      	movs	r3, #0
 80114fa:	60fb      	str	r3, [r7, #12]
 80114fc:	e016      	b.n	801152c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80114fe:	4a10      	ldr	r2, [pc, #64]	; (8011540 <vQueueUnregisterQueue+0x50>)
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	00db      	lsls	r3, r3, #3
 8011504:	4413      	add	r3, r2
 8011506:	685b      	ldr	r3, [r3, #4]
 8011508:	687a      	ldr	r2, [r7, #4]
 801150a:	429a      	cmp	r2, r3
 801150c:	d10b      	bne.n	8011526 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801150e:	4a0c      	ldr	r2, [pc, #48]	; (8011540 <vQueueUnregisterQueue+0x50>)
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	2100      	movs	r1, #0
 8011514:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011518:	4a09      	ldr	r2, [pc, #36]	; (8011540 <vQueueUnregisterQueue+0x50>)
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	00db      	lsls	r3, r3, #3
 801151e:	4413      	add	r3, r2
 8011520:	2200      	movs	r2, #0
 8011522:	605a      	str	r2, [r3, #4]
				break;
 8011524:	e005      	b.n	8011532 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	3301      	adds	r3, #1
 801152a:	60fb      	str	r3, [r7, #12]
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	2b07      	cmp	r3, #7
 8011530:	d9e5      	bls.n	80114fe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011532:	bf00      	nop
 8011534:	3714      	adds	r7, #20
 8011536:	46bd      	mov	sp, r7
 8011538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153c:	4770      	bx	lr
 801153e:	bf00      	nop
 8011540:	2000494c 	.word	0x2000494c

08011544 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011544:	b580      	push	{r7, lr}
 8011546:	b086      	sub	sp, #24
 8011548:	af00      	add	r7, sp, #0
 801154a:	60f8      	str	r0, [r7, #12]
 801154c:	60b9      	str	r1, [r7, #8]
 801154e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011554:	f001 fc7a 	bl	8012e4c <vPortEnterCritical>
 8011558:	697b      	ldr	r3, [r7, #20]
 801155a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801155e:	b25b      	sxtb	r3, r3
 8011560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011564:	d103      	bne.n	801156e <vQueueWaitForMessageRestricted+0x2a>
 8011566:	697b      	ldr	r3, [r7, #20]
 8011568:	2200      	movs	r2, #0
 801156a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801156e:	697b      	ldr	r3, [r7, #20]
 8011570:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011574:	b25b      	sxtb	r3, r3
 8011576:	f1b3 3fff 	cmp.w	r3, #4294967295
 801157a:	d103      	bne.n	8011584 <vQueueWaitForMessageRestricted+0x40>
 801157c:	697b      	ldr	r3, [r7, #20]
 801157e:	2200      	movs	r2, #0
 8011580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011584:	f001 fc90 	bl	8012ea8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011588:	697b      	ldr	r3, [r7, #20]
 801158a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801158c:	2b00      	cmp	r3, #0
 801158e:	d106      	bne.n	801159e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011590:	697b      	ldr	r3, [r7, #20]
 8011592:	3324      	adds	r3, #36	; 0x24
 8011594:	687a      	ldr	r2, [r7, #4]
 8011596:	68b9      	ldr	r1, [r7, #8]
 8011598:	4618      	mov	r0, r3
 801159a:	f000 fc2f 	bl	8011dfc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801159e:	6978      	ldr	r0, [r7, #20]
 80115a0:	f7ff fefd 	bl	801139e <prvUnlockQueue>
	}
 80115a4:	bf00      	nop
 80115a6:	3718      	adds	r7, #24
 80115a8:	46bd      	mov	sp, r7
 80115aa:	bd80      	pop	{r7, pc}

080115ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b08e      	sub	sp, #56	; 0x38
 80115b0:	af04      	add	r7, sp, #16
 80115b2:	60f8      	str	r0, [r7, #12]
 80115b4:	60b9      	str	r1, [r7, #8]
 80115b6:	607a      	str	r2, [r7, #4]
 80115b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80115ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d109      	bne.n	80115d4 <xTaskCreateStatic+0x28>
 80115c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115c4:	f383 8811 	msr	BASEPRI, r3
 80115c8:	f3bf 8f6f 	isb	sy
 80115cc:	f3bf 8f4f 	dsb	sy
 80115d0:	623b      	str	r3, [r7, #32]
 80115d2:	e7fe      	b.n	80115d2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80115d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d109      	bne.n	80115ee <xTaskCreateStatic+0x42>
 80115da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115de:	f383 8811 	msr	BASEPRI, r3
 80115e2:	f3bf 8f6f 	isb	sy
 80115e6:	f3bf 8f4f 	dsb	sy
 80115ea:	61fb      	str	r3, [r7, #28]
 80115ec:	e7fe      	b.n	80115ec <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80115ee:	235c      	movs	r3, #92	; 0x5c
 80115f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80115f2:	693b      	ldr	r3, [r7, #16]
 80115f4:	2b5c      	cmp	r3, #92	; 0x5c
 80115f6:	d009      	beq.n	801160c <xTaskCreateStatic+0x60>
 80115f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115fc:	f383 8811 	msr	BASEPRI, r3
 8011600:	f3bf 8f6f 	isb	sy
 8011604:	f3bf 8f4f 	dsb	sy
 8011608:	61bb      	str	r3, [r7, #24]
 801160a:	e7fe      	b.n	801160a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801160c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801160e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011610:	2b00      	cmp	r3, #0
 8011612:	d01e      	beq.n	8011652 <xTaskCreateStatic+0xa6>
 8011614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011616:	2b00      	cmp	r3, #0
 8011618:	d01b      	beq.n	8011652 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801161a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801161c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011620:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011622:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011626:	2202      	movs	r2, #2
 8011628:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801162c:	2300      	movs	r3, #0
 801162e:	9303      	str	r3, [sp, #12]
 8011630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011632:	9302      	str	r3, [sp, #8]
 8011634:	f107 0314 	add.w	r3, r7, #20
 8011638:	9301      	str	r3, [sp, #4]
 801163a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801163c:	9300      	str	r3, [sp, #0]
 801163e:	683b      	ldr	r3, [r7, #0]
 8011640:	687a      	ldr	r2, [r7, #4]
 8011642:	68b9      	ldr	r1, [r7, #8]
 8011644:	68f8      	ldr	r0, [r7, #12]
 8011646:	f000 f850 	bl	80116ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801164a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801164c:	f000 f8dc 	bl	8011808 <prvAddNewTaskToReadyList>
 8011650:	e001      	b.n	8011656 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8011652:	2300      	movs	r3, #0
 8011654:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011656:	697b      	ldr	r3, [r7, #20]
	}
 8011658:	4618      	mov	r0, r3
 801165a:	3728      	adds	r7, #40	; 0x28
 801165c:	46bd      	mov	sp, r7
 801165e:	bd80      	pop	{r7, pc}

08011660 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011660:	b580      	push	{r7, lr}
 8011662:	b08c      	sub	sp, #48	; 0x30
 8011664:	af04      	add	r7, sp, #16
 8011666:	60f8      	str	r0, [r7, #12]
 8011668:	60b9      	str	r1, [r7, #8]
 801166a:	603b      	str	r3, [r7, #0]
 801166c:	4613      	mov	r3, r2
 801166e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011670:	88fb      	ldrh	r3, [r7, #6]
 8011672:	009b      	lsls	r3, r3, #2
 8011674:	4618      	mov	r0, r3
 8011676:	f001 fd03 	bl	8013080 <pvPortMalloc>
 801167a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801167c:	697b      	ldr	r3, [r7, #20]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d00e      	beq.n	80116a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011682:	205c      	movs	r0, #92	; 0x5c
 8011684:	f001 fcfc 	bl	8013080 <pvPortMalloc>
 8011688:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801168a:	69fb      	ldr	r3, [r7, #28]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d003      	beq.n	8011698 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011690:	69fb      	ldr	r3, [r7, #28]
 8011692:	697a      	ldr	r2, [r7, #20]
 8011694:	631a      	str	r2, [r3, #48]	; 0x30
 8011696:	e005      	b.n	80116a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011698:	6978      	ldr	r0, [r7, #20]
 801169a:	f001 fdb3 	bl	8013204 <vPortFree>
 801169e:	e001      	b.n	80116a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80116a0:	2300      	movs	r3, #0
 80116a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80116a4:	69fb      	ldr	r3, [r7, #28]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d017      	beq.n	80116da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80116aa:	69fb      	ldr	r3, [r7, #28]
 80116ac:	2200      	movs	r2, #0
 80116ae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80116b2:	88fa      	ldrh	r2, [r7, #6]
 80116b4:	2300      	movs	r3, #0
 80116b6:	9303      	str	r3, [sp, #12]
 80116b8:	69fb      	ldr	r3, [r7, #28]
 80116ba:	9302      	str	r3, [sp, #8]
 80116bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116be:	9301      	str	r3, [sp, #4]
 80116c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116c2:	9300      	str	r3, [sp, #0]
 80116c4:	683b      	ldr	r3, [r7, #0]
 80116c6:	68b9      	ldr	r1, [r7, #8]
 80116c8:	68f8      	ldr	r0, [r7, #12]
 80116ca:	f000 f80e 	bl	80116ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80116ce:	69f8      	ldr	r0, [r7, #28]
 80116d0:	f000 f89a 	bl	8011808 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80116d4:	2301      	movs	r3, #1
 80116d6:	61bb      	str	r3, [r7, #24]
 80116d8:	e002      	b.n	80116e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80116da:	f04f 33ff 	mov.w	r3, #4294967295
 80116de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80116e0:	69bb      	ldr	r3, [r7, #24]
	}
 80116e2:	4618      	mov	r0, r3
 80116e4:	3720      	adds	r7, #32
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bd80      	pop	{r7, pc}

080116ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80116ea:	b580      	push	{r7, lr}
 80116ec:	b088      	sub	sp, #32
 80116ee:	af00      	add	r7, sp, #0
 80116f0:	60f8      	str	r0, [r7, #12]
 80116f2:	60b9      	str	r1, [r7, #8]
 80116f4:	607a      	str	r2, [r7, #4]
 80116f6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80116f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	009b      	lsls	r3, r3, #2
 8011700:	461a      	mov	r2, r3
 8011702:	21a5      	movs	r1, #165	; 0xa5
 8011704:	f001 feda 	bl	80134bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801170a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011712:	3b01      	subs	r3, #1
 8011714:	009b      	lsls	r3, r3, #2
 8011716:	4413      	add	r3, r2
 8011718:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801171a:	69bb      	ldr	r3, [r7, #24]
 801171c:	f023 0307 	bic.w	r3, r3, #7
 8011720:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011722:	69bb      	ldr	r3, [r7, #24]
 8011724:	f003 0307 	and.w	r3, r3, #7
 8011728:	2b00      	cmp	r3, #0
 801172a:	d009      	beq.n	8011740 <prvInitialiseNewTask+0x56>
 801172c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011730:	f383 8811 	msr	BASEPRI, r3
 8011734:	f3bf 8f6f 	isb	sy
 8011738:	f3bf 8f4f 	dsb	sy
 801173c:	617b      	str	r3, [r7, #20]
 801173e:	e7fe      	b.n	801173e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011740:	68bb      	ldr	r3, [r7, #8]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d01f      	beq.n	8011786 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011746:	2300      	movs	r3, #0
 8011748:	61fb      	str	r3, [r7, #28]
 801174a:	e012      	b.n	8011772 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801174c:	68ba      	ldr	r2, [r7, #8]
 801174e:	69fb      	ldr	r3, [r7, #28]
 8011750:	4413      	add	r3, r2
 8011752:	7819      	ldrb	r1, [r3, #0]
 8011754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011756:	69fb      	ldr	r3, [r7, #28]
 8011758:	4413      	add	r3, r2
 801175a:	3334      	adds	r3, #52	; 0x34
 801175c:	460a      	mov	r2, r1
 801175e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011760:	68ba      	ldr	r2, [r7, #8]
 8011762:	69fb      	ldr	r3, [r7, #28]
 8011764:	4413      	add	r3, r2
 8011766:	781b      	ldrb	r3, [r3, #0]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d006      	beq.n	801177a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801176c:	69fb      	ldr	r3, [r7, #28]
 801176e:	3301      	adds	r3, #1
 8011770:	61fb      	str	r3, [r7, #28]
 8011772:	69fb      	ldr	r3, [r7, #28]
 8011774:	2b0f      	cmp	r3, #15
 8011776:	d9e9      	bls.n	801174c <prvInitialiseNewTask+0x62>
 8011778:	e000      	b.n	801177c <prvInitialiseNewTask+0x92>
			{
				break;
 801177a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801177c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801177e:	2200      	movs	r2, #0
 8011780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011784:	e003      	b.n	801178e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011788:	2200      	movs	r2, #0
 801178a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801178e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011790:	2b37      	cmp	r3, #55	; 0x37
 8011792:	d901      	bls.n	8011798 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011794:	2337      	movs	r3, #55	; 0x37
 8011796:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801179a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801179c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801179e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80117a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117a6:	2200      	movs	r2, #0
 80117a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80117aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ac:	3304      	adds	r3, #4
 80117ae:	4618      	mov	r0, r3
 80117b0:	f7fe fe7a 	bl	80104a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80117b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117b6:	3318      	adds	r3, #24
 80117b8:	4618      	mov	r0, r3
 80117ba:	f7fe fe75 	bl	80104a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80117be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80117c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80117ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80117ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80117d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117d6:	2200      	movs	r2, #0
 80117d8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80117da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117dc:	2200      	movs	r2, #0
 80117de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80117e2:	683a      	ldr	r2, [r7, #0]
 80117e4:	68f9      	ldr	r1, [r7, #12]
 80117e6:	69b8      	ldr	r0, [r7, #24]
 80117e8:	f001 fa08 	bl	8012bfc <pxPortInitialiseStack>
 80117ec:	4602      	mov	r2, r0
 80117ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80117f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d002      	beq.n	80117fe <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80117f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80117fe:	bf00      	nop
 8011800:	3720      	adds	r7, #32
 8011802:	46bd      	mov	sp, r7
 8011804:	bd80      	pop	{r7, pc}
	...

08011808 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b082      	sub	sp, #8
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011810:	f001 fb1c 	bl	8012e4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011814:	4b2d      	ldr	r3, [pc, #180]	; (80118cc <prvAddNewTaskToReadyList+0xc4>)
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	3301      	adds	r3, #1
 801181a:	4a2c      	ldr	r2, [pc, #176]	; (80118cc <prvAddNewTaskToReadyList+0xc4>)
 801181c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801181e:	4b2c      	ldr	r3, [pc, #176]	; (80118d0 <prvAddNewTaskToReadyList+0xc8>)
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d109      	bne.n	801183a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011826:	4a2a      	ldr	r2, [pc, #168]	; (80118d0 <prvAddNewTaskToReadyList+0xc8>)
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801182c:	4b27      	ldr	r3, [pc, #156]	; (80118cc <prvAddNewTaskToReadyList+0xc4>)
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	2b01      	cmp	r3, #1
 8011832:	d110      	bne.n	8011856 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011834:	f000 fc08 	bl	8012048 <prvInitialiseTaskLists>
 8011838:	e00d      	b.n	8011856 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801183a:	4b26      	ldr	r3, [pc, #152]	; (80118d4 <prvAddNewTaskToReadyList+0xcc>)
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d109      	bne.n	8011856 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011842:	4b23      	ldr	r3, [pc, #140]	; (80118d0 <prvAddNewTaskToReadyList+0xc8>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801184c:	429a      	cmp	r2, r3
 801184e:	d802      	bhi.n	8011856 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011850:	4a1f      	ldr	r2, [pc, #124]	; (80118d0 <prvAddNewTaskToReadyList+0xc8>)
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011856:	4b20      	ldr	r3, [pc, #128]	; (80118d8 <prvAddNewTaskToReadyList+0xd0>)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	3301      	adds	r3, #1
 801185c:	4a1e      	ldr	r2, [pc, #120]	; (80118d8 <prvAddNewTaskToReadyList+0xd0>)
 801185e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011860:	4b1d      	ldr	r3, [pc, #116]	; (80118d8 <prvAddNewTaskToReadyList+0xd0>)
 8011862:	681a      	ldr	r2, [r3, #0]
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801186c:	4b1b      	ldr	r3, [pc, #108]	; (80118dc <prvAddNewTaskToReadyList+0xd4>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	429a      	cmp	r2, r3
 8011872:	d903      	bls.n	801187c <prvAddNewTaskToReadyList+0x74>
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011878:	4a18      	ldr	r2, [pc, #96]	; (80118dc <prvAddNewTaskToReadyList+0xd4>)
 801187a:	6013      	str	r3, [r2, #0]
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011880:	4613      	mov	r3, r2
 8011882:	009b      	lsls	r3, r3, #2
 8011884:	4413      	add	r3, r2
 8011886:	009b      	lsls	r3, r3, #2
 8011888:	4a15      	ldr	r2, [pc, #84]	; (80118e0 <prvAddNewTaskToReadyList+0xd8>)
 801188a:	441a      	add	r2, r3
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	3304      	adds	r3, #4
 8011890:	4619      	mov	r1, r3
 8011892:	4610      	mov	r0, r2
 8011894:	f7fe fe15 	bl	80104c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011898:	f001 fb06 	bl	8012ea8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801189c:	4b0d      	ldr	r3, [pc, #52]	; (80118d4 <prvAddNewTaskToReadyList+0xcc>)
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d00e      	beq.n	80118c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80118a4:	4b0a      	ldr	r3, [pc, #40]	; (80118d0 <prvAddNewTaskToReadyList+0xc8>)
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118ae:	429a      	cmp	r2, r3
 80118b0:	d207      	bcs.n	80118c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80118b2:	4b0c      	ldr	r3, [pc, #48]	; (80118e4 <prvAddNewTaskToReadyList+0xdc>)
 80118b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118b8:	601a      	str	r2, [r3, #0]
 80118ba:	f3bf 8f4f 	dsb	sy
 80118be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80118c2:	bf00      	nop
 80118c4:	3708      	adds	r7, #8
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd80      	pop	{r7, pc}
 80118ca:	bf00      	nop
 80118cc:	20001354 	.word	0x20001354
 80118d0:	20000e80 	.word	0x20000e80
 80118d4:	20001360 	.word	0x20001360
 80118d8:	20001370 	.word	0x20001370
 80118dc:	2000135c 	.word	0x2000135c
 80118e0:	20000e84 	.word	0x20000e84
 80118e4:	e000ed04 	.word	0xe000ed04

080118e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b084      	sub	sp, #16
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80118f0:	2300      	movs	r3, #0
 80118f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d016      	beq.n	8011928 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80118fa:	4b13      	ldr	r3, [pc, #76]	; (8011948 <vTaskDelay+0x60>)
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d009      	beq.n	8011916 <vTaskDelay+0x2e>
 8011902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011906:	f383 8811 	msr	BASEPRI, r3
 801190a:	f3bf 8f6f 	isb	sy
 801190e:	f3bf 8f4f 	dsb	sy
 8011912:	60bb      	str	r3, [r7, #8]
 8011914:	e7fe      	b.n	8011914 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8011916:	f000 f87f 	bl	8011a18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801191a:	2100      	movs	r1, #0
 801191c:	6878      	ldr	r0, [r7, #4]
 801191e:	f000 fdd3 	bl	80124c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011922:	f000 f887 	bl	8011a34 <xTaskResumeAll>
 8011926:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d107      	bne.n	801193e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 801192e:	4b07      	ldr	r3, [pc, #28]	; (801194c <vTaskDelay+0x64>)
 8011930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011934:	601a      	str	r2, [r3, #0]
 8011936:	f3bf 8f4f 	dsb	sy
 801193a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801193e:	bf00      	nop
 8011940:	3710      	adds	r7, #16
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}
 8011946:	bf00      	nop
 8011948:	2000137c 	.word	0x2000137c
 801194c:	e000ed04 	.word	0xe000ed04

08011950 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b08a      	sub	sp, #40	; 0x28
 8011954:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011956:	2300      	movs	r3, #0
 8011958:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801195a:	2300      	movs	r3, #0
 801195c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801195e:	463a      	mov	r2, r7
 8011960:	1d39      	adds	r1, r7, #4
 8011962:	f107 0308 	add.w	r3, r7, #8
 8011966:	4618      	mov	r0, r3
 8011968:	f7fe fd4a 	bl	8010400 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801196c:	6839      	ldr	r1, [r7, #0]
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	68ba      	ldr	r2, [r7, #8]
 8011972:	9202      	str	r2, [sp, #8]
 8011974:	9301      	str	r3, [sp, #4]
 8011976:	2300      	movs	r3, #0
 8011978:	9300      	str	r3, [sp, #0]
 801197a:	2300      	movs	r3, #0
 801197c:	460a      	mov	r2, r1
 801197e:	4920      	ldr	r1, [pc, #128]	; (8011a00 <vTaskStartScheduler+0xb0>)
 8011980:	4820      	ldr	r0, [pc, #128]	; (8011a04 <vTaskStartScheduler+0xb4>)
 8011982:	f7ff fe13 	bl	80115ac <xTaskCreateStatic>
 8011986:	4602      	mov	r2, r0
 8011988:	4b1f      	ldr	r3, [pc, #124]	; (8011a08 <vTaskStartScheduler+0xb8>)
 801198a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801198c:	4b1e      	ldr	r3, [pc, #120]	; (8011a08 <vTaskStartScheduler+0xb8>)
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d002      	beq.n	801199a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011994:	2301      	movs	r3, #1
 8011996:	617b      	str	r3, [r7, #20]
 8011998:	e001      	b.n	801199e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801199a:	2300      	movs	r3, #0
 801199c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801199e:	697b      	ldr	r3, [r7, #20]
 80119a0:	2b01      	cmp	r3, #1
 80119a2:	d102      	bne.n	80119aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80119a4:	f000 fde4 	bl	8012570 <xTimerCreateTimerTask>
 80119a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80119aa:	697b      	ldr	r3, [r7, #20]
 80119ac:	2b01      	cmp	r3, #1
 80119ae:	d115      	bne.n	80119dc <vTaskStartScheduler+0x8c>
 80119b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119b4:	f383 8811 	msr	BASEPRI, r3
 80119b8:	f3bf 8f6f 	isb	sy
 80119bc:	f3bf 8f4f 	dsb	sy
 80119c0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80119c2:	4b12      	ldr	r3, [pc, #72]	; (8011a0c <vTaskStartScheduler+0xbc>)
 80119c4:	f04f 32ff 	mov.w	r2, #4294967295
 80119c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80119ca:	4b11      	ldr	r3, [pc, #68]	; (8011a10 <vTaskStartScheduler+0xc0>)
 80119cc:	2201      	movs	r2, #1
 80119ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80119d0:	4b10      	ldr	r3, [pc, #64]	; (8011a14 <vTaskStartScheduler+0xc4>)
 80119d2:	2200      	movs	r2, #0
 80119d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80119d6:	f001 f99b 	bl	8012d10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80119da:	e00d      	b.n	80119f8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80119dc:	697b      	ldr	r3, [r7, #20]
 80119de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119e2:	d109      	bne.n	80119f8 <vTaskStartScheduler+0xa8>
 80119e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119e8:	f383 8811 	msr	BASEPRI, r3
 80119ec:	f3bf 8f6f 	isb	sy
 80119f0:	f3bf 8f4f 	dsb	sy
 80119f4:	60fb      	str	r3, [r7, #12]
 80119f6:	e7fe      	b.n	80119f6 <vTaskStartScheduler+0xa6>
}
 80119f8:	bf00      	nop
 80119fa:	3718      	adds	r7, #24
 80119fc:	46bd      	mov	sp, r7
 80119fe:	bd80      	pop	{r7, pc}
 8011a00:	08016c7c 	.word	0x08016c7c
 8011a04:	08012019 	.word	0x08012019
 8011a08:	20001378 	.word	0x20001378
 8011a0c:	20001374 	.word	0x20001374
 8011a10:	20001360 	.word	0x20001360
 8011a14:	20001358 	.word	0x20001358

08011a18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011a18:	b480      	push	{r7}
 8011a1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011a1c:	4b04      	ldr	r3, [pc, #16]	; (8011a30 <vTaskSuspendAll+0x18>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	3301      	adds	r3, #1
 8011a22:	4a03      	ldr	r2, [pc, #12]	; (8011a30 <vTaskSuspendAll+0x18>)
 8011a24:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8011a26:	bf00      	nop
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2e:	4770      	bx	lr
 8011a30:	2000137c 	.word	0x2000137c

08011a34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b084      	sub	sp, #16
 8011a38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011a3e:	2300      	movs	r3, #0
 8011a40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011a42:	4b41      	ldr	r3, [pc, #260]	; (8011b48 <xTaskResumeAll+0x114>)
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d109      	bne.n	8011a5e <xTaskResumeAll+0x2a>
 8011a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a4e:	f383 8811 	msr	BASEPRI, r3
 8011a52:	f3bf 8f6f 	isb	sy
 8011a56:	f3bf 8f4f 	dsb	sy
 8011a5a:	603b      	str	r3, [r7, #0]
 8011a5c:	e7fe      	b.n	8011a5c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011a5e:	f001 f9f5 	bl	8012e4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011a62:	4b39      	ldr	r3, [pc, #228]	; (8011b48 <xTaskResumeAll+0x114>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	3b01      	subs	r3, #1
 8011a68:	4a37      	ldr	r2, [pc, #220]	; (8011b48 <xTaskResumeAll+0x114>)
 8011a6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a6c:	4b36      	ldr	r3, [pc, #216]	; (8011b48 <xTaskResumeAll+0x114>)
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d162      	bne.n	8011b3a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011a74:	4b35      	ldr	r3, [pc, #212]	; (8011b4c <xTaskResumeAll+0x118>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d05e      	beq.n	8011b3a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011a7c:	e02f      	b.n	8011ade <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a7e:	4b34      	ldr	r3, [pc, #208]	; (8011b50 <xTaskResumeAll+0x11c>)
 8011a80:	68db      	ldr	r3, [r3, #12]
 8011a82:	68db      	ldr	r3, [r3, #12]
 8011a84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	3318      	adds	r3, #24
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f7fe fd76 	bl	801057c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	3304      	adds	r3, #4
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7fe fd71 	bl	801057c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a9e:	4b2d      	ldr	r3, [pc, #180]	; (8011b54 <xTaskResumeAll+0x120>)
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	429a      	cmp	r2, r3
 8011aa4:	d903      	bls.n	8011aae <xTaskResumeAll+0x7a>
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aaa:	4a2a      	ldr	r2, [pc, #168]	; (8011b54 <xTaskResumeAll+0x120>)
 8011aac:	6013      	str	r3, [r2, #0]
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ab2:	4613      	mov	r3, r2
 8011ab4:	009b      	lsls	r3, r3, #2
 8011ab6:	4413      	add	r3, r2
 8011ab8:	009b      	lsls	r3, r3, #2
 8011aba:	4a27      	ldr	r2, [pc, #156]	; (8011b58 <xTaskResumeAll+0x124>)
 8011abc:	441a      	add	r2, r3
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	3304      	adds	r3, #4
 8011ac2:	4619      	mov	r1, r3
 8011ac4:	4610      	mov	r0, r2
 8011ac6:	f7fe fcfc 	bl	80104c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ace:	4b23      	ldr	r3, [pc, #140]	; (8011b5c <xTaskResumeAll+0x128>)
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ad4:	429a      	cmp	r2, r3
 8011ad6:	d302      	bcc.n	8011ade <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8011ad8:	4b21      	ldr	r3, [pc, #132]	; (8011b60 <xTaskResumeAll+0x12c>)
 8011ada:	2201      	movs	r2, #1
 8011adc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011ade:	4b1c      	ldr	r3, [pc, #112]	; (8011b50 <xTaskResumeAll+0x11c>)
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d1cb      	bne.n	8011a7e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d001      	beq.n	8011af0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011aec:	f000 fb46 	bl	801217c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011af0:	4b1c      	ldr	r3, [pc, #112]	; (8011b64 <xTaskResumeAll+0x130>)
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d010      	beq.n	8011b1e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011afc:	f000 f846 	bl	8011b8c <xTaskIncrementTick>
 8011b00:	4603      	mov	r3, r0
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d002      	beq.n	8011b0c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8011b06:	4b16      	ldr	r3, [pc, #88]	; (8011b60 <xTaskResumeAll+0x12c>)
 8011b08:	2201      	movs	r2, #1
 8011b0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	3b01      	subs	r3, #1
 8011b10:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d1f1      	bne.n	8011afc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8011b18:	4b12      	ldr	r3, [pc, #72]	; (8011b64 <xTaskResumeAll+0x130>)
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011b1e:	4b10      	ldr	r3, [pc, #64]	; (8011b60 <xTaskResumeAll+0x12c>)
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d009      	beq.n	8011b3a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011b26:	2301      	movs	r3, #1
 8011b28:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011b2a:	4b0f      	ldr	r3, [pc, #60]	; (8011b68 <xTaskResumeAll+0x134>)
 8011b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b30:	601a      	str	r2, [r3, #0]
 8011b32:	f3bf 8f4f 	dsb	sy
 8011b36:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011b3a:	f001 f9b5 	bl	8012ea8 <vPortExitCritical>

	return xAlreadyYielded;
 8011b3e:	68bb      	ldr	r3, [r7, #8]
}
 8011b40:	4618      	mov	r0, r3
 8011b42:	3710      	adds	r7, #16
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}
 8011b48:	2000137c 	.word	0x2000137c
 8011b4c:	20001354 	.word	0x20001354
 8011b50:	20001314 	.word	0x20001314
 8011b54:	2000135c 	.word	0x2000135c
 8011b58:	20000e84 	.word	0x20000e84
 8011b5c:	20000e80 	.word	0x20000e80
 8011b60:	20001368 	.word	0x20001368
 8011b64:	20001364 	.word	0x20001364
 8011b68:	e000ed04 	.word	0xe000ed04

08011b6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011b6c:	b480      	push	{r7}
 8011b6e:	b083      	sub	sp, #12
 8011b70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011b72:	4b05      	ldr	r3, [pc, #20]	; (8011b88 <xTaskGetTickCount+0x1c>)
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011b78:	687b      	ldr	r3, [r7, #4]
}
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	370c      	adds	r7, #12
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b84:	4770      	bx	lr
 8011b86:	bf00      	nop
 8011b88:	20001358 	.word	0x20001358

08011b8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b086      	sub	sp, #24
 8011b90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011b92:	2300      	movs	r3, #0
 8011b94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b96:	4b4e      	ldr	r3, [pc, #312]	; (8011cd0 <xTaskIncrementTick+0x144>)
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	f040 8088 	bne.w	8011cb0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011ba0:	4b4c      	ldr	r3, [pc, #304]	; (8011cd4 <xTaskIncrementTick+0x148>)
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	3301      	adds	r3, #1
 8011ba6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011ba8:	4a4a      	ldr	r2, [pc, #296]	; (8011cd4 <xTaskIncrementTick+0x148>)
 8011baa:	693b      	ldr	r3, [r7, #16]
 8011bac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011bae:	693b      	ldr	r3, [r7, #16]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d11f      	bne.n	8011bf4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8011bb4:	4b48      	ldr	r3, [pc, #288]	; (8011cd8 <xTaskIncrementTick+0x14c>)
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d009      	beq.n	8011bd2 <xTaskIncrementTick+0x46>
 8011bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bc2:	f383 8811 	msr	BASEPRI, r3
 8011bc6:	f3bf 8f6f 	isb	sy
 8011bca:	f3bf 8f4f 	dsb	sy
 8011bce:	603b      	str	r3, [r7, #0]
 8011bd0:	e7fe      	b.n	8011bd0 <xTaskIncrementTick+0x44>
 8011bd2:	4b41      	ldr	r3, [pc, #260]	; (8011cd8 <xTaskIncrementTick+0x14c>)
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	60fb      	str	r3, [r7, #12]
 8011bd8:	4b40      	ldr	r3, [pc, #256]	; (8011cdc <xTaskIncrementTick+0x150>)
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	4a3e      	ldr	r2, [pc, #248]	; (8011cd8 <xTaskIncrementTick+0x14c>)
 8011bde:	6013      	str	r3, [r2, #0]
 8011be0:	4a3e      	ldr	r2, [pc, #248]	; (8011cdc <xTaskIncrementTick+0x150>)
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	6013      	str	r3, [r2, #0]
 8011be6:	4b3e      	ldr	r3, [pc, #248]	; (8011ce0 <xTaskIncrementTick+0x154>)
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	3301      	adds	r3, #1
 8011bec:	4a3c      	ldr	r2, [pc, #240]	; (8011ce0 <xTaskIncrementTick+0x154>)
 8011bee:	6013      	str	r3, [r2, #0]
 8011bf0:	f000 fac4 	bl	801217c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011bf4:	4b3b      	ldr	r3, [pc, #236]	; (8011ce4 <xTaskIncrementTick+0x158>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	693a      	ldr	r2, [r7, #16]
 8011bfa:	429a      	cmp	r2, r3
 8011bfc:	d349      	bcc.n	8011c92 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011bfe:	4b36      	ldr	r3, [pc, #216]	; (8011cd8 <xTaskIncrementTick+0x14c>)
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d104      	bne.n	8011c12 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c08:	4b36      	ldr	r3, [pc, #216]	; (8011ce4 <xTaskIncrementTick+0x158>)
 8011c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8011c0e:	601a      	str	r2, [r3, #0]
					break;
 8011c10:	e03f      	b.n	8011c92 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c12:	4b31      	ldr	r3, [pc, #196]	; (8011cd8 <xTaskIncrementTick+0x14c>)
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	68db      	ldr	r3, [r3, #12]
 8011c18:	68db      	ldr	r3, [r3, #12]
 8011c1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011c1c:	68bb      	ldr	r3, [r7, #8]
 8011c1e:	685b      	ldr	r3, [r3, #4]
 8011c20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011c22:	693a      	ldr	r2, [r7, #16]
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	429a      	cmp	r2, r3
 8011c28:	d203      	bcs.n	8011c32 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011c2a:	4a2e      	ldr	r2, [pc, #184]	; (8011ce4 <xTaskIncrementTick+0x158>)
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011c30:	e02f      	b.n	8011c92 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011c32:	68bb      	ldr	r3, [r7, #8]
 8011c34:	3304      	adds	r3, #4
 8011c36:	4618      	mov	r0, r3
 8011c38:	f7fe fca0 	bl	801057c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d004      	beq.n	8011c4e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011c44:	68bb      	ldr	r3, [r7, #8]
 8011c46:	3318      	adds	r3, #24
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f7fe fc97 	bl	801057c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011c4e:	68bb      	ldr	r3, [r7, #8]
 8011c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c52:	4b25      	ldr	r3, [pc, #148]	; (8011ce8 <xTaskIncrementTick+0x15c>)
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	429a      	cmp	r2, r3
 8011c58:	d903      	bls.n	8011c62 <xTaskIncrementTick+0xd6>
 8011c5a:	68bb      	ldr	r3, [r7, #8]
 8011c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c5e:	4a22      	ldr	r2, [pc, #136]	; (8011ce8 <xTaskIncrementTick+0x15c>)
 8011c60:	6013      	str	r3, [r2, #0]
 8011c62:	68bb      	ldr	r3, [r7, #8]
 8011c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c66:	4613      	mov	r3, r2
 8011c68:	009b      	lsls	r3, r3, #2
 8011c6a:	4413      	add	r3, r2
 8011c6c:	009b      	lsls	r3, r3, #2
 8011c6e:	4a1f      	ldr	r2, [pc, #124]	; (8011cec <xTaskIncrementTick+0x160>)
 8011c70:	441a      	add	r2, r3
 8011c72:	68bb      	ldr	r3, [r7, #8]
 8011c74:	3304      	adds	r3, #4
 8011c76:	4619      	mov	r1, r3
 8011c78:	4610      	mov	r0, r2
 8011c7a:	f7fe fc22 	bl	80104c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011c7e:	68bb      	ldr	r3, [r7, #8]
 8011c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c82:	4b1b      	ldr	r3, [pc, #108]	; (8011cf0 <xTaskIncrementTick+0x164>)
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c88:	429a      	cmp	r2, r3
 8011c8a:	d3b8      	bcc.n	8011bfe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8011c8c:	2301      	movs	r3, #1
 8011c8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011c90:	e7b5      	b.n	8011bfe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011c92:	4b17      	ldr	r3, [pc, #92]	; (8011cf0 <xTaskIncrementTick+0x164>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c98:	4914      	ldr	r1, [pc, #80]	; (8011cec <xTaskIncrementTick+0x160>)
 8011c9a:	4613      	mov	r3, r2
 8011c9c:	009b      	lsls	r3, r3, #2
 8011c9e:	4413      	add	r3, r2
 8011ca0:	009b      	lsls	r3, r3, #2
 8011ca2:	440b      	add	r3, r1
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	2b01      	cmp	r3, #1
 8011ca8:	d907      	bls.n	8011cba <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8011caa:	2301      	movs	r3, #1
 8011cac:	617b      	str	r3, [r7, #20]
 8011cae:	e004      	b.n	8011cba <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011cb0:	4b10      	ldr	r3, [pc, #64]	; (8011cf4 <xTaskIncrementTick+0x168>)
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	3301      	adds	r3, #1
 8011cb6:	4a0f      	ldr	r2, [pc, #60]	; (8011cf4 <xTaskIncrementTick+0x168>)
 8011cb8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011cba:	4b0f      	ldr	r3, [pc, #60]	; (8011cf8 <xTaskIncrementTick+0x16c>)
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d001      	beq.n	8011cc6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8011cc2:	2301      	movs	r3, #1
 8011cc4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011cc6:	697b      	ldr	r3, [r7, #20]
}
 8011cc8:	4618      	mov	r0, r3
 8011cca:	3718      	adds	r7, #24
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	bd80      	pop	{r7, pc}
 8011cd0:	2000137c 	.word	0x2000137c
 8011cd4:	20001358 	.word	0x20001358
 8011cd8:	2000130c 	.word	0x2000130c
 8011cdc:	20001310 	.word	0x20001310
 8011ce0:	2000136c 	.word	0x2000136c
 8011ce4:	20001374 	.word	0x20001374
 8011ce8:	2000135c 	.word	0x2000135c
 8011cec:	20000e84 	.word	0x20000e84
 8011cf0:	20000e80 	.word	0x20000e80
 8011cf4:	20001364 	.word	0x20001364
 8011cf8:	20001368 	.word	0x20001368

08011cfc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011cfc:	b480      	push	{r7}
 8011cfe:	b085      	sub	sp, #20
 8011d00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011d02:	4b27      	ldr	r3, [pc, #156]	; (8011da0 <vTaskSwitchContext+0xa4>)
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d003      	beq.n	8011d12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011d0a:	4b26      	ldr	r3, [pc, #152]	; (8011da4 <vTaskSwitchContext+0xa8>)
 8011d0c:	2201      	movs	r2, #1
 8011d0e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011d10:	e040      	b.n	8011d94 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8011d12:	4b24      	ldr	r3, [pc, #144]	; (8011da4 <vTaskSwitchContext+0xa8>)
 8011d14:	2200      	movs	r2, #0
 8011d16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d18:	4b23      	ldr	r3, [pc, #140]	; (8011da8 <vTaskSwitchContext+0xac>)
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	60fb      	str	r3, [r7, #12]
 8011d1e:	e00f      	b.n	8011d40 <vTaskSwitchContext+0x44>
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d109      	bne.n	8011d3a <vTaskSwitchContext+0x3e>
 8011d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d2a:	f383 8811 	msr	BASEPRI, r3
 8011d2e:	f3bf 8f6f 	isb	sy
 8011d32:	f3bf 8f4f 	dsb	sy
 8011d36:	607b      	str	r3, [r7, #4]
 8011d38:	e7fe      	b.n	8011d38 <vTaskSwitchContext+0x3c>
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	3b01      	subs	r3, #1
 8011d3e:	60fb      	str	r3, [r7, #12]
 8011d40:	491a      	ldr	r1, [pc, #104]	; (8011dac <vTaskSwitchContext+0xb0>)
 8011d42:	68fa      	ldr	r2, [r7, #12]
 8011d44:	4613      	mov	r3, r2
 8011d46:	009b      	lsls	r3, r3, #2
 8011d48:	4413      	add	r3, r2
 8011d4a:	009b      	lsls	r3, r3, #2
 8011d4c:	440b      	add	r3, r1
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d0e5      	beq.n	8011d20 <vTaskSwitchContext+0x24>
 8011d54:	68fa      	ldr	r2, [r7, #12]
 8011d56:	4613      	mov	r3, r2
 8011d58:	009b      	lsls	r3, r3, #2
 8011d5a:	4413      	add	r3, r2
 8011d5c:	009b      	lsls	r3, r3, #2
 8011d5e:	4a13      	ldr	r2, [pc, #76]	; (8011dac <vTaskSwitchContext+0xb0>)
 8011d60:	4413      	add	r3, r2
 8011d62:	60bb      	str	r3, [r7, #8]
 8011d64:	68bb      	ldr	r3, [r7, #8]
 8011d66:	685b      	ldr	r3, [r3, #4]
 8011d68:	685a      	ldr	r2, [r3, #4]
 8011d6a:	68bb      	ldr	r3, [r7, #8]
 8011d6c:	605a      	str	r2, [r3, #4]
 8011d6e:	68bb      	ldr	r3, [r7, #8]
 8011d70:	685a      	ldr	r2, [r3, #4]
 8011d72:	68bb      	ldr	r3, [r7, #8]
 8011d74:	3308      	adds	r3, #8
 8011d76:	429a      	cmp	r2, r3
 8011d78:	d104      	bne.n	8011d84 <vTaskSwitchContext+0x88>
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	685b      	ldr	r3, [r3, #4]
 8011d7e:	685a      	ldr	r2, [r3, #4]
 8011d80:	68bb      	ldr	r3, [r7, #8]
 8011d82:	605a      	str	r2, [r3, #4]
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	685b      	ldr	r3, [r3, #4]
 8011d88:	68db      	ldr	r3, [r3, #12]
 8011d8a:	4a09      	ldr	r2, [pc, #36]	; (8011db0 <vTaskSwitchContext+0xb4>)
 8011d8c:	6013      	str	r3, [r2, #0]
 8011d8e:	4a06      	ldr	r2, [pc, #24]	; (8011da8 <vTaskSwitchContext+0xac>)
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	6013      	str	r3, [r2, #0]
}
 8011d94:	bf00      	nop
 8011d96:	3714      	adds	r7, #20
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9e:	4770      	bx	lr
 8011da0:	2000137c 	.word	0x2000137c
 8011da4:	20001368 	.word	0x20001368
 8011da8:	2000135c 	.word	0x2000135c
 8011dac:	20000e84 	.word	0x20000e84
 8011db0:	20000e80 	.word	0x20000e80

08011db4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b084      	sub	sp, #16
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
 8011dbc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d109      	bne.n	8011dd8 <vTaskPlaceOnEventList+0x24>
 8011dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dc8:	f383 8811 	msr	BASEPRI, r3
 8011dcc:	f3bf 8f6f 	isb	sy
 8011dd0:	f3bf 8f4f 	dsb	sy
 8011dd4:	60fb      	str	r3, [r7, #12]
 8011dd6:	e7fe      	b.n	8011dd6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011dd8:	4b07      	ldr	r3, [pc, #28]	; (8011df8 <vTaskPlaceOnEventList+0x44>)
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	3318      	adds	r3, #24
 8011dde:	4619      	mov	r1, r3
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f7fe fb92 	bl	801050a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011de6:	2101      	movs	r1, #1
 8011de8:	6838      	ldr	r0, [r7, #0]
 8011dea:	f000 fb6d 	bl	80124c8 <prvAddCurrentTaskToDelayedList>
}
 8011dee:	bf00      	nop
 8011df0:	3710      	adds	r7, #16
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd80      	pop	{r7, pc}
 8011df6:	bf00      	nop
 8011df8:	20000e80 	.word	0x20000e80

08011dfc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b086      	sub	sp, #24
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	60f8      	str	r0, [r7, #12]
 8011e04:	60b9      	str	r1, [r7, #8]
 8011e06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d109      	bne.n	8011e22 <vTaskPlaceOnEventListRestricted+0x26>
 8011e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e12:	f383 8811 	msr	BASEPRI, r3
 8011e16:	f3bf 8f6f 	isb	sy
 8011e1a:	f3bf 8f4f 	dsb	sy
 8011e1e:	617b      	str	r3, [r7, #20]
 8011e20:	e7fe      	b.n	8011e20 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011e22:	4b0a      	ldr	r3, [pc, #40]	; (8011e4c <vTaskPlaceOnEventListRestricted+0x50>)
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	3318      	adds	r3, #24
 8011e28:	4619      	mov	r1, r3
 8011e2a:	68f8      	ldr	r0, [r7, #12]
 8011e2c:	f7fe fb49 	bl	80104c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d002      	beq.n	8011e3c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8011e36:	f04f 33ff 	mov.w	r3, #4294967295
 8011e3a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011e3c:	6879      	ldr	r1, [r7, #4]
 8011e3e:	68b8      	ldr	r0, [r7, #8]
 8011e40:	f000 fb42 	bl	80124c8 <prvAddCurrentTaskToDelayedList>
	}
 8011e44:	bf00      	nop
 8011e46:	3718      	adds	r7, #24
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}
 8011e4c:	20000e80 	.word	0x20000e80

08011e50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b086      	sub	sp, #24
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	68db      	ldr	r3, [r3, #12]
 8011e5c:	68db      	ldr	r3, [r3, #12]
 8011e5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011e60:	693b      	ldr	r3, [r7, #16]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d109      	bne.n	8011e7a <xTaskRemoveFromEventList+0x2a>
 8011e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e6a:	f383 8811 	msr	BASEPRI, r3
 8011e6e:	f3bf 8f6f 	isb	sy
 8011e72:	f3bf 8f4f 	dsb	sy
 8011e76:	60fb      	str	r3, [r7, #12]
 8011e78:	e7fe      	b.n	8011e78 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011e7a:	693b      	ldr	r3, [r7, #16]
 8011e7c:	3318      	adds	r3, #24
 8011e7e:	4618      	mov	r0, r3
 8011e80:	f7fe fb7c 	bl	801057c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e84:	4b1d      	ldr	r3, [pc, #116]	; (8011efc <xTaskRemoveFromEventList+0xac>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d11d      	bne.n	8011ec8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011e8c:	693b      	ldr	r3, [r7, #16]
 8011e8e:	3304      	adds	r3, #4
 8011e90:	4618      	mov	r0, r3
 8011e92:	f7fe fb73 	bl	801057c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011e96:	693b      	ldr	r3, [r7, #16]
 8011e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e9a:	4b19      	ldr	r3, [pc, #100]	; (8011f00 <xTaskRemoveFromEventList+0xb0>)
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	429a      	cmp	r2, r3
 8011ea0:	d903      	bls.n	8011eaa <xTaskRemoveFromEventList+0x5a>
 8011ea2:	693b      	ldr	r3, [r7, #16]
 8011ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ea6:	4a16      	ldr	r2, [pc, #88]	; (8011f00 <xTaskRemoveFromEventList+0xb0>)
 8011ea8:	6013      	str	r3, [r2, #0]
 8011eaa:	693b      	ldr	r3, [r7, #16]
 8011eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011eae:	4613      	mov	r3, r2
 8011eb0:	009b      	lsls	r3, r3, #2
 8011eb2:	4413      	add	r3, r2
 8011eb4:	009b      	lsls	r3, r3, #2
 8011eb6:	4a13      	ldr	r2, [pc, #76]	; (8011f04 <xTaskRemoveFromEventList+0xb4>)
 8011eb8:	441a      	add	r2, r3
 8011eba:	693b      	ldr	r3, [r7, #16]
 8011ebc:	3304      	adds	r3, #4
 8011ebe:	4619      	mov	r1, r3
 8011ec0:	4610      	mov	r0, r2
 8011ec2:	f7fe fafe 	bl	80104c2 <vListInsertEnd>
 8011ec6:	e005      	b.n	8011ed4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011ec8:	693b      	ldr	r3, [r7, #16]
 8011eca:	3318      	adds	r3, #24
 8011ecc:	4619      	mov	r1, r3
 8011ece:	480e      	ldr	r0, [pc, #56]	; (8011f08 <xTaskRemoveFromEventList+0xb8>)
 8011ed0:	f7fe faf7 	bl	80104c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011ed4:	693b      	ldr	r3, [r7, #16]
 8011ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ed8:	4b0c      	ldr	r3, [pc, #48]	; (8011f0c <xTaskRemoveFromEventList+0xbc>)
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ede:	429a      	cmp	r2, r3
 8011ee0:	d905      	bls.n	8011eee <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011ee2:	2301      	movs	r3, #1
 8011ee4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011ee6:	4b0a      	ldr	r3, [pc, #40]	; (8011f10 <xTaskRemoveFromEventList+0xc0>)
 8011ee8:	2201      	movs	r2, #1
 8011eea:	601a      	str	r2, [r3, #0]
 8011eec:	e001      	b.n	8011ef2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011ef2:	697b      	ldr	r3, [r7, #20]
}
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	3718      	adds	r7, #24
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd80      	pop	{r7, pc}
 8011efc:	2000137c 	.word	0x2000137c
 8011f00:	2000135c 	.word	0x2000135c
 8011f04:	20000e84 	.word	0x20000e84
 8011f08:	20001314 	.word	0x20001314
 8011f0c:	20000e80 	.word	0x20000e80
 8011f10:	20001368 	.word	0x20001368

08011f14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011f14:	b480      	push	{r7}
 8011f16:	b083      	sub	sp, #12
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011f1c:	4b06      	ldr	r3, [pc, #24]	; (8011f38 <vTaskInternalSetTimeOutState+0x24>)
 8011f1e:	681a      	ldr	r2, [r3, #0]
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011f24:	4b05      	ldr	r3, [pc, #20]	; (8011f3c <vTaskInternalSetTimeOutState+0x28>)
 8011f26:	681a      	ldr	r2, [r3, #0]
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	605a      	str	r2, [r3, #4]
}
 8011f2c:	bf00      	nop
 8011f2e:	370c      	adds	r7, #12
 8011f30:	46bd      	mov	sp, r7
 8011f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f36:	4770      	bx	lr
 8011f38:	2000136c 	.word	0x2000136c
 8011f3c:	20001358 	.word	0x20001358

08011f40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b088      	sub	sp, #32
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
 8011f48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d109      	bne.n	8011f64 <xTaskCheckForTimeOut+0x24>
 8011f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f54:	f383 8811 	msr	BASEPRI, r3
 8011f58:	f3bf 8f6f 	isb	sy
 8011f5c:	f3bf 8f4f 	dsb	sy
 8011f60:	613b      	str	r3, [r7, #16]
 8011f62:	e7fe      	b.n	8011f62 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8011f64:	683b      	ldr	r3, [r7, #0]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d109      	bne.n	8011f7e <xTaskCheckForTimeOut+0x3e>
 8011f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f6e:	f383 8811 	msr	BASEPRI, r3
 8011f72:	f3bf 8f6f 	isb	sy
 8011f76:	f3bf 8f4f 	dsb	sy
 8011f7a:	60fb      	str	r3, [r7, #12]
 8011f7c:	e7fe      	b.n	8011f7c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8011f7e:	f000 ff65 	bl	8012e4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011f82:	4b1d      	ldr	r3, [pc, #116]	; (8011ff8 <xTaskCheckForTimeOut+0xb8>)
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	685b      	ldr	r3, [r3, #4]
 8011f8c:	69ba      	ldr	r2, [r7, #24]
 8011f8e:	1ad3      	subs	r3, r2, r3
 8011f90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f9a:	d102      	bne.n	8011fa2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	61fb      	str	r3, [r7, #28]
 8011fa0:	e023      	b.n	8011fea <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	681a      	ldr	r2, [r3, #0]
 8011fa6:	4b15      	ldr	r3, [pc, #84]	; (8011ffc <xTaskCheckForTimeOut+0xbc>)
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	429a      	cmp	r2, r3
 8011fac:	d007      	beq.n	8011fbe <xTaskCheckForTimeOut+0x7e>
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	685b      	ldr	r3, [r3, #4]
 8011fb2:	69ba      	ldr	r2, [r7, #24]
 8011fb4:	429a      	cmp	r2, r3
 8011fb6:	d302      	bcc.n	8011fbe <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011fb8:	2301      	movs	r3, #1
 8011fba:	61fb      	str	r3, [r7, #28]
 8011fbc:	e015      	b.n	8011fea <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011fbe:	683b      	ldr	r3, [r7, #0]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	697a      	ldr	r2, [r7, #20]
 8011fc4:	429a      	cmp	r2, r3
 8011fc6:	d20b      	bcs.n	8011fe0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011fc8:	683b      	ldr	r3, [r7, #0]
 8011fca:	681a      	ldr	r2, [r3, #0]
 8011fcc:	697b      	ldr	r3, [r7, #20]
 8011fce:	1ad2      	subs	r2, r2, r3
 8011fd0:	683b      	ldr	r3, [r7, #0]
 8011fd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011fd4:	6878      	ldr	r0, [r7, #4]
 8011fd6:	f7ff ff9d 	bl	8011f14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011fda:	2300      	movs	r3, #0
 8011fdc:	61fb      	str	r3, [r7, #28]
 8011fde:	e004      	b.n	8011fea <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011fe6:	2301      	movs	r3, #1
 8011fe8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011fea:	f000 ff5d 	bl	8012ea8 <vPortExitCritical>

	return xReturn;
 8011fee:	69fb      	ldr	r3, [r7, #28]
}
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	3720      	adds	r7, #32
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	bd80      	pop	{r7, pc}
 8011ff8:	20001358 	.word	0x20001358
 8011ffc:	2000136c 	.word	0x2000136c

08012000 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012000:	b480      	push	{r7}
 8012002:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012004:	4b03      	ldr	r3, [pc, #12]	; (8012014 <vTaskMissedYield+0x14>)
 8012006:	2201      	movs	r2, #1
 8012008:	601a      	str	r2, [r3, #0]
}
 801200a:	bf00      	nop
 801200c:	46bd      	mov	sp, r7
 801200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012012:	4770      	bx	lr
 8012014:	20001368 	.word	0x20001368

08012018 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b082      	sub	sp, #8
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012020:	f000 f852 	bl	80120c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012024:	4b06      	ldr	r3, [pc, #24]	; (8012040 <prvIdleTask+0x28>)
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	2b01      	cmp	r3, #1
 801202a:	d9f9      	bls.n	8012020 <prvIdleTask+0x8>
			{
				taskYIELD();
 801202c:	4b05      	ldr	r3, [pc, #20]	; (8012044 <prvIdleTask+0x2c>)
 801202e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012032:	601a      	str	r2, [r3, #0]
 8012034:	f3bf 8f4f 	dsb	sy
 8012038:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801203c:	e7f0      	b.n	8012020 <prvIdleTask+0x8>
 801203e:	bf00      	nop
 8012040:	20000e84 	.word	0x20000e84
 8012044:	e000ed04 	.word	0xe000ed04

08012048 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b082      	sub	sp, #8
 801204c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801204e:	2300      	movs	r3, #0
 8012050:	607b      	str	r3, [r7, #4]
 8012052:	e00c      	b.n	801206e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012054:	687a      	ldr	r2, [r7, #4]
 8012056:	4613      	mov	r3, r2
 8012058:	009b      	lsls	r3, r3, #2
 801205a:	4413      	add	r3, r2
 801205c:	009b      	lsls	r3, r3, #2
 801205e:	4a12      	ldr	r2, [pc, #72]	; (80120a8 <prvInitialiseTaskLists+0x60>)
 8012060:	4413      	add	r3, r2
 8012062:	4618      	mov	r0, r3
 8012064:	f7fe fa00 	bl	8010468 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	3301      	adds	r3, #1
 801206c:	607b      	str	r3, [r7, #4]
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	2b37      	cmp	r3, #55	; 0x37
 8012072:	d9ef      	bls.n	8012054 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012074:	480d      	ldr	r0, [pc, #52]	; (80120ac <prvInitialiseTaskLists+0x64>)
 8012076:	f7fe f9f7 	bl	8010468 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801207a:	480d      	ldr	r0, [pc, #52]	; (80120b0 <prvInitialiseTaskLists+0x68>)
 801207c:	f7fe f9f4 	bl	8010468 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012080:	480c      	ldr	r0, [pc, #48]	; (80120b4 <prvInitialiseTaskLists+0x6c>)
 8012082:	f7fe f9f1 	bl	8010468 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012086:	480c      	ldr	r0, [pc, #48]	; (80120b8 <prvInitialiseTaskLists+0x70>)
 8012088:	f7fe f9ee 	bl	8010468 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801208c:	480b      	ldr	r0, [pc, #44]	; (80120bc <prvInitialiseTaskLists+0x74>)
 801208e:	f7fe f9eb 	bl	8010468 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012092:	4b0b      	ldr	r3, [pc, #44]	; (80120c0 <prvInitialiseTaskLists+0x78>)
 8012094:	4a05      	ldr	r2, [pc, #20]	; (80120ac <prvInitialiseTaskLists+0x64>)
 8012096:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012098:	4b0a      	ldr	r3, [pc, #40]	; (80120c4 <prvInitialiseTaskLists+0x7c>)
 801209a:	4a05      	ldr	r2, [pc, #20]	; (80120b0 <prvInitialiseTaskLists+0x68>)
 801209c:	601a      	str	r2, [r3, #0]
}
 801209e:	bf00      	nop
 80120a0:	3708      	adds	r7, #8
 80120a2:	46bd      	mov	sp, r7
 80120a4:	bd80      	pop	{r7, pc}
 80120a6:	bf00      	nop
 80120a8:	20000e84 	.word	0x20000e84
 80120ac:	200012e4 	.word	0x200012e4
 80120b0:	200012f8 	.word	0x200012f8
 80120b4:	20001314 	.word	0x20001314
 80120b8:	20001328 	.word	0x20001328
 80120bc:	20001340 	.word	0x20001340
 80120c0:	2000130c 	.word	0x2000130c
 80120c4:	20001310 	.word	0x20001310

080120c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b082      	sub	sp, #8
 80120cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80120ce:	e019      	b.n	8012104 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80120d0:	f000 febc 	bl	8012e4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80120d4:	4b0f      	ldr	r3, [pc, #60]	; (8012114 <prvCheckTasksWaitingTermination+0x4c>)
 80120d6:	68db      	ldr	r3, [r3, #12]
 80120d8:	68db      	ldr	r3, [r3, #12]
 80120da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	3304      	adds	r3, #4
 80120e0:	4618      	mov	r0, r3
 80120e2:	f7fe fa4b 	bl	801057c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80120e6:	4b0c      	ldr	r3, [pc, #48]	; (8012118 <prvCheckTasksWaitingTermination+0x50>)
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	3b01      	subs	r3, #1
 80120ec:	4a0a      	ldr	r2, [pc, #40]	; (8012118 <prvCheckTasksWaitingTermination+0x50>)
 80120ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80120f0:	4b0a      	ldr	r3, [pc, #40]	; (801211c <prvCheckTasksWaitingTermination+0x54>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	3b01      	subs	r3, #1
 80120f6:	4a09      	ldr	r2, [pc, #36]	; (801211c <prvCheckTasksWaitingTermination+0x54>)
 80120f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80120fa:	f000 fed5 	bl	8012ea8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80120fe:	6878      	ldr	r0, [r7, #4]
 8012100:	f000 f80e 	bl	8012120 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012104:	4b05      	ldr	r3, [pc, #20]	; (801211c <prvCheckTasksWaitingTermination+0x54>)
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d1e1      	bne.n	80120d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801210c:	bf00      	nop
 801210e:	3708      	adds	r7, #8
 8012110:	46bd      	mov	sp, r7
 8012112:	bd80      	pop	{r7, pc}
 8012114:	20001328 	.word	0x20001328
 8012118:	20001354 	.word	0x20001354
 801211c:	2000133c 	.word	0x2000133c

08012120 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012120:	b580      	push	{r7, lr}
 8012122:	b084      	sub	sp, #16
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801212e:	2b00      	cmp	r3, #0
 8012130:	d108      	bne.n	8012144 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012136:	4618      	mov	r0, r3
 8012138:	f001 f864 	bl	8013204 <vPortFree>
				vPortFree( pxTCB );
 801213c:	6878      	ldr	r0, [r7, #4]
 801213e:	f001 f861 	bl	8013204 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012142:	e017      	b.n	8012174 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801214a:	2b01      	cmp	r3, #1
 801214c:	d103      	bne.n	8012156 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	f001 f858 	bl	8013204 <vPortFree>
	}
 8012154:	e00e      	b.n	8012174 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801215c:	2b02      	cmp	r3, #2
 801215e:	d009      	beq.n	8012174 <prvDeleteTCB+0x54>
 8012160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012164:	f383 8811 	msr	BASEPRI, r3
 8012168:	f3bf 8f6f 	isb	sy
 801216c:	f3bf 8f4f 	dsb	sy
 8012170:	60fb      	str	r3, [r7, #12]
 8012172:	e7fe      	b.n	8012172 <prvDeleteTCB+0x52>
	}
 8012174:	bf00      	nop
 8012176:	3710      	adds	r7, #16
 8012178:	46bd      	mov	sp, r7
 801217a:	bd80      	pop	{r7, pc}

0801217c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801217c:	b480      	push	{r7}
 801217e:	b083      	sub	sp, #12
 8012180:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012182:	4b0c      	ldr	r3, [pc, #48]	; (80121b4 <prvResetNextTaskUnblockTime+0x38>)
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d104      	bne.n	8012196 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801218c:	4b0a      	ldr	r3, [pc, #40]	; (80121b8 <prvResetNextTaskUnblockTime+0x3c>)
 801218e:	f04f 32ff 	mov.w	r2, #4294967295
 8012192:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012194:	e008      	b.n	80121a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012196:	4b07      	ldr	r3, [pc, #28]	; (80121b4 <prvResetNextTaskUnblockTime+0x38>)
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	68db      	ldr	r3, [r3, #12]
 801219c:	68db      	ldr	r3, [r3, #12]
 801219e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	685b      	ldr	r3, [r3, #4]
 80121a4:	4a04      	ldr	r2, [pc, #16]	; (80121b8 <prvResetNextTaskUnblockTime+0x3c>)
 80121a6:	6013      	str	r3, [r2, #0]
}
 80121a8:	bf00      	nop
 80121aa:	370c      	adds	r7, #12
 80121ac:	46bd      	mov	sp, r7
 80121ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b2:	4770      	bx	lr
 80121b4:	2000130c 	.word	0x2000130c
 80121b8:	20001374 	.word	0x20001374

080121bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80121bc:	b480      	push	{r7}
 80121be:	b083      	sub	sp, #12
 80121c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80121c2:	4b0b      	ldr	r3, [pc, #44]	; (80121f0 <xTaskGetSchedulerState+0x34>)
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d102      	bne.n	80121d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80121ca:	2301      	movs	r3, #1
 80121cc:	607b      	str	r3, [r7, #4]
 80121ce:	e008      	b.n	80121e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80121d0:	4b08      	ldr	r3, [pc, #32]	; (80121f4 <xTaskGetSchedulerState+0x38>)
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d102      	bne.n	80121de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80121d8:	2302      	movs	r3, #2
 80121da:	607b      	str	r3, [r7, #4]
 80121dc:	e001      	b.n	80121e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80121de:	2300      	movs	r3, #0
 80121e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80121e2:	687b      	ldr	r3, [r7, #4]
	}
 80121e4:	4618      	mov	r0, r3
 80121e6:	370c      	adds	r7, #12
 80121e8:	46bd      	mov	sp, r7
 80121ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ee:	4770      	bx	lr
 80121f0:	20001360 	.word	0x20001360
 80121f4:	2000137c 	.word	0x2000137c

080121f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b084      	sub	sp, #16
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012204:	2300      	movs	r3, #0
 8012206:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d051      	beq.n	80122b2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801220e:	68bb      	ldr	r3, [r7, #8]
 8012210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012212:	4b2a      	ldr	r3, [pc, #168]	; (80122bc <xTaskPriorityInherit+0xc4>)
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012218:	429a      	cmp	r2, r3
 801221a:	d241      	bcs.n	80122a0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801221c:	68bb      	ldr	r3, [r7, #8]
 801221e:	699b      	ldr	r3, [r3, #24]
 8012220:	2b00      	cmp	r3, #0
 8012222:	db06      	blt.n	8012232 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012224:	4b25      	ldr	r3, [pc, #148]	; (80122bc <xTaskPriorityInherit+0xc4>)
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801222a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801222e:	68bb      	ldr	r3, [r7, #8]
 8012230:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012232:	68bb      	ldr	r3, [r7, #8]
 8012234:	6959      	ldr	r1, [r3, #20]
 8012236:	68bb      	ldr	r3, [r7, #8]
 8012238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801223a:	4613      	mov	r3, r2
 801223c:	009b      	lsls	r3, r3, #2
 801223e:	4413      	add	r3, r2
 8012240:	009b      	lsls	r3, r3, #2
 8012242:	4a1f      	ldr	r2, [pc, #124]	; (80122c0 <xTaskPriorityInherit+0xc8>)
 8012244:	4413      	add	r3, r2
 8012246:	4299      	cmp	r1, r3
 8012248:	d122      	bne.n	8012290 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801224a:	68bb      	ldr	r3, [r7, #8]
 801224c:	3304      	adds	r3, #4
 801224e:	4618      	mov	r0, r3
 8012250:	f7fe f994 	bl	801057c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012254:	4b19      	ldr	r3, [pc, #100]	; (80122bc <xTaskPriorityInherit+0xc4>)
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801225a:	68bb      	ldr	r3, [r7, #8]
 801225c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801225e:	68bb      	ldr	r3, [r7, #8]
 8012260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012262:	4b18      	ldr	r3, [pc, #96]	; (80122c4 <xTaskPriorityInherit+0xcc>)
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	429a      	cmp	r2, r3
 8012268:	d903      	bls.n	8012272 <xTaskPriorityInherit+0x7a>
 801226a:	68bb      	ldr	r3, [r7, #8]
 801226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801226e:	4a15      	ldr	r2, [pc, #84]	; (80122c4 <xTaskPriorityInherit+0xcc>)
 8012270:	6013      	str	r3, [r2, #0]
 8012272:	68bb      	ldr	r3, [r7, #8]
 8012274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012276:	4613      	mov	r3, r2
 8012278:	009b      	lsls	r3, r3, #2
 801227a:	4413      	add	r3, r2
 801227c:	009b      	lsls	r3, r3, #2
 801227e:	4a10      	ldr	r2, [pc, #64]	; (80122c0 <xTaskPriorityInherit+0xc8>)
 8012280:	441a      	add	r2, r3
 8012282:	68bb      	ldr	r3, [r7, #8]
 8012284:	3304      	adds	r3, #4
 8012286:	4619      	mov	r1, r3
 8012288:	4610      	mov	r0, r2
 801228a:	f7fe f91a 	bl	80104c2 <vListInsertEnd>
 801228e:	e004      	b.n	801229a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012290:	4b0a      	ldr	r3, [pc, #40]	; (80122bc <xTaskPriorityInherit+0xc4>)
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012296:	68bb      	ldr	r3, [r7, #8]
 8012298:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801229a:	2301      	movs	r3, #1
 801229c:	60fb      	str	r3, [r7, #12]
 801229e:	e008      	b.n	80122b2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80122a0:	68bb      	ldr	r3, [r7, #8]
 80122a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80122a4:	4b05      	ldr	r3, [pc, #20]	; (80122bc <xTaskPriorityInherit+0xc4>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122aa:	429a      	cmp	r2, r3
 80122ac:	d201      	bcs.n	80122b2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80122ae:	2301      	movs	r3, #1
 80122b0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80122b2:	68fb      	ldr	r3, [r7, #12]
	}
 80122b4:	4618      	mov	r0, r3
 80122b6:	3710      	adds	r7, #16
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bd80      	pop	{r7, pc}
 80122bc:	20000e80 	.word	0x20000e80
 80122c0:	20000e84 	.word	0x20000e84
 80122c4:	2000135c 	.word	0x2000135c

080122c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b086      	sub	sp, #24
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80122d4:	2300      	movs	r3, #0
 80122d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d054      	beq.n	8012388 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80122de:	4b2d      	ldr	r3, [pc, #180]	; (8012394 <xTaskPriorityDisinherit+0xcc>)
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	693a      	ldr	r2, [r7, #16]
 80122e4:	429a      	cmp	r2, r3
 80122e6:	d009      	beq.n	80122fc <xTaskPriorityDisinherit+0x34>
 80122e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122ec:	f383 8811 	msr	BASEPRI, r3
 80122f0:	f3bf 8f6f 	isb	sy
 80122f4:	f3bf 8f4f 	dsb	sy
 80122f8:	60fb      	str	r3, [r7, #12]
 80122fa:	e7fe      	b.n	80122fa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80122fc:	693b      	ldr	r3, [r7, #16]
 80122fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012300:	2b00      	cmp	r3, #0
 8012302:	d109      	bne.n	8012318 <xTaskPriorityDisinherit+0x50>
 8012304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012308:	f383 8811 	msr	BASEPRI, r3
 801230c:	f3bf 8f6f 	isb	sy
 8012310:	f3bf 8f4f 	dsb	sy
 8012314:	60bb      	str	r3, [r7, #8]
 8012316:	e7fe      	b.n	8012316 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8012318:	693b      	ldr	r3, [r7, #16]
 801231a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801231c:	1e5a      	subs	r2, r3, #1
 801231e:	693b      	ldr	r3, [r7, #16]
 8012320:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012322:	693b      	ldr	r3, [r7, #16]
 8012324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012326:	693b      	ldr	r3, [r7, #16]
 8012328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801232a:	429a      	cmp	r2, r3
 801232c:	d02c      	beq.n	8012388 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801232e:	693b      	ldr	r3, [r7, #16]
 8012330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012332:	2b00      	cmp	r3, #0
 8012334:	d128      	bne.n	8012388 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012336:	693b      	ldr	r3, [r7, #16]
 8012338:	3304      	adds	r3, #4
 801233a:	4618      	mov	r0, r3
 801233c:	f7fe f91e 	bl	801057c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012340:	693b      	ldr	r3, [r7, #16]
 8012342:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012344:	693b      	ldr	r3, [r7, #16]
 8012346:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012348:	693b      	ldr	r3, [r7, #16]
 801234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801234c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012350:	693b      	ldr	r3, [r7, #16]
 8012352:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012354:	693b      	ldr	r3, [r7, #16]
 8012356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012358:	4b0f      	ldr	r3, [pc, #60]	; (8012398 <xTaskPriorityDisinherit+0xd0>)
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	429a      	cmp	r2, r3
 801235e:	d903      	bls.n	8012368 <xTaskPriorityDisinherit+0xa0>
 8012360:	693b      	ldr	r3, [r7, #16]
 8012362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012364:	4a0c      	ldr	r2, [pc, #48]	; (8012398 <xTaskPriorityDisinherit+0xd0>)
 8012366:	6013      	str	r3, [r2, #0]
 8012368:	693b      	ldr	r3, [r7, #16]
 801236a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801236c:	4613      	mov	r3, r2
 801236e:	009b      	lsls	r3, r3, #2
 8012370:	4413      	add	r3, r2
 8012372:	009b      	lsls	r3, r3, #2
 8012374:	4a09      	ldr	r2, [pc, #36]	; (801239c <xTaskPriorityDisinherit+0xd4>)
 8012376:	441a      	add	r2, r3
 8012378:	693b      	ldr	r3, [r7, #16]
 801237a:	3304      	adds	r3, #4
 801237c:	4619      	mov	r1, r3
 801237e:	4610      	mov	r0, r2
 8012380:	f7fe f89f 	bl	80104c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012384:	2301      	movs	r3, #1
 8012386:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012388:	697b      	ldr	r3, [r7, #20]
	}
 801238a:	4618      	mov	r0, r3
 801238c:	3718      	adds	r7, #24
 801238e:	46bd      	mov	sp, r7
 8012390:	bd80      	pop	{r7, pc}
 8012392:	bf00      	nop
 8012394:	20000e80 	.word	0x20000e80
 8012398:	2000135c 	.word	0x2000135c
 801239c:	20000e84 	.word	0x20000e84

080123a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b088      	sub	sp, #32
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
 80123a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80123ae:	2301      	movs	r3, #1
 80123b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d068      	beq.n	801248a <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80123b8:	69bb      	ldr	r3, [r7, #24]
 80123ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d109      	bne.n	80123d4 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80123c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123c4:	f383 8811 	msr	BASEPRI, r3
 80123c8:	f3bf 8f6f 	isb	sy
 80123cc:	f3bf 8f4f 	dsb	sy
 80123d0:	60fb      	str	r3, [r7, #12]
 80123d2:	e7fe      	b.n	80123d2 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80123d4:	69bb      	ldr	r3, [r7, #24]
 80123d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80123d8:	683a      	ldr	r2, [r7, #0]
 80123da:	429a      	cmp	r2, r3
 80123dc:	d902      	bls.n	80123e4 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	61fb      	str	r3, [r7, #28]
 80123e2:	e002      	b.n	80123ea <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80123e4:	69bb      	ldr	r3, [r7, #24]
 80123e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80123e8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80123ea:	69bb      	ldr	r3, [r7, #24]
 80123ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123ee:	69fa      	ldr	r2, [r7, #28]
 80123f0:	429a      	cmp	r2, r3
 80123f2:	d04a      	beq.n	801248a <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80123f4:	69bb      	ldr	r3, [r7, #24]
 80123f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80123f8:	697a      	ldr	r2, [r7, #20]
 80123fa:	429a      	cmp	r2, r3
 80123fc:	d145      	bne.n	801248a <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80123fe:	4b25      	ldr	r3, [pc, #148]	; (8012494 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	69ba      	ldr	r2, [r7, #24]
 8012404:	429a      	cmp	r2, r3
 8012406:	d109      	bne.n	801241c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8012408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801240c:	f383 8811 	msr	BASEPRI, r3
 8012410:	f3bf 8f6f 	isb	sy
 8012414:	f3bf 8f4f 	dsb	sy
 8012418:	60bb      	str	r3, [r7, #8]
 801241a:	e7fe      	b.n	801241a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801241c:	69bb      	ldr	r3, [r7, #24]
 801241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012420:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012422:	69bb      	ldr	r3, [r7, #24]
 8012424:	69fa      	ldr	r2, [r7, #28]
 8012426:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012428:	69bb      	ldr	r3, [r7, #24]
 801242a:	699b      	ldr	r3, [r3, #24]
 801242c:	2b00      	cmp	r3, #0
 801242e:	db04      	blt.n	801243a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012430:	69fb      	ldr	r3, [r7, #28]
 8012432:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012436:	69bb      	ldr	r3, [r7, #24]
 8012438:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801243a:	69bb      	ldr	r3, [r7, #24]
 801243c:	6959      	ldr	r1, [r3, #20]
 801243e:	693a      	ldr	r2, [r7, #16]
 8012440:	4613      	mov	r3, r2
 8012442:	009b      	lsls	r3, r3, #2
 8012444:	4413      	add	r3, r2
 8012446:	009b      	lsls	r3, r3, #2
 8012448:	4a13      	ldr	r2, [pc, #76]	; (8012498 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801244a:	4413      	add	r3, r2
 801244c:	4299      	cmp	r1, r3
 801244e:	d11c      	bne.n	801248a <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012450:	69bb      	ldr	r3, [r7, #24]
 8012452:	3304      	adds	r3, #4
 8012454:	4618      	mov	r0, r3
 8012456:	f7fe f891 	bl	801057c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801245a:	69bb      	ldr	r3, [r7, #24]
 801245c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801245e:	4b0f      	ldr	r3, [pc, #60]	; (801249c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	429a      	cmp	r2, r3
 8012464:	d903      	bls.n	801246e <vTaskPriorityDisinheritAfterTimeout+0xce>
 8012466:	69bb      	ldr	r3, [r7, #24]
 8012468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801246a:	4a0c      	ldr	r2, [pc, #48]	; (801249c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801246c:	6013      	str	r3, [r2, #0]
 801246e:	69bb      	ldr	r3, [r7, #24]
 8012470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012472:	4613      	mov	r3, r2
 8012474:	009b      	lsls	r3, r3, #2
 8012476:	4413      	add	r3, r2
 8012478:	009b      	lsls	r3, r3, #2
 801247a:	4a07      	ldr	r2, [pc, #28]	; (8012498 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801247c:	441a      	add	r2, r3
 801247e:	69bb      	ldr	r3, [r7, #24]
 8012480:	3304      	adds	r3, #4
 8012482:	4619      	mov	r1, r3
 8012484:	4610      	mov	r0, r2
 8012486:	f7fe f81c 	bl	80104c2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801248a:	bf00      	nop
 801248c:	3720      	adds	r7, #32
 801248e:	46bd      	mov	sp, r7
 8012490:	bd80      	pop	{r7, pc}
 8012492:	bf00      	nop
 8012494:	20000e80 	.word	0x20000e80
 8012498:	20000e84 	.word	0x20000e84
 801249c:	2000135c 	.word	0x2000135c

080124a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80124a0:	b480      	push	{r7}
 80124a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80124a4:	4b07      	ldr	r3, [pc, #28]	; (80124c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d004      	beq.n	80124b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80124ac:	4b05      	ldr	r3, [pc, #20]	; (80124c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80124b2:	3201      	adds	r2, #1
 80124b4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80124b6:	4b03      	ldr	r3, [pc, #12]	; (80124c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80124b8:	681b      	ldr	r3, [r3, #0]
	}
 80124ba:	4618      	mov	r0, r3
 80124bc:	46bd      	mov	sp, r7
 80124be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c2:	4770      	bx	lr
 80124c4:	20000e80 	.word	0x20000e80

080124c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b084      	sub	sp, #16
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
 80124d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80124d2:	4b21      	ldr	r3, [pc, #132]	; (8012558 <prvAddCurrentTaskToDelayedList+0x90>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80124d8:	4b20      	ldr	r3, [pc, #128]	; (801255c <prvAddCurrentTaskToDelayedList+0x94>)
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	3304      	adds	r3, #4
 80124de:	4618      	mov	r0, r3
 80124e0:	f7fe f84c 	bl	801057c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124ea:	d10a      	bne.n	8012502 <prvAddCurrentTaskToDelayedList+0x3a>
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d007      	beq.n	8012502 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80124f2:	4b1a      	ldr	r3, [pc, #104]	; (801255c <prvAddCurrentTaskToDelayedList+0x94>)
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	3304      	adds	r3, #4
 80124f8:	4619      	mov	r1, r3
 80124fa:	4819      	ldr	r0, [pc, #100]	; (8012560 <prvAddCurrentTaskToDelayedList+0x98>)
 80124fc:	f7fd ffe1 	bl	80104c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012500:	e026      	b.n	8012550 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012502:	68fa      	ldr	r2, [r7, #12]
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	4413      	add	r3, r2
 8012508:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801250a:	4b14      	ldr	r3, [pc, #80]	; (801255c <prvAddCurrentTaskToDelayedList+0x94>)
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	68ba      	ldr	r2, [r7, #8]
 8012510:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012512:	68ba      	ldr	r2, [r7, #8]
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	429a      	cmp	r2, r3
 8012518:	d209      	bcs.n	801252e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801251a:	4b12      	ldr	r3, [pc, #72]	; (8012564 <prvAddCurrentTaskToDelayedList+0x9c>)
 801251c:	681a      	ldr	r2, [r3, #0]
 801251e:	4b0f      	ldr	r3, [pc, #60]	; (801255c <prvAddCurrentTaskToDelayedList+0x94>)
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	3304      	adds	r3, #4
 8012524:	4619      	mov	r1, r3
 8012526:	4610      	mov	r0, r2
 8012528:	f7fd ffef 	bl	801050a <vListInsert>
}
 801252c:	e010      	b.n	8012550 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801252e:	4b0e      	ldr	r3, [pc, #56]	; (8012568 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012530:	681a      	ldr	r2, [r3, #0]
 8012532:	4b0a      	ldr	r3, [pc, #40]	; (801255c <prvAddCurrentTaskToDelayedList+0x94>)
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	3304      	adds	r3, #4
 8012538:	4619      	mov	r1, r3
 801253a:	4610      	mov	r0, r2
 801253c:	f7fd ffe5 	bl	801050a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012540:	4b0a      	ldr	r3, [pc, #40]	; (801256c <prvAddCurrentTaskToDelayedList+0xa4>)
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	68ba      	ldr	r2, [r7, #8]
 8012546:	429a      	cmp	r2, r3
 8012548:	d202      	bcs.n	8012550 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801254a:	4a08      	ldr	r2, [pc, #32]	; (801256c <prvAddCurrentTaskToDelayedList+0xa4>)
 801254c:	68bb      	ldr	r3, [r7, #8]
 801254e:	6013      	str	r3, [r2, #0]
}
 8012550:	bf00      	nop
 8012552:	3710      	adds	r7, #16
 8012554:	46bd      	mov	sp, r7
 8012556:	bd80      	pop	{r7, pc}
 8012558:	20001358 	.word	0x20001358
 801255c:	20000e80 	.word	0x20000e80
 8012560:	20001340 	.word	0x20001340
 8012564:	20001310 	.word	0x20001310
 8012568:	2000130c 	.word	0x2000130c
 801256c:	20001374 	.word	0x20001374

08012570 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b08a      	sub	sp, #40	; 0x28
 8012574:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012576:	2300      	movs	r3, #0
 8012578:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801257a:	f000 faff 	bl	8012b7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801257e:	4b1c      	ldr	r3, [pc, #112]	; (80125f0 <xTimerCreateTimerTask+0x80>)
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d021      	beq.n	80125ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012586:	2300      	movs	r3, #0
 8012588:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801258a:	2300      	movs	r3, #0
 801258c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801258e:	1d3a      	adds	r2, r7, #4
 8012590:	f107 0108 	add.w	r1, r7, #8
 8012594:	f107 030c 	add.w	r3, r7, #12
 8012598:	4618      	mov	r0, r3
 801259a:	f7fd ff4b 	bl	8010434 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801259e:	6879      	ldr	r1, [r7, #4]
 80125a0:	68bb      	ldr	r3, [r7, #8]
 80125a2:	68fa      	ldr	r2, [r7, #12]
 80125a4:	9202      	str	r2, [sp, #8]
 80125a6:	9301      	str	r3, [sp, #4]
 80125a8:	2302      	movs	r3, #2
 80125aa:	9300      	str	r3, [sp, #0]
 80125ac:	2300      	movs	r3, #0
 80125ae:	460a      	mov	r2, r1
 80125b0:	4910      	ldr	r1, [pc, #64]	; (80125f4 <xTimerCreateTimerTask+0x84>)
 80125b2:	4811      	ldr	r0, [pc, #68]	; (80125f8 <xTimerCreateTimerTask+0x88>)
 80125b4:	f7fe fffa 	bl	80115ac <xTaskCreateStatic>
 80125b8:	4602      	mov	r2, r0
 80125ba:	4b10      	ldr	r3, [pc, #64]	; (80125fc <xTimerCreateTimerTask+0x8c>)
 80125bc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80125be:	4b0f      	ldr	r3, [pc, #60]	; (80125fc <xTimerCreateTimerTask+0x8c>)
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d001      	beq.n	80125ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80125c6:	2301      	movs	r3, #1
 80125c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d109      	bne.n	80125e4 <xTimerCreateTimerTask+0x74>
 80125d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125d4:	f383 8811 	msr	BASEPRI, r3
 80125d8:	f3bf 8f6f 	isb	sy
 80125dc:	f3bf 8f4f 	dsb	sy
 80125e0:	613b      	str	r3, [r7, #16]
 80125e2:	e7fe      	b.n	80125e2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80125e4:	697b      	ldr	r3, [r7, #20]
}
 80125e6:	4618      	mov	r0, r3
 80125e8:	3718      	adds	r7, #24
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bd80      	pop	{r7, pc}
 80125ee:	bf00      	nop
 80125f0:	200013b0 	.word	0x200013b0
 80125f4:	08016c84 	.word	0x08016c84
 80125f8:	08012731 	.word	0x08012731
 80125fc:	200013b4 	.word	0x200013b4

08012600 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012600:	b580      	push	{r7, lr}
 8012602:	b08a      	sub	sp, #40	; 0x28
 8012604:	af00      	add	r7, sp, #0
 8012606:	60f8      	str	r0, [r7, #12]
 8012608:	60b9      	str	r1, [r7, #8]
 801260a:	607a      	str	r2, [r7, #4]
 801260c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801260e:	2300      	movs	r3, #0
 8012610:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d109      	bne.n	801262c <xTimerGenericCommand+0x2c>
 8012618:	f04f 0350 	mov.w	r3, #80	; 0x50
 801261c:	f383 8811 	msr	BASEPRI, r3
 8012620:	f3bf 8f6f 	isb	sy
 8012624:	f3bf 8f4f 	dsb	sy
 8012628:	623b      	str	r3, [r7, #32]
 801262a:	e7fe      	b.n	801262a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801262c:	4b19      	ldr	r3, [pc, #100]	; (8012694 <xTimerGenericCommand+0x94>)
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d02a      	beq.n	801268a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012634:	68bb      	ldr	r3, [r7, #8]
 8012636:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012640:	68bb      	ldr	r3, [r7, #8]
 8012642:	2b05      	cmp	r3, #5
 8012644:	dc18      	bgt.n	8012678 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012646:	f7ff fdb9 	bl	80121bc <xTaskGetSchedulerState>
 801264a:	4603      	mov	r3, r0
 801264c:	2b02      	cmp	r3, #2
 801264e:	d109      	bne.n	8012664 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012650:	4b10      	ldr	r3, [pc, #64]	; (8012694 <xTimerGenericCommand+0x94>)
 8012652:	6818      	ldr	r0, [r3, #0]
 8012654:	f107 0110 	add.w	r1, r7, #16
 8012658:	2300      	movs	r3, #0
 801265a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801265c:	f7fe f95c 	bl	8010918 <xQueueGenericSend>
 8012660:	6278      	str	r0, [r7, #36]	; 0x24
 8012662:	e012      	b.n	801268a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012664:	4b0b      	ldr	r3, [pc, #44]	; (8012694 <xTimerGenericCommand+0x94>)
 8012666:	6818      	ldr	r0, [r3, #0]
 8012668:	f107 0110 	add.w	r1, r7, #16
 801266c:	2300      	movs	r3, #0
 801266e:	2200      	movs	r2, #0
 8012670:	f7fe f952 	bl	8010918 <xQueueGenericSend>
 8012674:	6278      	str	r0, [r7, #36]	; 0x24
 8012676:	e008      	b.n	801268a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012678:	4b06      	ldr	r3, [pc, #24]	; (8012694 <xTimerGenericCommand+0x94>)
 801267a:	6818      	ldr	r0, [r3, #0]
 801267c:	f107 0110 	add.w	r1, r7, #16
 8012680:	2300      	movs	r3, #0
 8012682:	683a      	ldr	r2, [r7, #0]
 8012684:	f7fe fa42 	bl	8010b0c <xQueueGenericSendFromISR>
 8012688:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801268c:	4618      	mov	r0, r3
 801268e:	3728      	adds	r7, #40	; 0x28
 8012690:	46bd      	mov	sp, r7
 8012692:	bd80      	pop	{r7, pc}
 8012694:	200013b0 	.word	0x200013b0

08012698 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b088      	sub	sp, #32
 801269c:	af02      	add	r7, sp, #8
 801269e:	6078      	str	r0, [r7, #4]
 80126a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80126a2:	4b22      	ldr	r3, [pc, #136]	; (801272c <prvProcessExpiredTimer+0x94>)
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	68db      	ldr	r3, [r3, #12]
 80126a8:	68db      	ldr	r3, [r3, #12]
 80126aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80126ac:	697b      	ldr	r3, [r7, #20]
 80126ae:	3304      	adds	r3, #4
 80126b0:	4618      	mov	r0, r3
 80126b2:	f7fd ff63 	bl	801057c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80126b6:	697b      	ldr	r3, [r7, #20]
 80126b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126bc:	f003 0304 	and.w	r3, r3, #4
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d021      	beq.n	8012708 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80126c4:	697b      	ldr	r3, [r7, #20]
 80126c6:	699a      	ldr	r2, [r3, #24]
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	18d1      	adds	r1, r2, r3
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	683a      	ldr	r2, [r7, #0]
 80126d0:	6978      	ldr	r0, [r7, #20]
 80126d2:	f000 f8d1 	bl	8012878 <prvInsertTimerInActiveList>
 80126d6:	4603      	mov	r3, r0
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d01e      	beq.n	801271a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80126dc:	2300      	movs	r3, #0
 80126de:	9300      	str	r3, [sp, #0]
 80126e0:	2300      	movs	r3, #0
 80126e2:	687a      	ldr	r2, [r7, #4]
 80126e4:	2100      	movs	r1, #0
 80126e6:	6978      	ldr	r0, [r7, #20]
 80126e8:	f7ff ff8a 	bl	8012600 <xTimerGenericCommand>
 80126ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80126ee:	693b      	ldr	r3, [r7, #16]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d112      	bne.n	801271a <prvProcessExpiredTimer+0x82>
 80126f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126f8:	f383 8811 	msr	BASEPRI, r3
 80126fc:	f3bf 8f6f 	isb	sy
 8012700:	f3bf 8f4f 	dsb	sy
 8012704:	60fb      	str	r3, [r7, #12]
 8012706:	e7fe      	b.n	8012706 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012708:	697b      	ldr	r3, [r7, #20]
 801270a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801270e:	f023 0301 	bic.w	r3, r3, #1
 8012712:	b2da      	uxtb	r2, r3
 8012714:	697b      	ldr	r3, [r7, #20]
 8012716:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801271a:	697b      	ldr	r3, [r7, #20]
 801271c:	6a1b      	ldr	r3, [r3, #32]
 801271e:	6978      	ldr	r0, [r7, #20]
 8012720:	4798      	blx	r3
}
 8012722:	bf00      	nop
 8012724:	3718      	adds	r7, #24
 8012726:	46bd      	mov	sp, r7
 8012728:	bd80      	pop	{r7, pc}
 801272a:	bf00      	nop
 801272c:	200013a8 	.word	0x200013a8

08012730 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b084      	sub	sp, #16
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012738:	f107 0308 	add.w	r3, r7, #8
 801273c:	4618      	mov	r0, r3
 801273e:	f000 f857 	bl	80127f0 <prvGetNextExpireTime>
 8012742:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012744:	68bb      	ldr	r3, [r7, #8]
 8012746:	4619      	mov	r1, r3
 8012748:	68f8      	ldr	r0, [r7, #12]
 801274a:	f000 f803 	bl	8012754 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801274e:	f000 f8d5 	bl	80128fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012752:	e7f1      	b.n	8012738 <prvTimerTask+0x8>

08012754 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012754:	b580      	push	{r7, lr}
 8012756:	b084      	sub	sp, #16
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
 801275c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801275e:	f7ff f95b 	bl	8011a18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012762:	f107 0308 	add.w	r3, r7, #8
 8012766:	4618      	mov	r0, r3
 8012768:	f000 f866 	bl	8012838 <prvSampleTimeNow>
 801276c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801276e:	68bb      	ldr	r3, [r7, #8]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d130      	bne.n	80127d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012774:	683b      	ldr	r3, [r7, #0]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d10a      	bne.n	8012790 <prvProcessTimerOrBlockTask+0x3c>
 801277a:	687a      	ldr	r2, [r7, #4]
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	429a      	cmp	r2, r3
 8012780:	d806      	bhi.n	8012790 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012782:	f7ff f957 	bl	8011a34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012786:	68f9      	ldr	r1, [r7, #12]
 8012788:	6878      	ldr	r0, [r7, #4]
 801278a:	f7ff ff85 	bl	8012698 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801278e:	e024      	b.n	80127da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012790:	683b      	ldr	r3, [r7, #0]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d008      	beq.n	80127a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012796:	4b13      	ldr	r3, [pc, #76]	; (80127e4 <prvProcessTimerOrBlockTask+0x90>)
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d101      	bne.n	80127a4 <prvProcessTimerOrBlockTask+0x50>
 80127a0:	2301      	movs	r3, #1
 80127a2:	e000      	b.n	80127a6 <prvProcessTimerOrBlockTask+0x52>
 80127a4:	2300      	movs	r3, #0
 80127a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80127a8:	4b0f      	ldr	r3, [pc, #60]	; (80127e8 <prvProcessTimerOrBlockTask+0x94>)
 80127aa:	6818      	ldr	r0, [r3, #0]
 80127ac:	687a      	ldr	r2, [r7, #4]
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	1ad3      	subs	r3, r2, r3
 80127b2:	683a      	ldr	r2, [r7, #0]
 80127b4:	4619      	mov	r1, r3
 80127b6:	f7fe fec5 	bl	8011544 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80127ba:	f7ff f93b 	bl	8011a34 <xTaskResumeAll>
 80127be:	4603      	mov	r3, r0
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d10a      	bne.n	80127da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80127c4:	4b09      	ldr	r3, [pc, #36]	; (80127ec <prvProcessTimerOrBlockTask+0x98>)
 80127c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127ca:	601a      	str	r2, [r3, #0]
 80127cc:	f3bf 8f4f 	dsb	sy
 80127d0:	f3bf 8f6f 	isb	sy
}
 80127d4:	e001      	b.n	80127da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80127d6:	f7ff f92d 	bl	8011a34 <xTaskResumeAll>
}
 80127da:	bf00      	nop
 80127dc:	3710      	adds	r7, #16
 80127de:	46bd      	mov	sp, r7
 80127e0:	bd80      	pop	{r7, pc}
 80127e2:	bf00      	nop
 80127e4:	200013ac 	.word	0x200013ac
 80127e8:	200013b0 	.word	0x200013b0
 80127ec:	e000ed04 	.word	0xe000ed04

080127f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80127f0:	b480      	push	{r7}
 80127f2:	b085      	sub	sp, #20
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80127f8:	4b0e      	ldr	r3, [pc, #56]	; (8012834 <prvGetNextExpireTime+0x44>)
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d101      	bne.n	8012806 <prvGetNextExpireTime+0x16>
 8012802:	2201      	movs	r2, #1
 8012804:	e000      	b.n	8012808 <prvGetNextExpireTime+0x18>
 8012806:	2200      	movs	r2, #0
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d105      	bne.n	8012820 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012814:	4b07      	ldr	r3, [pc, #28]	; (8012834 <prvGetNextExpireTime+0x44>)
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	68db      	ldr	r3, [r3, #12]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	60fb      	str	r3, [r7, #12]
 801281e:	e001      	b.n	8012824 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012820:	2300      	movs	r3, #0
 8012822:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012824:	68fb      	ldr	r3, [r7, #12]
}
 8012826:	4618      	mov	r0, r3
 8012828:	3714      	adds	r7, #20
 801282a:	46bd      	mov	sp, r7
 801282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012830:	4770      	bx	lr
 8012832:	bf00      	nop
 8012834:	200013a8 	.word	0x200013a8

08012838 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012838:	b580      	push	{r7, lr}
 801283a:	b084      	sub	sp, #16
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012840:	f7ff f994 	bl	8011b6c <xTaskGetTickCount>
 8012844:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012846:	4b0b      	ldr	r3, [pc, #44]	; (8012874 <prvSampleTimeNow+0x3c>)
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	68fa      	ldr	r2, [r7, #12]
 801284c:	429a      	cmp	r2, r3
 801284e:	d205      	bcs.n	801285c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012850:	f000 f930 	bl	8012ab4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	2201      	movs	r2, #1
 8012858:	601a      	str	r2, [r3, #0]
 801285a:	e002      	b.n	8012862 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	2200      	movs	r2, #0
 8012860:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012862:	4a04      	ldr	r2, [pc, #16]	; (8012874 <prvSampleTimeNow+0x3c>)
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012868:	68fb      	ldr	r3, [r7, #12]
}
 801286a:	4618      	mov	r0, r3
 801286c:	3710      	adds	r7, #16
 801286e:	46bd      	mov	sp, r7
 8012870:	bd80      	pop	{r7, pc}
 8012872:	bf00      	nop
 8012874:	200013b8 	.word	0x200013b8

08012878 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b086      	sub	sp, #24
 801287c:	af00      	add	r7, sp, #0
 801287e:	60f8      	str	r0, [r7, #12]
 8012880:	60b9      	str	r1, [r7, #8]
 8012882:	607a      	str	r2, [r7, #4]
 8012884:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012886:	2300      	movs	r3, #0
 8012888:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	68ba      	ldr	r2, [r7, #8]
 801288e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	68fa      	ldr	r2, [r7, #12]
 8012894:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012896:	68ba      	ldr	r2, [r7, #8]
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	429a      	cmp	r2, r3
 801289c:	d812      	bhi.n	80128c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801289e:	687a      	ldr	r2, [r7, #4]
 80128a0:	683b      	ldr	r3, [r7, #0]
 80128a2:	1ad2      	subs	r2, r2, r3
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	699b      	ldr	r3, [r3, #24]
 80128a8:	429a      	cmp	r2, r3
 80128aa:	d302      	bcc.n	80128b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80128ac:	2301      	movs	r3, #1
 80128ae:	617b      	str	r3, [r7, #20]
 80128b0:	e01b      	b.n	80128ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80128b2:	4b10      	ldr	r3, [pc, #64]	; (80128f4 <prvInsertTimerInActiveList+0x7c>)
 80128b4:	681a      	ldr	r2, [r3, #0]
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	3304      	adds	r3, #4
 80128ba:	4619      	mov	r1, r3
 80128bc:	4610      	mov	r0, r2
 80128be:	f7fd fe24 	bl	801050a <vListInsert>
 80128c2:	e012      	b.n	80128ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80128c4:	687a      	ldr	r2, [r7, #4]
 80128c6:	683b      	ldr	r3, [r7, #0]
 80128c8:	429a      	cmp	r2, r3
 80128ca:	d206      	bcs.n	80128da <prvInsertTimerInActiveList+0x62>
 80128cc:	68ba      	ldr	r2, [r7, #8]
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	429a      	cmp	r2, r3
 80128d2:	d302      	bcc.n	80128da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80128d4:	2301      	movs	r3, #1
 80128d6:	617b      	str	r3, [r7, #20]
 80128d8:	e007      	b.n	80128ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80128da:	4b07      	ldr	r3, [pc, #28]	; (80128f8 <prvInsertTimerInActiveList+0x80>)
 80128dc:	681a      	ldr	r2, [r3, #0]
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	3304      	adds	r3, #4
 80128e2:	4619      	mov	r1, r3
 80128e4:	4610      	mov	r0, r2
 80128e6:	f7fd fe10 	bl	801050a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80128ea:	697b      	ldr	r3, [r7, #20]
}
 80128ec:	4618      	mov	r0, r3
 80128ee:	3718      	adds	r7, #24
 80128f0:	46bd      	mov	sp, r7
 80128f2:	bd80      	pop	{r7, pc}
 80128f4:	200013ac 	.word	0x200013ac
 80128f8:	200013a8 	.word	0x200013a8

080128fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b08e      	sub	sp, #56	; 0x38
 8012900:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012902:	e0c6      	b.n	8012a92 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	2b00      	cmp	r3, #0
 8012908:	da17      	bge.n	801293a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801290a:	1d3b      	adds	r3, r7, #4
 801290c:	3304      	adds	r3, #4
 801290e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012912:	2b00      	cmp	r3, #0
 8012914:	d109      	bne.n	801292a <prvProcessReceivedCommands+0x2e>
 8012916:	f04f 0350 	mov.w	r3, #80	; 0x50
 801291a:	f383 8811 	msr	BASEPRI, r3
 801291e:	f3bf 8f6f 	isb	sy
 8012922:	f3bf 8f4f 	dsb	sy
 8012926:	61fb      	str	r3, [r7, #28]
 8012928:	e7fe      	b.n	8012928 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801292a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012930:	6850      	ldr	r0, [r2, #4]
 8012932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012934:	6892      	ldr	r2, [r2, #8]
 8012936:	4611      	mov	r1, r2
 8012938:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	2b00      	cmp	r3, #0
 801293e:	f2c0 80a7 	blt.w	8012a90 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012948:	695b      	ldr	r3, [r3, #20]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d004      	beq.n	8012958 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012950:	3304      	adds	r3, #4
 8012952:	4618      	mov	r0, r3
 8012954:	f7fd fe12 	bl	801057c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012958:	463b      	mov	r3, r7
 801295a:	4618      	mov	r0, r3
 801295c:	f7ff ff6c 	bl	8012838 <prvSampleTimeNow>
 8012960:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	2b09      	cmp	r3, #9
 8012966:	f200 8094 	bhi.w	8012a92 <prvProcessReceivedCommands+0x196>
 801296a:	a201      	add	r2, pc, #4	; (adr r2, 8012970 <prvProcessReceivedCommands+0x74>)
 801296c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012970:	08012999 	.word	0x08012999
 8012974:	08012999 	.word	0x08012999
 8012978:	08012999 	.word	0x08012999
 801297c:	08012a0b 	.word	0x08012a0b
 8012980:	08012a1f 	.word	0x08012a1f
 8012984:	08012a67 	.word	0x08012a67
 8012988:	08012999 	.word	0x08012999
 801298c:	08012999 	.word	0x08012999
 8012990:	08012a0b 	.word	0x08012a0b
 8012994:	08012a1f 	.word	0x08012a1f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801299a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801299e:	f043 0301 	orr.w	r3, r3, #1
 80129a2:	b2da      	uxtb	r2, r3
 80129a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80129aa:	68ba      	ldr	r2, [r7, #8]
 80129ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ae:	699b      	ldr	r3, [r3, #24]
 80129b0:	18d1      	adds	r1, r2, r3
 80129b2:	68bb      	ldr	r3, [r7, #8]
 80129b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129b8:	f7ff ff5e 	bl	8012878 <prvInsertTimerInActiveList>
 80129bc:	4603      	mov	r3, r0
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d067      	beq.n	8012a92 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80129c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129c4:	6a1b      	ldr	r3, [r3, #32]
 80129c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80129ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80129d0:	f003 0304 	and.w	r3, r3, #4
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d05c      	beq.n	8012a92 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80129d8:	68ba      	ldr	r2, [r7, #8]
 80129da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129dc:	699b      	ldr	r3, [r3, #24]
 80129de:	441a      	add	r2, r3
 80129e0:	2300      	movs	r3, #0
 80129e2:	9300      	str	r3, [sp, #0]
 80129e4:	2300      	movs	r3, #0
 80129e6:	2100      	movs	r1, #0
 80129e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129ea:	f7ff fe09 	bl	8012600 <xTimerGenericCommand>
 80129ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80129f0:	6a3b      	ldr	r3, [r7, #32]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d14d      	bne.n	8012a92 <prvProcessReceivedCommands+0x196>
 80129f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129fa:	f383 8811 	msr	BASEPRI, r3
 80129fe:	f3bf 8f6f 	isb	sy
 8012a02:	f3bf 8f4f 	dsb	sy
 8012a06:	61bb      	str	r3, [r7, #24]
 8012a08:	e7fe      	b.n	8012a08 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a10:	f023 0301 	bic.w	r3, r3, #1
 8012a14:	b2da      	uxtb	r2, r3
 8012a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012a1c:	e039      	b.n	8012a92 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a24:	f043 0301 	orr.w	r3, r3, #1
 8012a28:	b2da      	uxtb	r2, r3
 8012a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012a30:	68ba      	ldr	r2, [r7, #8]
 8012a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a34:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a38:	699b      	ldr	r3, [r3, #24]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d109      	bne.n	8012a52 <prvProcessReceivedCommands+0x156>
 8012a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a42:	f383 8811 	msr	BASEPRI, r3
 8012a46:	f3bf 8f6f 	isb	sy
 8012a4a:	f3bf 8f4f 	dsb	sy
 8012a4e:	617b      	str	r3, [r7, #20]
 8012a50:	e7fe      	b.n	8012a50 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a54:	699a      	ldr	r2, [r3, #24]
 8012a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a58:	18d1      	adds	r1, r2, r3
 8012a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a60:	f7ff ff0a 	bl	8012878 <prvInsertTimerInActiveList>
					break;
 8012a64:	e015      	b.n	8012a92 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a6c:	f003 0302 	and.w	r3, r3, #2
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d103      	bne.n	8012a7c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8012a74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a76:	f000 fbc5 	bl	8013204 <vPortFree>
 8012a7a:	e00a      	b.n	8012a92 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a82:	f023 0301 	bic.w	r3, r3, #1
 8012a86:	b2da      	uxtb	r2, r3
 8012a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012a8e:	e000      	b.n	8012a92 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012a90:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012a92:	4b07      	ldr	r3, [pc, #28]	; (8012ab0 <prvProcessReceivedCommands+0x1b4>)
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	1d39      	adds	r1, r7, #4
 8012a98:	2200      	movs	r2, #0
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f7fe f954 	bl	8010d48 <xQueueReceive>
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	f47f af2e 	bne.w	8012904 <prvProcessReceivedCommands+0x8>
	}
}
 8012aa8:	bf00      	nop
 8012aaa:	3730      	adds	r7, #48	; 0x30
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}
 8012ab0:	200013b0 	.word	0x200013b0

08012ab4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b088      	sub	sp, #32
 8012ab8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012aba:	e047      	b.n	8012b4c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012abc:	4b2d      	ldr	r3, [pc, #180]	; (8012b74 <prvSwitchTimerLists+0xc0>)
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	68db      	ldr	r3, [r3, #12]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012ac6:	4b2b      	ldr	r3, [pc, #172]	; (8012b74 <prvSwitchTimerLists+0xc0>)
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	68db      	ldr	r3, [r3, #12]
 8012acc:	68db      	ldr	r3, [r3, #12]
 8012ace:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	3304      	adds	r3, #4
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	f7fd fd51 	bl	801057c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	6a1b      	ldr	r3, [r3, #32]
 8012ade:	68f8      	ldr	r0, [r7, #12]
 8012ae0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ae8:	f003 0304 	and.w	r3, r3, #4
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d02d      	beq.n	8012b4c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	699b      	ldr	r3, [r3, #24]
 8012af4:	693a      	ldr	r2, [r7, #16]
 8012af6:	4413      	add	r3, r2
 8012af8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012afa:	68ba      	ldr	r2, [r7, #8]
 8012afc:	693b      	ldr	r3, [r7, #16]
 8012afe:	429a      	cmp	r2, r3
 8012b00:	d90e      	bls.n	8012b20 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	68ba      	ldr	r2, [r7, #8]
 8012b06:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	68fa      	ldr	r2, [r7, #12]
 8012b0c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012b0e:	4b19      	ldr	r3, [pc, #100]	; (8012b74 <prvSwitchTimerLists+0xc0>)
 8012b10:	681a      	ldr	r2, [r3, #0]
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	3304      	adds	r3, #4
 8012b16:	4619      	mov	r1, r3
 8012b18:	4610      	mov	r0, r2
 8012b1a:	f7fd fcf6 	bl	801050a <vListInsert>
 8012b1e:	e015      	b.n	8012b4c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012b20:	2300      	movs	r3, #0
 8012b22:	9300      	str	r3, [sp, #0]
 8012b24:	2300      	movs	r3, #0
 8012b26:	693a      	ldr	r2, [r7, #16]
 8012b28:	2100      	movs	r1, #0
 8012b2a:	68f8      	ldr	r0, [r7, #12]
 8012b2c:	f7ff fd68 	bl	8012600 <xTimerGenericCommand>
 8012b30:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d109      	bne.n	8012b4c <prvSwitchTimerLists+0x98>
 8012b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b3c:	f383 8811 	msr	BASEPRI, r3
 8012b40:	f3bf 8f6f 	isb	sy
 8012b44:	f3bf 8f4f 	dsb	sy
 8012b48:	603b      	str	r3, [r7, #0]
 8012b4a:	e7fe      	b.n	8012b4a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012b4c:	4b09      	ldr	r3, [pc, #36]	; (8012b74 <prvSwitchTimerLists+0xc0>)
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d1b2      	bne.n	8012abc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012b56:	4b07      	ldr	r3, [pc, #28]	; (8012b74 <prvSwitchTimerLists+0xc0>)
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012b5c:	4b06      	ldr	r3, [pc, #24]	; (8012b78 <prvSwitchTimerLists+0xc4>)
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	4a04      	ldr	r2, [pc, #16]	; (8012b74 <prvSwitchTimerLists+0xc0>)
 8012b62:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012b64:	4a04      	ldr	r2, [pc, #16]	; (8012b78 <prvSwitchTimerLists+0xc4>)
 8012b66:	697b      	ldr	r3, [r7, #20]
 8012b68:	6013      	str	r3, [r2, #0]
}
 8012b6a:	bf00      	nop
 8012b6c:	3718      	adds	r7, #24
 8012b6e:	46bd      	mov	sp, r7
 8012b70:	bd80      	pop	{r7, pc}
 8012b72:	bf00      	nop
 8012b74:	200013a8 	.word	0x200013a8
 8012b78:	200013ac 	.word	0x200013ac

08012b7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	b082      	sub	sp, #8
 8012b80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012b82:	f000 f963 	bl	8012e4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012b86:	4b15      	ldr	r3, [pc, #84]	; (8012bdc <prvCheckForValidListAndQueue+0x60>)
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d120      	bne.n	8012bd0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012b8e:	4814      	ldr	r0, [pc, #80]	; (8012be0 <prvCheckForValidListAndQueue+0x64>)
 8012b90:	f7fd fc6a 	bl	8010468 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012b94:	4813      	ldr	r0, [pc, #76]	; (8012be4 <prvCheckForValidListAndQueue+0x68>)
 8012b96:	f7fd fc67 	bl	8010468 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012b9a:	4b13      	ldr	r3, [pc, #76]	; (8012be8 <prvCheckForValidListAndQueue+0x6c>)
 8012b9c:	4a10      	ldr	r2, [pc, #64]	; (8012be0 <prvCheckForValidListAndQueue+0x64>)
 8012b9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012ba0:	4b12      	ldr	r3, [pc, #72]	; (8012bec <prvCheckForValidListAndQueue+0x70>)
 8012ba2:	4a10      	ldr	r2, [pc, #64]	; (8012be4 <prvCheckForValidListAndQueue+0x68>)
 8012ba4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	9300      	str	r3, [sp, #0]
 8012baa:	4b11      	ldr	r3, [pc, #68]	; (8012bf0 <prvCheckForValidListAndQueue+0x74>)
 8012bac:	4a11      	ldr	r2, [pc, #68]	; (8012bf4 <prvCheckForValidListAndQueue+0x78>)
 8012bae:	2110      	movs	r1, #16
 8012bb0:	200a      	movs	r0, #10
 8012bb2:	f7fd fd75 	bl	80106a0 <xQueueGenericCreateStatic>
 8012bb6:	4602      	mov	r2, r0
 8012bb8:	4b08      	ldr	r3, [pc, #32]	; (8012bdc <prvCheckForValidListAndQueue+0x60>)
 8012bba:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012bbc:	4b07      	ldr	r3, [pc, #28]	; (8012bdc <prvCheckForValidListAndQueue+0x60>)
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d005      	beq.n	8012bd0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012bc4:	4b05      	ldr	r3, [pc, #20]	; (8012bdc <prvCheckForValidListAndQueue+0x60>)
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	490b      	ldr	r1, [pc, #44]	; (8012bf8 <prvCheckForValidListAndQueue+0x7c>)
 8012bca:	4618      	mov	r0, r3
 8012bcc:	f7fe fc68 	bl	80114a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012bd0:	f000 f96a 	bl	8012ea8 <vPortExitCritical>
}
 8012bd4:	bf00      	nop
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd80      	pop	{r7, pc}
 8012bda:	bf00      	nop
 8012bdc:	200013b0 	.word	0x200013b0
 8012be0:	20001380 	.word	0x20001380
 8012be4:	20001394 	.word	0x20001394
 8012be8:	200013a8 	.word	0x200013a8
 8012bec:	200013ac 	.word	0x200013ac
 8012bf0:	2000145c 	.word	0x2000145c
 8012bf4:	200013bc 	.word	0x200013bc
 8012bf8:	08016c8c 	.word	0x08016c8c

08012bfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012bfc:	b480      	push	{r7}
 8012bfe:	b085      	sub	sp, #20
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	60f8      	str	r0, [r7, #12]
 8012c04:	60b9      	str	r1, [r7, #8]
 8012c06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	3b04      	subs	r3, #4
 8012c0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012c14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	3b04      	subs	r3, #4
 8012c1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012c1c:	68bb      	ldr	r3, [r7, #8]
 8012c1e:	f023 0201 	bic.w	r2, r3, #1
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	3b04      	subs	r3, #4
 8012c2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012c2c:	4a0c      	ldr	r2, [pc, #48]	; (8012c60 <pxPortInitialiseStack+0x64>)
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	3b14      	subs	r3, #20
 8012c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012c38:	687a      	ldr	r2, [r7, #4]
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	3b04      	subs	r3, #4
 8012c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	f06f 0202 	mvn.w	r2, #2
 8012c4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	3b20      	subs	r3, #32
 8012c50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012c52:	68fb      	ldr	r3, [r7, #12]
}
 8012c54:	4618      	mov	r0, r3
 8012c56:	3714      	adds	r7, #20
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5e:	4770      	bx	lr
 8012c60:	08012c65 	.word	0x08012c65

08012c64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012c64:	b480      	push	{r7}
 8012c66:	b085      	sub	sp, #20
 8012c68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012c6e:	4b11      	ldr	r3, [pc, #68]	; (8012cb4 <prvTaskExitError+0x50>)
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c76:	d009      	beq.n	8012c8c <prvTaskExitError+0x28>
 8012c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c7c:	f383 8811 	msr	BASEPRI, r3
 8012c80:	f3bf 8f6f 	isb	sy
 8012c84:	f3bf 8f4f 	dsb	sy
 8012c88:	60fb      	str	r3, [r7, #12]
 8012c8a:	e7fe      	b.n	8012c8a <prvTaskExitError+0x26>
 8012c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c90:	f383 8811 	msr	BASEPRI, r3
 8012c94:	f3bf 8f6f 	isb	sy
 8012c98:	f3bf 8f4f 	dsb	sy
 8012c9c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012c9e:	bf00      	nop
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d0fc      	beq.n	8012ca0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012ca6:	bf00      	nop
 8012ca8:	3714      	adds	r7, #20
 8012caa:	46bd      	mov	sp, r7
 8012cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb0:	4770      	bx	lr
 8012cb2:	bf00      	nop
 8012cb4:	20000490 	.word	0x20000490
	...

08012cc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012cc0:	4b07      	ldr	r3, [pc, #28]	; (8012ce0 <pxCurrentTCBConst2>)
 8012cc2:	6819      	ldr	r1, [r3, #0]
 8012cc4:	6808      	ldr	r0, [r1, #0]
 8012cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cca:	f380 8809 	msr	PSP, r0
 8012cce:	f3bf 8f6f 	isb	sy
 8012cd2:	f04f 0000 	mov.w	r0, #0
 8012cd6:	f380 8811 	msr	BASEPRI, r0
 8012cda:	4770      	bx	lr
 8012cdc:	f3af 8000 	nop.w

08012ce0 <pxCurrentTCBConst2>:
 8012ce0:	20000e80 	.word	0x20000e80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012ce4:	bf00      	nop
 8012ce6:	bf00      	nop

08012ce8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012ce8:	4808      	ldr	r0, [pc, #32]	; (8012d0c <prvPortStartFirstTask+0x24>)
 8012cea:	6800      	ldr	r0, [r0, #0]
 8012cec:	6800      	ldr	r0, [r0, #0]
 8012cee:	f380 8808 	msr	MSP, r0
 8012cf2:	f04f 0000 	mov.w	r0, #0
 8012cf6:	f380 8814 	msr	CONTROL, r0
 8012cfa:	b662      	cpsie	i
 8012cfc:	b661      	cpsie	f
 8012cfe:	f3bf 8f4f 	dsb	sy
 8012d02:	f3bf 8f6f 	isb	sy
 8012d06:	df00      	svc	0
 8012d08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012d0a:	bf00      	nop
 8012d0c:	e000ed08 	.word	0xe000ed08

08012d10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b086      	sub	sp, #24
 8012d14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012d16:	4b44      	ldr	r3, [pc, #272]	; (8012e28 <xPortStartScheduler+0x118>)
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	4a44      	ldr	r2, [pc, #272]	; (8012e2c <xPortStartScheduler+0x11c>)
 8012d1c:	4293      	cmp	r3, r2
 8012d1e:	d109      	bne.n	8012d34 <xPortStartScheduler+0x24>
 8012d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d24:	f383 8811 	msr	BASEPRI, r3
 8012d28:	f3bf 8f6f 	isb	sy
 8012d2c:	f3bf 8f4f 	dsb	sy
 8012d30:	613b      	str	r3, [r7, #16]
 8012d32:	e7fe      	b.n	8012d32 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012d34:	4b3c      	ldr	r3, [pc, #240]	; (8012e28 <xPortStartScheduler+0x118>)
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	4a3d      	ldr	r2, [pc, #244]	; (8012e30 <xPortStartScheduler+0x120>)
 8012d3a:	4293      	cmp	r3, r2
 8012d3c:	d109      	bne.n	8012d52 <xPortStartScheduler+0x42>
 8012d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d42:	f383 8811 	msr	BASEPRI, r3
 8012d46:	f3bf 8f6f 	isb	sy
 8012d4a:	f3bf 8f4f 	dsb	sy
 8012d4e:	60fb      	str	r3, [r7, #12]
 8012d50:	e7fe      	b.n	8012d50 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012d52:	4b38      	ldr	r3, [pc, #224]	; (8012e34 <xPortStartScheduler+0x124>)
 8012d54:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012d56:	697b      	ldr	r3, [r7, #20]
 8012d58:	781b      	ldrb	r3, [r3, #0]
 8012d5a:	b2db      	uxtb	r3, r3
 8012d5c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	22ff      	movs	r2, #255	; 0xff
 8012d62:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012d64:	697b      	ldr	r3, [r7, #20]
 8012d66:	781b      	ldrb	r3, [r3, #0]
 8012d68:	b2db      	uxtb	r3, r3
 8012d6a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012d6c:	78fb      	ldrb	r3, [r7, #3]
 8012d6e:	b2db      	uxtb	r3, r3
 8012d70:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012d74:	b2da      	uxtb	r2, r3
 8012d76:	4b30      	ldr	r3, [pc, #192]	; (8012e38 <xPortStartScheduler+0x128>)
 8012d78:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012d7a:	4b30      	ldr	r3, [pc, #192]	; (8012e3c <xPortStartScheduler+0x12c>)
 8012d7c:	2207      	movs	r2, #7
 8012d7e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012d80:	e009      	b.n	8012d96 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8012d82:	4b2e      	ldr	r3, [pc, #184]	; (8012e3c <xPortStartScheduler+0x12c>)
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	3b01      	subs	r3, #1
 8012d88:	4a2c      	ldr	r2, [pc, #176]	; (8012e3c <xPortStartScheduler+0x12c>)
 8012d8a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012d8c:	78fb      	ldrb	r3, [r7, #3]
 8012d8e:	b2db      	uxtb	r3, r3
 8012d90:	005b      	lsls	r3, r3, #1
 8012d92:	b2db      	uxtb	r3, r3
 8012d94:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012d96:	78fb      	ldrb	r3, [r7, #3]
 8012d98:	b2db      	uxtb	r3, r3
 8012d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d9e:	2b80      	cmp	r3, #128	; 0x80
 8012da0:	d0ef      	beq.n	8012d82 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012da2:	4b26      	ldr	r3, [pc, #152]	; (8012e3c <xPortStartScheduler+0x12c>)
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	f1c3 0307 	rsb	r3, r3, #7
 8012daa:	2b04      	cmp	r3, #4
 8012dac:	d009      	beq.n	8012dc2 <xPortStartScheduler+0xb2>
 8012dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012db2:	f383 8811 	msr	BASEPRI, r3
 8012db6:	f3bf 8f6f 	isb	sy
 8012dba:	f3bf 8f4f 	dsb	sy
 8012dbe:	60bb      	str	r3, [r7, #8]
 8012dc0:	e7fe      	b.n	8012dc0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012dc2:	4b1e      	ldr	r3, [pc, #120]	; (8012e3c <xPortStartScheduler+0x12c>)
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	021b      	lsls	r3, r3, #8
 8012dc8:	4a1c      	ldr	r2, [pc, #112]	; (8012e3c <xPortStartScheduler+0x12c>)
 8012dca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012dcc:	4b1b      	ldr	r3, [pc, #108]	; (8012e3c <xPortStartScheduler+0x12c>)
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012dd4:	4a19      	ldr	r2, [pc, #100]	; (8012e3c <xPortStartScheduler+0x12c>)
 8012dd6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	b2da      	uxtb	r2, r3
 8012ddc:	697b      	ldr	r3, [r7, #20]
 8012dde:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012de0:	4b17      	ldr	r3, [pc, #92]	; (8012e40 <xPortStartScheduler+0x130>)
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	4a16      	ldr	r2, [pc, #88]	; (8012e40 <xPortStartScheduler+0x130>)
 8012de6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012dea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012dec:	4b14      	ldr	r3, [pc, #80]	; (8012e40 <xPortStartScheduler+0x130>)
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	4a13      	ldr	r2, [pc, #76]	; (8012e40 <xPortStartScheduler+0x130>)
 8012df2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012df6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012df8:	f000 f8d6 	bl	8012fa8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012dfc:	4b11      	ldr	r3, [pc, #68]	; (8012e44 <xPortStartScheduler+0x134>)
 8012dfe:	2200      	movs	r2, #0
 8012e00:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012e02:	f000 f8f5 	bl	8012ff0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012e06:	4b10      	ldr	r3, [pc, #64]	; (8012e48 <xPortStartScheduler+0x138>)
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	4a0f      	ldr	r2, [pc, #60]	; (8012e48 <xPortStartScheduler+0x138>)
 8012e0c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012e10:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012e12:	f7ff ff69 	bl	8012ce8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012e16:	f7fe ff71 	bl	8011cfc <vTaskSwitchContext>
	prvTaskExitError();
 8012e1a:	f7ff ff23 	bl	8012c64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012e1e:	2300      	movs	r3, #0
}
 8012e20:	4618      	mov	r0, r3
 8012e22:	3718      	adds	r7, #24
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bd80      	pop	{r7, pc}
 8012e28:	e000ed00 	.word	0xe000ed00
 8012e2c:	410fc271 	.word	0x410fc271
 8012e30:	410fc270 	.word	0x410fc270
 8012e34:	e000e400 	.word	0xe000e400
 8012e38:	200014ac 	.word	0x200014ac
 8012e3c:	200014b0 	.word	0x200014b0
 8012e40:	e000ed20 	.word	0xe000ed20
 8012e44:	20000490 	.word	0x20000490
 8012e48:	e000ef34 	.word	0xe000ef34

08012e4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012e4c:	b480      	push	{r7}
 8012e4e:	b083      	sub	sp, #12
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e56:	f383 8811 	msr	BASEPRI, r3
 8012e5a:	f3bf 8f6f 	isb	sy
 8012e5e:	f3bf 8f4f 	dsb	sy
 8012e62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012e64:	4b0e      	ldr	r3, [pc, #56]	; (8012ea0 <vPortEnterCritical+0x54>)
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	3301      	adds	r3, #1
 8012e6a:	4a0d      	ldr	r2, [pc, #52]	; (8012ea0 <vPortEnterCritical+0x54>)
 8012e6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012e6e:	4b0c      	ldr	r3, [pc, #48]	; (8012ea0 <vPortEnterCritical+0x54>)
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	2b01      	cmp	r3, #1
 8012e74:	d10e      	bne.n	8012e94 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012e76:	4b0b      	ldr	r3, [pc, #44]	; (8012ea4 <vPortEnterCritical+0x58>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	b2db      	uxtb	r3, r3
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d009      	beq.n	8012e94 <vPortEnterCritical+0x48>
 8012e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e84:	f383 8811 	msr	BASEPRI, r3
 8012e88:	f3bf 8f6f 	isb	sy
 8012e8c:	f3bf 8f4f 	dsb	sy
 8012e90:	603b      	str	r3, [r7, #0]
 8012e92:	e7fe      	b.n	8012e92 <vPortEnterCritical+0x46>
	}
}
 8012e94:	bf00      	nop
 8012e96:	370c      	adds	r7, #12
 8012e98:	46bd      	mov	sp, r7
 8012e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9e:	4770      	bx	lr
 8012ea0:	20000490 	.word	0x20000490
 8012ea4:	e000ed04 	.word	0xe000ed04

08012ea8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012ea8:	b480      	push	{r7}
 8012eaa:	b083      	sub	sp, #12
 8012eac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012eae:	4b11      	ldr	r3, [pc, #68]	; (8012ef4 <vPortExitCritical+0x4c>)
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d109      	bne.n	8012eca <vPortExitCritical+0x22>
 8012eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eba:	f383 8811 	msr	BASEPRI, r3
 8012ebe:	f3bf 8f6f 	isb	sy
 8012ec2:	f3bf 8f4f 	dsb	sy
 8012ec6:	607b      	str	r3, [r7, #4]
 8012ec8:	e7fe      	b.n	8012ec8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8012eca:	4b0a      	ldr	r3, [pc, #40]	; (8012ef4 <vPortExitCritical+0x4c>)
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	3b01      	subs	r3, #1
 8012ed0:	4a08      	ldr	r2, [pc, #32]	; (8012ef4 <vPortExitCritical+0x4c>)
 8012ed2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012ed4:	4b07      	ldr	r3, [pc, #28]	; (8012ef4 <vPortExitCritical+0x4c>)
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d104      	bne.n	8012ee6 <vPortExitCritical+0x3e>
 8012edc:	2300      	movs	r3, #0
 8012ede:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012ee0:	683b      	ldr	r3, [r7, #0]
 8012ee2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8012ee6:	bf00      	nop
 8012ee8:	370c      	adds	r7, #12
 8012eea:	46bd      	mov	sp, r7
 8012eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef0:	4770      	bx	lr
 8012ef2:	bf00      	nop
 8012ef4:	20000490 	.word	0x20000490
	...

08012f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012f00:	f3ef 8009 	mrs	r0, PSP
 8012f04:	f3bf 8f6f 	isb	sy
 8012f08:	4b15      	ldr	r3, [pc, #84]	; (8012f60 <pxCurrentTCBConst>)
 8012f0a:	681a      	ldr	r2, [r3, #0]
 8012f0c:	f01e 0f10 	tst.w	lr, #16
 8012f10:	bf08      	it	eq
 8012f12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012f16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f1a:	6010      	str	r0, [r2, #0]
 8012f1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012f20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012f24:	f380 8811 	msr	BASEPRI, r0
 8012f28:	f3bf 8f4f 	dsb	sy
 8012f2c:	f3bf 8f6f 	isb	sy
 8012f30:	f7fe fee4 	bl	8011cfc <vTaskSwitchContext>
 8012f34:	f04f 0000 	mov.w	r0, #0
 8012f38:	f380 8811 	msr	BASEPRI, r0
 8012f3c:	bc09      	pop	{r0, r3}
 8012f3e:	6819      	ldr	r1, [r3, #0]
 8012f40:	6808      	ldr	r0, [r1, #0]
 8012f42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f46:	f01e 0f10 	tst.w	lr, #16
 8012f4a:	bf08      	it	eq
 8012f4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012f50:	f380 8809 	msr	PSP, r0
 8012f54:	f3bf 8f6f 	isb	sy
 8012f58:	4770      	bx	lr
 8012f5a:	bf00      	nop
 8012f5c:	f3af 8000 	nop.w

08012f60 <pxCurrentTCBConst>:
 8012f60:	20000e80 	.word	0x20000e80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012f64:	bf00      	nop
 8012f66:	bf00      	nop

08012f68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b082      	sub	sp, #8
 8012f6c:	af00      	add	r7, sp, #0
	__asm volatile
 8012f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f72:	f383 8811 	msr	BASEPRI, r3
 8012f76:	f3bf 8f6f 	isb	sy
 8012f7a:	f3bf 8f4f 	dsb	sy
 8012f7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012f80:	f7fe fe04 	bl	8011b8c <xTaskIncrementTick>
 8012f84:	4603      	mov	r3, r0
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d003      	beq.n	8012f92 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012f8a:	4b06      	ldr	r3, [pc, #24]	; (8012fa4 <xPortSysTickHandler+0x3c>)
 8012f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f90:	601a      	str	r2, [r3, #0]
 8012f92:	2300      	movs	r3, #0
 8012f94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012f96:	683b      	ldr	r3, [r7, #0]
 8012f98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8012f9c:	bf00      	nop
 8012f9e:	3708      	adds	r7, #8
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bd80      	pop	{r7, pc}
 8012fa4:	e000ed04 	.word	0xe000ed04

08012fa8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012fa8:	b480      	push	{r7}
 8012faa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012fac:	4b0b      	ldr	r3, [pc, #44]	; (8012fdc <vPortSetupTimerInterrupt+0x34>)
 8012fae:	2200      	movs	r2, #0
 8012fb0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012fb2:	4b0b      	ldr	r3, [pc, #44]	; (8012fe0 <vPortSetupTimerInterrupt+0x38>)
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012fb8:	4b0a      	ldr	r3, [pc, #40]	; (8012fe4 <vPortSetupTimerInterrupt+0x3c>)
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	4a0a      	ldr	r2, [pc, #40]	; (8012fe8 <vPortSetupTimerInterrupt+0x40>)
 8012fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8012fc2:	099b      	lsrs	r3, r3, #6
 8012fc4:	4a09      	ldr	r2, [pc, #36]	; (8012fec <vPortSetupTimerInterrupt+0x44>)
 8012fc6:	3b01      	subs	r3, #1
 8012fc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012fca:	4b04      	ldr	r3, [pc, #16]	; (8012fdc <vPortSetupTimerInterrupt+0x34>)
 8012fcc:	2207      	movs	r2, #7
 8012fce:	601a      	str	r2, [r3, #0]
}
 8012fd0:	bf00      	nop
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd8:	4770      	bx	lr
 8012fda:	bf00      	nop
 8012fdc:	e000e010 	.word	0xe000e010
 8012fe0:	e000e018 	.word	0xe000e018
 8012fe4:	2000018c 	.word	0x2000018c
 8012fe8:	10624dd3 	.word	0x10624dd3
 8012fec:	e000e014 	.word	0xe000e014

08012ff0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012ff0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013000 <vPortEnableVFP+0x10>
 8012ff4:	6801      	ldr	r1, [r0, #0]
 8012ff6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012ffa:	6001      	str	r1, [r0, #0]
 8012ffc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012ffe:	bf00      	nop
 8013000:	e000ed88 	.word	0xe000ed88

08013004 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013004:	b480      	push	{r7}
 8013006:	b085      	sub	sp, #20
 8013008:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801300a:	f3ef 8305 	mrs	r3, IPSR
 801300e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	2b0f      	cmp	r3, #15
 8013014:	d913      	bls.n	801303e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013016:	4a16      	ldr	r2, [pc, #88]	; (8013070 <vPortValidateInterruptPriority+0x6c>)
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	4413      	add	r3, r2
 801301c:	781b      	ldrb	r3, [r3, #0]
 801301e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013020:	4b14      	ldr	r3, [pc, #80]	; (8013074 <vPortValidateInterruptPriority+0x70>)
 8013022:	781b      	ldrb	r3, [r3, #0]
 8013024:	7afa      	ldrb	r2, [r7, #11]
 8013026:	429a      	cmp	r2, r3
 8013028:	d209      	bcs.n	801303e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801302a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801302e:	f383 8811 	msr	BASEPRI, r3
 8013032:	f3bf 8f6f 	isb	sy
 8013036:	f3bf 8f4f 	dsb	sy
 801303a:	607b      	str	r3, [r7, #4]
 801303c:	e7fe      	b.n	801303c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801303e:	4b0e      	ldr	r3, [pc, #56]	; (8013078 <vPortValidateInterruptPriority+0x74>)
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013046:	4b0d      	ldr	r3, [pc, #52]	; (801307c <vPortValidateInterruptPriority+0x78>)
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	429a      	cmp	r2, r3
 801304c:	d909      	bls.n	8013062 <vPortValidateInterruptPriority+0x5e>
 801304e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013052:	f383 8811 	msr	BASEPRI, r3
 8013056:	f3bf 8f6f 	isb	sy
 801305a:	f3bf 8f4f 	dsb	sy
 801305e:	603b      	str	r3, [r7, #0]
 8013060:	e7fe      	b.n	8013060 <vPortValidateInterruptPriority+0x5c>
	}
 8013062:	bf00      	nop
 8013064:	3714      	adds	r7, #20
 8013066:	46bd      	mov	sp, r7
 8013068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306c:	4770      	bx	lr
 801306e:	bf00      	nop
 8013070:	e000e3f0 	.word	0xe000e3f0
 8013074:	200014ac 	.word	0x200014ac
 8013078:	e000ed0c 	.word	0xe000ed0c
 801307c:	200014b0 	.word	0x200014b0

08013080 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b08a      	sub	sp, #40	; 0x28
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013088:	2300      	movs	r3, #0
 801308a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801308c:	f7fe fcc4 	bl	8011a18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013090:	4b57      	ldr	r3, [pc, #348]	; (80131f0 <pvPortMalloc+0x170>)
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d101      	bne.n	801309c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013098:	f000 f90c 	bl	80132b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801309c:	4b55      	ldr	r3, [pc, #340]	; (80131f4 <pvPortMalloc+0x174>)
 801309e:	681a      	ldr	r2, [r3, #0]
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	4013      	ands	r3, r2
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	f040 808c 	bne.w	80131c2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d01c      	beq.n	80130ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80130b0:	2208      	movs	r2, #8
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	4413      	add	r3, r2
 80130b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	f003 0307 	and.w	r3, r3, #7
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d013      	beq.n	80130ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	f023 0307 	bic.w	r3, r3, #7
 80130c8:	3308      	adds	r3, #8
 80130ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	f003 0307 	and.w	r3, r3, #7
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d009      	beq.n	80130ea <pvPortMalloc+0x6a>
 80130d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130da:	f383 8811 	msr	BASEPRI, r3
 80130de:	f3bf 8f6f 	isb	sy
 80130e2:	f3bf 8f4f 	dsb	sy
 80130e6:	617b      	str	r3, [r7, #20]
 80130e8:	e7fe      	b.n	80130e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d068      	beq.n	80131c2 <pvPortMalloc+0x142>
 80130f0:	4b41      	ldr	r3, [pc, #260]	; (80131f8 <pvPortMalloc+0x178>)
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	687a      	ldr	r2, [r7, #4]
 80130f6:	429a      	cmp	r2, r3
 80130f8:	d863      	bhi.n	80131c2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80130fa:	4b40      	ldr	r3, [pc, #256]	; (80131fc <pvPortMalloc+0x17c>)
 80130fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80130fe:	4b3f      	ldr	r3, [pc, #252]	; (80131fc <pvPortMalloc+0x17c>)
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013104:	e004      	b.n	8013110 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8013106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013108:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013112:	685b      	ldr	r3, [r3, #4]
 8013114:	687a      	ldr	r2, [r7, #4]
 8013116:	429a      	cmp	r2, r3
 8013118:	d903      	bls.n	8013122 <pvPortMalloc+0xa2>
 801311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d1f1      	bne.n	8013106 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013122:	4b33      	ldr	r3, [pc, #204]	; (80131f0 <pvPortMalloc+0x170>)
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013128:	429a      	cmp	r2, r3
 801312a:	d04a      	beq.n	80131c2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801312c:	6a3b      	ldr	r3, [r7, #32]
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	2208      	movs	r2, #8
 8013132:	4413      	add	r3, r2
 8013134:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013138:	681a      	ldr	r2, [r3, #0]
 801313a:	6a3b      	ldr	r3, [r7, #32]
 801313c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013140:	685a      	ldr	r2, [r3, #4]
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	1ad2      	subs	r2, r2, r3
 8013146:	2308      	movs	r3, #8
 8013148:	005b      	lsls	r3, r3, #1
 801314a:	429a      	cmp	r2, r3
 801314c:	d91e      	bls.n	801318c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801314e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	4413      	add	r3, r2
 8013154:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013156:	69bb      	ldr	r3, [r7, #24]
 8013158:	f003 0307 	and.w	r3, r3, #7
 801315c:	2b00      	cmp	r3, #0
 801315e:	d009      	beq.n	8013174 <pvPortMalloc+0xf4>
 8013160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013164:	f383 8811 	msr	BASEPRI, r3
 8013168:	f3bf 8f6f 	isb	sy
 801316c:	f3bf 8f4f 	dsb	sy
 8013170:	613b      	str	r3, [r7, #16]
 8013172:	e7fe      	b.n	8013172 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013176:	685a      	ldr	r2, [r3, #4]
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	1ad2      	subs	r2, r2, r3
 801317c:	69bb      	ldr	r3, [r7, #24]
 801317e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013182:	687a      	ldr	r2, [r7, #4]
 8013184:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013186:	69b8      	ldr	r0, [r7, #24]
 8013188:	f000 f8f6 	bl	8013378 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801318c:	4b1a      	ldr	r3, [pc, #104]	; (80131f8 <pvPortMalloc+0x178>)
 801318e:	681a      	ldr	r2, [r3, #0]
 8013190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013192:	685b      	ldr	r3, [r3, #4]
 8013194:	1ad3      	subs	r3, r2, r3
 8013196:	4a18      	ldr	r2, [pc, #96]	; (80131f8 <pvPortMalloc+0x178>)
 8013198:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801319a:	4b17      	ldr	r3, [pc, #92]	; (80131f8 <pvPortMalloc+0x178>)
 801319c:	681a      	ldr	r2, [r3, #0]
 801319e:	4b18      	ldr	r3, [pc, #96]	; (8013200 <pvPortMalloc+0x180>)
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	429a      	cmp	r2, r3
 80131a4:	d203      	bcs.n	80131ae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80131a6:	4b14      	ldr	r3, [pc, #80]	; (80131f8 <pvPortMalloc+0x178>)
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	4a15      	ldr	r2, [pc, #84]	; (8013200 <pvPortMalloc+0x180>)
 80131ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80131ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131b0:	685a      	ldr	r2, [r3, #4]
 80131b2:	4b10      	ldr	r3, [pc, #64]	; (80131f4 <pvPortMalloc+0x174>)
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	431a      	orrs	r2, r3
 80131b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80131bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131be:	2200      	movs	r2, #0
 80131c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80131c2:	f7fe fc37 	bl	8011a34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80131c6:	69fb      	ldr	r3, [r7, #28]
 80131c8:	f003 0307 	and.w	r3, r3, #7
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d009      	beq.n	80131e4 <pvPortMalloc+0x164>
 80131d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131d4:	f383 8811 	msr	BASEPRI, r3
 80131d8:	f3bf 8f6f 	isb	sy
 80131dc:	f3bf 8f4f 	dsb	sy
 80131e0:	60fb      	str	r3, [r7, #12]
 80131e2:	e7fe      	b.n	80131e2 <pvPortMalloc+0x162>
	return pvReturn;
 80131e4:	69fb      	ldr	r3, [r7, #28]
}
 80131e6:	4618      	mov	r0, r3
 80131e8:	3728      	adds	r7, #40	; 0x28
 80131ea:	46bd      	mov	sp, r7
 80131ec:	bd80      	pop	{r7, pc}
 80131ee:	bf00      	nop
 80131f0:	200037e4 	.word	0x200037e4
 80131f4:	200037f0 	.word	0x200037f0
 80131f8:	200037e8 	.word	0x200037e8
 80131fc:	200037dc 	.word	0x200037dc
 8013200:	200037ec 	.word	0x200037ec

08013204 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b086      	sub	sp, #24
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d046      	beq.n	80132a4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013216:	2308      	movs	r3, #8
 8013218:	425b      	negs	r3, r3
 801321a:	697a      	ldr	r2, [r7, #20]
 801321c:	4413      	add	r3, r2
 801321e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013220:	697b      	ldr	r3, [r7, #20]
 8013222:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013224:	693b      	ldr	r3, [r7, #16]
 8013226:	685a      	ldr	r2, [r3, #4]
 8013228:	4b20      	ldr	r3, [pc, #128]	; (80132ac <vPortFree+0xa8>)
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	4013      	ands	r3, r2
 801322e:	2b00      	cmp	r3, #0
 8013230:	d109      	bne.n	8013246 <vPortFree+0x42>
 8013232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013236:	f383 8811 	msr	BASEPRI, r3
 801323a:	f3bf 8f6f 	isb	sy
 801323e:	f3bf 8f4f 	dsb	sy
 8013242:	60fb      	str	r3, [r7, #12]
 8013244:	e7fe      	b.n	8013244 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013246:	693b      	ldr	r3, [r7, #16]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d009      	beq.n	8013262 <vPortFree+0x5e>
 801324e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013252:	f383 8811 	msr	BASEPRI, r3
 8013256:	f3bf 8f6f 	isb	sy
 801325a:	f3bf 8f4f 	dsb	sy
 801325e:	60bb      	str	r3, [r7, #8]
 8013260:	e7fe      	b.n	8013260 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013262:	693b      	ldr	r3, [r7, #16]
 8013264:	685a      	ldr	r2, [r3, #4]
 8013266:	4b11      	ldr	r3, [pc, #68]	; (80132ac <vPortFree+0xa8>)
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	4013      	ands	r3, r2
 801326c:	2b00      	cmp	r3, #0
 801326e:	d019      	beq.n	80132a4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013270:	693b      	ldr	r3, [r7, #16]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d115      	bne.n	80132a4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013278:	693b      	ldr	r3, [r7, #16]
 801327a:	685a      	ldr	r2, [r3, #4]
 801327c:	4b0b      	ldr	r3, [pc, #44]	; (80132ac <vPortFree+0xa8>)
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	43db      	mvns	r3, r3
 8013282:	401a      	ands	r2, r3
 8013284:	693b      	ldr	r3, [r7, #16]
 8013286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013288:	f7fe fbc6 	bl	8011a18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801328c:	693b      	ldr	r3, [r7, #16]
 801328e:	685a      	ldr	r2, [r3, #4]
 8013290:	4b07      	ldr	r3, [pc, #28]	; (80132b0 <vPortFree+0xac>)
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	4413      	add	r3, r2
 8013296:	4a06      	ldr	r2, [pc, #24]	; (80132b0 <vPortFree+0xac>)
 8013298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801329a:	6938      	ldr	r0, [r7, #16]
 801329c:	f000 f86c 	bl	8013378 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80132a0:	f7fe fbc8 	bl	8011a34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80132a4:	bf00      	nop
 80132a6:	3718      	adds	r7, #24
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd80      	pop	{r7, pc}
 80132ac:	200037f0 	.word	0x200037f0
 80132b0:	200037e8 	.word	0x200037e8

080132b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80132b4:	b480      	push	{r7}
 80132b6:	b085      	sub	sp, #20
 80132b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80132ba:	f242 3328 	movw	r3, #9000	; 0x2328
 80132be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80132c0:	4b27      	ldr	r3, [pc, #156]	; (8013360 <prvHeapInit+0xac>)
 80132c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	f003 0307 	and.w	r3, r3, #7
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d00c      	beq.n	80132e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	3307      	adds	r3, #7
 80132d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	f023 0307 	bic.w	r3, r3, #7
 80132da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80132dc:	68ba      	ldr	r2, [r7, #8]
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	1ad3      	subs	r3, r2, r3
 80132e2:	4a1f      	ldr	r2, [pc, #124]	; (8013360 <prvHeapInit+0xac>)
 80132e4:	4413      	add	r3, r2
 80132e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80132ec:	4a1d      	ldr	r2, [pc, #116]	; (8013364 <prvHeapInit+0xb0>)
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80132f2:	4b1c      	ldr	r3, [pc, #112]	; (8013364 <prvHeapInit+0xb0>)
 80132f4:	2200      	movs	r2, #0
 80132f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	68ba      	ldr	r2, [r7, #8]
 80132fc:	4413      	add	r3, r2
 80132fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013300:	2208      	movs	r2, #8
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	1a9b      	subs	r3, r3, r2
 8013306:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	f023 0307 	bic.w	r3, r3, #7
 801330e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	4a15      	ldr	r2, [pc, #84]	; (8013368 <prvHeapInit+0xb4>)
 8013314:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013316:	4b14      	ldr	r3, [pc, #80]	; (8013368 <prvHeapInit+0xb4>)
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	2200      	movs	r2, #0
 801331c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801331e:	4b12      	ldr	r3, [pc, #72]	; (8013368 <prvHeapInit+0xb4>)
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	2200      	movs	r2, #0
 8013324:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801332a:	683b      	ldr	r3, [r7, #0]
 801332c:	68fa      	ldr	r2, [r7, #12]
 801332e:	1ad2      	subs	r2, r2, r3
 8013330:	683b      	ldr	r3, [r7, #0]
 8013332:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013334:	4b0c      	ldr	r3, [pc, #48]	; (8013368 <prvHeapInit+0xb4>)
 8013336:	681a      	ldr	r2, [r3, #0]
 8013338:	683b      	ldr	r3, [r7, #0]
 801333a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801333c:	683b      	ldr	r3, [r7, #0]
 801333e:	685b      	ldr	r3, [r3, #4]
 8013340:	4a0a      	ldr	r2, [pc, #40]	; (801336c <prvHeapInit+0xb8>)
 8013342:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013344:	683b      	ldr	r3, [r7, #0]
 8013346:	685b      	ldr	r3, [r3, #4]
 8013348:	4a09      	ldr	r2, [pc, #36]	; (8013370 <prvHeapInit+0xbc>)
 801334a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801334c:	4b09      	ldr	r3, [pc, #36]	; (8013374 <prvHeapInit+0xc0>)
 801334e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013352:	601a      	str	r2, [r3, #0]
}
 8013354:	bf00      	nop
 8013356:	3714      	adds	r7, #20
 8013358:	46bd      	mov	sp, r7
 801335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801335e:	4770      	bx	lr
 8013360:	200014b4 	.word	0x200014b4
 8013364:	200037dc 	.word	0x200037dc
 8013368:	200037e4 	.word	0x200037e4
 801336c:	200037ec 	.word	0x200037ec
 8013370:	200037e8 	.word	0x200037e8
 8013374:	200037f0 	.word	0x200037f0

08013378 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013378:	b480      	push	{r7}
 801337a:	b085      	sub	sp, #20
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013380:	4b28      	ldr	r3, [pc, #160]	; (8013424 <prvInsertBlockIntoFreeList+0xac>)
 8013382:	60fb      	str	r3, [r7, #12]
 8013384:	e002      	b.n	801338c <prvInsertBlockIntoFreeList+0x14>
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	60fb      	str	r3, [r7, #12]
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	687a      	ldr	r2, [r7, #4]
 8013392:	429a      	cmp	r2, r3
 8013394:	d8f7      	bhi.n	8013386 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	685b      	ldr	r3, [r3, #4]
 801339e:	68ba      	ldr	r2, [r7, #8]
 80133a0:	4413      	add	r3, r2
 80133a2:	687a      	ldr	r2, [r7, #4]
 80133a4:	429a      	cmp	r2, r3
 80133a6:	d108      	bne.n	80133ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	685a      	ldr	r2, [r3, #4]
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	685b      	ldr	r3, [r3, #4]
 80133b0:	441a      	add	r2, r3
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	685b      	ldr	r3, [r3, #4]
 80133c2:	68ba      	ldr	r2, [r7, #8]
 80133c4:	441a      	add	r2, r3
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	429a      	cmp	r2, r3
 80133cc:	d118      	bne.n	8013400 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	681a      	ldr	r2, [r3, #0]
 80133d2:	4b15      	ldr	r3, [pc, #84]	; (8013428 <prvInsertBlockIntoFreeList+0xb0>)
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	429a      	cmp	r2, r3
 80133d8:	d00d      	beq.n	80133f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	685a      	ldr	r2, [r3, #4]
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	685b      	ldr	r3, [r3, #4]
 80133e4:	441a      	add	r2, r3
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	681a      	ldr	r2, [r3, #0]
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	601a      	str	r2, [r3, #0]
 80133f4:	e008      	b.n	8013408 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80133f6:	4b0c      	ldr	r3, [pc, #48]	; (8013428 <prvInsertBlockIntoFreeList+0xb0>)
 80133f8:	681a      	ldr	r2, [r3, #0]
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	601a      	str	r2, [r3, #0]
 80133fe:	e003      	b.n	8013408 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	681a      	ldr	r2, [r3, #0]
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013408:	68fa      	ldr	r2, [r7, #12]
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	429a      	cmp	r2, r3
 801340e:	d002      	beq.n	8013416 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	687a      	ldr	r2, [r7, #4]
 8013414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013416:	bf00      	nop
 8013418:	3714      	adds	r7, #20
 801341a:	46bd      	mov	sp, r7
 801341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013420:	4770      	bx	lr
 8013422:	bf00      	nop
 8013424:	200037dc 	.word	0x200037dc
 8013428:	200037e4 	.word	0x200037e4

0801342c <atoi>:
 801342c:	220a      	movs	r2, #10
 801342e:	2100      	movs	r1, #0
 8013430:	f000 ba24 	b.w	801387c <strtol>

08013434 <__errno>:
 8013434:	4b01      	ldr	r3, [pc, #4]	; (801343c <__errno+0x8>)
 8013436:	6818      	ldr	r0, [r3, #0]
 8013438:	4770      	bx	lr
 801343a:	bf00      	nop
 801343c:	20000494 	.word	0x20000494

08013440 <__libc_init_array>:
 8013440:	b570      	push	{r4, r5, r6, lr}
 8013442:	4e0d      	ldr	r6, [pc, #52]	; (8013478 <__libc_init_array+0x38>)
 8013444:	4c0d      	ldr	r4, [pc, #52]	; (801347c <__libc_init_array+0x3c>)
 8013446:	1ba4      	subs	r4, r4, r6
 8013448:	10a4      	asrs	r4, r4, #2
 801344a:	2500      	movs	r5, #0
 801344c:	42a5      	cmp	r5, r4
 801344e:	d109      	bne.n	8013464 <__libc_init_array+0x24>
 8013450:	4e0b      	ldr	r6, [pc, #44]	; (8013480 <__libc_init_array+0x40>)
 8013452:	4c0c      	ldr	r4, [pc, #48]	; (8013484 <__libc_init_array+0x44>)
 8013454:	f002 fb4a 	bl	8015aec <_init>
 8013458:	1ba4      	subs	r4, r4, r6
 801345a:	10a4      	asrs	r4, r4, #2
 801345c:	2500      	movs	r5, #0
 801345e:	42a5      	cmp	r5, r4
 8013460:	d105      	bne.n	801346e <__libc_init_array+0x2e>
 8013462:	bd70      	pop	{r4, r5, r6, pc}
 8013464:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013468:	4798      	blx	r3
 801346a:	3501      	adds	r5, #1
 801346c:	e7ee      	b.n	801344c <__libc_init_array+0xc>
 801346e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013472:	4798      	blx	r3
 8013474:	3501      	adds	r5, #1
 8013476:	e7f2      	b.n	801345e <__libc_init_array+0x1e>
 8013478:	08016fa8 	.word	0x08016fa8
 801347c:	08016fa8 	.word	0x08016fa8
 8013480:	08016fa8 	.word	0x08016fa8
 8013484:	08016fac 	.word	0x08016fac

08013488 <memcmp>:
 8013488:	b530      	push	{r4, r5, lr}
 801348a:	2400      	movs	r4, #0
 801348c:	42a2      	cmp	r2, r4
 801348e:	d101      	bne.n	8013494 <memcmp+0xc>
 8013490:	2000      	movs	r0, #0
 8013492:	e007      	b.n	80134a4 <memcmp+0x1c>
 8013494:	5d03      	ldrb	r3, [r0, r4]
 8013496:	3401      	adds	r4, #1
 8013498:	190d      	adds	r5, r1, r4
 801349a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801349e:	42ab      	cmp	r3, r5
 80134a0:	d0f4      	beq.n	801348c <memcmp+0x4>
 80134a2:	1b58      	subs	r0, r3, r5
 80134a4:	bd30      	pop	{r4, r5, pc}

080134a6 <memcpy>:
 80134a6:	b510      	push	{r4, lr}
 80134a8:	1e43      	subs	r3, r0, #1
 80134aa:	440a      	add	r2, r1
 80134ac:	4291      	cmp	r1, r2
 80134ae:	d100      	bne.n	80134b2 <memcpy+0xc>
 80134b0:	bd10      	pop	{r4, pc}
 80134b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80134b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80134ba:	e7f7      	b.n	80134ac <memcpy+0x6>

080134bc <memset>:
 80134bc:	4402      	add	r2, r0
 80134be:	4603      	mov	r3, r0
 80134c0:	4293      	cmp	r3, r2
 80134c2:	d100      	bne.n	80134c6 <memset+0xa>
 80134c4:	4770      	bx	lr
 80134c6:	f803 1b01 	strb.w	r1, [r3], #1
 80134ca:	e7f9      	b.n	80134c0 <memset+0x4>

080134cc <iprintf>:
 80134cc:	b40f      	push	{r0, r1, r2, r3}
 80134ce:	4b0a      	ldr	r3, [pc, #40]	; (80134f8 <iprintf+0x2c>)
 80134d0:	b513      	push	{r0, r1, r4, lr}
 80134d2:	681c      	ldr	r4, [r3, #0]
 80134d4:	b124      	cbz	r4, 80134e0 <iprintf+0x14>
 80134d6:	69a3      	ldr	r3, [r4, #24]
 80134d8:	b913      	cbnz	r3, 80134e0 <iprintf+0x14>
 80134da:	4620      	mov	r0, r4
 80134dc:	f000 fb94 	bl	8013c08 <__sinit>
 80134e0:	ab05      	add	r3, sp, #20
 80134e2:	9a04      	ldr	r2, [sp, #16]
 80134e4:	68a1      	ldr	r1, [r4, #8]
 80134e6:	9301      	str	r3, [sp, #4]
 80134e8:	4620      	mov	r0, r4
 80134ea:	f000 febd 	bl	8014268 <_vfiprintf_r>
 80134ee:	b002      	add	sp, #8
 80134f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134f4:	b004      	add	sp, #16
 80134f6:	4770      	bx	lr
 80134f8:	20000494 	.word	0x20000494

080134fc <_puts_r>:
 80134fc:	b570      	push	{r4, r5, r6, lr}
 80134fe:	460e      	mov	r6, r1
 8013500:	4605      	mov	r5, r0
 8013502:	b118      	cbz	r0, 801350c <_puts_r+0x10>
 8013504:	6983      	ldr	r3, [r0, #24]
 8013506:	b90b      	cbnz	r3, 801350c <_puts_r+0x10>
 8013508:	f000 fb7e 	bl	8013c08 <__sinit>
 801350c:	69ab      	ldr	r3, [r5, #24]
 801350e:	68ac      	ldr	r4, [r5, #8]
 8013510:	b913      	cbnz	r3, 8013518 <_puts_r+0x1c>
 8013512:	4628      	mov	r0, r5
 8013514:	f000 fb78 	bl	8013c08 <__sinit>
 8013518:	4b23      	ldr	r3, [pc, #140]	; (80135a8 <_puts_r+0xac>)
 801351a:	429c      	cmp	r4, r3
 801351c:	d117      	bne.n	801354e <_puts_r+0x52>
 801351e:	686c      	ldr	r4, [r5, #4]
 8013520:	89a3      	ldrh	r3, [r4, #12]
 8013522:	071b      	lsls	r3, r3, #28
 8013524:	d51d      	bpl.n	8013562 <_puts_r+0x66>
 8013526:	6923      	ldr	r3, [r4, #16]
 8013528:	b1db      	cbz	r3, 8013562 <_puts_r+0x66>
 801352a:	3e01      	subs	r6, #1
 801352c:	68a3      	ldr	r3, [r4, #8]
 801352e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013532:	3b01      	subs	r3, #1
 8013534:	60a3      	str	r3, [r4, #8]
 8013536:	b9e9      	cbnz	r1, 8013574 <_puts_r+0x78>
 8013538:	2b00      	cmp	r3, #0
 801353a:	da2e      	bge.n	801359a <_puts_r+0x9e>
 801353c:	4622      	mov	r2, r4
 801353e:	210a      	movs	r1, #10
 8013540:	4628      	mov	r0, r5
 8013542:	f000 f9b1 	bl	80138a8 <__swbuf_r>
 8013546:	3001      	adds	r0, #1
 8013548:	d011      	beq.n	801356e <_puts_r+0x72>
 801354a:	200a      	movs	r0, #10
 801354c:	e011      	b.n	8013572 <_puts_r+0x76>
 801354e:	4b17      	ldr	r3, [pc, #92]	; (80135ac <_puts_r+0xb0>)
 8013550:	429c      	cmp	r4, r3
 8013552:	d101      	bne.n	8013558 <_puts_r+0x5c>
 8013554:	68ac      	ldr	r4, [r5, #8]
 8013556:	e7e3      	b.n	8013520 <_puts_r+0x24>
 8013558:	4b15      	ldr	r3, [pc, #84]	; (80135b0 <_puts_r+0xb4>)
 801355a:	429c      	cmp	r4, r3
 801355c:	bf08      	it	eq
 801355e:	68ec      	ldreq	r4, [r5, #12]
 8013560:	e7de      	b.n	8013520 <_puts_r+0x24>
 8013562:	4621      	mov	r1, r4
 8013564:	4628      	mov	r0, r5
 8013566:	f000 f9f1 	bl	801394c <__swsetup_r>
 801356a:	2800      	cmp	r0, #0
 801356c:	d0dd      	beq.n	801352a <_puts_r+0x2e>
 801356e:	f04f 30ff 	mov.w	r0, #4294967295
 8013572:	bd70      	pop	{r4, r5, r6, pc}
 8013574:	2b00      	cmp	r3, #0
 8013576:	da04      	bge.n	8013582 <_puts_r+0x86>
 8013578:	69a2      	ldr	r2, [r4, #24]
 801357a:	429a      	cmp	r2, r3
 801357c:	dc06      	bgt.n	801358c <_puts_r+0x90>
 801357e:	290a      	cmp	r1, #10
 8013580:	d004      	beq.n	801358c <_puts_r+0x90>
 8013582:	6823      	ldr	r3, [r4, #0]
 8013584:	1c5a      	adds	r2, r3, #1
 8013586:	6022      	str	r2, [r4, #0]
 8013588:	7019      	strb	r1, [r3, #0]
 801358a:	e7cf      	b.n	801352c <_puts_r+0x30>
 801358c:	4622      	mov	r2, r4
 801358e:	4628      	mov	r0, r5
 8013590:	f000 f98a 	bl	80138a8 <__swbuf_r>
 8013594:	3001      	adds	r0, #1
 8013596:	d1c9      	bne.n	801352c <_puts_r+0x30>
 8013598:	e7e9      	b.n	801356e <_puts_r+0x72>
 801359a:	6823      	ldr	r3, [r4, #0]
 801359c:	200a      	movs	r0, #10
 801359e:	1c5a      	adds	r2, r3, #1
 80135a0:	6022      	str	r2, [r4, #0]
 80135a2:	7018      	strb	r0, [r3, #0]
 80135a4:	e7e5      	b.n	8013572 <_puts_r+0x76>
 80135a6:	bf00      	nop
 80135a8:	08016dd8 	.word	0x08016dd8
 80135ac:	08016df8 	.word	0x08016df8
 80135b0:	08016db8 	.word	0x08016db8

080135b4 <puts>:
 80135b4:	4b02      	ldr	r3, [pc, #8]	; (80135c0 <puts+0xc>)
 80135b6:	4601      	mov	r1, r0
 80135b8:	6818      	ldr	r0, [r3, #0]
 80135ba:	f7ff bf9f 	b.w	80134fc <_puts_r>
 80135be:	bf00      	nop
 80135c0:	20000494 	.word	0x20000494

080135c4 <sniprintf>:
 80135c4:	b40c      	push	{r2, r3}
 80135c6:	b530      	push	{r4, r5, lr}
 80135c8:	4b17      	ldr	r3, [pc, #92]	; (8013628 <sniprintf+0x64>)
 80135ca:	1e0c      	subs	r4, r1, #0
 80135cc:	b09d      	sub	sp, #116	; 0x74
 80135ce:	681d      	ldr	r5, [r3, #0]
 80135d0:	da08      	bge.n	80135e4 <sniprintf+0x20>
 80135d2:	238b      	movs	r3, #139	; 0x8b
 80135d4:	602b      	str	r3, [r5, #0]
 80135d6:	f04f 30ff 	mov.w	r0, #4294967295
 80135da:	b01d      	add	sp, #116	; 0x74
 80135dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80135e0:	b002      	add	sp, #8
 80135e2:	4770      	bx	lr
 80135e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80135e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80135ec:	bf14      	ite	ne
 80135ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 80135f2:	4623      	moveq	r3, r4
 80135f4:	9304      	str	r3, [sp, #16]
 80135f6:	9307      	str	r3, [sp, #28]
 80135f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80135fc:	9002      	str	r0, [sp, #8]
 80135fe:	9006      	str	r0, [sp, #24]
 8013600:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013604:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013606:	ab21      	add	r3, sp, #132	; 0x84
 8013608:	a902      	add	r1, sp, #8
 801360a:	4628      	mov	r0, r5
 801360c:	9301      	str	r3, [sp, #4]
 801360e:	f000 fd09 	bl	8014024 <_svfiprintf_r>
 8013612:	1c43      	adds	r3, r0, #1
 8013614:	bfbc      	itt	lt
 8013616:	238b      	movlt	r3, #139	; 0x8b
 8013618:	602b      	strlt	r3, [r5, #0]
 801361a:	2c00      	cmp	r4, #0
 801361c:	d0dd      	beq.n	80135da <sniprintf+0x16>
 801361e:	9b02      	ldr	r3, [sp, #8]
 8013620:	2200      	movs	r2, #0
 8013622:	701a      	strb	r2, [r3, #0]
 8013624:	e7d9      	b.n	80135da <sniprintf+0x16>
 8013626:	bf00      	nop
 8013628:	20000494 	.word	0x20000494

0801362c <siprintf>:
 801362c:	b40e      	push	{r1, r2, r3}
 801362e:	b500      	push	{lr}
 8013630:	b09c      	sub	sp, #112	; 0x70
 8013632:	ab1d      	add	r3, sp, #116	; 0x74
 8013634:	9002      	str	r0, [sp, #8]
 8013636:	9006      	str	r0, [sp, #24]
 8013638:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801363c:	4809      	ldr	r0, [pc, #36]	; (8013664 <siprintf+0x38>)
 801363e:	9107      	str	r1, [sp, #28]
 8013640:	9104      	str	r1, [sp, #16]
 8013642:	4909      	ldr	r1, [pc, #36]	; (8013668 <siprintf+0x3c>)
 8013644:	f853 2b04 	ldr.w	r2, [r3], #4
 8013648:	9105      	str	r1, [sp, #20]
 801364a:	6800      	ldr	r0, [r0, #0]
 801364c:	9301      	str	r3, [sp, #4]
 801364e:	a902      	add	r1, sp, #8
 8013650:	f000 fce8 	bl	8014024 <_svfiprintf_r>
 8013654:	9b02      	ldr	r3, [sp, #8]
 8013656:	2200      	movs	r2, #0
 8013658:	701a      	strb	r2, [r3, #0]
 801365a:	b01c      	add	sp, #112	; 0x70
 801365c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013660:	b003      	add	sp, #12
 8013662:	4770      	bx	lr
 8013664:	20000494 	.word	0x20000494
 8013668:	ffff0208 	.word	0xffff0208

0801366c <strcpy>:
 801366c:	4603      	mov	r3, r0
 801366e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013672:	f803 2b01 	strb.w	r2, [r3], #1
 8013676:	2a00      	cmp	r2, #0
 8013678:	d1f9      	bne.n	801366e <strcpy+0x2>
 801367a:	4770      	bx	lr

0801367c <strncpy>:
 801367c:	b570      	push	{r4, r5, r6, lr}
 801367e:	3901      	subs	r1, #1
 8013680:	4604      	mov	r4, r0
 8013682:	b902      	cbnz	r2, 8013686 <strncpy+0xa>
 8013684:	bd70      	pop	{r4, r5, r6, pc}
 8013686:	4623      	mov	r3, r4
 8013688:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801368c:	f803 5b01 	strb.w	r5, [r3], #1
 8013690:	1e56      	subs	r6, r2, #1
 8013692:	b92d      	cbnz	r5, 80136a0 <strncpy+0x24>
 8013694:	4414      	add	r4, r2
 8013696:	42a3      	cmp	r3, r4
 8013698:	d0f4      	beq.n	8013684 <strncpy+0x8>
 801369a:	f803 5b01 	strb.w	r5, [r3], #1
 801369e:	e7fa      	b.n	8013696 <strncpy+0x1a>
 80136a0:	461c      	mov	r4, r3
 80136a2:	4632      	mov	r2, r6
 80136a4:	e7ed      	b.n	8013682 <strncpy+0x6>

080136a6 <strstr>:
 80136a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136a8:	7803      	ldrb	r3, [r0, #0]
 80136aa:	b17b      	cbz	r3, 80136cc <strstr+0x26>
 80136ac:	4604      	mov	r4, r0
 80136ae:	7823      	ldrb	r3, [r4, #0]
 80136b0:	4620      	mov	r0, r4
 80136b2:	1c66      	adds	r6, r4, #1
 80136b4:	b17b      	cbz	r3, 80136d6 <strstr+0x30>
 80136b6:	1e4a      	subs	r2, r1, #1
 80136b8:	1e63      	subs	r3, r4, #1
 80136ba:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80136be:	b14d      	cbz	r5, 80136d4 <strstr+0x2e>
 80136c0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80136c4:	42af      	cmp	r7, r5
 80136c6:	4634      	mov	r4, r6
 80136c8:	d0f7      	beq.n	80136ba <strstr+0x14>
 80136ca:	e7f0      	b.n	80136ae <strstr+0x8>
 80136cc:	780b      	ldrb	r3, [r1, #0]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	bf18      	it	ne
 80136d2:	2000      	movne	r0, #0
 80136d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136d6:	4618      	mov	r0, r3
 80136d8:	e7fc      	b.n	80136d4 <strstr+0x2e>
	...

080136dc <strtok>:
 80136dc:	4b13      	ldr	r3, [pc, #76]	; (801372c <strtok+0x50>)
 80136de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136e2:	681d      	ldr	r5, [r3, #0]
 80136e4:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80136e6:	4606      	mov	r6, r0
 80136e8:	460f      	mov	r7, r1
 80136ea:	b9b4      	cbnz	r4, 801371a <strtok+0x3e>
 80136ec:	2050      	movs	r0, #80	; 0x50
 80136ee:	f000 fb7d 	bl	8013dec <malloc>
 80136f2:	65a8      	str	r0, [r5, #88]	; 0x58
 80136f4:	e9c0 4400 	strd	r4, r4, [r0]
 80136f8:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80136fc:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8013700:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8013704:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8013708:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801370c:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8013710:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8013714:	6184      	str	r4, [r0, #24]
 8013716:	7704      	strb	r4, [r0, #28]
 8013718:	6244      	str	r4, [r0, #36]	; 0x24
 801371a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 801371c:	4639      	mov	r1, r7
 801371e:	4630      	mov	r0, r6
 8013720:	2301      	movs	r3, #1
 8013722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013726:	f000 b803 	b.w	8013730 <__strtok_r>
 801372a:	bf00      	nop
 801372c:	20000494 	.word	0x20000494

08013730 <__strtok_r>:
 8013730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013732:	b918      	cbnz	r0, 801373c <__strtok_r+0xc>
 8013734:	6810      	ldr	r0, [r2, #0]
 8013736:	b908      	cbnz	r0, 801373c <__strtok_r+0xc>
 8013738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801373a:	4620      	mov	r0, r4
 801373c:	4604      	mov	r4, r0
 801373e:	460f      	mov	r7, r1
 8013740:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013744:	f817 6b01 	ldrb.w	r6, [r7], #1
 8013748:	b91e      	cbnz	r6, 8013752 <__strtok_r+0x22>
 801374a:	b96d      	cbnz	r5, 8013768 <__strtok_r+0x38>
 801374c:	6015      	str	r5, [r2, #0]
 801374e:	4628      	mov	r0, r5
 8013750:	e7f2      	b.n	8013738 <__strtok_r+0x8>
 8013752:	42b5      	cmp	r5, r6
 8013754:	d1f6      	bne.n	8013744 <__strtok_r+0x14>
 8013756:	2b00      	cmp	r3, #0
 8013758:	d1ef      	bne.n	801373a <__strtok_r+0xa>
 801375a:	6014      	str	r4, [r2, #0]
 801375c:	7003      	strb	r3, [r0, #0]
 801375e:	e7eb      	b.n	8013738 <__strtok_r+0x8>
 8013760:	462b      	mov	r3, r5
 8013762:	e00d      	b.n	8013780 <__strtok_r+0x50>
 8013764:	b926      	cbnz	r6, 8013770 <__strtok_r+0x40>
 8013766:	461c      	mov	r4, r3
 8013768:	4623      	mov	r3, r4
 801376a:	460f      	mov	r7, r1
 801376c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8013770:	f817 6b01 	ldrb.w	r6, [r7], #1
 8013774:	42b5      	cmp	r5, r6
 8013776:	d1f5      	bne.n	8013764 <__strtok_r+0x34>
 8013778:	2d00      	cmp	r5, #0
 801377a:	d0f1      	beq.n	8013760 <__strtok_r+0x30>
 801377c:	2100      	movs	r1, #0
 801377e:	7021      	strb	r1, [r4, #0]
 8013780:	6013      	str	r3, [r2, #0]
 8013782:	e7d9      	b.n	8013738 <__strtok_r+0x8>

08013784 <_strtol_l.isra.0>:
 8013784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013788:	4680      	mov	r8, r0
 801378a:	4689      	mov	r9, r1
 801378c:	4692      	mov	sl, r2
 801378e:	461e      	mov	r6, r3
 8013790:	460f      	mov	r7, r1
 8013792:	463d      	mov	r5, r7
 8013794:	9808      	ldr	r0, [sp, #32]
 8013796:	f815 4b01 	ldrb.w	r4, [r5], #1
 801379a:	f000 fabf 	bl	8013d1c <__locale_ctype_ptr_l>
 801379e:	4420      	add	r0, r4
 80137a0:	7843      	ldrb	r3, [r0, #1]
 80137a2:	f013 0308 	ands.w	r3, r3, #8
 80137a6:	d132      	bne.n	801380e <_strtol_l.isra.0+0x8a>
 80137a8:	2c2d      	cmp	r4, #45	; 0x2d
 80137aa:	d132      	bne.n	8013812 <_strtol_l.isra.0+0x8e>
 80137ac:	787c      	ldrb	r4, [r7, #1]
 80137ae:	1cbd      	adds	r5, r7, #2
 80137b0:	2201      	movs	r2, #1
 80137b2:	2e00      	cmp	r6, #0
 80137b4:	d05d      	beq.n	8013872 <_strtol_l.isra.0+0xee>
 80137b6:	2e10      	cmp	r6, #16
 80137b8:	d109      	bne.n	80137ce <_strtol_l.isra.0+0x4a>
 80137ba:	2c30      	cmp	r4, #48	; 0x30
 80137bc:	d107      	bne.n	80137ce <_strtol_l.isra.0+0x4a>
 80137be:	782b      	ldrb	r3, [r5, #0]
 80137c0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80137c4:	2b58      	cmp	r3, #88	; 0x58
 80137c6:	d14f      	bne.n	8013868 <_strtol_l.isra.0+0xe4>
 80137c8:	786c      	ldrb	r4, [r5, #1]
 80137ca:	2610      	movs	r6, #16
 80137cc:	3502      	adds	r5, #2
 80137ce:	2a00      	cmp	r2, #0
 80137d0:	bf14      	ite	ne
 80137d2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80137d6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80137da:	2700      	movs	r7, #0
 80137dc:	fbb1 fcf6 	udiv	ip, r1, r6
 80137e0:	4638      	mov	r0, r7
 80137e2:	fb06 1e1c 	mls	lr, r6, ip, r1
 80137e6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80137ea:	2b09      	cmp	r3, #9
 80137ec:	d817      	bhi.n	801381e <_strtol_l.isra.0+0x9a>
 80137ee:	461c      	mov	r4, r3
 80137f0:	42a6      	cmp	r6, r4
 80137f2:	dd23      	ble.n	801383c <_strtol_l.isra.0+0xb8>
 80137f4:	1c7b      	adds	r3, r7, #1
 80137f6:	d007      	beq.n	8013808 <_strtol_l.isra.0+0x84>
 80137f8:	4584      	cmp	ip, r0
 80137fa:	d31c      	bcc.n	8013836 <_strtol_l.isra.0+0xb2>
 80137fc:	d101      	bne.n	8013802 <_strtol_l.isra.0+0x7e>
 80137fe:	45a6      	cmp	lr, r4
 8013800:	db19      	blt.n	8013836 <_strtol_l.isra.0+0xb2>
 8013802:	fb00 4006 	mla	r0, r0, r6, r4
 8013806:	2701      	movs	r7, #1
 8013808:	f815 4b01 	ldrb.w	r4, [r5], #1
 801380c:	e7eb      	b.n	80137e6 <_strtol_l.isra.0+0x62>
 801380e:	462f      	mov	r7, r5
 8013810:	e7bf      	b.n	8013792 <_strtol_l.isra.0+0xe>
 8013812:	2c2b      	cmp	r4, #43	; 0x2b
 8013814:	bf04      	itt	eq
 8013816:	1cbd      	addeq	r5, r7, #2
 8013818:	787c      	ldrbeq	r4, [r7, #1]
 801381a:	461a      	mov	r2, r3
 801381c:	e7c9      	b.n	80137b2 <_strtol_l.isra.0+0x2e>
 801381e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8013822:	2b19      	cmp	r3, #25
 8013824:	d801      	bhi.n	801382a <_strtol_l.isra.0+0xa6>
 8013826:	3c37      	subs	r4, #55	; 0x37
 8013828:	e7e2      	b.n	80137f0 <_strtol_l.isra.0+0x6c>
 801382a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801382e:	2b19      	cmp	r3, #25
 8013830:	d804      	bhi.n	801383c <_strtol_l.isra.0+0xb8>
 8013832:	3c57      	subs	r4, #87	; 0x57
 8013834:	e7dc      	b.n	80137f0 <_strtol_l.isra.0+0x6c>
 8013836:	f04f 37ff 	mov.w	r7, #4294967295
 801383a:	e7e5      	b.n	8013808 <_strtol_l.isra.0+0x84>
 801383c:	1c7b      	adds	r3, r7, #1
 801383e:	d108      	bne.n	8013852 <_strtol_l.isra.0+0xce>
 8013840:	2322      	movs	r3, #34	; 0x22
 8013842:	f8c8 3000 	str.w	r3, [r8]
 8013846:	4608      	mov	r0, r1
 8013848:	f1ba 0f00 	cmp.w	sl, #0
 801384c:	d107      	bne.n	801385e <_strtol_l.isra.0+0xda>
 801384e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013852:	b102      	cbz	r2, 8013856 <_strtol_l.isra.0+0xd2>
 8013854:	4240      	negs	r0, r0
 8013856:	f1ba 0f00 	cmp.w	sl, #0
 801385a:	d0f8      	beq.n	801384e <_strtol_l.isra.0+0xca>
 801385c:	b10f      	cbz	r7, 8013862 <_strtol_l.isra.0+0xde>
 801385e:	f105 39ff 	add.w	r9, r5, #4294967295
 8013862:	f8ca 9000 	str.w	r9, [sl]
 8013866:	e7f2      	b.n	801384e <_strtol_l.isra.0+0xca>
 8013868:	2430      	movs	r4, #48	; 0x30
 801386a:	2e00      	cmp	r6, #0
 801386c:	d1af      	bne.n	80137ce <_strtol_l.isra.0+0x4a>
 801386e:	2608      	movs	r6, #8
 8013870:	e7ad      	b.n	80137ce <_strtol_l.isra.0+0x4a>
 8013872:	2c30      	cmp	r4, #48	; 0x30
 8013874:	d0a3      	beq.n	80137be <_strtol_l.isra.0+0x3a>
 8013876:	260a      	movs	r6, #10
 8013878:	e7a9      	b.n	80137ce <_strtol_l.isra.0+0x4a>
	...

0801387c <strtol>:
 801387c:	4b08      	ldr	r3, [pc, #32]	; (80138a0 <strtol+0x24>)
 801387e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013880:	681c      	ldr	r4, [r3, #0]
 8013882:	4d08      	ldr	r5, [pc, #32]	; (80138a4 <strtol+0x28>)
 8013884:	6a23      	ldr	r3, [r4, #32]
 8013886:	2b00      	cmp	r3, #0
 8013888:	bf08      	it	eq
 801388a:	462b      	moveq	r3, r5
 801388c:	9300      	str	r3, [sp, #0]
 801388e:	4613      	mov	r3, r2
 8013890:	460a      	mov	r2, r1
 8013892:	4601      	mov	r1, r0
 8013894:	4620      	mov	r0, r4
 8013896:	f7ff ff75 	bl	8013784 <_strtol_l.isra.0>
 801389a:	b003      	add	sp, #12
 801389c:	bd30      	pop	{r4, r5, pc}
 801389e:	bf00      	nop
 80138a0:	20000494 	.word	0x20000494
 80138a4:	200004f8 	.word	0x200004f8

080138a8 <__swbuf_r>:
 80138a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138aa:	460e      	mov	r6, r1
 80138ac:	4614      	mov	r4, r2
 80138ae:	4605      	mov	r5, r0
 80138b0:	b118      	cbz	r0, 80138ba <__swbuf_r+0x12>
 80138b2:	6983      	ldr	r3, [r0, #24]
 80138b4:	b90b      	cbnz	r3, 80138ba <__swbuf_r+0x12>
 80138b6:	f000 f9a7 	bl	8013c08 <__sinit>
 80138ba:	4b21      	ldr	r3, [pc, #132]	; (8013940 <__swbuf_r+0x98>)
 80138bc:	429c      	cmp	r4, r3
 80138be:	d12a      	bne.n	8013916 <__swbuf_r+0x6e>
 80138c0:	686c      	ldr	r4, [r5, #4]
 80138c2:	69a3      	ldr	r3, [r4, #24]
 80138c4:	60a3      	str	r3, [r4, #8]
 80138c6:	89a3      	ldrh	r3, [r4, #12]
 80138c8:	071a      	lsls	r2, r3, #28
 80138ca:	d52e      	bpl.n	801392a <__swbuf_r+0x82>
 80138cc:	6923      	ldr	r3, [r4, #16]
 80138ce:	b363      	cbz	r3, 801392a <__swbuf_r+0x82>
 80138d0:	6923      	ldr	r3, [r4, #16]
 80138d2:	6820      	ldr	r0, [r4, #0]
 80138d4:	1ac0      	subs	r0, r0, r3
 80138d6:	6963      	ldr	r3, [r4, #20]
 80138d8:	b2f6      	uxtb	r6, r6
 80138da:	4283      	cmp	r3, r0
 80138dc:	4637      	mov	r7, r6
 80138de:	dc04      	bgt.n	80138ea <__swbuf_r+0x42>
 80138e0:	4621      	mov	r1, r4
 80138e2:	4628      	mov	r0, r5
 80138e4:	f000 f926 	bl	8013b34 <_fflush_r>
 80138e8:	bb28      	cbnz	r0, 8013936 <__swbuf_r+0x8e>
 80138ea:	68a3      	ldr	r3, [r4, #8]
 80138ec:	3b01      	subs	r3, #1
 80138ee:	60a3      	str	r3, [r4, #8]
 80138f0:	6823      	ldr	r3, [r4, #0]
 80138f2:	1c5a      	adds	r2, r3, #1
 80138f4:	6022      	str	r2, [r4, #0]
 80138f6:	701e      	strb	r6, [r3, #0]
 80138f8:	6963      	ldr	r3, [r4, #20]
 80138fa:	3001      	adds	r0, #1
 80138fc:	4283      	cmp	r3, r0
 80138fe:	d004      	beq.n	801390a <__swbuf_r+0x62>
 8013900:	89a3      	ldrh	r3, [r4, #12]
 8013902:	07db      	lsls	r3, r3, #31
 8013904:	d519      	bpl.n	801393a <__swbuf_r+0x92>
 8013906:	2e0a      	cmp	r6, #10
 8013908:	d117      	bne.n	801393a <__swbuf_r+0x92>
 801390a:	4621      	mov	r1, r4
 801390c:	4628      	mov	r0, r5
 801390e:	f000 f911 	bl	8013b34 <_fflush_r>
 8013912:	b190      	cbz	r0, 801393a <__swbuf_r+0x92>
 8013914:	e00f      	b.n	8013936 <__swbuf_r+0x8e>
 8013916:	4b0b      	ldr	r3, [pc, #44]	; (8013944 <__swbuf_r+0x9c>)
 8013918:	429c      	cmp	r4, r3
 801391a:	d101      	bne.n	8013920 <__swbuf_r+0x78>
 801391c:	68ac      	ldr	r4, [r5, #8]
 801391e:	e7d0      	b.n	80138c2 <__swbuf_r+0x1a>
 8013920:	4b09      	ldr	r3, [pc, #36]	; (8013948 <__swbuf_r+0xa0>)
 8013922:	429c      	cmp	r4, r3
 8013924:	bf08      	it	eq
 8013926:	68ec      	ldreq	r4, [r5, #12]
 8013928:	e7cb      	b.n	80138c2 <__swbuf_r+0x1a>
 801392a:	4621      	mov	r1, r4
 801392c:	4628      	mov	r0, r5
 801392e:	f000 f80d 	bl	801394c <__swsetup_r>
 8013932:	2800      	cmp	r0, #0
 8013934:	d0cc      	beq.n	80138d0 <__swbuf_r+0x28>
 8013936:	f04f 37ff 	mov.w	r7, #4294967295
 801393a:	4638      	mov	r0, r7
 801393c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801393e:	bf00      	nop
 8013940:	08016dd8 	.word	0x08016dd8
 8013944:	08016df8 	.word	0x08016df8
 8013948:	08016db8 	.word	0x08016db8

0801394c <__swsetup_r>:
 801394c:	4b32      	ldr	r3, [pc, #200]	; (8013a18 <__swsetup_r+0xcc>)
 801394e:	b570      	push	{r4, r5, r6, lr}
 8013950:	681d      	ldr	r5, [r3, #0]
 8013952:	4606      	mov	r6, r0
 8013954:	460c      	mov	r4, r1
 8013956:	b125      	cbz	r5, 8013962 <__swsetup_r+0x16>
 8013958:	69ab      	ldr	r3, [r5, #24]
 801395a:	b913      	cbnz	r3, 8013962 <__swsetup_r+0x16>
 801395c:	4628      	mov	r0, r5
 801395e:	f000 f953 	bl	8013c08 <__sinit>
 8013962:	4b2e      	ldr	r3, [pc, #184]	; (8013a1c <__swsetup_r+0xd0>)
 8013964:	429c      	cmp	r4, r3
 8013966:	d10f      	bne.n	8013988 <__swsetup_r+0x3c>
 8013968:	686c      	ldr	r4, [r5, #4]
 801396a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801396e:	b29a      	uxth	r2, r3
 8013970:	0715      	lsls	r5, r2, #28
 8013972:	d42c      	bmi.n	80139ce <__swsetup_r+0x82>
 8013974:	06d0      	lsls	r0, r2, #27
 8013976:	d411      	bmi.n	801399c <__swsetup_r+0x50>
 8013978:	2209      	movs	r2, #9
 801397a:	6032      	str	r2, [r6, #0]
 801397c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013980:	81a3      	strh	r3, [r4, #12]
 8013982:	f04f 30ff 	mov.w	r0, #4294967295
 8013986:	e03e      	b.n	8013a06 <__swsetup_r+0xba>
 8013988:	4b25      	ldr	r3, [pc, #148]	; (8013a20 <__swsetup_r+0xd4>)
 801398a:	429c      	cmp	r4, r3
 801398c:	d101      	bne.n	8013992 <__swsetup_r+0x46>
 801398e:	68ac      	ldr	r4, [r5, #8]
 8013990:	e7eb      	b.n	801396a <__swsetup_r+0x1e>
 8013992:	4b24      	ldr	r3, [pc, #144]	; (8013a24 <__swsetup_r+0xd8>)
 8013994:	429c      	cmp	r4, r3
 8013996:	bf08      	it	eq
 8013998:	68ec      	ldreq	r4, [r5, #12]
 801399a:	e7e6      	b.n	801396a <__swsetup_r+0x1e>
 801399c:	0751      	lsls	r1, r2, #29
 801399e:	d512      	bpl.n	80139c6 <__swsetup_r+0x7a>
 80139a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80139a2:	b141      	cbz	r1, 80139b6 <__swsetup_r+0x6a>
 80139a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80139a8:	4299      	cmp	r1, r3
 80139aa:	d002      	beq.n	80139b2 <__swsetup_r+0x66>
 80139ac:	4630      	mov	r0, r6
 80139ae:	f000 fa37 	bl	8013e20 <_free_r>
 80139b2:	2300      	movs	r3, #0
 80139b4:	6363      	str	r3, [r4, #52]	; 0x34
 80139b6:	89a3      	ldrh	r3, [r4, #12]
 80139b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80139bc:	81a3      	strh	r3, [r4, #12]
 80139be:	2300      	movs	r3, #0
 80139c0:	6063      	str	r3, [r4, #4]
 80139c2:	6923      	ldr	r3, [r4, #16]
 80139c4:	6023      	str	r3, [r4, #0]
 80139c6:	89a3      	ldrh	r3, [r4, #12]
 80139c8:	f043 0308 	orr.w	r3, r3, #8
 80139cc:	81a3      	strh	r3, [r4, #12]
 80139ce:	6923      	ldr	r3, [r4, #16]
 80139d0:	b94b      	cbnz	r3, 80139e6 <__swsetup_r+0x9a>
 80139d2:	89a3      	ldrh	r3, [r4, #12]
 80139d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80139d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80139dc:	d003      	beq.n	80139e6 <__swsetup_r+0x9a>
 80139de:	4621      	mov	r1, r4
 80139e0:	4630      	mov	r0, r6
 80139e2:	f000 f9c3 	bl	8013d6c <__smakebuf_r>
 80139e6:	89a2      	ldrh	r2, [r4, #12]
 80139e8:	f012 0301 	ands.w	r3, r2, #1
 80139ec:	d00c      	beq.n	8013a08 <__swsetup_r+0xbc>
 80139ee:	2300      	movs	r3, #0
 80139f0:	60a3      	str	r3, [r4, #8]
 80139f2:	6963      	ldr	r3, [r4, #20]
 80139f4:	425b      	negs	r3, r3
 80139f6:	61a3      	str	r3, [r4, #24]
 80139f8:	6923      	ldr	r3, [r4, #16]
 80139fa:	b953      	cbnz	r3, 8013a12 <__swsetup_r+0xc6>
 80139fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a00:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8013a04:	d1ba      	bne.n	801397c <__swsetup_r+0x30>
 8013a06:	bd70      	pop	{r4, r5, r6, pc}
 8013a08:	0792      	lsls	r2, r2, #30
 8013a0a:	bf58      	it	pl
 8013a0c:	6963      	ldrpl	r3, [r4, #20]
 8013a0e:	60a3      	str	r3, [r4, #8]
 8013a10:	e7f2      	b.n	80139f8 <__swsetup_r+0xac>
 8013a12:	2000      	movs	r0, #0
 8013a14:	e7f7      	b.n	8013a06 <__swsetup_r+0xba>
 8013a16:	bf00      	nop
 8013a18:	20000494 	.word	0x20000494
 8013a1c:	08016dd8 	.word	0x08016dd8
 8013a20:	08016df8 	.word	0x08016df8
 8013a24:	08016db8 	.word	0x08016db8

08013a28 <__sflush_r>:
 8013a28:	898a      	ldrh	r2, [r1, #12]
 8013a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a2e:	4605      	mov	r5, r0
 8013a30:	0710      	lsls	r0, r2, #28
 8013a32:	460c      	mov	r4, r1
 8013a34:	d458      	bmi.n	8013ae8 <__sflush_r+0xc0>
 8013a36:	684b      	ldr	r3, [r1, #4]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	dc05      	bgt.n	8013a48 <__sflush_r+0x20>
 8013a3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	dc02      	bgt.n	8013a48 <__sflush_r+0x20>
 8013a42:	2000      	movs	r0, #0
 8013a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013a4a:	2e00      	cmp	r6, #0
 8013a4c:	d0f9      	beq.n	8013a42 <__sflush_r+0x1a>
 8013a4e:	2300      	movs	r3, #0
 8013a50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013a54:	682f      	ldr	r7, [r5, #0]
 8013a56:	6a21      	ldr	r1, [r4, #32]
 8013a58:	602b      	str	r3, [r5, #0]
 8013a5a:	d032      	beq.n	8013ac2 <__sflush_r+0x9a>
 8013a5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013a5e:	89a3      	ldrh	r3, [r4, #12]
 8013a60:	075a      	lsls	r2, r3, #29
 8013a62:	d505      	bpl.n	8013a70 <__sflush_r+0x48>
 8013a64:	6863      	ldr	r3, [r4, #4]
 8013a66:	1ac0      	subs	r0, r0, r3
 8013a68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013a6a:	b10b      	cbz	r3, 8013a70 <__sflush_r+0x48>
 8013a6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013a6e:	1ac0      	subs	r0, r0, r3
 8013a70:	2300      	movs	r3, #0
 8013a72:	4602      	mov	r2, r0
 8013a74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013a76:	6a21      	ldr	r1, [r4, #32]
 8013a78:	4628      	mov	r0, r5
 8013a7a:	47b0      	blx	r6
 8013a7c:	1c43      	adds	r3, r0, #1
 8013a7e:	89a3      	ldrh	r3, [r4, #12]
 8013a80:	d106      	bne.n	8013a90 <__sflush_r+0x68>
 8013a82:	6829      	ldr	r1, [r5, #0]
 8013a84:	291d      	cmp	r1, #29
 8013a86:	d848      	bhi.n	8013b1a <__sflush_r+0xf2>
 8013a88:	4a29      	ldr	r2, [pc, #164]	; (8013b30 <__sflush_r+0x108>)
 8013a8a:	40ca      	lsrs	r2, r1
 8013a8c:	07d6      	lsls	r6, r2, #31
 8013a8e:	d544      	bpl.n	8013b1a <__sflush_r+0xf2>
 8013a90:	2200      	movs	r2, #0
 8013a92:	6062      	str	r2, [r4, #4]
 8013a94:	04d9      	lsls	r1, r3, #19
 8013a96:	6922      	ldr	r2, [r4, #16]
 8013a98:	6022      	str	r2, [r4, #0]
 8013a9a:	d504      	bpl.n	8013aa6 <__sflush_r+0x7e>
 8013a9c:	1c42      	adds	r2, r0, #1
 8013a9e:	d101      	bne.n	8013aa4 <__sflush_r+0x7c>
 8013aa0:	682b      	ldr	r3, [r5, #0]
 8013aa2:	b903      	cbnz	r3, 8013aa6 <__sflush_r+0x7e>
 8013aa4:	6560      	str	r0, [r4, #84]	; 0x54
 8013aa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013aa8:	602f      	str	r7, [r5, #0]
 8013aaa:	2900      	cmp	r1, #0
 8013aac:	d0c9      	beq.n	8013a42 <__sflush_r+0x1a>
 8013aae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013ab2:	4299      	cmp	r1, r3
 8013ab4:	d002      	beq.n	8013abc <__sflush_r+0x94>
 8013ab6:	4628      	mov	r0, r5
 8013ab8:	f000 f9b2 	bl	8013e20 <_free_r>
 8013abc:	2000      	movs	r0, #0
 8013abe:	6360      	str	r0, [r4, #52]	; 0x34
 8013ac0:	e7c0      	b.n	8013a44 <__sflush_r+0x1c>
 8013ac2:	2301      	movs	r3, #1
 8013ac4:	4628      	mov	r0, r5
 8013ac6:	47b0      	blx	r6
 8013ac8:	1c41      	adds	r1, r0, #1
 8013aca:	d1c8      	bne.n	8013a5e <__sflush_r+0x36>
 8013acc:	682b      	ldr	r3, [r5, #0]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d0c5      	beq.n	8013a5e <__sflush_r+0x36>
 8013ad2:	2b1d      	cmp	r3, #29
 8013ad4:	d001      	beq.n	8013ada <__sflush_r+0xb2>
 8013ad6:	2b16      	cmp	r3, #22
 8013ad8:	d101      	bne.n	8013ade <__sflush_r+0xb6>
 8013ada:	602f      	str	r7, [r5, #0]
 8013adc:	e7b1      	b.n	8013a42 <__sflush_r+0x1a>
 8013ade:	89a3      	ldrh	r3, [r4, #12]
 8013ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ae4:	81a3      	strh	r3, [r4, #12]
 8013ae6:	e7ad      	b.n	8013a44 <__sflush_r+0x1c>
 8013ae8:	690f      	ldr	r7, [r1, #16]
 8013aea:	2f00      	cmp	r7, #0
 8013aec:	d0a9      	beq.n	8013a42 <__sflush_r+0x1a>
 8013aee:	0793      	lsls	r3, r2, #30
 8013af0:	680e      	ldr	r6, [r1, #0]
 8013af2:	bf08      	it	eq
 8013af4:	694b      	ldreq	r3, [r1, #20]
 8013af6:	600f      	str	r7, [r1, #0]
 8013af8:	bf18      	it	ne
 8013afa:	2300      	movne	r3, #0
 8013afc:	eba6 0807 	sub.w	r8, r6, r7
 8013b00:	608b      	str	r3, [r1, #8]
 8013b02:	f1b8 0f00 	cmp.w	r8, #0
 8013b06:	dd9c      	ble.n	8013a42 <__sflush_r+0x1a>
 8013b08:	4643      	mov	r3, r8
 8013b0a:	463a      	mov	r2, r7
 8013b0c:	6a21      	ldr	r1, [r4, #32]
 8013b0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013b10:	4628      	mov	r0, r5
 8013b12:	47b0      	blx	r6
 8013b14:	2800      	cmp	r0, #0
 8013b16:	dc06      	bgt.n	8013b26 <__sflush_r+0xfe>
 8013b18:	89a3      	ldrh	r3, [r4, #12]
 8013b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b1e:	81a3      	strh	r3, [r4, #12]
 8013b20:	f04f 30ff 	mov.w	r0, #4294967295
 8013b24:	e78e      	b.n	8013a44 <__sflush_r+0x1c>
 8013b26:	4407      	add	r7, r0
 8013b28:	eba8 0800 	sub.w	r8, r8, r0
 8013b2c:	e7e9      	b.n	8013b02 <__sflush_r+0xda>
 8013b2e:	bf00      	nop
 8013b30:	20400001 	.word	0x20400001

08013b34 <_fflush_r>:
 8013b34:	b538      	push	{r3, r4, r5, lr}
 8013b36:	690b      	ldr	r3, [r1, #16]
 8013b38:	4605      	mov	r5, r0
 8013b3a:	460c      	mov	r4, r1
 8013b3c:	b1db      	cbz	r3, 8013b76 <_fflush_r+0x42>
 8013b3e:	b118      	cbz	r0, 8013b48 <_fflush_r+0x14>
 8013b40:	6983      	ldr	r3, [r0, #24]
 8013b42:	b90b      	cbnz	r3, 8013b48 <_fflush_r+0x14>
 8013b44:	f000 f860 	bl	8013c08 <__sinit>
 8013b48:	4b0c      	ldr	r3, [pc, #48]	; (8013b7c <_fflush_r+0x48>)
 8013b4a:	429c      	cmp	r4, r3
 8013b4c:	d109      	bne.n	8013b62 <_fflush_r+0x2e>
 8013b4e:	686c      	ldr	r4, [r5, #4]
 8013b50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b54:	b17b      	cbz	r3, 8013b76 <_fflush_r+0x42>
 8013b56:	4621      	mov	r1, r4
 8013b58:	4628      	mov	r0, r5
 8013b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b5e:	f7ff bf63 	b.w	8013a28 <__sflush_r>
 8013b62:	4b07      	ldr	r3, [pc, #28]	; (8013b80 <_fflush_r+0x4c>)
 8013b64:	429c      	cmp	r4, r3
 8013b66:	d101      	bne.n	8013b6c <_fflush_r+0x38>
 8013b68:	68ac      	ldr	r4, [r5, #8]
 8013b6a:	e7f1      	b.n	8013b50 <_fflush_r+0x1c>
 8013b6c:	4b05      	ldr	r3, [pc, #20]	; (8013b84 <_fflush_r+0x50>)
 8013b6e:	429c      	cmp	r4, r3
 8013b70:	bf08      	it	eq
 8013b72:	68ec      	ldreq	r4, [r5, #12]
 8013b74:	e7ec      	b.n	8013b50 <_fflush_r+0x1c>
 8013b76:	2000      	movs	r0, #0
 8013b78:	bd38      	pop	{r3, r4, r5, pc}
 8013b7a:	bf00      	nop
 8013b7c:	08016dd8 	.word	0x08016dd8
 8013b80:	08016df8 	.word	0x08016df8
 8013b84:	08016db8 	.word	0x08016db8

08013b88 <std>:
 8013b88:	2300      	movs	r3, #0
 8013b8a:	b510      	push	{r4, lr}
 8013b8c:	4604      	mov	r4, r0
 8013b8e:	e9c0 3300 	strd	r3, r3, [r0]
 8013b92:	6083      	str	r3, [r0, #8]
 8013b94:	8181      	strh	r1, [r0, #12]
 8013b96:	6643      	str	r3, [r0, #100]	; 0x64
 8013b98:	81c2      	strh	r2, [r0, #14]
 8013b9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013b9e:	6183      	str	r3, [r0, #24]
 8013ba0:	4619      	mov	r1, r3
 8013ba2:	2208      	movs	r2, #8
 8013ba4:	305c      	adds	r0, #92	; 0x5c
 8013ba6:	f7ff fc89 	bl	80134bc <memset>
 8013baa:	4b05      	ldr	r3, [pc, #20]	; (8013bc0 <std+0x38>)
 8013bac:	6263      	str	r3, [r4, #36]	; 0x24
 8013bae:	4b05      	ldr	r3, [pc, #20]	; (8013bc4 <std+0x3c>)
 8013bb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8013bb2:	4b05      	ldr	r3, [pc, #20]	; (8013bc8 <std+0x40>)
 8013bb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013bb6:	4b05      	ldr	r3, [pc, #20]	; (8013bcc <std+0x44>)
 8013bb8:	6224      	str	r4, [r4, #32]
 8013bba:	6323      	str	r3, [r4, #48]	; 0x30
 8013bbc:	bd10      	pop	{r4, pc}
 8013bbe:	bf00      	nop
 8013bc0:	080147c5 	.word	0x080147c5
 8013bc4:	080147e7 	.word	0x080147e7
 8013bc8:	0801481f 	.word	0x0801481f
 8013bcc:	08014843 	.word	0x08014843

08013bd0 <_cleanup_r>:
 8013bd0:	4901      	ldr	r1, [pc, #4]	; (8013bd8 <_cleanup_r+0x8>)
 8013bd2:	f000 b885 	b.w	8013ce0 <_fwalk_reent>
 8013bd6:	bf00      	nop
 8013bd8:	08013b35 	.word	0x08013b35

08013bdc <__sfmoreglue>:
 8013bdc:	b570      	push	{r4, r5, r6, lr}
 8013bde:	1e4a      	subs	r2, r1, #1
 8013be0:	2568      	movs	r5, #104	; 0x68
 8013be2:	4355      	muls	r5, r2
 8013be4:	460e      	mov	r6, r1
 8013be6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013bea:	f000 f967 	bl	8013ebc <_malloc_r>
 8013bee:	4604      	mov	r4, r0
 8013bf0:	b140      	cbz	r0, 8013c04 <__sfmoreglue+0x28>
 8013bf2:	2100      	movs	r1, #0
 8013bf4:	e9c0 1600 	strd	r1, r6, [r0]
 8013bf8:	300c      	adds	r0, #12
 8013bfa:	60a0      	str	r0, [r4, #8]
 8013bfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013c00:	f7ff fc5c 	bl	80134bc <memset>
 8013c04:	4620      	mov	r0, r4
 8013c06:	bd70      	pop	{r4, r5, r6, pc}

08013c08 <__sinit>:
 8013c08:	6983      	ldr	r3, [r0, #24]
 8013c0a:	b510      	push	{r4, lr}
 8013c0c:	4604      	mov	r4, r0
 8013c0e:	bb33      	cbnz	r3, 8013c5e <__sinit+0x56>
 8013c10:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013c14:	6503      	str	r3, [r0, #80]	; 0x50
 8013c16:	4b12      	ldr	r3, [pc, #72]	; (8013c60 <__sinit+0x58>)
 8013c18:	4a12      	ldr	r2, [pc, #72]	; (8013c64 <__sinit+0x5c>)
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	6282      	str	r2, [r0, #40]	; 0x28
 8013c1e:	4298      	cmp	r0, r3
 8013c20:	bf04      	itt	eq
 8013c22:	2301      	moveq	r3, #1
 8013c24:	6183      	streq	r3, [r0, #24]
 8013c26:	f000 f81f 	bl	8013c68 <__sfp>
 8013c2a:	6060      	str	r0, [r4, #4]
 8013c2c:	4620      	mov	r0, r4
 8013c2e:	f000 f81b 	bl	8013c68 <__sfp>
 8013c32:	60a0      	str	r0, [r4, #8]
 8013c34:	4620      	mov	r0, r4
 8013c36:	f000 f817 	bl	8013c68 <__sfp>
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	60e0      	str	r0, [r4, #12]
 8013c3e:	2104      	movs	r1, #4
 8013c40:	6860      	ldr	r0, [r4, #4]
 8013c42:	f7ff ffa1 	bl	8013b88 <std>
 8013c46:	2201      	movs	r2, #1
 8013c48:	2109      	movs	r1, #9
 8013c4a:	68a0      	ldr	r0, [r4, #8]
 8013c4c:	f7ff ff9c 	bl	8013b88 <std>
 8013c50:	2202      	movs	r2, #2
 8013c52:	2112      	movs	r1, #18
 8013c54:	68e0      	ldr	r0, [r4, #12]
 8013c56:	f7ff ff97 	bl	8013b88 <std>
 8013c5a:	2301      	movs	r3, #1
 8013c5c:	61a3      	str	r3, [r4, #24]
 8013c5e:	bd10      	pop	{r4, pc}
 8013c60:	08016db4 	.word	0x08016db4
 8013c64:	08013bd1 	.word	0x08013bd1

08013c68 <__sfp>:
 8013c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c6a:	4b1b      	ldr	r3, [pc, #108]	; (8013cd8 <__sfp+0x70>)
 8013c6c:	681e      	ldr	r6, [r3, #0]
 8013c6e:	69b3      	ldr	r3, [r6, #24]
 8013c70:	4607      	mov	r7, r0
 8013c72:	b913      	cbnz	r3, 8013c7a <__sfp+0x12>
 8013c74:	4630      	mov	r0, r6
 8013c76:	f7ff ffc7 	bl	8013c08 <__sinit>
 8013c7a:	3648      	adds	r6, #72	; 0x48
 8013c7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013c80:	3b01      	subs	r3, #1
 8013c82:	d503      	bpl.n	8013c8c <__sfp+0x24>
 8013c84:	6833      	ldr	r3, [r6, #0]
 8013c86:	b133      	cbz	r3, 8013c96 <__sfp+0x2e>
 8013c88:	6836      	ldr	r6, [r6, #0]
 8013c8a:	e7f7      	b.n	8013c7c <__sfp+0x14>
 8013c8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013c90:	b16d      	cbz	r5, 8013cae <__sfp+0x46>
 8013c92:	3468      	adds	r4, #104	; 0x68
 8013c94:	e7f4      	b.n	8013c80 <__sfp+0x18>
 8013c96:	2104      	movs	r1, #4
 8013c98:	4638      	mov	r0, r7
 8013c9a:	f7ff ff9f 	bl	8013bdc <__sfmoreglue>
 8013c9e:	6030      	str	r0, [r6, #0]
 8013ca0:	2800      	cmp	r0, #0
 8013ca2:	d1f1      	bne.n	8013c88 <__sfp+0x20>
 8013ca4:	230c      	movs	r3, #12
 8013ca6:	603b      	str	r3, [r7, #0]
 8013ca8:	4604      	mov	r4, r0
 8013caa:	4620      	mov	r0, r4
 8013cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cae:	4b0b      	ldr	r3, [pc, #44]	; (8013cdc <__sfp+0x74>)
 8013cb0:	6665      	str	r5, [r4, #100]	; 0x64
 8013cb2:	e9c4 5500 	strd	r5, r5, [r4]
 8013cb6:	60a5      	str	r5, [r4, #8]
 8013cb8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013cbc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013cc0:	2208      	movs	r2, #8
 8013cc2:	4629      	mov	r1, r5
 8013cc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013cc8:	f7ff fbf8 	bl	80134bc <memset>
 8013ccc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013cd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013cd4:	e7e9      	b.n	8013caa <__sfp+0x42>
 8013cd6:	bf00      	nop
 8013cd8:	08016db4 	.word	0x08016db4
 8013cdc:	ffff0001 	.word	0xffff0001

08013ce0 <_fwalk_reent>:
 8013ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ce4:	4680      	mov	r8, r0
 8013ce6:	4689      	mov	r9, r1
 8013ce8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013cec:	2600      	movs	r6, #0
 8013cee:	b914      	cbnz	r4, 8013cf6 <_fwalk_reent+0x16>
 8013cf0:	4630      	mov	r0, r6
 8013cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cf6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013cfa:	3f01      	subs	r7, #1
 8013cfc:	d501      	bpl.n	8013d02 <_fwalk_reent+0x22>
 8013cfe:	6824      	ldr	r4, [r4, #0]
 8013d00:	e7f5      	b.n	8013cee <_fwalk_reent+0xe>
 8013d02:	89ab      	ldrh	r3, [r5, #12]
 8013d04:	2b01      	cmp	r3, #1
 8013d06:	d907      	bls.n	8013d18 <_fwalk_reent+0x38>
 8013d08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013d0c:	3301      	adds	r3, #1
 8013d0e:	d003      	beq.n	8013d18 <_fwalk_reent+0x38>
 8013d10:	4629      	mov	r1, r5
 8013d12:	4640      	mov	r0, r8
 8013d14:	47c8      	blx	r9
 8013d16:	4306      	orrs	r6, r0
 8013d18:	3568      	adds	r5, #104	; 0x68
 8013d1a:	e7ee      	b.n	8013cfa <_fwalk_reent+0x1a>

08013d1c <__locale_ctype_ptr_l>:
 8013d1c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8013d20:	4770      	bx	lr

08013d22 <__swhatbuf_r>:
 8013d22:	b570      	push	{r4, r5, r6, lr}
 8013d24:	460e      	mov	r6, r1
 8013d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d2a:	2900      	cmp	r1, #0
 8013d2c:	b096      	sub	sp, #88	; 0x58
 8013d2e:	4614      	mov	r4, r2
 8013d30:	461d      	mov	r5, r3
 8013d32:	da07      	bge.n	8013d44 <__swhatbuf_r+0x22>
 8013d34:	2300      	movs	r3, #0
 8013d36:	602b      	str	r3, [r5, #0]
 8013d38:	89b3      	ldrh	r3, [r6, #12]
 8013d3a:	061a      	lsls	r2, r3, #24
 8013d3c:	d410      	bmi.n	8013d60 <__swhatbuf_r+0x3e>
 8013d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013d42:	e00e      	b.n	8013d62 <__swhatbuf_r+0x40>
 8013d44:	466a      	mov	r2, sp
 8013d46:	f000 fdaf 	bl	80148a8 <_fstat_r>
 8013d4a:	2800      	cmp	r0, #0
 8013d4c:	dbf2      	blt.n	8013d34 <__swhatbuf_r+0x12>
 8013d4e:	9a01      	ldr	r2, [sp, #4]
 8013d50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013d54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013d58:	425a      	negs	r2, r3
 8013d5a:	415a      	adcs	r2, r3
 8013d5c:	602a      	str	r2, [r5, #0]
 8013d5e:	e7ee      	b.n	8013d3e <__swhatbuf_r+0x1c>
 8013d60:	2340      	movs	r3, #64	; 0x40
 8013d62:	2000      	movs	r0, #0
 8013d64:	6023      	str	r3, [r4, #0]
 8013d66:	b016      	add	sp, #88	; 0x58
 8013d68:	bd70      	pop	{r4, r5, r6, pc}
	...

08013d6c <__smakebuf_r>:
 8013d6c:	898b      	ldrh	r3, [r1, #12]
 8013d6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013d70:	079d      	lsls	r5, r3, #30
 8013d72:	4606      	mov	r6, r0
 8013d74:	460c      	mov	r4, r1
 8013d76:	d507      	bpl.n	8013d88 <__smakebuf_r+0x1c>
 8013d78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013d7c:	6023      	str	r3, [r4, #0]
 8013d7e:	6123      	str	r3, [r4, #16]
 8013d80:	2301      	movs	r3, #1
 8013d82:	6163      	str	r3, [r4, #20]
 8013d84:	b002      	add	sp, #8
 8013d86:	bd70      	pop	{r4, r5, r6, pc}
 8013d88:	ab01      	add	r3, sp, #4
 8013d8a:	466a      	mov	r2, sp
 8013d8c:	f7ff ffc9 	bl	8013d22 <__swhatbuf_r>
 8013d90:	9900      	ldr	r1, [sp, #0]
 8013d92:	4605      	mov	r5, r0
 8013d94:	4630      	mov	r0, r6
 8013d96:	f000 f891 	bl	8013ebc <_malloc_r>
 8013d9a:	b948      	cbnz	r0, 8013db0 <__smakebuf_r+0x44>
 8013d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013da0:	059a      	lsls	r2, r3, #22
 8013da2:	d4ef      	bmi.n	8013d84 <__smakebuf_r+0x18>
 8013da4:	f023 0303 	bic.w	r3, r3, #3
 8013da8:	f043 0302 	orr.w	r3, r3, #2
 8013dac:	81a3      	strh	r3, [r4, #12]
 8013dae:	e7e3      	b.n	8013d78 <__smakebuf_r+0xc>
 8013db0:	4b0d      	ldr	r3, [pc, #52]	; (8013de8 <__smakebuf_r+0x7c>)
 8013db2:	62b3      	str	r3, [r6, #40]	; 0x28
 8013db4:	89a3      	ldrh	r3, [r4, #12]
 8013db6:	6020      	str	r0, [r4, #0]
 8013db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013dbc:	81a3      	strh	r3, [r4, #12]
 8013dbe:	9b00      	ldr	r3, [sp, #0]
 8013dc0:	6163      	str	r3, [r4, #20]
 8013dc2:	9b01      	ldr	r3, [sp, #4]
 8013dc4:	6120      	str	r0, [r4, #16]
 8013dc6:	b15b      	cbz	r3, 8013de0 <__smakebuf_r+0x74>
 8013dc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013dcc:	4630      	mov	r0, r6
 8013dce:	f000 fd7d 	bl	80148cc <_isatty_r>
 8013dd2:	b128      	cbz	r0, 8013de0 <__smakebuf_r+0x74>
 8013dd4:	89a3      	ldrh	r3, [r4, #12]
 8013dd6:	f023 0303 	bic.w	r3, r3, #3
 8013dda:	f043 0301 	orr.w	r3, r3, #1
 8013dde:	81a3      	strh	r3, [r4, #12]
 8013de0:	89a3      	ldrh	r3, [r4, #12]
 8013de2:	431d      	orrs	r5, r3
 8013de4:	81a5      	strh	r5, [r4, #12]
 8013de6:	e7cd      	b.n	8013d84 <__smakebuf_r+0x18>
 8013de8:	08013bd1 	.word	0x08013bd1

08013dec <malloc>:
 8013dec:	4b02      	ldr	r3, [pc, #8]	; (8013df8 <malloc+0xc>)
 8013dee:	4601      	mov	r1, r0
 8013df0:	6818      	ldr	r0, [r3, #0]
 8013df2:	f000 b863 	b.w	8013ebc <_malloc_r>
 8013df6:	bf00      	nop
 8013df8:	20000494 	.word	0x20000494

08013dfc <__ascii_mbtowc>:
 8013dfc:	b082      	sub	sp, #8
 8013dfe:	b901      	cbnz	r1, 8013e02 <__ascii_mbtowc+0x6>
 8013e00:	a901      	add	r1, sp, #4
 8013e02:	b142      	cbz	r2, 8013e16 <__ascii_mbtowc+0x1a>
 8013e04:	b14b      	cbz	r3, 8013e1a <__ascii_mbtowc+0x1e>
 8013e06:	7813      	ldrb	r3, [r2, #0]
 8013e08:	600b      	str	r3, [r1, #0]
 8013e0a:	7812      	ldrb	r2, [r2, #0]
 8013e0c:	1c10      	adds	r0, r2, #0
 8013e0e:	bf18      	it	ne
 8013e10:	2001      	movne	r0, #1
 8013e12:	b002      	add	sp, #8
 8013e14:	4770      	bx	lr
 8013e16:	4610      	mov	r0, r2
 8013e18:	e7fb      	b.n	8013e12 <__ascii_mbtowc+0x16>
 8013e1a:	f06f 0001 	mvn.w	r0, #1
 8013e1e:	e7f8      	b.n	8013e12 <__ascii_mbtowc+0x16>

08013e20 <_free_r>:
 8013e20:	b538      	push	{r3, r4, r5, lr}
 8013e22:	4605      	mov	r5, r0
 8013e24:	2900      	cmp	r1, #0
 8013e26:	d045      	beq.n	8013eb4 <_free_r+0x94>
 8013e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013e2c:	1f0c      	subs	r4, r1, #4
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	bfb8      	it	lt
 8013e32:	18e4      	addlt	r4, r4, r3
 8013e34:	f000 fd85 	bl	8014942 <__malloc_lock>
 8013e38:	4a1f      	ldr	r2, [pc, #124]	; (8013eb8 <_free_r+0x98>)
 8013e3a:	6813      	ldr	r3, [r2, #0]
 8013e3c:	4610      	mov	r0, r2
 8013e3e:	b933      	cbnz	r3, 8013e4e <_free_r+0x2e>
 8013e40:	6063      	str	r3, [r4, #4]
 8013e42:	6014      	str	r4, [r2, #0]
 8013e44:	4628      	mov	r0, r5
 8013e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013e4a:	f000 bd7b 	b.w	8014944 <__malloc_unlock>
 8013e4e:	42a3      	cmp	r3, r4
 8013e50:	d90c      	bls.n	8013e6c <_free_r+0x4c>
 8013e52:	6821      	ldr	r1, [r4, #0]
 8013e54:	1862      	adds	r2, r4, r1
 8013e56:	4293      	cmp	r3, r2
 8013e58:	bf04      	itt	eq
 8013e5a:	681a      	ldreq	r2, [r3, #0]
 8013e5c:	685b      	ldreq	r3, [r3, #4]
 8013e5e:	6063      	str	r3, [r4, #4]
 8013e60:	bf04      	itt	eq
 8013e62:	1852      	addeq	r2, r2, r1
 8013e64:	6022      	streq	r2, [r4, #0]
 8013e66:	6004      	str	r4, [r0, #0]
 8013e68:	e7ec      	b.n	8013e44 <_free_r+0x24>
 8013e6a:	4613      	mov	r3, r2
 8013e6c:	685a      	ldr	r2, [r3, #4]
 8013e6e:	b10a      	cbz	r2, 8013e74 <_free_r+0x54>
 8013e70:	42a2      	cmp	r2, r4
 8013e72:	d9fa      	bls.n	8013e6a <_free_r+0x4a>
 8013e74:	6819      	ldr	r1, [r3, #0]
 8013e76:	1858      	adds	r0, r3, r1
 8013e78:	42a0      	cmp	r0, r4
 8013e7a:	d10b      	bne.n	8013e94 <_free_r+0x74>
 8013e7c:	6820      	ldr	r0, [r4, #0]
 8013e7e:	4401      	add	r1, r0
 8013e80:	1858      	adds	r0, r3, r1
 8013e82:	4282      	cmp	r2, r0
 8013e84:	6019      	str	r1, [r3, #0]
 8013e86:	d1dd      	bne.n	8013e44 <_free_r+0x24>
 8013e88:	6810      	ldr	r0, [r2, #0]
 8013e8a:	6852      	ldr	r2, [r2, #4]
 8013e8c:	605a      	str	r2, [r3, #4]
 8013e8e:	4401      	add	r1, r0
 8013e90:	6019      	str	r1, [r3, #0]
 8013e92:	e7d7      	b.n	8013e44 <_free_r+0x24>
 8013e94:	d902      	bls.n	8013e9c <_free_r+0x7c>
 8013e96:	230c      	movs	r3, #12
 8013e98:	602b      	str	r3, [r5, #0]
 8013e9a:	e7d3      	b.n	8013e44 <_free_r+0x24>
 8013e9c:	6820      	ldr	r0, [r4, #0]
 8013e9e:	1821      	adds	r1, r4, r0
 8013ea0:	428a      	cmp	r2, r1
 8013ea2:	bf04      	itt	eq
 8013ea4:	6811      	ldreq	r1, [r2, #0]
 8013ea6:	6852      	ldreq	r2, [r2, #4]
 8013ea8:	6062      	str	r2, [r4, #4]
 8013eaa:	bf04      	itt	eq
 8013eac:	1809      	addeq	r1, r1, r0
 8013eae:	6021      	streq	r1, [r4, #0]
 8013eb0:	605c      	str	r4, [r3, #4]
 8013eb2:	e7c7      	b.n	8013e44 <_free_r+0x24>
 8013eb4:	bd38      	pop	{r3, r4, r5, pc}
 8013eb6:	bf00      	nop
 8013eb8:	200037f4 	.word	0x200037f4

08013ebc <_malloc_r>:
 8013ebc:	b570      	push	{r4, r5, r6, lr}
 8013ebe:	1ccd      	adds	r5, r1, #3
 8013ec0:	f025 0503 	bic.w	r5, r5, #3
 8013ec4:	3508      	adds	r5, #8
 8013ec6:	2d0c      	cmp	r5, #12
 8013ec8:	bf38      	it	cc
 8013eca:	250c      	movcc	r5, #12
 8013ecc:	2d00      	cmp	r5, #0
 8013ece:	4606      	mov	r6, r0
 8013ed0:	db01      	blt.n	8013ed6 <_malloc_r+0x1a>
 8013ed2:	42a9      	cmp	r1, r5
 8013ed4:	d903      	bls.n	8013ede <_malloc_r+0x22>
 8013ed6:	230c      	movs	r3, #12
 8013ed8:	6033      	str	r3, [r6, #0]
 8013eda:	2000      	movs	r0, #0
 8013edc:	bd70      	pop	{r4, r5, r6, pc}
 8013ede:	f000 fd30 	bl	8014942 <__malloc_lock>
 8013ee2:	4a21      	ldr	r2, [pc, #132]	; (8013f68 <_malloc_r+0xac>)
 8013ee4:	6814      	ldr	r4, [r2, #0]
 8013ee6:	4621      	mov	r1, r4
 8013ee8:	b991      	cbnz	r1, 8013f10 <_malloc_r+0x54>
 8013eea:	4c20      	ldr	r4, [pc, #128]	; (8013f6c <_malloc_r+0xb0>)
 8013eec:	6823      	ldr	r3, [r4, #0]
 8013eee:	b91b      	cbnz	r3, 8013ef8 <_malloc_r+0x3c>
 8013ef0:	4630      	mov	r0, r6
 8013ef2:	f000 fc57 	bl	80147a4 <_sbrk_r>
 8013ef6:	6020      	str	r0, [r4, #0]
 8013ef8:	4629      	mov	r1, r5
 8013efa:	4630      	mov	r0, r6
 8013efc:	f000 fc52 	bl	80147a4 <_sbrk_r>
 8013f00:	1c43      	adds	r3, r0, #1
 8013f02:	d124      	bne.n	8013f4e <_malloc_r+0x92>
 8013f04:	230c      	movs	r3, #12
 8013f06:	6033      	str	r3, [r6, #0]
 8013f08:	4630      	mov	r0, r6
 8013f0a:	f000 fd1b 	bl	8014944 <__malloc_unlock>
 8013f0e:	e7e4      	b.n	8013eda <_malloc_r+0x1e>
 8013f10:	680b      	ldr	r3, [r1, #0]
 8013f12:	1b5b      	subs	r3, r3, r5
 8013f14:	d418      	bmi.n	8013f48 <_malloc_r+0x8c>
 8013f16:	2b0b      	cmp	r3, #11
 8013f18:	d90f      	bls.n	8013f3a <_malloc_r+0x7e>
 8013f1a:	600b      	str	r3, [r1, #0]
 8013f1c:	50cd      	str	r5, [r1, r3]
 8013f1e:	18cc      	adds	r4, r1, r3
 8013f20:	4630      	mov	r0, r6
 8013f22:	f000 fd0f 	bl	8014944 <__malloc_unlock>
 8013f26:	f104 000b 	add.w	r0, r4, #11
 8013f2a:	1d23      	adds	r3, r4, #4
 8013f2c:	f020 0007 	bic.w	r0, r0, #7
 8013f30:	1ac3      	subs	r3, r0, r3
 8013f32:	d0d3      	beq.n	8013edc <_malloc_r+0x20>
 8013f34:	425a      	negs	r2, r3
 8013f36:	50e2      	str	r2, [r4, r3]
 8013f38:	e7d0      	b.n	8013edc <_malloc_r+0x20>
 8013f3a:	428c      	cmp	r4, r1
 8013f3c:	684b      	ldr	r3, [r1, #4]
 8013f3e:	bf16      	itet	ne
 8013f40:	6063      	strne	r3, [r4, #4]
 8013f42:	6013      	streq	r3, [r2, #0]
 8013f44:	460c      	movne	r4, r1
 8013f46:	e7eb      	b.n	8013f20 <_malloc_r+0x64>
 8013f48:	460c      	mov	r4, r1
 8013f4a:	6849      	ldr	r1, [r1, #4]
 8013f4c:	e7cc      	b.n	8013ee8 <_malloc_r+0x2c>
 8013f4e:	1cc4      	adds	r4, r0, #3
 8013f50:	f024 0403 	bic.w	r4, r4, #3
 8013f54:	42a0      	cmp	r0, r4
 8013f56:	d005      	beq.n	8013f64 <_malloc_r+0xa8>
 8013f58:	1a21      	subs	r1, r4, r0
 8013f5a:	4630      	mov	r0, r6
 8013f5c:	f000 fc22 	bl	80147a4 <_sbrk_r>
 8013f60:	3001      	adds	r0, #1
 8013f62:	d0cf      	beq.n	8013f04 <_malloc_r+0x48>
 8013f64:	6025      	str	r5, [r4, #0]
 8013f66:	e7db      	b.n	8013f20 <_malloc_r+0x64>
 8013f68:	200037f4 	.word	0x200037f4
 8013f6c:	200037f8 	.word	0x200037f8

08013f70 <__ssputs_r>:
 8013f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f74:	688e      	ldr	r6, [r1, #8]
 8013f76:	429e      	cmp	r6, r3
 8013f78:	4682      	mov	sl, r0
 8013f7a:	460c      	mov	r4, r1
 8013f7c:	4690      	mov	r8, r2
 8013f7e:	4699      	mov	r9, r3
 8013f80:	d837      	bhi.n	8013ff2 <__ssputs_r+0x82>
 8013f82:	898a      	ldrh	r2, [r1, #12]
 8013f84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013f88:	d031      	beq.n	8013fee <__ssputs_r+0x7e>
 8013f8a:	6825      	ldr	r5, [r4, #0]
 8013f8c:	6909      	ldr	r1, [r1, #16]
 8013f8e:	1a6f      	subs	r7, r5, r1
 8013f90:	6965      	ldr	r5, [r4, #20]
 8013f92:	2302      	movs	r3, #2
 8013f94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013f98:	fb95 f5f3 	sdiv	r5, r5, r3
 8013f9c:	f109 0301 	add.w	r3, r9, #1
 8013fa0:	443b      	add	r3, r7
 8013fa2:	429d      	cmp	r5, r3
 8013fa4:	bf38      	it	cc
 8013fa6:	461d      	movcc	r5, r3
 8013fa8:	0553      	lsls	r3, r2, #21
 8013faa:	d530      	bpl.n	801400e <__ssputs_r+0x9e>
 8013fac:	4629      	mov	r1, r5
 8013fae:	f7ff ff85 	bl	8013ebc <_malloc_r>
 8013fb2:	4606      	mov	r6, r0
 8013fb4:	b950      	cbnz	r0, 8013fcc <__ssputs_r+0x5c>
 8013fb6:	230c      	movs	r3, #12
 8013fb8:	f8ca 3000 	str.w	r3, [sl]
 8013fbc:	89a3      	ldrh	r3, [r4, #12]
 8013fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013fc2:	81a3      	strh	r3, [r4, #12]
 8013fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8013fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fcc:	463a      	mov	r2, r7
 8013fce:	6921      	ldr	r1, [r4, #16]
 8013fd0:	f7ff fa69 	bl	80134a6 <memcpy>
 8013fd4:	89a3      	ldrh	r3, [r4, #12]
 8013fd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013fde:	81a3      	strh	r3, [r4, #12]
 8013fe0:	6126      	str	r6, [r4, #16]
 8013fe2:	6165      	str	r5, [r4, #20]
 8013fe4:	443e      	add	r6, r7
 8013fe6:	1bed      	subs	r5, r5, r7
 8013fe8:	6026      	str	r6, [r4, #0]
 8013fea:	60a5      	str	r5, [r4, #8]
 8013fec:	464e      	mov	r6, r9
 8013fee:	454e      	cmp	r6, r9
 8013ff0:	d900      	bls.n	8013ff4 <__ssputs_r+0x84>
 8013ff2:	464e      	mov	r6, r9
 8013ff4:	4632      	mov	r2, r6
 8013ff6:	4641      	mov	r1, r8
 8013ff8:	6820      	ldr	r0, [r4, #0]
 8013ffa:	f000 fc89 	bl	8014910 <memmove>
 8013ffe:	68a3      	ldr	r3, [r4, #8]
 8014000:	1b9b      	subs	r3, r3, r6
 8014002:	60a3      	str	r3, [r4, #8]
 8014004:	6823      	ldr	r3, [r4, #0]
 8014006:	441e      	add	r6, r3
 8014008:	6026      	str	r6, [r4, #0]
 801400a:	2000      	movs	r0, #0
 801400c:	e7dc      	b.n	8013fc8 <__ssputs_r+0x58>
 801400e:	462a      	mov	r2, r5
 8014010:	f000 fc99 	bl	8014946 <_realloc_r>
 8014014:	4606      	mov	r6, r0
 8014016:	2800      	cmp	r0, #0
 8014018:	d1e2      	bne.n	8013fe0 <__ssputs_r+0x70>
 801401a:	6921      	ldr	r1, [r4, #16]
 801401c:	4650      	mov	r0, sl
 801401e:	f7ff feff 	bl	8013e20 <_free_r>
 8014022:	e7c8      	b.n	8013fb6 <__ssputs_r+0x46>

08014024 <_svfiprintf_r>:
 8014024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014028:	461d      	mov	r5, r3
 801402a:	898b      	ldrh	r3, [r1, #12]
 801402c:	061f      	lsls	r7, r3, #24
 801402e:	b09d      	sub	sp, #116	; 0x74
 8014030:	4680      	mov	r8, r0
 8014032:	460c      	mov	r4, r1
 8014034:	4616      	mov	r6, r2
 8014036:	d50f      	bpl.n	8014058 <_svfiprintf_r+0x34>
 8014038:	690b      	ldr	r3, [r1, #16]
 801403a:	b96b      	cbnz	r3, 8014058 <_svfiprintf_r+0x34>
 801403c:	2140      	movs	r1, #64	; 0x40
 801403e:	f7ff ff3d 	bl	8013ebc <_malloc_r>
 8014042:	6020      	str	r0, [r4, #0]
 8014044:	6120      	str	r0, [r4, #16]
 8014046:	b928      	cbnz	r0, 8014054 <_svfiprintf_r+0x30>
 8014048:	230c      	movs	r3, #12
 801404a:	f8c8 3000 	str.w	r3, [r8]
 801404e:	f04f 30ff 	mov.w	r0, #4294967295
 8014052:	e0c8      	b.n	80141e6 <_svfiprintf_r+0x1c2>
 8014054:	2340      	movs	r3, #64	; 0x40
 8014056:	6163      	str	r3, [r4, #20]
 8014058:	2300      	movs	r3, #0
 801405a:	9309      	str	r3, [sp, #36]	; 0x24
 801405c:	2320      	movs	r3, #32
 801405e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014062:	2330      	movs	r3, #48	; 0x30
 8014064:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014068:	9503      	str	r5, [sp, #12]
 801406a:	f04f 0b01 	mov.w	fp, #1
 801406e:	4637      	mov	r7, r6
 8014070:	463d      	mov	r5, r7
 8014072:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014076:	b10b      	cbz	r3, 801407c <_svfiprintf_r+0x58>
 8014078:	2b25      	cmp	r3, #37	; 0x25
 801407a:	d13e      	bne.n	80140fa <_svfiprintf_r+0xd6>
 801407c:	ebb7 0a06 	subs.w	sl, r7, r6
 8014080:	d00b      	beq.n	801409a <_svfiprintf_r+0x76>
 8014082:	4653      	mov	r3, sl
 8014084:	4632      	mov	r2, r6
 8014086:	4621      	mov	r1, r4
 8014088:	4640      	mov	r0, r8
 801408a:	f7ff ff71 	bl	8013f70 <__ssputs_r>
 801408e:	3001      	adds	r0, #1
 8014090:	f000 80a4 	beq.w	80141dc <_svfiprintf_r+0x1b8>
 8014094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014096:	4453      	add	r3, sl
 8014098:	9309      	str	r3, [sp, #36]	; 0x24
 801409a:	783b      	ldrb	r3, [r7, #0]
 801409c:	2b00      	cmp	r3, #0
 801409e:	f000 809d 	beq.w	80141dc <_svfiprintf_r+0x1b8>
 80140a2:	2300      	movs	r3, #0
 80140a4:	f04f 32ff 	mov.w	r2, #4294967295
 80140a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80140ac:	9304      	str	r3, [sp, #16]
 80140ae:	9307      	str	r3, [sp, #28]
 80140b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80140b4:	931a      	str	r3, [sp, #104]	; 0x68
 80140b6:	462f      	mov	r7, r5
 80140b8:	2205      	movs	r2, #5
 80140ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 80140be:	4850      	ldr	r0, [pc, #320]	; (8014200 <_svfiprintf_r+0x1dc>)
 80140c0:	f7ec f88e 	bl	80001e0 <memchr>
 80140c4:	9b04      	ldr	r3, [sp, #16]
 80140c6:	b9d0      	cbnz	r0, 80140fe <_svfiprintf_r+0xda>
 80140c8:	06d9      	lsls	r1, r3, #27
 80140ca:	bf44      	itt	mi
 80140cc:	2220      	movmi	r2, #32
 80140ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80140d2:	071a      	lsls	r2, r3, #28
 80140d4:	bf44      	itt	mi
 80140d6:	222b      	movmi	r2, #43	; 0x2b
 80140d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80140dc:	782a      	ldrb	r2, [r5, #0]
 80140de:	2a2a      	cmp	r2, #42	; 0x2a
 80140e0:	d015      	beq.n	801410e <_svfiprintf_r+0xea>
 80140e2:	9a07      	ldr	r2, [sp, #28]
 80140e4:	462f      	mov	r7, r5
 80140e6:	2000      	movs	r0, #0
 80140e8:	250a      	movs	r5, #10
 80140ea:	4639      	mov	r1, r7
 80140ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80140f0:	3b30      	subs	r3, #48	; 0x30
 80140f2:	2b09      	cmp	r3, #9
 80140f4:	d94d      	bls.n	8014192 <_svfiprintf_r+0x16e>
 80140f6:	b1b8      	cbz	r0, 8014128 <_svfiprintf_r+0x104>
 80140f8:	e00f      	b.n	801411a <_svfiprintf_r+0xf6>
 80140fa:	462f      	mov	r7, r5
 80140fc:	e7b8      	b.n	8014070 <_svfiprintf_r+0x4c>
 80140fe:	4a40      	ldr	r2, [pc, #256]	; (8014200 <_svfiprintf_r+0x1dc>)
 8014100:	1a80      	subs	r0, r0, r2
 8014102:	fa0b f000 	lsl.w	r0, fp, r0
 8014106:	4318      	orrs	r0, r3
 8014108:	9004      	str	r0, [sp, #16]
 801410a:	463d      	mov	r5, r7
 801410c:	e7d3      	b.n	80140b6 <_svfiprintf_r+0x92>
 801410e:	9a03      	ldr	r2, [sp, #12]
 8014110:	1d11      	adds	r1, r2, #4
 8014112:	6812      	ldr	r2, [r2, #0]
 8014114:	9103      	str	r1, [sp, #12]
 8014116:	2a00      	cmp	r2, #0
 8014118:	db01      	blt.n	801411e <_svfiprintf_r+0xfa>
 801411a:	9207      	str	r2, [sp, #28]
 801411c:	e004      	b.n	8014128 <_svfiprintf_r+0x104>
 801411e:	4252      	negs	r2, r2
 8014120:	f043 0302 	orr.w	r3, r3, #2
 8014124:	9207      	str	r2, [sp, #28]
 8014126:	9304      	str	r3, [sp, #16]
 8014128:	783b      	ldrb	r3, [r7, #0]
 801412a:	2b2e      	cmp	r3, #46	; 0x2e
 801412c:	d10c      	bne.n	8014148 <_svfiprintf_r+0x124>
 801412e:	787b      	ldrb	r3, [r7, #1]
 8014130:	2b2a      	cmp	r3, #42	; 0x2a
 8014132:	d133      	bne.n	801419c <_svfiprintf_r+0x178>
 8014134:	9b03      	ldr	r3, [sp, #12]
 8014136:	1d1a      	adds	r2, r3, #4
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	9203      	str	r2, [sp, #12]
 801413c:	2b00      	cmp	r3, #0
 801413e:	bfb8      	it	lt
 8014140:	f04f 33ff 	movlt.w	r3, #4294967295
 8014144:	3702      	adds	r7, #2
 8014146:	9305      	str	r3, [sp, #20]
 8014148:	4d2e      	ldr	r5, [pc, #184]	; (8014204 <_svfiprintf_r+0x1e0>)
 801414a:	7839      	ldrb	r1, [r7, #0]
 801414c:	2203      	movs	r2, #3
 801414e:	4628      	mov	r0, r5
 8014150:	f7ec f846 	bl	80001e0 <memchr>
 8014154:	b138      	cbz	r0, 8014166 <_svfiprintf_r+0x142>
 8014156:	2340      	movs	r3, #64	; 0x40
 8014158:	1b40      	subs	r0, r0, r5
 801415a:	fa03 f000 	lsl.w	r0, r3, r0
 801415e:	9b04      	ldr	r3, [sp, #16]
 8014160:	4303      	orrs	r3, r0
 8014162:	3701      	adds	r7, #1
 8014164:	9304      	str	r3, [sp, #16]
 8014166:	7839      	ldrb	r1, [r7, #0]
 8014168:	4827      	ldr	r0, [pc, #156]	; (8014208 <_svfiprintf_r+0x1e4>)
 801416a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801416e:	2206      	movs	r2, #6
 8014170:	1c7e      	adds	r6, r7, #1
 8014172:	f7ec f835 	bl	80001e0 <memchr>
 8014176:	2800      	cmp	r0, #0
 8014178:	d038      	beq.n	80141ec <_svfiprintf_r+0x1c8>
 801417a:	4b24      	ldr	r3, [pc, #144]	; (801420c <_svfiprintf_r+0x1e8>)
 801417c:	bb13      	cbnz	r3, 80141c4 <_svfiprintf_r+0x1a0>
 801417e:	9b03      	ldr	r3, [sp, #12]
 8014180:	3307      	adds	r3, #7
 8014182:	f023 0307 	bic.w	r3, r3, #7
 8014186:	3308      	adds	r3, #8
 8014188:	9303      	str	r3, [sp, #12]
 801418a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801418c:	444b      	add	r3, r9
 801418e:	9309      	str	r3, [sp, #36]	; 0x24
 8014190:	e76d      	b.n	801406e <_svfiprintf_r+0x4a>
 8014192:	fb05 3202 	mla	r2, r5, r2, r3
 8014196:	2001      	movs	r0, #1
 8014198:	460f      	mov	r7, r1
 801419a:	e7a6      	b.n	80140ea <_svfiprintf_r+0xc6>
 801419c:	2300      	movs	r3, #0
 801419e:	3701      	adds	r7, #1
 80141a0:	9305      	str	r3, [sp, #20]
 80141a2:	4619      	mov	r1, r3
 80141a4:	250a      	movs	r5, #10
 80141a6:	4638      	mov	r0, r7
 80141a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80141ac:	3a30      	subs	r2, #48	; 0x30
 80141ae:	2a09      	cmp	r2, #9
 80141b0:	d903      	bls.n	80141ba <_svfiprintf_r+0x196>
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d0c8      	beq.n	8014148 <_svfiprintf_r+0x124>
 80141b6:	9105      	str	r1, [sp, #20]
 80141b8:	e7c6      	b.n	8014148 <_svfiprintf_r+0x124>
 80141ba:	fb05 2101 	mla	r1, r5, r1, r2
 80141be:	2301      	movs	r3, #1
 80141c0:	4607      	mov	r7, r0
 80141c2:	e7f0      	b.n	80141a6 <_svfiprintf_r+0x182>
 80141c4:	ab03      	add	r3, sp, #12
 80141c6:	9300      	str	r3, [sp, #0]
 80141c8:	4622      	mov	r2, r4
 80141ca:	4b11      	ldr	r3, [pc, #68]	; (8014210 <_svfiprintf_r+0x1ec>)
 80141cc:	a904      	add	r1, sp, #16
 80141ce:	4640      	mov	r0, r8
 80141d0:	f3af 8000 	nop.w
 80141d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80141d8:	4681      	mov	r9, r0
 80141da:	d1d6      	bne.n	801418a <_svfiprintf_r+0x166>
 80141dc:	89a3      	ldrh	r3, [r4, #12]
 80141de:	065b      	lsls	r3, r3, #25
 80141e0:	f53f af35 	bmi.w	801404e <_svfiprintf_r+0x2a>
 80141e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80141e6:	b01d      	add	sp, #116	; 0x74
 80141e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141ec:	ab03      	add	r3, sp, #12
 80141ee:	9300      	str	r3, [sp, #0]
 80141f0:	4622      	mov	r2, r4
 80141f2:	4b07      	ldr	r3, [pc, #28]	; (8014210 <_svfiprintf_r+0x1ec>)
 80141f4:	a904      	add	r1, sp, #16
 80141f6:	4640      	mov	r0, r8
 80141f8:	f000 f9c2 	bl	8014580 <_printf_i>
 80141fc:	e7ea      	b.n	80141d4 <_svfiprintf_r+0x1b0>
 80141fe:	bf00      	nop
 8014200:	08016e22 	.word	0x08016e22
 8014204:	08016e28 	.word	0x08016e28
 8014208:	08016e2c 	.word	0x08016e2c
 801420c:	00000000 	.word	0x00000000
 8014210:	08013f71 	.word	0x08013f71

08014214 <__sfputc_r>:
 8014214:	6893      	ldr	r3, [r2, #8]
 8014216:	3b01      	subs	r3, #1
 8014218:	2b00      	cmp	r3, #0
 801421a:	b410      	push	{r4}
 801421c:	6093      	str	r3, [r2, #8]
 801421e:	da08      	bge.n	8014232 <__sfputc_r+0x1e>
 8014220:	6994      	ldr	r4, [r2, #24]
 8014222:	42a3      	cmp	r3, r4
 8014224:	db01      	blt.n	801422a <__sfputc_r+0x16>
 8014226:	290a      	cmp	r1, #10
 8014228:	d103      	bne.n	8014232 <__sfputc_r+0x1e>
 801422a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801422e:	f7ff bb3b 	b.w	80138a8 <__swbuf_r>
 8014232:	6813      	ldr	r3, [r2, #0]
 8014234:	1c58      	adds	r0, r3, #1
 8014236:	6010      	str	r0, [r2, #0]
 8014238:	7019      	strb	r1, [r3, #0]
 801423a:	4608      	mov	r0, r1
 801423c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014240:	4770      	bx	lr

08014242 <__sfputs_r>:
 8014242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014244:	4606      	mov	r6, r0
 8014246:	460f      	mov	r7, r1
 8014248:	4614      	mov	r4, r2
 801424a:	18d5      	adds	r5, r2, r3
 801424c:	42ac      	cmp	r4, r5
 801424e:	d101      	bne.n	8014254 <__sfputs_r+0x12>
 8014250:	2000      	movs	r0, #0
 8014252:	e007      	b.n	8014264 <__sfputs_r+0x22>
 8014254:	463a      	mov	r2, r7
 8014256:	f814 1b01 	ldrb.w	r1, [r4], #1
 801425a:	4630      	mov	r0, r6
 801425c:	f7ff ffda 	bl	8014214 <__sfputc_r>
 8014260:	1c43      	adds	r3, r0, #1
 8014262:	d1f3      	bne.n	801424c <__sfputs_r+0xa>
 8014264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014268 <_vfiprintf_r>:
 8014268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801426c:	460c      	mov	r4, r1
 801426e:	b09d      	sub	sp, #116	; 0x74
 8014270:	4617      	mov	r7, r2
 8014272:	461d      	mov	r5, r3
 8014274:	4606      	mov	r6, r0
 8014276:	b118      	cbz	r0, 8014280 <_vfiprintf_r+0x18>
 8014278:	6983      	ldr	r3, [r0, #24]
 801427a:	b90b      	cbnz	r3, 8014280 <_vfiprintf_r+0x18>
 801427c:	f7ff fcc4 	bl	8013c08 <__sinit>
 8014280:	4b7c      	ldr	r3, [pc, #496]	; (8014474 <_vfiprintf_r+0x20c>)
 8014282:	429c      	cmp	r4, r3
 8014284:	d158      	bne.n	8014338 <_vfiprintf_r+0xd0>
 8014286:	6874      	ldr	r4, [r6, #4]
 8014288:	89a3      	ldrh	r3, [r4, #12]
 801428a:	0718      	lsls	r0, r3, #28
 801428c:	d55e      	bpl.n	801434c <_vfiprintf_r+0xe4>
 801428e:	6923      	ldr	r3, [r4, #16]
 8014290:	2b00      	cmp	r3, #0
 8014292:	d05b      	beq.n	801434c <_vfiprintf_r+0xe4>
 8014294:	2300      	movs	r3, #0
 8014296:	9309      	str	r3, [sp, #36]	; 0x24
 8014298:	2320      	movs	r3, #32
 801429a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801429e:	2330      	movs	r3, #48	; 0x30
 80142a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80142a4:	9503      	str	r5, [sp, #12]
 80142a6:	f04f 0b01 	mov.w	fp, #1
 80142aa:	46b8      	mov	r8, r7
 80142ac:	4645      	mov	r5, r8
 80142ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80142b2:	b10b      	cbz	r3, 80142b8 <_vfiprintf_r+0x50>
 80142b4:	2b25      	cmp	r3, #37	; 0x25
 80142b6:	d154      	bne.n	8014362 <_vfiprintf_r+0xfa>
 80142b8:	ebb8 0a07 	subs.w	sl, r8, r7
 80142bc:	d00b      	beq.n	80142d6 <_vfiprintf_r+0x6e>
 80142be:	4653      	mov	r3, sl
 80142c0:	463a      	mov	r2, r7
 80142c2:	4621      	mov	r1, r4
 80142c4:	4630      	mov	r0, r6
 80142c6:	f7ff ffbc 	bl	8014242 <__sfputs_r>
 80142ca:	3001      	adds	r0, #1
 80142cc:	f000 80c2 	beq.w	8014454 <_vfiprintf_r+0x1ec>
 80142d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142d2:	4453      	add	r3, sl
 80142d4:	9309      	str	r3, [sp, #36]	; 0x24
 80142d6:	f898 3000 	ldrb.w	r3, [r8]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	f000 80ba 	beq.w	8014454 <_vfiprintf_r+0x1ec>
 80142e0:	2300      	movs	r3, #0
 80142e2:	f04f 32ff 	mov.w	r2, #4294967295
 80142e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80142ea:	9304      	str	r3, [sp, #16]
 80142ec:	9307      	str	r3, [sp, #28]
 80142ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80142f2:	931a      	str	r3, [sp, #104]	; 0x68
 80142f4:	46a8      	mov	r8, r5
 80142f6:	2205      	movs	r2, #5
 80142f8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80142fc:	485e      	ldr	r0, [pc, #376]	; (8014478 <_vfiprintf_r+0x210>)
 80142fe:	f7eb ff6f 	bl	80001e0 <memchr>
 8014302:	9b04      	ldr	r3, [sp, #16]
 8014304:	bb78      	cbnz	r0, 8014366 <_vfiprintf_r+0xfe>
 8014306:	06d9      	lsls	r1, r3, #27
 8014308:	bf44      	itt	mi
 801430a:	2220      	movmi	r2, #32
 801430c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014310:	071a      	lsls	r2, r3, #28
 8014312:	bf44      	itt	mi
 8014314:	222b      	movmi	r2, #43	; 0x2b
 8014316:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801431a:	782a      	ldrb	r2, [r5, #0]
 801431c:	2a2a      	cmp	r2, #42	; 0x2a
 801431e:	d02a      	beq.n	8014376 <_vfiprintf_r+0x10e>
 8014320:	9a07      	ldr	r2, [sp, #28]
 8014322:	46a8      	mov	r8, r5
 8014324:	2000      	movs	r0, #0
 8014326:	250a      	movs	r5, #10
 8014328:	4641      	mov	r1, r8
 801432a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801432e:	3b30      	subs	r3, #48	; 0x30
 8014330:	2b09      	cmp	r3, #9
 8014332:	d969      	bls.n	8014408 <_vfiprintf_r+0x1a0>
 8014334:	b360      	cbz	r0, 8014390 <_vfiprintf_r+0x128>
 8014336:	e024      	b.n	8014382 <_vfiprintf_r+0x11a>
 8014338:	4b50      	ldr	r3, [pc, #320]	; (801447c <_vfiprintf_r+0x214>)
 801433a:	429c      	cmp	r4, r3
 801433c:	d101      	bne.n	8014342 <_vfiprintf_r+0xda>
 801433e:	68b4      	ldr	r4, [r6, #8]
 8014340:	e7a2      	b.n	8014288 <_vfiprintf_r+0x20>
 8014342:	4b4f      	ldr	r3, [pc, #316]	; (8014480 <_vfiprintf_r+0x218>)
 8014344:	429c      	cmp	r4, r3
 8014346:	bf08      	it	eq
 8014348:	68f4      	ldreq	r4, [r6, #12]
 801434a:	e79d      	b.n	8014288 <_vfiprintf_r+0x20>
 801434c:	4621      	mov	r1, r4
 801434e:	4630      	mov	r0, r6
 8014350:	f7ff fafc 	bl	801394c <__swsetup_r>
 8014354:	2800      	cmp	r0, #0
 8014356:	d09d      	beq.n	8014294 <_vfiprintf_r+0x2c>
 8014358:	f04f 30ff 	mov.w	r0, #4294967295
 801435c:	b01d      	add	sp, #116	; 0x74
 801435e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014362:	46a8      	mov	r8, r5
 8014364:	e7a2      	b.n	80142ac <_vfiprintf_r+0x44>
 8014366:	4a44      	ldr	r2, [pc, #272]	; (8014478 <_vfiprintf_r+0x210>)
 8014368:	1a80      	subs	r0, r0, r2
 801436a:	fa0b f000 	lsl.w	r0, fp, r0
 801436e:	4318      	orrs	r0, r3
 8014370:	9004      	str	r0, [sp, #16]
 8014372:	4645      	mov	r5, r8
 8014374:	e7be      	b.n	80142f4 <_vfiprintf_r+0x8c>
 8014376:	9a03      	ldr	r2, [sp, #12]
 8014378:	1d11      	adds	r1, r2, #4
 801437a:	6812      	ldr	r2, [r2, #0]
 801437c:	9103      	str	r1, [sp, #12]
 801437e:	2a00      	cmp	r2, #0
 8014380:	db01      	blt.n	8014386 <_vfiprintf_r+0x11e>
 8014382:	9207      	str	r2, [sp, #28]
 8014384:	e004      	b.n	8014390 <_vfiprintf_r+0x128>
 8014386:	4252      	negs	r2, r2
 8014388:	f043 0302 	orr.w	r3, r3, #2
 801438c:	9207      	str	r2, [sp, #28]
 801438e:	9304      	str	r3, [sp, #16]
 8014390:	f898 3000 	ldrb.w	r3, [r8]
 8014394:	2b2e      	cmp	r3, #46	; 0x2e
 8014396:	d10e      	bne.n	80143b6 <_vfiprintf_r+0x14e>
 8014398:	f898 3001 	ldrb.w	r3, [r8, #1]
 801439c:	2b2a      	cmp	r3, #42	; 0x2a
 801439e:	d138      	bne.n	8014412 <_vfiprintf_r+0x1aa>
 80143a0:	9b03      	ldr	r3, [sp, #12]
 80143a2:	1d1a      	adds	r2, r3, #4
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	9203      	str	r2, [sp, #12]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	bfb8      	it	lt
 80143ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80143b0:	f108 0802 	add.w	r8, r8, #2
 80143b4:	9305      	str	r3, [sp, #20]
 80143b6:	4d33      	ldr	r5, [pc, #204]	; (8014484 <_vfiprintf_r+0x21c>)
 80143b8:	f898 1000 	ldrb.w	r1, [r8]
 80143bc:	2203      	movs	r2, #3
 80143be:	4628      	mov	r0, r5
 80143c0:	f7eb ff0e 	bl	80001e0 <memchr>
 80143c4:	b140      	cbz	r0, 80143d8 <_vfiprintf_r+0x170>
 80143c6:	2340      	movs	r3, #64	; 0x40
 80143c8:	1b40      	subs	r0, r0, r5
 80143ca:	fa03 f000 	lsl.w	r0, r3, r0
 80143ce:	9b04      	ldr	r3, [sp, #16]
 80143d0:	4303      	orrs	r3, r0
 80143d2:	f108 0801 	add.w	r8, r8, #1
 80143d6:	9304      	str	r3, [sp, #16]
 80143d8:	f898 1000 	ldrb.w	r1, [r8]
 80143dc:	482a      	ldr	r0, [pc, #168]	; (8014488 <_vfiprintf_r+0x220>)
 80143de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80143e2:	2206      	movs	r2, #6
 80143e4:	f108 0701 	add.w	r7, r8, #1
 80143e8:	f7eb fefa 	bl	80001e0 <memchr>
 80143ec:	2800      	cmp	r0, #0
 80143ee:	d037      	beq.n	8014460 <_vfiprintf_r+0x1f8>
 80143f0:	4b26      	ldr	r3, [pc, #152]	; (801448c <_vfiprintf_r+0x224>)
 80143f2:	bb1b      	cbnz	r3, 801443c <_vfiprintf_r+0x1d4>
 80143f4:	9b03      	ldr	r3, [sp, #12]
 80143f6:	3307      	adds	r3, #7
 80143f8:	f023 0307 	bic.w	r3, r3, #7
 80143fc:	3308      	adds	r3, #8
 80143fe:	9303      	str	r3, [sp, #12]
 8014400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014402:	444b      	add	r3, r9
 8014404:	9309      	str	r3, [sp, #36]	; 0x24
 8014406:	e750      	b.n	80142aa <_vfiprintf_r+0x42>
 8014408:	fb05 3202 	mla	r2, r5, r2, r3
 801440c:	2001      	movs	r0, #1
 801440e:	4688      	mov	r8, r1
 8014410:	e78a      	b.n	8014328 <_vfiprintf_r+0xc0>
 8014412:	2300      	movs	r3, #0
 8014414:	f108 0801 	add.w	r8, r8, #1
 8014418:	9305      	str	r3, [sp, #20]
 801441a:	4619      	mov	r1, r3
 801441c:	250a      	movs	r5, #10
 801441e:	4640      	mov	r0, r8
 8014420:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014424:	3a30      	subs	r2, #48	; 0x30
 8014426:	2a09      	cmp	r2, #9
 8014428:	d903      	bls.n	8014432 <_vfiprintf_r+0x1ca>
 801442a:	2b00      	cmp	r3, #0
 801442c:	d0c3      	beq.n	80143b6 <_vfiprintf_r+0x14e>
 801442e:	9105      	str	r1, [sp, #20]
 8014430:	e7c1      	b.n	80143b6 <_vfiprintf_r+0x14e>
 8014432:	fb05 2101 	mla	r1, r5, r1, r2
 8014436:	2301      	movs	r3, #1
 8014438:	4680      	mov	r8, r0
 801443a:	e7f0      	b.n	801441e <_vfiprintf_r+0x1b6>
 801443c:	ab03      	add	r3, sp, #12
 801443e:	9300      	str	r3, [sp, #0]
 8014440:	4622      	mov	r2, r4
 8014442:	4b13      	ldr	r3, [pc, #76]	; (8014490 <_vfiprintf_r+0x228>)
 8014444:	a904      	add	r1, sp, #16
 8014446:	4630      	mov	r0, r6
 8014448:	f3af 8000 	nop.w
 801444c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014450:	4681      	mov	r9, r0
 8014452:	d1d5      	bne.n	8014400 <_vfiprintf_r+0x198>
 8014454:	89a3      	ldrh	r3, [r4, #12]
 8014456:	065b      	lsls	r3, r3, #25
 8014458:	f53f af7e 	bmi.w	8014358 <_vfiprintf_r+0xf0>
 801445c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801445e:	e77d      	b.n	801435c <_vfiprintf_r+0xf4>
 8014460:	ab03      	add	r3, sp, #12
 8014462:	9300      	str	r3, [sp, #0]
 8014464:	4622      	mov	r2, r4
 8014466:	4b0a      	ldr	r3, [pc, #40]	; (8014490 <_vfiprintf_r+0x228>)
 8014468:	a904      	add	r1, sp, #16
 801446a:	4630      	mov	r0, r6
 801446c:	f000 f888 	bl	8014580 <_printf_i>
 8014470:	e7ec      	b.n	801444c <_vfiprintf_r+0x1e4>
 8014472:	bf00      	nop
 8014474:	08016dd8 	.word	0x08016dd8
 8014478:	08016e22 	.word	0x08016e22
 801447c:	08016df8 	.word	0x08016df8
 8014480:	08016db8 	.word	0x08016db8
 8014484:	08016e28 	.word	0x08016e28
 8014488:	08016e2c 	.word	0x08016e2c
 801448c:	00000000 	.word	0x00000000
 8014490:	08014243 	.word	0x08014243

08014494 <_printf_common>:
 8014494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014498:	4691      	mov	r9, r2
 801449a:	461f      	mov	r7, r3
 801449c:	688a      	ldr	r2, [r1, #8]
 801449e:	690b      	ldr	r3, [r1, #16]
 80144a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80144a4:	4293      	cmp	r3, r2
 80144a6:	bfb8      	it	lt
 80144a8:	4613      	movlt	r3, r2
 80144aa:	f8c9 3000 	str.w	r3, [r9]
 80144ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80144b2:	4606      	mov	r6, r0
 80144b4:	460c      	mov	r4, r1
 80144b6:	b112      	cbz	r2, 80144be <_printf_common+0x2a>
 80144b8:	3301      	adds	r3, #1
 80144ba:	f8c9 3000 	str.w	r3, [r9]
 80144be:	6823      	ldr	r3, [r4, #0]
 80144c0:	0699      	lsls	r1, r3, #26
 80144c2:	bf42      	ittt	mi
 80144c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80144c8:	3302      	addmi	r3, #2
 80144ca:	f8c9 3000 	strmi.w	r3, [r9]
 80144ce:	6825      	ldr	r5, [r4, #0]
 80144d0:	f015 0506 	ands.w	r5, r5, #6
 80144d4:	d107      	bne.n	80144e6 <_printf_common+0x52>
 80144d6:	f104 0a19 	add.w	sl, r4, #25
 80144da:	68e3      	ldr	r3, [r4, #12]
 80144dc:	f8d9 2000 	ldr.w	r2, [r9]
 80144e0:	1a9b      	subs	r3, r3, r2
 80144e2:	42ab      	cmp	r3, r5
 80144e4:	dc28      	bgt.n	8014538 <_printf_common+0xa4>
 80144e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80144ea:	6822      	ldr	r2, [r4, #0]
 80144ec:	3300      	adds	r3, #0
 80144ee:	bf18      	it	ne
 80144f0:	2301      	movne	r3, #1
 80144f2:	0692      	lsls	r2, r2, #26
 80144f4:	d42d      	bmi.n	8014552 <_printf_common+0xbe>
 80144f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80144fa:	4639      	mov	r1, r7
 80144fc:	4630      	mov	r0, r6
 80144fe:	47c0      	blx	r8
 8014500:	3001      	adds	r0, #1
 8014502:	d020      	beq.n	8014546 <_printf_common+0xb2>
 8014504:	6823      	ldr	r3, [r4, #0]
 8014506:	68e5      	ldr	r5, [r4, #12]
 8014508:	f8d9 2000 	ldr.w	r2, [r9]
 801450c:	f003 0306 	and.w	r3, r3, #6
 8014510:	2b04      	cmp	r3, #4
 8014512:	bf08      	it	eq
 8014514:	1aad      	subeq	r5, r5, r2
 8014516:	68a3      	ldr	r3, [r4, #8]
 8014518:	6922      	ldr	r2, [r4, #16]
 801451a:	bf0c      	ite	eq
 801451c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014520:	2500      	movne	r5, #0
 8014522:	4293      	cmp	r3, r2
 8014524:	bfc4      	itt	gt
 8014526:	1a9b      	subgt	r3, r3, r2
 8014528:	18ed      	addgt	r5, r5, r3
 801452a:	f04f 0900 	mov.w	r9, #0
 801452e:	341a      	adds	r4, #26
 8014530:	454d      	cmp	r5, r9
 8014532:	d11a      	bne.n	801456a <_printf_common+0xd6>
 8014534:	2000      	movs	r0, #0
 8014536:	e008      	b.n	801454a <_printf_common+0xb6>
 8014538:	2301      	movs	r3, #1
 801453a:	4652      	mov	r2, sl
 801453c:	4639      	mov	r1, r7
 801453e:	4630      	mov	r0, r6
 8014540:	47c0      	blx	r8
 8014542:	3001      	adds	r0, #1
 8014544:	d103      	bne.n	801454e <_printf_common+0xba>
 8014546:	f04f 30ff 	mov.w	r0, #4294967295
 801454a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801454e:	3501      	adds	r5, #1
 8014550:	e7c3      	b.n	80144da <_printf_common+0x46>
 8014552:	18e1      	adds	r1, r4, r3
 8014554:	1c5a      	adds	r2, r3, #1
 8014556:	2030      	movs	r0, #48	; 0x30
 8014558:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801455c:	4422      	add	r2, r4
 801455e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014562:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014566:	3302      	adds	r3, #2
 8014568:	e7c5      	b.n	80144f6 <_printf_common+0x62>
 801456a:	2301      	movs	r3, #1
 801456c:	4622      	mov	r2, r4
 801456e:	4639      	mov	r1, r7
 8014570:	4630      	mov	r0, r6
 8014572:	47c0      	blx	r8
 8014574:	3001      	adds	r0, #1
 8014576:	d0e6      	beq.n	8014546 <_printf_common+0xb2>
 8014578:	f109 0901 	add.w	r9, r9, #1
 801457c:	e7d8      	b.n	8014530 <_printf_common+0x9c>
	...

08014580 <_printf_i>:
 8014580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014584:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014588:	460c      	mov	r4, r1
 801458a:	7e09      	ldrb	r1, [r1, #24]
 801458c:	b085      	sub	sp, #20
 801458e:	296e      	cmp	r1, #110	; 0x6e
 8014590:	4617      	mov	r7, r2
 8014592:	4606      	mov	r6, r0
 8014594:	4698      	mov	r8, r3
 8014596:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014598:	f000 80b3 	beq.w	8014702 <_printf_i+0x182>
 801459c:	d822      	bhi.n	80145e4 <_printf_i+0x64>
 801459e:	2963      	cmp	r1, #99	; 0x63
 80145a0:	d036      	beq.n	8014610 <_printf_i+0x90>
 80145a2:	d80a      	bhi.n	80145ba <_printf_i+0x3a>
 80145a4:	2900      	cmp	r1, #0
 80145a6:	f000 80b9 	beq.w	801471c <_printf_i+0x19c>
 80145aa:	2958      	cmp	r1, #88	; 0x58
 80145ac:	f000 8083 	beq.w	80146b6 <_printf_i+0x136>
 80145b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80145b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80145b8:	e032      	b.n	8014620 <_printf_i+0xa0>
 80145ba:	2964      	cmp	r1, #100	; 0x64
 80145bc:	d001      	beq.n	80145c2 <_printf_i+0x42>
 80145be:	2969      	cmp	r1, #105	; 0x69
 80145c0:	d1f6      	bne.n	80145b0 <_printf_i+0x30>
 80145c2:	6820      	ldr	r0, [r4, #0]
 80145c4:	6813      	ldr	r3, [r2, #0]
 80145c6:	0605      	lsls	r5, r0, #24
 80145c8:	f103 0104 	add.w	r1, r3, #4
 80145cc:	d52a      	bpl.n	8014624 <_printf_i+0xa4>
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	6011      	str	r1, [r2, #0]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	da03      	bge.n	80145de <_printf_i+0x5e>
 80145d6:	222d      	movs	r2, #45	; 0x2d
 80145d8:	425b      	negs	r3, r3
 80145da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80145de:	486f      	ldr	r0, [pc, #444]	; (801479c <_printf_i+0x21c>)
 80145e0:	220a      	movs	r2, #10
 80145e2:	e039      	b.n	8014658 <_printf_i+0xd8>
 80145e4:	2973      	cmp	r1, #115	; 0x73
 80145e6:	f000 809d 	beq.w	8014724 <_printf_i+0x1a4>
 80145ea:	d808      	bhi.n	80145fe <_printf_i+0x7e>
 80145ec:	296f      	cmp	r1, #111	; 0x6f
 80145ee:	d020      	beq.n	8014632 <_printf_i+0xb2>
 80145f0:	2970      	cmp	r1, #112	; 0x70
 80145f2:	d1dd      	bne.n	80145b0 <_printf_i+0x30>
 80145f4:	6823      	ldr	r3, [r4, #0]
 80145f6:	f043 0320 	orr.w	r3, r3, #32
 80145fa:	6023      	str	r3, [r4, #0]
 80145fc:	e003      	b.n	8014606 <_printf_i+0x86>
 80145fe:	2975      	cmp	r1, #117	; 0x75
 8014600:	d017      	beq.n	8014632 <_printf_i+0xb2>
 8014602:	2978      	cmp	r1, #120	; 0x78
 8014604:	d1d4      	bne.n	80145b0 <_printf_i+0x30>
 8014606:	2378      	movs	r3, #120	; 0x78
 8014608:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801460c:	4864      	ldr	r0, [pc, #400]	; (80147a0 <_printf_i+0x220>)
 801460e:	e055      	b.n	80146bc <_printf_i+0x13c>
 8014610:	6813      	ldr	r3, [r2, #0]
 8014612:	1d19      	adds	r1, r3, #4
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	6011      	str	r1, [r2, #0]
 8014618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801461c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014620:	2301      	movs	r3, #1
 8014622:	e08c      	b.n	801473e <_printf_i+0x1be>
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	6011      	str	r1, [r2, #0]
 8014628:	f010 0f40 	tst.w	r0, #64	; 0x40
 801462c:	bf18      	it	ne
 801462e:	b21b      	sxthne	r3, r3
 8014630:	e7cf      	b.n	80145d2 <_printf_i+0x52>
 8014632:	6813      	ldr	r3, [r2, #0]
 8014634:	6825      	ldr	r5, [r4, #0]
 8014636:	1d18      	adds	r0, r3, #4
 8014638:	6010      	str	r0, [r2, #0]
 801463a:	0628      	lsls	r0, r5, #24
 801463c:	d501      	bpl.n	8014642 <_printf_i+0xc2>
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	e002      	b.n	8014648 <_printf_i+0xc8>
 8014642:	0668      	lsls	r0, r5, #25
 8014644:	d5fb      	bpl.n	801463e <_printf_i+0xbe>
 8014646:	881b      	ldrh	r3, [r3, #0]
 8014648:	4854      	ldr	r0, [pc, #336]	; (801479c <_printf_i+0x21c>)
 801464a:	296f      	cmp	r1, #111	; 0x6f
 801464c:	bf14      	ite	ne
 801464e:	220a      	movne	r2, #10
 8014650:	2208      	moveq	r2, #8
 8014652:	2100      	movs	r1, #0
 8014654:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014658:	6865      	ldr	r5, [r4, #4]
 801465a:	60a5      	str	r5, [r4, #8]
 801465c:	2d00      	cmp	r5, #0
 801465e:	f2c0 8095 	blt.w	801478c <_printf_i+0x20c>
 8014662:	6821      	ldr	r1, [r4, #0]
 8014664:	f021 0104 	bic.w	r1, r1, #4
 8014668:	6021      	str	r1, [r4, #0]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d13d      	bne.n	80146ea <_printf_i+0x16a>
 801466e:	2d00      	cmp	r5, #0
 8014670:	f040 808e 	bne.w	8014790 <_printf_i+0x210>
 8014674:	4665      	mov	r5, ip
 8014676:	2a08      	cmp	r2, #8
 8014678:	d10b      	bne.n	8014692 <_printf_i+0x112>
 801467a:	6823      	ldr	r3, [r4, #0]
 801467c:	07db      	lsls	r3, r3, #31
 801467e:	d508      	bpl.n	8014692 <_printf_i+0x112>
 8014680:	6923      	ldr	r3, [r4, #16]
 8014682:	6862      	ldr	r2, [r4, #4]
 8014684:	429a      	cmp	r2, r3
 8014686:	bfde      	ittt	le
 8014688:	2330      	movle	r3, #48	; 0x30
 801468a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801468e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014692:	ebac 0305 	sub.w	r3, ip, r5
 8014696:	6123      	str	r3, [r4, #16]
 8014698:	f8cd 8000 	str.w	r8, [sp]
 801469c:	463b      	mov	r3, r7
 801469e:	aa03      	add	r2, sp, #12
 80146a0:	4621      	mov	r1, r4
 80146a2:	4630      	mov	r0, r6
 80146a4:	f7ff fef6 	bl	8014494 <_printf_common>
 80146a8:	3001      	adds	r0, #1
 80146aa:	d14d      	bne.n	8014748 <_printf_i+0x1c8>
 80146ac:	f04f 30ff 	mov.w	r0, #4294967295
 80146b0:	b005      	add	sp, #20
 80146b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80146b6:	4839      	ldr	r0, [pc, #228]	; (801479c <_printf_i+0x21c>)
 80146b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80146bc:	6813      	ldr	r3, [r2, #0]
 80146be:	6821      	ldr	r1, [r4, #0]
 80146c0:	1d1d      	adds	r5, r3, #4
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	6015      	str	r5, [r2, #0]
 80146c6:	060a      	lsls	r2, r1, #24
 80146c8:	d50b      	bpl.n	80146e2 <_printf_i+0x162>
 80146ca:	07ca      	lsls	r2, r1, #31
 80146cc:	bf44      	itt	mi
 80146ce:	f041 0120 	orrmi.w	r1, r1, #32
 80146d2:	6021      	strmi	r1, [r4, #0]
 80146d4:	b91b      	cbnz	r3, 80146de <_printf_i+0x15e>
 80146d6:	6822      	ldr	r2, [r4, #0]
 80146d8:	f022 0220 	bic.w	r2, r2, #32
 80146dc:	6022      	str	r2, [r4, #0]
 80146de:	2210      	movs	r2, #16
 80146e0:	e7b7      	b.n	8014652 <_printf_i+0xd2>
 80146e2:	064d      	lsls	r5, r1, #25
 80146e4:	bf48      	it	mi
 80146e6:	b29b      	uxthmi	r3, r3
 80146e8:	e7ef      	b.n	80146ca <_printf_i+0x14a>
 80146ea:	4665      	mov	r5, ip
 80146ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80146f0:	fb02 3311 	mls	r3, r2, r1, r3
 80146f4:	5cc3      	ldrb	r3, [r0, r3]
 80146f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80146fa:	460b      	mov	r3, r1
 80146fc:	2900      	cmp	r1, #0
 80146fe:	d1f5      	bne.n	80146ec <_printf_i+0x16c>
 8014700:	e7b9      	b.n	8014676 <_printf_i+0xf6>
 8014702:	6813      	ldr	r3, [r2, #0]
 8014704:	6825      	ldr	r5, [r4, #0]
 8014706:	6961      	ldr	r1, [r4, #20]
 8014708:	1d18      	adds	r0, r3, #4
 801470a:	6010      	str	r0, [r2, #0]
 801470c:	0628      	lsls	r0, r5, #24
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	d501      	bpl.n	8014716 <_printf_i+0x196>
 8014712:	6019      	str	r1, [r3, #0]
 8014714:	e002      	b.n	801471c <_printf_i+0x19c>
 8014716:	066a      	lsls	r2, r5, #25
 8014718:	d5fb      	bpl.n	8014712 <_printf_i+0x192>
 801471a:	8019      	strh	r1, [r3, #0]
 801471c:	2300      	movs	r3, #0
 801471e:	6123      	str	r3, [r4, #16]
 8014720:	4665      	mov	r5, ip
 8014722:	e7b9      	b.n	8014698 <_printf_i+0x118>
 8014724:	6813      	ldr	r3, [r2, #0]
 8014726:	1d19      	adds	r1, r3, #4
 8014728:	6011      	str	r1, [r2, #0]
 801472a:	681d      	ldr	r5, [r3, #0]
 801472c:	6862      	ldr	r2, [r4, #4]
 801472e:	2100      	movs	r1, #0
 8014730:	4628      	mov	r0, r5
 8014732:	f7eb fd55 	bl	80001e0 <memchr>
 8014736:	b108      	cbz	r0, 801473c <_printf_i+0x1bc>
 8014738:	1b40      	subs	r0, r0, r5
 801473a:	6060      	str	r0, [r4, #4]
 801473c:	6863      	ldr	r3, [r4, #4]
 801473e:	6123      	str	r3, [r4, #16]
 8014740:	2300      	movs	r3, #0
 8014742:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014746:	e7a7      	b.n	8014698 <_printf_i+0x118>
 8014748:	6923      	ldr	r3, [r4, #16]
 801474a:	462a      	mov	r2, r5
 801474c:	4639      	mov	r1, r7
 801474e:	4630      	mov	r0, r6
 8014750:	47c0      	blx	r8
 8014752:	3001      	adds	r0, #1
 8014754:	d0aa      	beq.n	80146ac <_printf_i+0x12c>
 8014756:	6823      	ldr	r3, [r4, #0]
 8014758:	079b      	lsls	r3, r3, #30
 801475a:	d413      	bmi.n	8014784 <_printf_i+0x204>
 801475c:	68e0      	ldr	r0, [r4, #12]
 801475e:	9b03      	ldr	r3, [sp, #12]
 8014760:	4298      	cmp	r0, r3
 8014762:	bfb8      	it	lt
 8014764:	4618      	movlt	r0, r3
 8014766:	e7a3      	b.n	80146b0 <_printf_i+0x130>
 8014768:	2301      	movs	r3, #1
 801476a:	464a      	mov	r2, r9
 801476c:	4639      	mov	r1, r7
 801476e:	4630      	mov	r0, r6
 8014770:	47c0      	blx	r8
 8014772:	3001      	adds	r0, #1
 8014774:	d09a      	beq.n	80146ac <_printf_i+0x12c>
 8014776:	3501      	adds	r5, #1
 8014778:	68e3      	ldr	r3, [r4, #12]
 801477a:	9a03      	ldr	r2, [sp, #12]
 801477c:	1a9b      	subs	r3, r3, r2
 801477e:	42ab      	cmp	r3, r5
 8014780:	dcf2      	bgt.n	8014768 <_printf_i+0x1e8>
 8014782:	e7eb      	b.n	801475c <_printf_i+0x1dc>
 8014784:	2500      	movs	r5, #0
 8014786:	f104 0919 	add.w	r9, r4, #25
 801478a:	e7f5      	b.n	8014778 <_printf_i+0x1f8>
 801478c:	2b00      	cmp	r3, #0
 801478e:	d1ac      	bne.n	80146ea <_printf_i+0x16a>
 8014790:	7803      	ldrb	r3, [r0, #0]
 8014792:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014796:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801479a:	e76c      	b.n	8014676 <_printf_i+0xf6>
 801479c:	08016e33 	.word	0x08016e33
 80147a0:	08016e44 	.word	0x08016e44

080147a4 <_sbrk_r>:
 80147a4:	b538      	push	{r3, r4, r5, lr}
 80147a6:	4c06      	ldr	r4, [pc, #24]	; (80147c0 <_sbrk_r+0x1c>)
 80147a8:	2300      	movs	r3, #0
 80147aa:	4605      	mov	r5, r0
 80147ac:	4608      	mov	r0, r1
 80147ae:	6023      	str	r3, [r4, #0]
 80147b0:	f7ef fde4 	bl	800437c <_sbrk>
 80147b4:	1c43      	adds	r3, r0, #1
 80147b6:	d102      	bne.n	80147be <_sbrk_r+0x1a>
 80147b8:	6823      	ldr	r3, [r4, #0]
 80147ba:	b103      	cbz	r3, 80147be <_sbrk_r+0x1a>
 80147bc:	602b      	str	r3, [r5, #0]
 80147be:	bd38      	pop	{r3, r4, r5, pc}
 80147c0:	2000498c 	.word	0x2000498c

080147c4 <__sread>:
 80147c4:	b510      	push	{r4, lr}
 80147c6:	460c      	mov	r4, r1
 80147c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147cc:	f000 f8e2 	bl	8014994 <_read_r>
 80147d0:	2800      	cmp	r0, #0
 80147d2:	bfab      	itete	ge
 80147d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80147d6:	89a3      	ldrhlt	r3, [r4, #12]
 80147d8:	181b      	addge	r3, r3, r0
 80147da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80147de:	bfac      	ite	ge
 80147e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80147e2:	81a3      	strhlt	r3, [r4, #12]
 80147e4:	bd10      	pop	{r4, pc}

080147e6 <__swrite>:
 80147e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147ea:	461f      	mov	r7, r3
 80147ec:	898b      	ldrh	r3, [r1, #12]
 80147ee:	05db      	lsls	r3, r3, #23
 80147f0:	4605      	mov	r5, r0
 80147f2:	460c      	mov	r4, r1
 80147f4:	4616      	mov	r6, r2
 80147f6:	d505      	bpl.n	8014804 <__swrite+0x1e>
 80147f8:	2302      	movs	r3, #2
 80147fa:	2200      	movs	r2, #0
 80147fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014800:	f000 f874 	bl	80148ec <_lseek_r>
 8014804:	89a3      	ldrh	r3, [r4, #12]
 8014806:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801480a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801480e:	81a3      	strh	r3, [r4, #12]
 8014810:	4632      	mov	r2, r6
 8014812:	463b      	mov	r3, r7
 8014814:	4628      	mov	r0, r5
 8014816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801481a:	f000 b823 	b.w	8014864 <_write_r>

0801481e <__sseek>:
 801481e:	b510      	push	{r4, lr}
 8014820:	460c      	mov	r4, r1
 8014822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014826:	f000 f861 	bl	80148ec <_lseek_r>
 801482a:	1c43      	adds	r3, r0, #1
 801482c:	89a3      	ldrh	r3, [r4, #12]
 801482e:	bf15      	itete	ne
 8014830:	6560      	strne	r0, [r4, #84]	; 0x54
 8014832:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014836:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801483a:	81a3      	strheq	r3, [r4, #12]
 801483c:	bf18      	it	ne
 801483e:	81a3      	strhne	r3, [r4, #12]
 8014840:	bd10      	pop	{r4, pc}

08014842 <__sclose>:
 8014842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014846:	f000 b81f 	b.w	8014888 <_close_r>

0801484a <__ascii_wctomb>:
 801484a:	b149      	cbz	r1, 8014860 <__ascii_wctomb+0x16>
 801484c:	2aff      	cmp	r2, #255	; 0xff
 801484e:	bf85      	ittet	hi
 8014850:	238a      	movhi	r3, #138	; 0x8a
 8014852:	6003      	strhi	r3, [r0, #0]
 8014854:	700a      	strbls	r2, [r1, #0]
 8014856:	f04f 30ff 	movhi.w	r0, #4294967295
 801485a:	bf98      	it	ls
 801485c:	2001      	movls	r0, #1
 801485e:	4770      	bx	lr
 8014860:	4608      	mov	r0, r1
 8014862:	4770      	bx	lr

08014864 <_write_r>:
 8014864:	b538      	push	{r3, r4, r5, lr}
 8014866:	4c07      	ldr	r4, [pc, #28]	; (8014884 <_write_r+0x20>)
 8014868:	4605      	mov	r5, r0
 801486a:	4608      	mov	r0, r1
 801486c:	4611      	mov	r1, r2
 801486e:	2200      	movs	r2, #0
 8014870:	6022      	str	r2, [r4, #0]
 8014872:	461a      	mov	r2, r3
 8014874:	f7ef fd32 	bl	80042dc <_write>
 8014878:	1c43      	adds	r3, r0, #1
 801487a:	d102      	bne.n	8014882 <_write_r+0x1e>
 801487c:	6823      	ldr	r3, [r4, #0]
 801487e:	b103      	cbz	r3, 8014882 <_write_r+0x1e>
 8014880:	602b      	str	r3, [r5, #0]
 8014882:	bd38      	pop	{r3, r4, r5, pc}
 8014884:	2000498c 	.word	0x2000498c

08014888 <_close_r>:
 8014888:	b538      	push	{r3, r4, r5, lr}
 801488a:	4c06      	ldr	r4, [pc, #24]	; (80148a4 <_close_r+0x1c>)
 801488c:	2300      	movs	r3, #0
 801488e:	4605      	mov	r5, r0
 8014890:	4608      	mov	r0, r1
 8014892:	6023      	str	r3, [r4, #0]
 8014894:	f7ef fd3e 	bl	8004314 <_close>
 8014898:	1c43      	adds	r3, r0, #1
 801489a:	d102      	bne.n	80148a2 <_close_r+0x1a>
 801489c:	6823      	ldr	r3, [r4, #0]
 801489e:	b103      	cbz	r3, 80148a2 <_close_r+0x1a>
 80148a0:	602b      	str	r3, [r5, #0]
 80148a2:	bd38      	pop	{r3, r4, r5, pc}
 80148a4:	2000498c 	.word	0x2000498c

080148a8 <_fstat_r>:
 80148a8:	b538      	push	{r3, r4, r5, lr}
 80148aa:	4c07      	ldr	r4, [pc, #28]	; (80148c8 <_fstat_r+0x20>)
 80148ac:	2300      	movs	r3, #0
 80148ae:	4605      	mov	r5, r0
 80148b0:	4608      	mov	r0, r1
 80148b2:	4611      	mov	r1, r2
 80148b4:	6023      	str	r3, [r4, #0]
 80148b6:	f7ef fd39 	bl	800432c <_fstat>
 80148ba:	1c43      	adds	r3, r0, #1
 80148bc:	d102      	bne.n	80148c4 <_fstat_r+0x1c>
 80148be:	6823      	ldr	r3, [r4, #0]
 80148c0:	b103      	cbz	r3, 80148c4 <_fstat_r+0x1c>
 80148c2:	602b      	str	r3, [r5, #0]
 80148c4:	bd38      	pop	{r3, r4, r5, pc}
 80148c6:	bf00      	nop
 80148c8:	2000498c 	.word	0x2000498c

080148cc <_isatty_r>:
 80148cc:	b538      	push	{r3, r4, r5, lr}
 80148ce:	4c06      	ldr	r4, [pc, #24]	; (80148e8 <_isatty_r+0x1c>)
 80148d0:	2300      	movs	r3, #0
 80148d2:	4605      	mov	r5, r0
 80148d4:	4608      	mov	r0, r1
 80148d6:	6023      	str	r3, [r4, #0]
 80148d8:	f7ef fd38 	bl	800434c <_isatty>
 80148dc:	1c43      	adds	r3, r0, #1
 80148de:	d102      	bne.n	80148e6 <_isatty_r+0x1a>
 80148e0:	6823      	ldr	r3, [r4, #0]
 80148e2:	b103      	cbz	r3, 80148e6 <_isatty_r+0x1a>
 80148e4:	602b      	str	r3, [r5, #0]
 80148e6:	bd38      	pop	{r3, r4, r5, pc}
 80148e8:	2000498c 	.word	0x2000498c

080148ec <_lseek_r>:
 80148ec:	b538      	push	{r3, r4, r5, lr}
 80148ee:	4c07      	ldr	r4, [pc, #28]	; (801490c <_lseek_r+0x20>)
 80148f0:	4605      	mov	r5, r0
 80148f2:	4608      	mov	r0, r1
 80148f4:	4611      	mov	r1, r2
 80148f6:	2200      	movs	r2, #0
 80148f8:	6022      	str	r2, [r4, #0]
 80148fa:	461a      	mov	r2, r3
 80148fc:	f7ef fd31 	bl	8004362 <_lseek>
 8014900:	1c43      	adds	r3, r0, #1
 8014902:	d102      	bne.n	801490a <_lseek_r+0x1e>
 8014904:	6823      	ldr	r3, [r4, #0]
 8014906:	b103      	cbz	r3, 801490a <_lseek_r+0x1e>
 8014908:	602b      	str	r3, [r5, #0]
 801490a:	bd38      	pop	{r3, r4, r5, pc}
 801490c:	2000498c 	.word	0x2000498c

08014910 <memmove>:
 8014910:	4288      	cmp	r0, r1
 8014912:	b510      	push	{r4, lr}
 8014914:	eb01 0302 	add.w	r3, r1, r2
 8014918:	d807      	bhi.n	801492a <memmove+0x1a>
 801491a:	1e42      	subs	r2, r0, #1
 801491c:	4299      	cmp	r1, r3
 801491e:	d00a      	beq.n	8014936 <memmove+0x26>
 8014920:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014924:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014928:	e7f8      	b.n	801491c <memmove+0xc>
 801492a:	4283      	cmp	r3, r0
 801492c:	d9f5      	bls.n	801491a <memmove+0xa>
 801492e:	1881      	adds	r1, r0, r2
 8014930:	1ad2      	subs	r2, r2, r3
 8014932:	42d3      	cmn	r3, r2
 8014934:	d100      	bne.n	8014938 <memmove+0x28>
 8014936:	bd10      	pop	{r4, pc}
 8014938:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801493c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014940:	e7f7      	b.n	8014932 <memmove+0x22>

08014942 <__malloc_lock>:
 8014942:	4770      	bx	lr

08014944 <__malloc_unlock>:
 8014944:	4770      	bx	lr

08014946 <_realloc_r>:
 8014946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014948:	4607      	mov	r7, r0
 801494a:	4614      	mov	r4, r2
 801494c:	460e      	mov	r6, r1
 801494e:	b921      	cbnz	r1, 801495a <_realloc_r+0x14>
 8014950:	4611      	mov	r1, r2
 8014952:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014956:	f7ff bab1 	b.w	8013ebc <_malloc_r>
 801495a:	b922      	cbnz	r2, 8014966 <_realloc_r+0x20>
 801495c:	f7ff fa60 	bl	8013e20 <_free_r>
 8014960:	4625      	mov	r5, r4
 8014962:	4628      	mov	r0, r5
 8014964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014966:	f000 f827 	bl	80149b8 <_malloc_usable_size_r>
 801496a:	42a0      	cmp	r0, r4
 801496c:	d20f      	bcs.n	801498e <_realloc_r+0x48>
 801496e:	4621      	mov	r1, r4
 8014970:	4638      	mov	r0, r7
 8014972:	f7ff faa3 	bl	8013ebc <_malloc_r>
 8014976:	4605      	mov	r5, r0
 8014978:	2800      	cmp	r0, #0
 801497a:	d0f2      	beq.n	8014962 <_realloc_r+0x1c>
 801497c:	4631      	mov	r1, r6
 801497e:	4622      	mov	r2, r4
 8014980:	f7fe fd91 	bl	80134a6 <memcpy>
 8014984:	4631      	mov	r1, r6
 8014986:	4638      	mov	r0, r7
 8014988:	f7ff fa4a 	bl	8013e20 <_free_r>
 801498c:	e7e9      	b.n	8014962 <_realloc_r+0x1c>
 801498e:	4635      	mov	r5, r6
 8014990:	e7e7      	b.n	8014962 <_realloc_r+0x1c>
	...

08014994 <_read_r>:
 8014994:	b538      	push	{r3, r4, r5, lr}
 8014996:	4c07      	ldr	r4, [pc, #28]	; (80149b4 <_read_r+0x20>)
 8014998:	4605      	mov	r5, r0
 801499a:	4608      	mov	r0, r1
 801499c:	4611      	mov	r1, r2
 801499e:	2200      	movs	r2, #0
 80149a0:	6022      	str	r2, [r4, #0]
 80149a2:	461a      	mov	r2, r3
 80149a4:	f7ef fc7d 	bl	80042a2 <_read>
 80149a8:	1c43      	adds	r3, r0, #1
 80149aa:	d102      	bne.n	80149b2 <_read_r+0x1e>
 80149ac:	6823      	ldr	r3, [r4, #0]
 80149ae:	b103      	cbz	r3, 80149b2 <_read_r+0x1e>
 80149b0:	602b      	str	r3, [r5, #0]
 80149b2:	bd38      	pop	{r3, r4, r5, pc}
 80149b4:	2000498c 	.word	0x2000498c

080149b8 <_malloc_usable_size_r>:
 80149b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80149bc:	1f18      	subs	r0, r3, #4
 80149be:	2b00      	cmp	r3, #0
 80149c0:	bfbc      	itt	lt
 80149c2:	580b      	ldrlt	r3, [r1, r0]
 80149c4:	18c0      	addlt	r0, r0, r3
 80149c6:	4770      	bx	lr

080149c8 <trunc>:
 80149c8:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 80149cc:	ec5c bb10 	vmov	fp, ip, d0
 80149d0:	f3cc 500a 	ubfx	r0, ip, #20, #11
 80149d4:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 80149d8:	2913      	cmp	r1, #19
 80149da:	4664      	mov	r4, ip
 80149dc:	dc11      	bgt.n	8014a02 <trunc+0x3a>
 80149de:	2900      	cmp	r1, #0
 80149e0:	bfa7      	ittee	ge
 80149e2:	4b15      	ldrge	r3, [pc, #84]	; (8014a38 <trunc+0x70>)
 80149e4:	fa43 f101 	asrge.w	r1, r3, r1
 80149e8:	2200      	movlt	r2, #0
 80149ea:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 80149ee:	bfa4      	itt	ge
 80149f0:	2200      	movge	r2, #0
 80149f2:	ea2c 0301 	bicge.w	r3, ip, r1
 80149f6:	4693      	mov	fp, r2
 80149f8:	469c      	mov	ip, r3
 80149fa:	ec4c bb10 	vmov	d0, fp, ip
 80149fe:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8014a02:	2933      	cmp	r1, #51	; 0x33
 8014a04:	dd0d      	ble.n	8014a22 <trunc+0x5a>
 8014a06:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8014a0a:	d1f6      	bne.n	80149fa <trunc+0x32>
 8014a0c:	4663      	mov	r3, ip
 8014a0e:	ee10 2a10 	vmov	r2, s0
 8014a12:	ee10 0a10 	vmov	r0, s0
 8014a16:	4621      	mov	r1, r4
 8014a18:	f7eb fc38 	bl	800028c <__adddf3>
 8014a1c:	4683      	mov	fp, r0
 8014a1e:	468c      	mov	ip, r1
 8014a20:	e7eb      	b.n	80149fa <trunc+0x32>
 8014a22:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 8014a26:	f04f 33ff 	mov.w	r3, #4294967295
 8014a2a:	fa23 f000 	lsr.w	r0, r3, r0
 8014a2e:	ea2b 0600 	bic.w	r6, fp, r0
 8014a32:	46b3      	mov	fp, r6
 8014a34:	46a4      	mov	ip, r4
 8014a36:	e7e0      	b.n	80149fa <trunc+0x32>
 8014a38:	000fffff 	.word	0x000fffff

08014a3c <pow>:
 8014a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a40:	ed2d 8b04 	vpush	{d8-d9}
 8014a44:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8014d18 <pow+0x2dc>
 8014a48:	b08d      	sub	sp, #52	; 0x34
 8014a4a:	ec57 6b10 	vmov	r6, r7, d0
 8014a4e:	ec55 4b11 	vmov	r4, r5, d1
 8014a52:	f000 f965 	bl	8014d20 <__ieee754_pow>
 8014a56:	f999 3000 	ldrsb.w	r3, [r9]
 8014a5a:	9300      	str	r3, [sp, #0]
 8014a5c:	3301      	adds	r3, #1
 8014a5e:	eeb0 8a40 	vmov.f32	s16, s0
 8014a62:	eef0 8a60 	vmov.f32	s17, s1
 8014a66:	46c8      	mov	r8, r9
 8014a68:	d05f      	beq.n	8014b2a <pow+0xee>
 8014a6a:	4622      	mov	r2, r4
 8014a6c:	462b      	mov	r3, r5
 8014a6e:	4620      	mov	r0, r4
 8014a70:	4629      	mov	r1, r5
 8014a72:	f7ec f85b 	bl	8000b2c <__aeabi_dcmpun>
 8014a76:	4683      	mov	fp, r0
 8014a78:	2800      	cmp	r0, #0
 8014a7a:	d156      	bne.n	8014b2a <pow+0xee>
 8014a7c:	4632      	mov	r2, r6
 8014a7e:	463b      	mov	r3, r7
 8014a80:	4630      	mov	r0, r6
 8014a82:	4639      	mov	r1, r7
 8014a84:	f7ec f852 	bl	8000b2c <__aeabi_dcmpun>
 8014a88:	9001      	str	r0, [sp, #4]
 8014a8a:	b1e8      	cbz	r0, 8014ac8 <pow+0x8c>
 8014a8c:	2200      	movs	r2, #0
 8014a8e:	2300      	movs	r3, #0
 8014a90:	4620      	mov	r0, r4
 8014a92:	4629      	mov	r1, r5
 8014a94:	f7ec f818 	bl	8000ac8 <__aeabi_dcmpeq>
 8014a98:	2800      	cmp	r0, #0
 8014a9a:	d046      	beq.n	8014b2a <pow+0xee>
 8014a9c:	2301      	movs	r3, #1
 8014a9e:	9302      	str	r3, [sp, #8]
 8014aa0:	4b96      	ldr	r3, [pc, #600]	; (8014cfc <pow+0x2c0>)
 8014aa2:	9303      	str	r3, [sp, #12]
 8014aa4:	4b96      	ldr	r3, [pc, #600]	; (8014d00 <pow+0x2c4>)
 8014aa6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8014aaa:	2200      	movs	r2, #0
 8014aac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014ab0:	9b00      	ldr	r3, [sp, #0]
 8014ab2:	2b02      	cmp	r3, #2
 8014ab4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014ab8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014abc:	d033      	beq.n	8014b26 <pow+0xea>
 8014abe:	a802      	add	r0, sp, #8
 8014ac0:	f000 fefd 	bl	80158be <matherr>
 8014ac4:	bb48      	cbnz	r0, 8014b1a <pow+0xde>
 8014ac6:	e05d      	b.n	8014b84 <pow+0x148>
 8014ac8:	f04f 0a00 	mov.w	sl, #0
 8014acc:	f04f 0b00 	mov.w	fp, #0
 8014ad0:	4652      	mov	r2, sl
 8014ad2:	465b      	mov	r3, fp
 8014ad4:	4630      	mov	r0, r6
 8014ad6:	4639      	mov	r1, r7
 8014ad8:	f7eb fff6 	bl	8000ac8 <__aeabi_dcmpeq>
 8014adc:	ec4b ab19 	vmov	d9, sl, fp
 8014ae0:	2800      	cmp	r0, #0
 8014ae2:	d054      	beq.n	8014b8e <pow+0x152>
 8014ae4:	4652      	mov	r2, sl
 8014ae6:	465b      	mov	r3, fp
 8014ae8:	4620      	mov	r0, r4
 8014aea:	4629      	mov	r1, r5
 8014aec:	f7eb ffec 	bl	8000ac8 <__aeabi_dcmpeq>
 8014af0:	4680      	mov	r8, r0
 8014af2:	b318      	cbz	r0, 8014b3c <pow+0x100>
 8014af4:	2301      	movs	r3, #1
 8014af6:	9302      	str	r3, [sp, #8]
 8014af8:	4b80      	ldr	r3, [pc, #512]	; (8014cfc <pow+0x2c0>)
 8014afa:	9303      	str	r3, [sp, #12]
 8014afc:	9b01      	ldr	r3, [sp, #4]
 8014afe:	930a      	str	r3, [sp, #40]	; 0x28
 8014b00:	9b00      	ldr	r3, [sp, #0]
 8014b02:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014b06:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014b0a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d0d5      	beq.n	8014abe <pow+0x82>
 8014b12:	4b7b      	ldr	r3, [pc, #492]	; (8014d00 <pow+0x2c4>)
 8014b14:	2200      	movs	r2, #0
 8014b16:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b1c:	b11b      	cbz	r3, 8014b26 <pow+0xea>
 8014b1e:	f7fe fc89 	bl	8013434 <__errno>
 8014b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b24:	6003      	str	r3, [r0, #0]
 8014b26:	ed9d 8b08 	vldr	d8, [sp, #32]
 8014b2a:	eeb0 0a48 	vmov.f32	s0, s16
 8014b2e:	eef0 0a68 	vmov.f32	s1, s17
 8014b32:	b00d      	add	sp, #52	; 0x34
 8014b34:	ecbd 8b04 	vpop	{d8-d9}
 8014b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b3c:	ec45 4b10 	vmov	d0, r4, r5
 8014b40:	f000 feb5 	bl	80158ae <finite>
 8014b44:	2800      	cmp	r0, #0
 8014b46:	d0f0      	beq.n	8014b2a <pow+0xee>
 8014b48:	4652      	mov	r2, sl
 8014b4a:	465b      	mov	r3, fp
 8014b4c:	4620      	mov	r0, r4
 8014b4e:	4629      	mov	r1, r5
 8014b50:	f7eb ffc4 	bl	8000adc <__aeabi_dcmplt>
 8014b54:	2800      	cmp	r0, #0
 8014b56:	d0e8      	beq.n	8014b2a <pow+0xee>
 8014b58:	2301      	movs	r3, #1
 8014b5a:	9302      	str	r3, [sp, #8]
 8014b5c:	4b67      	ldr	r3, [pc, #412]	; (8014cfc <pow+0x2c0>)
 8014b5e:	9303      	str	r3, [sp, #12]
 8014b60:	f999 3000 	ldrsb.w	r3, [r9]
 8014b64:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8014b68:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014b6c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014b70:	b913      	cbnz	r3, 8014b78 <pow+0x13c>
 8014b72:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014b76:	e7a2      	b.n	8014abe <pow+0x82>
 8014b78:	4962      	ldr	r1, [pc, #392]	; (8014d04 <pow+0x2c8>)
 8014b7a:	2000      	movs	r0, #0
 8014b7c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014b80:	2b02      	cmp	r3, #2
 8014b82:	d19c      	bne.n	8014abe <pow+0x82>
 8014b84:	f7fe fc56 	bl	8013434 <__errno>
 8014b88:	2321      	movs	r3, #33	; 0x21
 8014b8a:	6003      	str	r3, [r0, #0]
 8014b8c:	e7c5      	b.n	8014b1a <pow+0xde>
 8014b8e:	eeb0 0a48 	vmov.f32	s0, s16
 8014b92:	eef0 0a68 	vmov.f32	s1, s17
 8014b96:	f000 fe8a 	bl	80158ae <finite>
 8014b9a:	9000      	str	r0, [sp, #0]
 8014b9c:	2800      	cmp	r0, #0
 8014b9e:	f040 8081 	bne.w	8014ca4 <pow+0x268>
 8014ba2:	ec47 6b10 	vmov	d0, r6, r7
 8014ba6:	f000 fe82 	bl	80158ae <finite>
 8014baa:	2800      	cmp	r0, #0
 8014bac:	d07a      	beq.n	8014ca4 <pow+0x268>
 8014bae:	ec45 4b10 	vmov	d0, r4, r5
 8014bb2:	f000 fe7c 	bl	80158ae <finite>
 8014bb6:	2800      	cmp	r0, #0
 8014bb8:	d074      	beq.n	8014ca4 <pow+0x268>
 8014bba:	ec53 2b18 	vmov	r2, r3, d8
 8014bbe:	ee18 0a10 	vmov	r0, s16
 8014bc2:	4619      	mov	r1, r3
 8014bc4:	f7eb ffb2 	bl	8000b2c <__aeabi_dcmpun>
 8014bc8:	f999 9000 	ldrsb.w	r9, [r9]
 8014bcc:	4b4b      	ldr	r3, [pc, #300]	; (8014cfc <pow+0x2c0>)
 8014bce:	b1b0      	cbz	r0, 8014bfe <pow+0x1c2>
 8014bd0:	2201      	movs	r2, #1
 8014bd2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014bd6:	9b00      	ldr	r3, [sp, #0]
 8014bd8:	930a      	str	r3, [sp, #40]	; 0x28
 8014bda:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014bde:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014be2:	f1b9 0f00 	cmp.w	r9, #0
 8014be6:	d0c4      	beq.n	8014b72 <pow+0x136>
 8014be8:	4652      	mov	r2, sl
 8014bea:	465b      	mov	r3, fp
 8014bec:	4650      	mov	r0, sl
 8014bee:	4659      	mov	r1, fp
 8014bf0:	f7eb fe2c 	bl	800084c <__aeabi_ddiv>
 8014bf4:	f1b9 0f02 	cmp.w	r9, #2
 8014bf8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014bfc:	e7c1      	b.n	8014b82 <pow+0x146>
 8014bfe:	2203      	movs	r2, #3
 8014c00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014c04:	900a      	str	r0, [sp, #40]	; 0x28
 8014c06:	4629      	mov	r1, r5
 8014c08:	4620      	mov	r0, r4
 8014c0a:	2200      	movs	r2, #0
 8014c0c:	4b3e      	ldr	r3, [pc, #248]	; (8014d08 <pow+0x2cc>)
 8014c0e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014c12:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014c16:	f7eb fcef 	bl	80005f8 <__aeabi_dmul>
 8014c1a:	4604      	mov	r4, r0
 8014c1c:	460d      	mov	r5, r1
 8014c1e:	f1b9 0f00 	cmp.w	r9, #0
 8014c22:	d124      	bne.n	8014c6e <pow+0x232>
 8014c24:	4b39      	ldr	r3, [pc, #228]	; (8014d0c <pow+0x2d0>)
 8014c26:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014c2a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014c2e:	4630      	mov	r0, r6
 8014c30:	4652      	mov	r2, sl
 8014c32:	465b      	mov	r3, fp
 8014c34:	4639      	mov	r1, r7
 8014c36:	f7eb ff51 	bl	8000adc <__aeabi_dcmplt>
 8014c3a:	2800      	cmp	r0, #0
 8014c3c:	d056      	beq.n	8014cec <pow+0x2b0>
 8014c3e:	ec45 4b10 	vmov	d0, r4, r5
 8014c42:	f000 fe49 	bl	80158d8 <rint>
 8014c46:	4622      	mov	r2, r4
 8014c48:	462b      	mov	r3, r5
 8014c4a:	ec51 0b10 	vmov	r0, r1, d0
 8014c4e:	f7eb ff3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8014c52:	b920      	cbnz	r0, 8014c5e <pow+0x222>
 8014c54:	4b2e      	ldr	r3, [pc, #184]	; (8014d10 <pow+0x2d4>)
 8014c56:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014c5a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014c5e:	f998 3000 	ldrsb.w	r3, [r8]
 8014c62:	2b02      	cmp	r3, #2
 8014c64:	d142      	bne.n	8014cec <pow+0x2b0>
 8014c66:	f7fe fbe5 	bl	8013434 <__errno>
 8014c6a:	2322      	movs	r3, #34	; 0x22
 8014c6c:	e78d      	b.n	8014b8a <pow+0x14e>
 8014c6e:	4b29      	ldr	r3, [pc, #164]	; (8014d14 <pow+0x2d8>)
 8014c70:	2200      	movs	r2, #0
 8014c72:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014c76:	4630      	mov	r0, r6
 8014c78:	4652      	mov	r2, sl
 8014c7a:	465b      	mov	r3, fp
 8014c7c:	4639      	mov	r1, r7
 8014c7e:	f7eb ff2d 	bl	8000adc <__aeabi_dcmplt>
 8014c82:	2800      	cmp	r0, #0
 8014c84:	d0eb      	beq.n	8014c5e <pow+0x222>
 8014c86:	ec45 4b10 	vmov	d0, r4, r5
 8014c8a:	f000 fe25 	bl	80158d8 <rint>
 8014c8e:	4622      	mov	r2, r4
 8014c90:	462b      	mov	r3, r5
 8014c92:	ec51 0b10 	vmov	r0, r1, d0
 8014c96:	f7eb ff17 	bl	8000ac8 <__aeabi_dcmpeq>
 8014c9a:	2800      	cmp	r0, #0
 8014c9c:	d1df      	bne.n	8014c5e <pow+0x222>
 8014c9e:	2200      	movs	r2, #0
 8014ca0:	4b18      	ldr	r3, [pc, #96]	; (8014d04 <pow+0x2c8>)
 8014ca2:	e7da      	b.n	8014c5a <pow+0x21e>
 8014ca4:	2200      	movs	r2, #0
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	ec51 0b18 	vmov	r0, r1, d8
 8014cac:	f7eb ff0c 	bl	8000ac8 <__aeabi_dcmpeq>
 8014cb0:	2800      	cmp	r0, #0
 8014cb2:	f43f af3a 	beq.w	8014b2a <pow+0xee>
 8014cb6:	ec47 6b10 	vmov	d0, r6, r7
 8014cba:	f000 fdf8 	bl	80158ae <finite>
 8014cbe:	2800      	cmp	r0, #0
 8014cc0:	f43f af33 	beq.w	8014b2a <pow+0xee>
 8014cc4:	ec45 4b10 	vmov	d0, r4, r5
 8014cc8:	f000 fdf1 	bl	80158ae <finite>
 8014ccc:	2800      	cmp	r0, #0
 8014cce:	f43f af2c 	beq.w	8014b2a <pow+0xee>
 8014cd2:	2304      	movs	r3, #4
 8014cd4:	9302      	str	r3, [sp, #8]
 8014cd6:	4b09      	ldr	r3, [pc, #36]	; (8014cfc <pow+0x2c0>)
 8014cd8:	9303      	str	r3, [sp, #12]
 8014cda:	2300      	movs	r3, #0
 8014cdc:	930a      	str	r3, [sp, #40]	; 0x28
 8014cde:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014ce2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014ce6:	ed8d 9b08 	vstr	d9, [sp, #32]
 8014cea:	e7b8      	b.n	8014c5e <pow+0x222>
 8014cec:	a802      	add	r0, sp, #8
 8014cee:	f000 fde6 	bl	80158be <matherr>
 8014cf2:	2800      	cmp	r0, #0
 8014cf4:	f47f af11 	bne.w	8014b1a <pow+0xde>
 8014cf8:	e7b5      	b.n	8014c66 <pow+0x22a>
 8014cfa:	bf00      	nop
 8014cfc:	08016f56 	.word	0x08016f56
 8014d00:	3ff00000 	.word	0x3ff00000
 8014d04:	fff00000 	.word	0xfff00000
 8014d08:	3fe00000 	.word	0x3fe00000
 8014d0c:	47efffff 	.word	0x47efffff
 8014d10:	c7efffff 	.word	0xc7efffff
 8014d14:	7ff00000 	.word	0x7ff00000
 8014d18:	20000664 	.word	0x20000664
 8014d1c:	00000000 	.word	0x00000000

08014d20 <__ieee754_pow>:
 8014d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d24:	b091      	sub	sp, #68	; 0x44
 8014d26:	ed8d 1b00 	vstr	d1, [sp]
 8014d2a:	e9dd 2900 	ldrd	r2, r9, [sp]
 8014d2e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8014d32:	ea58 0302 	orrs.w	r3, r8, r2
 8014d36:	ec57 6b10 	vmov	r6, r7, d0
 8014d3a:	f000 84be 	beq.w	80156ba <__ieee754_pow+0x99a>
 8014d3e:	4b7a      	ldr	r3, [pc, #488]	; (8014f28 <__ieee754_pow+0x208>)
 8014d40:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8014d44:	429c      	cmp	r4, r3
 8014d46:	463d      	mov	r5, r7
 8014d48:	ee10 aa10 	vmov	sl, s0
 8014d4c:	dc09      	bgt.n	8014d62 <__ieee754_pow+0x42>
 8014d4e:	d103      	bne.n	8014d58 <__ieee754_pow+0x38>
 8014d50:	b93e      	cbnz	r6, 8014d62 <__ieee754_pow+0x42>
 8014d52:	45a0      	cmp	r8, r4
 8014d54:	dc0d      	bgt.n	8014d72 <__ieee754_pow+0x52>
 8014d56:	e001      	b.n	8014d5c <__ieee754_pow+0x3c>
 8014d58:	4598      	cmp	r8, r3
 8014d5a:	dc02      	bgt.n	8014d62 <__ieee754_pow+0x42>
 8014d5c:	4598      	cmp	r8, r3
 8014d5e:	d10e      	bne.n	8014d7e <__ieee754_pow+0x5e>
 8014d60:	b16a      	cbz	r2, 8014d7e <__ieee754_pow+0x5e>
 8014d62:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014d66:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014d6a:	ea54 030a 	orrs.w	r3, r4, sl
 8014d6e:	f000 84a4 	beq.w	80156ba <__ieee754_pow+0x99a>
 8014d72:	486e      	ldr	r0, [pc, #440]	; (8014f2c <__ieee754_pow+0x20c>)
 8014d74:	b011      	add	sp, #68	; 0x44
 8014d76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d7a:	f000 bda5 	b.w	80158c8 <nan>
 8014d7e:	2d00      	cmp	r5, #0
 8014d80:	da53      	bge.n	8014e2a <__ieee754_pow+0x10a>
 8014d82:	4b6b      	ldr	r3, [pc, #428]	; (8014f30 <__ieee754_pow+0x210>)
 8014d84:	4598      	cmp	r8, r3
 8014d86:	dc4d      	bgt.n	8014e24 <__ieee754_pow+0x104>
 8014d88:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8014d8c:	4598      	cmp	r8, r3
 8014d8e:	dd4c      	ble.n	8014e2a <__ieee754_pow+0x10a>
 8014d90:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014d94:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014d98:	2b14      	cmp	r3, #20
 8014d9a:	dd26      	ble.n	8014dea <__ieee754_pow+0xca>
 8014d9c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8014da0:	fa22 f103 	lsr.w	r1, r2, r3
 8014da4:	fa01 f303 	lsl.w	r3, r1, r3
 8014da8:	4293      	cmp	r3, r2
 8014daa:	d13e      	bne.n	8014e2a <__ieee754_pow+0x10a>
 8014dac:	f001 0101 	and.w	r1, r1, #1
 8014db0:	f1c1 0b02 	rsb	fp, r1, #2
 8014db4:	2a00      	cmp	r2, #0
 8014db6:	d15b      	bne.n	8014e70 <__ieee754_pow+0x150>
 8014db8:	4b5b      	ldr	r3, [pc, #364]	; (8014f28 <__ieee754_pow+0x208>)
 8014dba:	4598      	cmp	r8, r3
 8014dbc:	d124      	bne.n	8014e08 <__ieee754_pow+0xe8>
 8014dbe:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8014dc2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8014dc6:	ea53 030a 	orrs.w	r3, r3, sl
 8014dca:	f000 8476 	beq.w	80156ba <__ieee754_pow+0x99a>
 8014dce:	4b59      	ldr	r3, [pc, #356]	; (8014f34 <__ieee754_pow+0x214>)
 8014dd0:	429c      	cmp	r4, r3
 8014dd2:	dd2d      	ble.n	8014e30 <__ieee754_pow+0x110>
 8014dd4:	f1b9 0f00 	cmp.w	r9, #0
 8014dd8:	f280 8473 	bge.w	80156c2 <__ieee754_pow+0x9a2>
 8014ddc:	2000      	movs	r0, #0
 8014dde:	2100      	movs	r1, #0
 8014de0:	ec41 0b10 	vmov	d0, r0, r1
 8014de4:	b011      	add	sp, #68	; 0x44
 8014de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dea:	2a00      	cmp	r2, #0
 8014dec:	d13e      	bne.n	8014e6c <__ieee754_pow+0x14c>
 8014dee:	f1c3 0314 	rsb	r3, r3, #20
 8014df2:	fa48 f103 	asr.w	r1, r8, r3
 8014df6:	fa01 f303 	lsl.w	r3, r1, r3
 8014dfa:	4543      	cmp	r3, r8
 8014dfc:	f040 8469 	bne.w	80156d2 <__ieee754_pow+0x9b2>
 8014e00:	f001 0101 	and.w	r1, r1, #1
 8014e04:	f1c1 0b02 	rsb	fp, r1, #2
 8014e08:	4b4b      	ldr	r3, [pc, #300]	; (8014f38 <__ieee754_pow+0x218>)
 8014e0a:	4598      	cmp	r8, r3
 8014e0c:	d118      	bne.n	8014e40 <__ieee754_pow+0x120>
 8014e0e:	f1b9 0f00 	cmp.w	r9, #0
 8014e12:	f280 845a 	bge.w	80156ca <__ieee754_pow+0x9aa>
 8014e16:	4948      	ldr	r1, [pc, #288]	; (8014f38 <__ieee754_pow+0x218>)
 8014e18:	4632      	mov	r2, r6
 8014e1a:	463b      	mov	r3, r7
 8014e1c:	2000      	movs	r0, #0
 8014e1e:	f7eb fd15 	bl	800084c <__aeabi_ddiv>
 8014e22:	e7dd      	b.n	8014de0 <__ieee754_pow+0xc0>
 8014e24:	f04f 0b02 	mov.w	fp, #2
 8014e28:	e7c4      	b.n	8014db4 <__ieee754_pow+0x94>
 8014e2a:	f04f 0b00 	mov.w	fp, #0
 8014e2e:	e7c1      	b.n	8014db4 <__ieee754_pow+0x94>
 8014e30:	f1b9 0f00 	cmp.w	r9, #0
 8014e34:	dad2      	bge.n	8014ddc <__ieee754_pow+0xbc>
 8014e36:	e9dd 0300 	ldrd	r0, r3, [sp]
 8014e3a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014e3e:	e7cf      	b.n	8014de0 <__ieee754_pow+0xc0>
 8014e40:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8014e44:	d106      	bne.n	8014e54 <__ieee754_pow+0x134>
 8014e46:	4632      	mov	r2, r6
 8014e48:	463b      	mov	r3, r7
 8014e4a:	4610      	mov	r0, r2
 8014e4c:	4619      	mov	r1, r3
 8014e4e:	f7eb fbd3 	bl	80005f8 <__aeabi_dmul>
 8014e52:	e7c5      	b.n	8014de0 <__ieee754_pow+0xc0>
 8014e54:	4b39      	ldr	r3, [pc, #228]	; (8014f3c <__ieee754_pow+0x21c>)
 8014e56:	4599      	cmp	r9, r3
 8014e58:	d10a      	bne.n	8014e70 <__ieee754_pow+0x150>
 8014e5a:	2d00      	cmp	r5, #0
 8014e5c:	db08      	blt.n	8014e70 <__ieee754_pow+0x150>
 8014e5e:	ec47 6b10 	vmov	d0, r6, r7
 8014e62:	b011      	add	sp, #68	; 0x44
 8014e64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e68:	f000 bc68 	b.w	801573c <__ieee754_sqrt>
 8014e6c:	f04f 0b00 	mov.w	fp, #0
 8014e70:	ec47 6b10 	vmov	d0, r6, r7
 8014e74:	f000 fd12 	bl	801589c <fabs>
 8014e78:	ec51 0b10 	vmov	r0, r1, d0
 8014e7c:	f1ba 0f00 	cmp.w	sl, #0
 8014e80:	d127      	bne.n	8014ed2 <__ieee754_pow+0x1b2>
 8014e82:	b124      	cbz	r4, 8014e8e <__ieee754_pow+0x16e>
 8014e84:	4b2c      	ldr	r3, [pc, #176]	; (8014f38 <__ieee754_pow+0x218>)
 8014e86:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8014e8a:	429a      	cmp	r2, r3
 8014e8c:	d121      	bne.n	8014ed2 <__ieee754_pow+0x1b2>
 8014e8e:	f1b9 0f00 	cmp.w	r9, #0
 8014e92:	da05      	bge.n	8014ea0 <__ieee754_pow+0x180>
 8014e94:	4602      	mov	r2, r0
 8014e96:	460b      	mov	r3, r1
 8014e98:	2000      	movs	r0, #0
 8014e9a:	4927      	ldr	r1, [pc, #156]	; (8014f38 <__ieee754_pow+0x218>)
 8014e9c:	f7eb fcd6 	bl	800084c <__aeabi_ddiv>
 8014ea0:	2d00      	cmp	r5, #0
 8014ea2:	da9d      	bge.n	8014de0 <__ieee754_pow+0xc0>
 8014ea4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014ea8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014eac:	ea54 030b 	orrs.w	r3, r4, fp
 8014eb0:	d108      	bne.n	8014ec4 <__ieee754_pow+0x1a4>
 8014eb2:	4602      	mov	r2, r0
 8014eb4:	460b      	mov	r3, r1
 8014eb6:	4610      	mov	r0, r2
 8014eb8:	4619      	mov	r1, r3
 8014eba:	f7eb f9e5 	bl	8000288 <__aeabi_dsub>
 8014ebe:	4602      	mov	r2, r0
 8014ec0:	460b      	mov	r3, r1
 8014ec2:	e7ac      	b.n	8014e1e <__ieee754_pow+0xfe>
 8014ec4:	f1bb 0f01 	cmp.w	fp, #1
 8014ec8:	d18a      	bne.n	8014de0 <__ieee754_pow+0xc0>
 8014eca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014ece:	4619      	mov	r1, r3
 8014ed0:	e786      	b.n	8014de0 <__ieee754_pow+0xc0>
 8014ed2:	0fed      	lsrs	r5, r5, #31
 8014ed4:	1e6b      	subs	r3, r5, #1
 8014ed6:	930d      	str	r3, [sp, #52]	; 0x34
 8014ed8:	ea5b 0303 	orrs.w	r3, fp, r3
 8014edc:	d102      	bne.n	8014ee4 <__ieee754_pow+0x1c4>
 8014ede:	4632      	mov	r2, r6
 8014ee0:	463b      	mov	r3, r7
 8014ee2:	e7e8      	b.n	8014eb6 <__ieee754_pow+0x196>
 8014ee4:	4b16      	ldr	r3, [pc, #88]	; (8014f40 <__ieee754_pow+0x220>)
 8014ee6:	4598      	cmp	r8, r3
 8014ee8:	f340 80fe 	ble.w	80150e8 <__ieee754_pow+0x3c8>
 8014eec:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8014ef0:	4598      	cmp	r8, r3
 8014ef2:	dd0a      	ble.n	8014f0a <__ieee754_pow+0x1ea>
 8014ef4:	4b0f      	ldr	r3, [pc, #60]	; (8014f34 <__ieee754_pow+0x214>)
 8014ef6:	429c      	cmp	r4, r3
 8014ef8:	dc0d      	bgt.n	8014f16 <__ieee754_pow+0x1f6>
 8014efa:	f1b9 0f00 	cmp.w	r9, #0
 8014efe:	f6bf af6d 	bge.w	8014ddc <__ieee754_pow+0xbc>
 8014f02:	a307      	add	r3, pc, #28	; (adr r3, 8014f20 <__ieee754_pow+0x200>)
 8014f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f08:	e79f      	b.n	8014e4a <__ieee754_pow+0x12a>
 8014f0a:	4b0e      	ldr	r3, [pc, #56]	; (8014f44 <__ieee754_pow+0x224>)
 8014f0c:	429c      	cmp	r4, r3
 8014f0e:	ddf4      	ble.n	8014efa <__ieee754_pow+0x1da>
 8014f10:	4b09      	ldr	r3, [pc, #36]	; (8014f38 <__ieee754_pow+0x218>)
 8014f12:	429c      	cmp	r4, r3
 8014f14:	dd18      	ble.n	8014f48 <__ieee754_pow+0x228>
 8014f16:	f1b9 0f00 	cmp.w	r9, #0
 8014f1a:	dcf2      	bgt.n	8014f02 <__ieee754_pow+0x1e2>
 8014f1c:	e75e      	b.n	8014ddc <__ieee754_pow+0xbc>
 8014f1e:	bf00      	nop
 8014f20:	8800759c 	.word	0x8800759c
 8014f24:	7e37e43c 	.word	0x7e37e43c
 8014f28:	7ff00000 	.word	0x7ff00000
 8014f2c:	08016e27 	.word	0x08016e27
 8014f30:	433fffff 	.word	0x433fffff
 8014f34:	3fefffff 	.word	0x3fefffff
 8014f38:	3ff00000 	.word	0x3ff00000
 8014f3c:	3fe00000 	.word	0x3fe00000
 8014f40:	41e00000 	.word	0x41e00000
 8014f44:	3feffffe 	.word	0x3feffffe
 8014f48:	2200      	movs	r2, #0
 8014f4a:	4b63      	ldr	r3, [pc, #396]	; (80150d8 <__ieee754_pow+0x3b8>)
 8014f4c:	f7eb f99c 	bl	8000288 <__aeabi_dsub>
 8014f50:	a355      	add	r3, pc, #340	; (adr r3, 80150a8 <__ieee754_pow+0x388>)
 8014f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f56:	4604      	mov	r4, r0
 8014f58:	460d      	mov	r5, r1
 8014f5a:	f7eb fb4d 	bl	80005f8 <__aeabi_dmul>
 8014f5e:	a354      	add	r3, pc, #336	; (adr r3, 80150b0 <__ieee754_pow+0x390>)
 8014f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f64:	4606      	mov	r6, r0
 8014f66:	460f      	mov	r7, r1
 8014f68:	4620      	mov	r0, r4
 8014f6a:	4629      	mov	r1, r5
 8014f6c:	f7eb fb44 	bl	80005f8 <__aeabi_dmul>
 8014f70:	2200      	movs	r2, #0
 8014f72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014f76:	4b59      	ldr	r3, [pc, #356]	; (80150dc <__ieee754_pow+0x3bc>)
 8014f78:	4620      	mov	r0, r4
 8014f7a:	4629      	mov	r1, r5
 8014f7c:	f7eb fb3c 	bl	80005f8 <__aeabi_dmul>
 8014f80:	4602      	mov	r2, r0
 8014f82:	460b      	mov	r3, r1
 8014f84:	a14c      	add	r1, pc, #304	; (adr r1, 80150b8 <__ieee754_pow+0x398>)
 8014f86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014f8a:	f7eb f97d 	bl	8000288 <__aeabi_dsub>
 8014f8e:	4622      	mov	r2, r4
 8014f90:	462b      	mov	r3, r5
 8014f92:	f7eb fb31 	bl	80005f8 <__aeabi_dmul>
 8014f96:	4602      	mov	r2, r0
 8014f98:	460b      	mov	r3, r1
 8014f9a:	2000      	movs	r0, #0
 8014f9c:	4950      	ldr	r1, [pc, #320]	; (80150e0 <__ieee754_pow+0x3c0>)
 8014f9e:	f7eb f973 	bl	8000288 <__aeabi_dsub>
 8014fa2:	4622      	mov	r2, r4
 8014fa4:	462b      	mov	r3, r5
 8014fa6:	4680      	mov	r8, r0
 8014fa8:	4689      	mov	r9, r1
 8014faa:	4620      	mov	r0, r4
 8014fac:	4629      	mov	r1, r5
 8014fae:	f7eb fb23 	bl	80005f8 <__aeabi_dmul>
 8014fb2:	4602      	mov	r2, r0
 8014fb4:	460b      	mov	r3, r1
 8014fb6:	4640      	mov	r0, r8
 8014fb8:	4649      	mov	r1, r9
 8014fba:	f7eb fb1d 	bl	80005f8 <__aeabi_dmul>
 8014fbe:	a340      	add	r3, pc, #256	; (adr r3, 80150c0 <__ieee754_pow+0x3a0>)
 8014fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fc4:	f7eb fb18 	bl	80005f8 <__aeabi_dmul>
 8014fc8:	4602      	mov	r2, r0
 8014fca:	460b      	mov	r3, r1
 8014fcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014fd0:	f7eb f95a 	bl	8000288 <__aeabi_dsub>
 8014fd4:	4602      	mov	r2, r0
 8014fd6:	460b      	mov	r3, r1
 8014fd8:	4604      	mov	r4, r0
 8014fda:	460d      	mov	r5, r1
 8014fdc:	4630      	mov	r0, r6
 8014fde:	4639      	mov	r1, r7
 8014fe0:	f7eb f954 	bl	800028c <__adddf3>
 8014fe4:	2000      	movs	r0, #0
 8014fe6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014fea:	4632      	mov	r2, r6
 8014fec:	463b      	mov	r3, r7
 8014fee:	f7eb f94b 	bl	8000288 <__aeabi_dsub>
 8014ff2:	4602      	mov	r2, r0
 8014ff4:	460b      	mov	r3, r1
 8014ff6:	4620      	mov	r0, r4
 8014ff8:	4629      	mov	r1, r5
 8014ffa:	f7eb f945 	bl	8000288 <__aeabi_dsub>
 8014ffe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015000:	f10b 33ff 	add.w	r3, fp, #4294967295
 8015004:	4313      	orrs	r3, r2
 8015006:	4606      	mov	r6, r0
 8015008:	460f      	mov	r7, r1
 801500a:	f040 81eb 	bne.w	80153e4 <__ieee754_pow+0x6c4>
 801500e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80150c8 <__ieee754_pow+0x3a8>
 8015012:	e9dd 4500 	ldrd	r4, r5, [sp]
 8015016:	2400      	movs	r4, #0
 8015018:	4622      	mov	r2, r4
 801501a:	462b      	mov	r3, r5
 801501c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015020:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015024:	f7eb f930 	bl	8000288 <__aeabi_dsub>
 8015028:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801502c:	f7eb fae4 	bl	80005f8 <__aeabi_dmul>
 8015030:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015034:	4680      	mov	r8, r0
 8015036:	4689      	mov	r9, r1
 8015038:	4630      	mov	r0, r6
 801503a:	4639      	mov	r1, r7
 801503c:	f7eb fadc 	bl	80005f8 <__aeabi_dmul>
 8015040:	4602      	mov	r2, r0
 8015042:	460b      	mov	r3, r1
 8015044:	4640      	mov	r0, r8
 8015046:	4649      	mov	r1, r9
 8015048:	f7eb f920 	bl	800028c <__adddf3>
 801504c:	4622      	mov	r2, r4
 801504e:	462b      	mov	r3, r5
 8015050:	4680      	mov	r8, r0
 8015052:	4689      	mov	r9, r1
 8015054:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015058:	f7eb face 	bl	80005f8 <__aeabi_dmul>
 801505c:	460b      	mov	r3, r1
 801505e:	4604      	mov	r4, r0
 8015060:	460d      	mov	r5, r1
 8015062:	4602      	mov	r2, r0
 8015064:	4649      	mov	r1, r9
 8015066:	4640      	mov	r0, r8
 8015068:	e9cd 4500 	strd	r4, r5, [sp]
 801506c:	f7eb f90e 	bl	800028c <__adddf3>
 8015070:	4b1c      	ldr	r3, [pc, #112]	; (80150e4 <__ieee754_pow+0x3c4>)
 8015072:	4299      	cmp	r1, r3
 8015074:	4606      	mov	r6, r0
 8015076:	460f      	mov	r7, r1
 8015078:	468b      	mov	fp, r1
 801507a:	f340 82f7 	ble.w	801566c <__ieee754_pow+0x94c>
 801507e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8015082:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8015086:	4303      	orrs	r3, r0
 8015088:	f000 81ea 	beq.w	8015460 <__ieee754_pow+0x740>
 801508c:	a310      	add	r3, pc, #64	; (adr r3, 80150d0 <__ieee754_pow+0x3b0>)
 801508e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015096:	f7eb faaf 	bl	80005f8 <__aeabi_dmul>
 801509a:	a30d      	add	r3, pc, #52	; (adr r3, 80150d0 <__ieee754_pow+0x3b0>)
 801509c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150a0:	e6d5      	b.n	8014e4e <__ieee754_pow+0x12e>
 80150a2:	bf00      	nop
 80150a4:	f3af 8000 	nop.w
 80150a8:	60000000 	.word	0x60000000
 80150ac:	3ff71547 	.word	0x3ff71547
 80150b0:	f85ddf44 	.word	0xf85ddf44
 80150b4:	3e54ae0b 	.word	0x3e54ae0b
 80150b8:	55555555 	.word	0x55555555
 80150bc:	3fd55555 	.word	0x3fd55555
 80150c0:	652b82fe 	.word	0x652b82fe
 80150c4:	3ff71547 	.word	0x3ff71547
 80150c8:	00000000 	.word	0x00000000
 80150cc:	bff00000 	.word	0xbff00000
 80150d0:	8800759c 	.word	0x8800759c
 80150d4:	7e37e43c 	.word	0x7e37e43c
 80150d8:	3ff00000 	.word	0x3ff00000
 80150dc:	3fd00000 	.word	0x3fd00000
 80150e0:	3fe00000 	.word	0x3fe00000
 80150e4:	408fffff 	.word	0x408fffff
 80150e8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80150ec:	f04f 0200 	mov.w	r2, #0
 80150f0:	da05      	bge.n	80150fe <__ieee754_pow+0x3de>
 80150f2:	4bd3      	ldr	r3, [pc, #844]	; (8015440 <__ieee754_pow+0x720>)
 80150f4:	f7eb fa80 	bl	80005f8 <__aeabi_dmul>
 80150f8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80150fc:	460c      	mov	r4, r1
 80150fe:	1523      	asrs	r3, r4, #20
 8015100:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015104:	4413      	add	r3, r2
 8015106:	9309      	str	r3, [sp, #36]	; 0x24
 8015108:	4bce      	ldr	r3, [pc, #824]	; (8015444 <__ieee754_pow+0x724>)
 801510a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801510e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8015112:	429c      	cmp	r4, r3
 8015114:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8015118:	dd08      	ble.n	801512c <__ieee754_pow+0x40c>
 801511a:	4bcb      	ldr	r3, [pc, #812]	; (8015448 <__ieee754_pow+0x728>)
 801511c:	429c      	cmp	r4, r3
 801511e:	f340 815e 	ble.w	80153de <__ieee754_pow+0x6be>
 8015122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015124:	3301      	adds	r3, #1
 8015126:	9309      	str	r3, [sp, #36]	; 0x24
 8015128:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801512c:	f04f 0a00 	mov.w	sl, #0
 8015130:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8015134:	930c      	str	r3, [sp, #48]	; 0x30
 8015136:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015138:	4bc4      	ldr	r3, [pc, #784]	; (801544c <__ieee754_pow+0x72c>)
 801513a:	4413      	add	r3, r2
 801513c:	ed93 7b00 	vldr	d7, [r3]
 8015140:	4629      	mov	r1, r5
 8015142:	ec53 2b17 	vmov	r2, r3, d7
 8015146:	ed8d 7b06 	vstr	d7, [sp, #24]
 801514a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801514e:	f7eb f89b 	bl	8000288 <__aeabi_dsub>
 8015152:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015156:	4606      	mov	r6, r0
 8015158:	460f      	mov	r7, r1
 801515a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801515e:	f7eb f895 	bl	800028c <__adddf3>
 8015162:	4602      	mov	r2, r0
 8015164:	460b      	mov	r3, r1
 8015166:	2000      	movs	r0, #0
 8015168:	49b9      	ldr	r1, [pc, #740]	; (8015450 <__ieee754_pow+0x730>)
 801516a:	f7eb fb6f 	bl	800084c <__aeabi_ddiv>
 801516e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8015172:	4602      	mov	r2, r0
 8015174:	460b      	mov	r3, r1
 8015176:	4630      	mov	r0, r6
 8015178:	4639      	mov	r1, r7
 801517a:	f7eb fa3d 	bl	80005f8 <__aeabi_dmul>
 801517e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015182:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8015186:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801518a:	2300      	movs	r3, #0
 801518c:	9302      	str	r3, [sp, #8]
 801518e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015192:	106d      	asrs	r5, r5, #1
 8015194:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8015198:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801519c:	2200      	movs	r2, #0
 801519e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80151a2:	4640      	mov	r0, r8
 80151a4:	4649      	mov	r1, r9
 80151a6:	4614      	mov	r4, r2
 80151a8:	461d      	mov	r5, r3
 80151aa:	f7eb fa25 	bl	80005f8 <__aeabi_dmul>
 80151ae:	4602      	mov	r2, r0
 80151b0:	460b      	mov	r3, r1
 80151b2:	4630      	mov	r0, r6
 80151b4:	4639      	mov	r1, r7
 80151b6:	f7eb f867 	bl	8000288 <__aeabi_dsub>
 80151ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80151be:	4606      	mov	r6, r0
 80151c0:	460f      	mov	r7, r1
 80151c2:	4620      	mov	r0, r4
 80151c4:	4629      	mov	r1, r5
 80151c6:	f7eb f85f 	bl	8000288 <__aeabi_dsub>
 80151ca:	4602      	mov	r2, r0
 80151cc:	460b      	mov	r3, r1
 80151ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80151d2:	f7eb f859 	bl	8000288 <__aeabi_dsub>
 80151d6:	4642      	mov	r2, r8
 80151d8:	464b      	mov	r3, r9
 80151da:	f7eb fa0d 	bl	80005f8 <__aeabi_dmul>
 80151de:	4602      	mov	r2, r0
 80151e0:	460b      	mov	r3, r1
 80151e2:	4630      	mov	r0, r6
 80151e4:	4639      	mov	r1, r7
 80151e6:	f7eb f84f 	bl	8000288 <__aeabi_dsub>
 80151ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80151ee:	f7eb fa03 	bl	80005f8 <__aeabi_dmul>
 80151f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80151f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80151fa:	4610      	mov	r0, r2
 80151fc:	4619      	mov	r1, r3
 80151fe:	f7eb f9fb 	bl	80005f8 <__aeabi_dmul>
 8015202:	a37b      	add	r3, pc, #492	; (adr r3, 80153f0 <__ieee754_pow+0x6d0>)
 8015204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015208:	4604      	mov	r4, r0
 801520a:	460d      	mov	r5, r1
 801520c:	f7eb f9f4 	bl	80005f8 <__aeabi_dmul>
 8015210:	a379      	add	r3, pc, #484	; (adr r3, 80153f8 <__ieee754_pow+0x6d8>)
 8015212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015216:	f7eb f839 	bl	800028c <__adddf3>
 801521a:	4622      	mov	r2, r4
 801521c:	462b      	mov	r3, r5
 801521e:	f7eb f9eb 	bl	80005f8 <__aeabi_dmul>
 8015222:	a377      	add	r3, pc, #476	; (adr r3, 8015400 <__ieee754_pow+0x6e0>)
 8015224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015228:	f7eb f830 	bl	800028c <__adddf3>
 801522c:	4622      	mov	r2, r4
 801522e:	462b      	mov	r3, r5
 8015230:	f7eb f9e2 	bl	80005f8 <__aeabi_dmul>
 8015234:	a374      	add	r3, pc, #464	; (adr r3, 8015408 <__ieee754_pow+0x6e8>)
 8015236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801523a:	f7eb f827 	bl	800028c <__adddf3>
 801523e:	4622      	mov	r2, r4
 8015240:	462b      	mov	r3, r5
 8015242:	f7eb f9d9 	bl	80005f8 <__aeabi_dmul>
 8015246:	a372      	add	r3, pc, #456	; (adr r3, 8015410 <__ieee754_pow+0x6f0>)
 8015248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801524c:	f7eb f81e 	bl	800028c <__adddf3>
 8015250:	4622      	mov	r2, r4
 8015252:	462b      	mov	r3, r5
 8015254:	f7eb f9d0 	bl	80005f8 <__aeabi_dmul>
 8015258:	a36f      	add	r3, pc, #444	; (adr r3, 8015418 <__ieee754_pow+0x6f8>)
 801525a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801525e:	f7eb f815 	bl	800028c <__adddf3>
 8015262:	4622      	mov	r2, r4
 8015264:	4606      	mov	r6, r0
 8015266:	460f      	mov	r7, r1
 8015268:	462b      	mov	r3, r5
 801526a:	4620      	mov	r0, r4
 801526c:	4629      	mov	r1, r5
 801526e:	f7eb f9c3 	bl	80005f8 <__aeabi_dmul>
 8015272:	4602      	mov	r2, r0
 8015274:	460b      	mov	r3, r1
 8015276:	4630      	mov	r0, r6
 8015278:	4639      	mov	r1, r7
 801527a:	f7eb f9bd 	bl	80005f8 <__aeabi_dmul>
 801527e:	4642      	mov	r2, r8
 8015280:	4604      	mov	r4, r0
 8015282:	460d      	mov	r5, r1
 8015284:	464b      	mov	r3, r9
 8015286:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801528a:	f7ea ffff 	bl	800028c <__adddf3>
 801528e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015292:	f7eb f9b1 	bl	80005f8 <__aeabi_dmul>
 8015296:	4622      	mov	r2, r4
 8015298:	462b      	mov	r3, r5
 801529a:	f7ea fff7 	bl	800028c <__adddf3>
 801529e:	4642      	mov	r2, r8
 80152a0:	4606      	mov	r6, r0
 80152a2:	460f      	mov	r7, r1
 80152a4:	464b      	mov	r3, r9
 80152a6:	4640      	mov	r0, r8
 80152a8:	4649      	mov	r1, r9
 80152aa:	f7eb f9a5 	bl	80005f8 <__aeabi_dmul>
 80152ae:	2200      	movs	r2, #0
 80152b0:	4b68      	ldr	r3, [pc, #416]	; (8015454 <__ieee754_pow+0x734>)
 80152b2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80152b6:	f7ea ffe9 	bl	800028c <__adddf3>
 80152ba:	4632      	mov	r2, r6
 80152bc:	463b      	mov	r3, r7
 80152be:	f7ea ffe5 	bl	800028c <__adddf3>
 80152c2:	9802      	ldr	r0, [sp, #8]
 80152c4:	460d      	mov	r5, r1
 80152c6:	4604      	mov	r4, r0
 80152c8:	4602      	mov	r2, r0
 80152ca:	460b      	mov	r3, r1
 80152cc:	4640      	mov	r0, r8
 80152ce:	4649      	mov	r1, r9
 80152d0:	f7eb f992 	bl	80005f8 <__aeabi_dmul>
 80152d4:	2200      	movs	r2, #0
 80152d6:	4680      	mov	r8, r0
 80152d8:	4689      	mov	r9, r1
 80152da:	4b5e      	ldr	r3, [pc, #376]	; (8015454 <__ieee754_pow+0x734>)
 80152dc:	4620      	mov	r0, r4
 80152de:	4629      	mov	r1, r5
 80152e0:	f7ea ffd2 	bl	8000288 <__aeabi_dsub>
 80152e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80152e8:	f7ea ffce 	bl	8000288 <__aeabi_dsub>
 80152ec:	4602      	mov	r2, r0
 80152ee:	460b      	mov	r3, r1
 80152f0:	4630      	mov	r0, r6
 80152f2:	4639      	mov	r1, r7
 80152f4:	f7ea ffc8 	bl	8000288 <__aeabi_dsub>
 80152f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80152fc:	f7eb f97c 	bl	80005f8 <__aeabi_dmul>
 8015300:	4622      	mov	r2, r4
 8015302:	4606      	mov	r6, r0
 8015304:	460f      	mov	r7, r1
 8015306:	462b      	mov	r3, r5
 8015308:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801530c:	f7eb f974 	bl	80005f8 <__aeabi_dmul>
 8015310:	4602      	mov	r2, r0
 8015312:	460b      	mov	r3, r1
 8015314:	4630      	mov	r0, r6
 8015316:	4639      	mov	r1, r7
 8015318:	f7ea ffb8 	bl	800028c <__adddf3>
 801531c:	4606      	mov	r6, r0
 801531e:	460f      	mov	r7, r1
 8015320:	4602      	mov	r2, r0
 8015322:	460b      	mov	r3, r1
 8015324:	4640      	mov	r0, r8
 8015326:	4649      	mov	r1, r9
 8015328:	f7ea ffb0 	bl	800028c <__adddf3>
 801532c:	9802      	ldr	r0, [sp, #8]
 801532e:	a33c      	add	r3, pc, #240	; (adr r3, 8015420 <__ieee754_pow+0x700>)
 8015330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015334:	4604      	mov	r4, r0
 8015336:	460d      	mov	r5, r1
 8015338:	f7eb f95e 	bl	80005f8 <__aeabi_dmul>
 801533c:	4642      	mov	r2, r8
 801533e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015342:	464b      	mov	r3, r9
 8015344:	4620      	mov	r0, r4
 8015346:	4629      	mov	r1, r5
 8015348:	f7ea ff9e 	bl	8000288 <__aeabi_dsub>
 801534c:	4602      	mov	r2, r0
 801534e:	460b      	mov	r3, r1
 8015350:	4630      	mov	r0, r6
 8015352:	4639      	mov	r1, r7
 8015354:	f7ea ff98 	bl	8000288 <__aeabi_dsub>
 8015358:	a333      	add	r3, pc, #204	; (adr r3, 8015428 <__ieee754_pow+0x708>)
 801535a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801535e:	f7eb f94b 	bl	80005f8 <__aeabi_dmul>
 8015362:	a333      	add	r3, pc, #204	; (adr r3, 8015430 <__ieee754_pow+0x710>)
 8015364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015368:	4606      	mov	r6, r0
 801536a:	460f      	mov	r7, r1
 801536c:	4620      	mov	r0, r4
 801536e:	4629      	mov	r1, r5
 8015370:	f7eb f942 	bl	80005f8 <__aeabi_dmul>
 8015374:	4602      	mov	r2, r0
 8015376:	460b      	mov	r3, r1
 8015378:	4630      	mov	r0, r6
 801537a:	4639      	mov	r1, r7
 801537c:	f7ea ff86 	bl	800028c <__adddf3>
 8015380:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015382:	4b35      	ldr	r3, [pc, #212]	; (8015458 <__ieee754_pow+0x738>)
 8015384:	4413      	add	r3, r2
 8015386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801538a:	f7ea ff7f 	bl	800028c <__adddf3>
 801538e:	4604      	mov	r4, r0
 8015390:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015392:	460d      	mov	r5, r1
 8015394:	f7eb f8c6 	bl	8000524 <__aeabi_i2d>
 8015398:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801539a:	4b30      	ldr	r3, [pc, #192]	; (801545c <__ieee754_pow+0x73c>)
 801539c:	4413      	add	r3, r2
 801539e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80153a2:	4606      	mov	r6, r0
 80153a4:	460f      	mov	r7, r1
 80153a6:	4622      	mov	r2, r4
 80153a8:	462b      	mov	r3, r5
 80153aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80153ae:	f7ea ff6d 	bl	800028c <__adddf3>
 80153b2:	4642      	mov	r2, r8
 80153b4:	464b      	mov	r3, r9
 80153b6:	f7ea ff69 	bl	800028c <__adddf3>
 80153ba:	4632      	mov	r2, r6
 80153bc:	463b      	mov	r3, r7
 80153be:	f7ea ff65 	bl	800028c <__adddf3>
 80153c2:	9802      	ldr	r0, [sp, #8]
 80153c4:	4632      	mov	r2, r6
 80153c6:	463b      	mov	r3, r7
 80153c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80153cc:	f7ea ff5c 	bl	8000288 <__aeabi_dsub>
 80153d0:	4642      	mov	r2, r8
 80153d2:	464b      	mov	r3, r9
 80153d4:	f7ea ff58 	bl	8000288 <__aeabi_dsub>
 80153d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80153dc:	e607      	b.n	8014fee <__ieee754_pow+0x2ce>
 80153de:	f04f 0a01 	mov.w	sl, #1
 80153e2:	e6a5      	b.n	8015130 <__ieee754_pow+0x410>
 80153e4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8015438 <__ieee754_pow+0x718>
 80153e8:	e613      	b.n	8015012 <__ieee754_pow+0x2f2>
 80153ea:	bf00      	nop
 80153ec:	f3af 8000 	nop.w
 80153f0:	4a454eef 	.word	0x4a454eef
 80153f4:	3fca7e28 	.word	0x3fca7e28
 80153f8:	93c9db65 	.word	0x93c9db65
 80153fc:	3fcd864a 	.word	0x3fcd864a
 8015400:	a91d4101 	.word	0xa91d4101
 8015404:	3fd17460 	.word	0x3fd17460
 8015408:	518f264d 	.word	0x518f264d
 801540c:	3fd55555 	.word	0x3fd55555
 8015410:	db6fabff 	.word	0xdb6fabff
 8015414:	3fdb6db6 	.word	0x3fdb6db6
 8015418:	33333303 	.word	0x33333303
 801541c:	3fe33333 	.word	0x3fe33333
 8015420:	e0000000 	.word	0xe0000000
 8015424:	3feec709 	.word	0x3feec709
 8015428:	dc3a03fd 	.word	0xdc3a03fd
 801542c:	3feec709 	.word	0x3feec709
 8015430:	145b01f5 	.word	0x145b01f5
 8015434:	be3e2fe0 	.word	0xbe3e2fe0
 8015438:	00000000 	.word	0x00000000
 801543c:	3ff00000 	.word	0x3ff00000
 8015440:	43400000 	.word	0x43400000
 8015444:	0003988e 	.word	0x0003988e
 8015448:	000bb679 	.word	0x000bb679
 801544c:	08016f60 	.word	0x08016f60
 8015450:	3ff00000 	.word	0x3ff00000
 8015454:	40080000 	.word	0x40080000
 8015458:	08016f80 	.word	0x08016f80
 801545c:	08016f70 	.word	0x08016f70
 8015460:	a3b4      	add	r3, pc, #720	; (adr r3, 8015734 <__ieee754_pow+0xa14>)
 8015462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015466:	4640      	mov	r0, r8
 8015468:	4649      	mov	r1, r9
 801546a:	f7ea ff0f 	bl	800028c <__adddf3>
 801546e:	4622      	mov	r2, r4
 8015470:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015474:	462b      	mov	r3, r5
 8015476:	4630      	mov	r0, r6
 8015478:	4639      	mov	r1, r7
 801547a:	f7ea ff05 	bl	8000288 <__aeabi_dsub>
 801547e:	4602      	mov	r2, r0
 8015480:	460b      	mov	r3, r1
 8015482:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015486:	f7eb fb47 	bl	8000b18 <__aeabi_dcmpgt>
 801548a:	2800      	cmp	r0, #0
 801548c:	f47f adfe 	bne.w	801508c <__ieee754_pow+0x36c>
 8015490:	4aa3      	ldr	r2, [pc, #652]	; (8015720 <__ieee754_pow+0xa00>)
 8015492:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015496:	4293      	cmp	r3, r2
 8015498:	f340 810a 	ble.w	80156b0 <__ieee754_pow+0x990>
 801549c:	151b      	asrs	r3, r3, #20
 801549e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80154a2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80154a6:	fa4a f303 	asr.w	r3, sl, r3
 80154aa:	445b      	add	r3, fp
 80154ac:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80154b0:	4e9c      	ldr	r6, [pc, #624]	; (8015724 <__ieee754_pow+0xa04>)
 80154b2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80154b6:	4116      	asrs	r6, r2
 80154b8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80154bc:	2000      	movs	r0, #0
 80154be:	ea23 0106 	bic.w	r1, r3, r6
 80154c2:	f1c2 0214 	rsb	r2, r2, #20
 80154c6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80154ca:	fa4a fa02 	asr.w	sl, sl, r2
 80154ce:	f1bb 0f00 	cmp.w	fp, #0
 80154d2:	4602      	mov	r2, r0
 80154d4:	460b      	mov	r3, r1
 80154d6:	4620      	mov	r0, r4
 80154d8:	4629      	mov	r1, r5
 80154da:	bfb8      	it	lt
 80154dc:	f1ca 0a00 	rsblt	sl, sl, #0
 80154e0:	f7ea fed2 	bl	8000288 <__aeabi_dsub>
 80154e4:	e9cd 0100 	strd	r0, r1, [sp]
 80154e8:	4642      	mov	r2, r8
 80154ea:	464b      	mov	r3, r9
 80154ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80154f0:	f7ea fecc 	bl	800028c <__adddf3>
 80154f4:	2000      	movs	r0, #0
 80154f6:	a378      	add	r3, pc, #480	; (adr r3, 80156d8 <__ieee754_pow+0x9b8>)
 80154f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154fc:	4604      	mov	r4, r0
 80154fe:	460d      	mov	r5, r1
 8015500:	f7eb f87a 	bl	80005f8 <__aeabi_dmul>
 8015504:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015508:	4606      	mov	r6, r0
 801550a:	460f      	mov	r7, r1
 801550c:	4620      	mov	r0, r4
 801550e:	4629      	mov	r1, r5
 8015510:	f7ea feba 	bl	8000288 <__aeabi_dsub>
 8015514:	4602      	mov	r2, r0
 8015516:	460b      	mov	r3, r1
 8015518:	4640      	mov	r0, r8
 801551a:	4649      	mov	r1, r9
 801551c:	f7ea feb4 	bl	8000288 <__aeabi_dsub>
 8015520:	a36f      	add	r3, pc, #444	; (adr r3, 80156e0 <__ieee754_pow+0x9c0>)
 8015522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015526:	f7eb f867 	bl	80005f8 <__aeabi_dmul>
 801552a:	a36f      	add	r3, pc, #444	; (adr r3, 80156e8 <__ieee754_pow+0x9c8>)
 801552c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015530:	4680      	mov	r8, r0
 8015532:	4689      	mov	r9, r1
 8015534:	4620      	mov	r0, r4
 8015536:	4629      	mov	r1, r5
 8015538:	f7eb f85e 	bl	80005f8 <__aeabi_dmul>
 801553c:	4602      	mov	r2, r0
 801553e:	460b      	mov	r3, r1
 8015540:	4640      	mov	r0, r8
 8015542:	4649      	mov	r1, r9
 8015544:	f7ea fea2 	bl	800028c <__adddf3>
 8015548:	4604      	mov	r4, r0
 801554a:	460d      	mov	r5, r1
 801554c:	4602      	mov	r2, r0
 801554e:	460b      	mov	r3, r1
 8015550:	4630      	mov	r0, r6
 8015552:	4639      	mov	r1, r7
 8015554:	f7ea fe9a 	bl	800028c <__adddf3>
 8015558:	4632      	mov	r2, r6
 801555a:	463b      	mov	r3, r7
 801555c:	4680      	mov	r8, r0
 801555e:	4689      	mov	r9, r1
 8015560:	f7ea fe92 	bl	8000288 <__aeabi_dsub>
 8015564:	4602      	mov	r2, r0
 8015566:	460b      	mov	r3, r1
 8015568:	4620      	mov	r0, r4
 801556a:	4629      	mov	r1, r5
 801556c:	f7ea fe8c 	bl	8000288 <__aeabi_dsub>
 8015570:	4642      	mov	r2, r8
 8015572:	4606      	mov	r6, r0
 8015574:	460f      	mov	r7, r1
 8015576:	464b      	mov	r3, r9
 8015578:	4640      	mov	r0, r8
 801557a:	4649      	mov	r1, r9
 801557c:	f7eb f83c 	bl	80005f8 <__aeabi_dmul>
 8015580:	a35b      	add	r3, pc, #364	; (adr r3, 80156f0 <__ieee754_pow+0x9d0>)
 8015582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015586:	4604      	mov	r4, r0
 8015588:	460d      	mov	r5, r1
 801558a:	f7eb f835 	bl	80005f8 <__aeabi_dmul>
 801558e:	a35a      	add	r3, pc, #360	; (adr r3, 80156f8 <__ieee754_pow+0x9d8>)
 8015590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015594:	f7ea fe78 	bl	8000288 <__aeabi_dsub>
 8015598:	4622      	mov	r2, r4
 801559a:	462b      	mov	r3, r5
 801559c:	f7eb f82c 	bl	80005f8 <__aeabi_dmul>
 80155a0:	a357      	add	r3, pc, #348	; (adr r3, 8015700 <__ieee754_pow+0x9e0>)
 80155a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155a6:	f7ea fe71 	bl	800028c <__adddf3>
 80155aa:	4622      	mov	r2, r4
 80155ac:	462b      	mov	r3, r5
 80155ae:	f7eb f823 	bl	80005f8 <__aeabi_dmul>
 80155b2:	a355      	add	r3, pc, #340	; (adr r3, 8015708 <__ieee754_pow+0x9e8>)
 80155b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155b8:	f7ea fe66 	bl	8000288 <__aeabi_dsub>
 80155bc:	4622      	mov	r2, r4
 80155be:	462b      	mov	r3, r5
 80155c0:	f7eb f81a 	bl	80005f8 <__aeabi_dmul>
 80155c4:	a352      	add	r3, pc, #328	; (adr r3, 8015710 <__ieee754_pow+0x9f0>)
 80155c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155ca:	f7ea fe5f 	bl	800028c <__adddf3>
 80155ce:	4622      	mov	r2, r4
 80155d0:	462b      	mov	r3, r5
 80155d2:	f7eb f811 	bl	80005f8 <__aeabi_dmul>
 80155d6:	4602      	mov	r2, r0
 80155d8:	460b      	mov	r3, r1
 80155da:	4640      	mov	r0, r8
 80155dc:	4649      	mov	r1, r9
 80155de:	f7ea fe53 	bl	8000288 <__aeabi_dsub>
 80155e2:	4604      	mov	r4, r0
 80155e4:	460d      	mov	r5, r1
 80155e6:	4602      	mov	r2, r0
 80155e8:	460b      	mov	r3, r1
 80155ea:	4640      	mov	r0, r8
 80155ec:	4649      	mov	r1, r9
 80155ee:	f7eb f803 	bl	80005f8 <__aeabi_dmul>
 80155f2:	2200      	movs	r2, #0
 80155f4:	e9cd 0100 	strd	r0, r1, [sp]
 80155f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80155fc:	4620      	mov	r0, r4
 80155fe:	4629      	mov	r1, r5
 8015600:	f7ea fe42 	bl	8000288 <__aeabi_dsub>
 8015604:	4602      	mov	r2, r0
 8015606:	460b      	mov	r3, r1
 8015608:	e9dd 0100 	ldrd	r0, r1, [sp]
 801560c:	f7eb f91e 	bl	800084c <__aeabi_ddiv>
 8015610:	4632      	mov	r2, r6
 8015612:	4604      	mov	r4, r0
 8015614:	460d      	mov	r5, r1
 8015616:	463b      	mov	r3, r7
 8015618:	4640      	mov	r0, r8
 801561a:	4649      	mov	r1, r9
 801561c:	f7ea ffec 	bl	80005f8 <__aeabi_dmul>
 8015620:	4632      	mov	r2, r6
 8015622:	463b      	mov	r3, r7
 8015624:	f7ea fe32 	bl	800028c <__adddf3>
 8015628:	4602      	mov	r2, r0
 801562a:	460b      	mov	r3, r1
 801562c:	4620      	mov	r0, r4
 801562e:	4629      	mov	r1, r5
 8015630:	f7ea fe2a 	bl	8000288 <__aeabi_dsub>
 8015634:	4642      	mov	r2, r8
 8015636:	464b      	mov	r3, r9
 8015638:	f7ea fe26 	bl	8000288 <__aeabi_dsub>
 801563c:	4602      	mov	r2, r0
 801563e:	460b      	mov	r3, r1
 8015640:	2000      	movs	r0, #0
 8015642:	4939      	ldr	r1, [pc, #228]	; (8015728 <__ieee754_pow+0xa08>)
 8015644:	f7ea fe20 	bl	8000288 <__aeabi_dsub>
 8015648:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801564c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8015650:	4602      	mov	r2, r0
 8015652:	460b      	mov	r3, r1
 8015654:	da2f      	bge.n	80156b6 <__ieee754_pow+0x996>
 8015656:	4650      	mov	r0, sl
 8015658:	ec43 2b10 	vmov	d0, r2, r3
 801565c:	f000 f9c0 	bl	80159e0 <scalbn>
 8015660:	ec51 0b10 	vmov	r0, r1, d0
 8015664:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015668:	f7ff bbf1 	b.w	8014e4e <__ieee754_pow+0x12e>
 801566c:	4b2f      	ldr	r3, [pc, #188]	; (801572c <__ieee754_pow+0xa0c>)
 801566e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8015672:	429e      	cmp	r6, r3
 8015674:	f77f af0c 	ble.w	8015490 <__ieee754_pow+0x770>
 8015678:	4b2d      	ldr	r3, [pc, #180]	; (8015730 <__ieee754_pow+0xa10>)
 801567a:	440b      	add	r3, r1
 801567c:	4303      	orrs	r3, r0
 801567e:	d00b      	beq.n	8015698 <__ieee754_pow+0x978>
 8015680:	a325      	add	r3, pc, #148	; (adr r3, 8015718 <__ieee754_pow+0x9f8>)
 8015682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801568a:	f7ea ffb5 	bl	80005f8 <__aeabi_dmul>
 801568e:	a322      	add	r3, pc, #136	; (adr r3, 8015718 <__ieee754_pow+0x9f8>)
 8015690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015694:	f7ff bbdb 	b.w	8014e4e <__ieee754_pow+0x12e>
 8015698:	4622      	mov	r2, r4
 801569a:	462b      	mov	r3, r5
 801569c:	f7ea fdf4 	bl	8000288 <__aeabi_dsub>
 80156a0:	4642      	mov	r2, r8
 80156a2:	464b      	mov	r3, r9
 80156a4:	f7eb fa2e 	bl	8000b04 <__aeabi_dcmpge>
 80156a8:	2800      	cmp	r0, #0
 80156aa:	f43f aef1 	beq.w	8015490 <__ieee754_pow+0x770>
 80156ae:	e7e7      	b.n	8015680 <__ieee754_pow+0x960>
 80156b0:	f04f 0a00 	mov.w	sl, #0
 80156b4:	e718      	b.n	80154e8 <__ieee754_pow+0x7c8>
 80156b6:	4621      	mov	r1, r4
 80156b8:	e7d4      	b.n	8015664 <__ieee754_pow+0x944>
 80156ba:	2000      	movs	r0, #0
 80156bc:	491a      	ldr	r1, [pc, #104]	; (8015728 <__ieee754_pow+0xa08>)
 80156be:	f7ff bb8f 	b.w	8014de0 <__ieee754_pow+0xc0>
 80156c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156c6:	f7ff bb8b 	b.w	8014de0 <__ieee754_pow+0xc0>
 80156ca:	4630      	mov	r0, r6
 80156cc:	4639      	mov	r1, r7
 80156ce:	f7ff bb87 	b.w	8014de0 <__ieee754_pow+0xc0>
 80156d2:	4693      	mov	fp, r2
 80156d4:	f7ff bb98 	b.w	8014e08 <__ieee754_pow+0xe8>
 80156d8:	00000000 	.word	0x00000000
 80156dc:	3fe62e43 	.word	0x3fe62e43
 80156e0:	fefa39ef 	.word	0xfefa39ef
 80156e4:	3fe62e42 	.word	0x3fe62e42
 80156e8:	0ca86c39 	.word	0x0ca86c39
 80156ec:	be205c61 	.word	0xbe205c61
 80156f0:	72bea4d0 	.word	0x72bea4d0
 80156f4:	3e663769 	.word	0x3e663769
 80156f8:	c5d26bf1 	.word	0xc5d26bf1
 80156fc:	3ebbbd41 	.word	0x3ebbbd41
 8015700:	af25de2c 	.word	0xaf25de2c
 8015704:	3f11566a 	.word	0x3f11566a
 8015708:	16bebd93 	.word	0x16bebd93
 801570c:	3f66c16c 	.word	0x3f66c16c
 8015710:	5555553e 	.word	0x5555553e
 8015714:	3fc55555 	.word	0x3fc55555
 8015718:	c2f8f359 	.word	0xc2f8f359
 801571c:	01a56e1f 	.word	0x01a56e1f
 8015720:	3fe00000 	.word	0x3fe00000
 8015724:	000fffff 	.word	0x000fffff
 8015728:	3ff00000 	.word	0x3ff00000
 801572c:	4090cbff 	.word	0x4090cbff
 8015730:	3f6f3400 	.word	0x3f6f3400
 8015734:	652b82fe 	.word	0x652b82fe
 8015738:	3c971547 	.word	0x3c971547

0801573c <__ieee754_sqrt>:
 801573c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015740:	4955      	ldr	r1, [pc, #340]	; (8015898 <__ieee754_sqrt+0x15c>)
 8015742:	ec55 4b10 	vmov	r4, r5, d0
 8015746:	43a9      	bics	r1, r5
 8015748:	462b      	mov	r3, r5
 801574a:	462a      	mov	r2, r5
 801574c:	d112      	bne.n	8015774 <__ieee754_sqrt+0x38>
 801574e:	ee10 2a10 	vmov	r2, s0
 8015752:	ee10 0a10 	vmov	r0, s0
 8015756:	4629      	mov	r1, r5
 8015758:	f7ea ff4e 	bl	80005f8 <__aeabi_dmul>
 801575c:	4602      	mov	r2, r0
 801575e:	460b      	mov	r3, r1
 8015760:	4620      	mov	r0, r4
 8015762:	4629      	mov	r1, r5
 8015764:	f7ea fd92 	bl	800028c <__adddf3>
 8015768:	4604      	mov	r4, r0
 801576a:	460d      	mov	r5, r1
 801576c:	ec45 4b10 	vmov	d0, r4, r5
 8015770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015774:	2d00      	cmp	r5, #0
 8015776:	ee10 0a10 	vmov	r0, s0
 801577a:	4621      	mov	r1, r4
 801577c:	dc0f      	bgt.n	801579e <__ieee754_sqrt+0x62>
 801577e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015782:	4330      	orrs	r0, r6
 8015784:	d0f2      	beq.n	801576c <__ieee754_sqrt+0x30>
 8015786:	b155      	cbz	r5, 801579e <__ieee754_sqrt+0x62>
 8015788:	ee10 2a10 	vmov	r2, s0
 801578c:	4620      	mov	r0, r4
 801578e:	4629      	mov	r1, r5
 8015790:	f7ea fd7a 	bl	8000288 <__aeabi_dsub>
 8015794:	4602      	mov	r2, r0
 8015796:	460b      	mov	r3, r1
 8015798:	f7eb f858 	bl	800084c <__aeabi_ddiv>
 801579c:	e7e4      	b.n	8015768 <__ieee754_sqrt+0x2c>
 801579e:	151b      	asrs	r3, r3, #20
 80157a0:	d073      	beq.n	801588a <__ieee754_sqrt+0x14e>
 80157a2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80157a6:	07dd      	lsls	r5, r3, #31
 80157a8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80157ac:	bf48      	it	mi
 80157ae:	0fc8      	lsrmi	r0, r1, #31
 80157b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80157b4:	bf44      	itt	mi
 80157b6:	0049      	lslmi	r1, r1, #1
 80157b8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80157bc:	2500      	movs	r5, #0
 80157be:	1058      	asrs	r0, r3, #1
 80157c0:	0fcb      	lsrs	r3, r1, #31
 80157c2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80157c6:	0049      	lsls	r1, r1, #1
 80157c8:	2316      	movs	r3, #22
 80157ca:	462c      	mov	r4, r5
 80157cc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80157d0:	19a7      	adds	r7, r4, r6
 80157d2:	4297      	cmp	r7, r2
 80157d4:	bfde      	ittt	le
 80157d6:	19bc      	addle	r4, r7, r6
 80157d8:	1bd2      	suble	r2, r2, r7
 80157da:	19ad      	addle	r5, r5, r6
 80157dc:	0fcf      	lsrs	r7, r1, #31
 80157de:	3b01      	subs	r3, #1
 80157e0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80157e4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80157e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80157ec:	d1f0      	bne.n	80157d0 <__ieee754_sqrt+0x94>
 80157ee:	f04f 0c20 	mov.w	ip, #32
 80157f2:	469e      	mov	lr, r3
 80157f4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80157f8:	42a2      	cmp	r2, r4
 80157fa:	eb06 070e 	add.w	r7, r6, lr
 80157fe:	dc02      	bgt.n	8015806 <__ieee754_sqrt+0xca>
 8015800:	d112      	bne.n	8015828 <__ieee754_sqrt+0xec>
 8015802:	428f      	cmp	r7, r1
 8015804:	d810      	bhi.n	8015828 <__ieee754_sqrt+0xec>
 8015806:	2f00      	cmp	r7, #0
 8015808:	eb07 0e06 	add.w	lr, r7, r6
 801580c:	da42      	bge.n	8015894 <__ieee754_sqrt+0x158>
 801580e:	f1be 0f00 	cmp.w	lr, #0
 8015812:	db3f      	blt.n	8015894 <__ieee754_sqrt+0x158>
 8015814:	f104 0801 	add.w	r8, r4, #1
 8015818:	1b12      	subs	r2, r2, r4
 801581a:	428f      	cmp	r7, r1
 801581c:	bf88      	it	hi
 801581e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8015822:	1bc9      	subs	r1, r1, r7
 8015824:	4433      	add	r3, r6
 8015826:	4644      	mov	r4, r8
 8015828:	0052      	lsls	r2, r2, #1
 801582a:	f1bc 0c01 	subs.w	ip, ip, #1
 801582e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8015832:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8015836:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801583a:	d1dd      	bne.n	80157f8 <__ieee754_sqrt+0xbc>
 801583c:	430a      	orrs	r2, r1
 801583e:	d006      	beq.n	801584e <__ieee754_sqrt+0x112>
 8015840:	1c5c      	adds	r4, r3, #1
 8015842:	bf13      	iteet	ne
 8015844:	3301      	addne	r3, #1
 8015846:	3501      	addeq	r5, #1
 8015848:	4663      	moveq	r3, ip
 801584a:	f023 0301 	bicne.w	r3, r3, #1
 801584e:	106a      	asrs	r2, r5, #1
 8015850:	085b      	lsrs	r3, r3, #1
 8015852:	07e9      	lsls	r1, r5, #31
 8015854:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8015858:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801585c:	bf48      	it	mi
 801585e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8015862:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8015866:	461c      	mov	r4, r3
 8015868:	e780      	b.n	801576c <__ieee754_sqrt+0x30>
 801586a:	0aca      	lsrs	r2, r1, #11
 801586c:	3815      	subs	r0, #21
 801586e:	0549      	lsls	r1, r1, #21
 8015870:	2a00      	cmp	r2, #0
 8015872:	d0fa      	beq.n	801586a <__ieee754_sqrt+0x12e>
 8015874:	02d6      	lsls	r6, r2, #11
 8015876:	d50a      	bpl.n	801588e <__ieee754_sqrt+0x152>
 8015878:	f1c3 0420 	rsb	r4, r3, #32
 801587c:	fa21 f404 	lsr.w	r4, r1, r4
 8015880:	1e5d      	subs	r5, r3, #1
 8015882:	4099      	lsls	r1, r3
 8015884:	4322      	orrs	r2, r4
 8015886:	1b43      	subs	r3, r0, r5
 8015888:	e78b      	b.n	80157a2 <__ieee754_sqrt+0x66>
 801588a:	4618      	mov	r0, r3
 801588c:	e7f0      	b.n	8015870 <__ieee754_sqrt+0x134>
 801588e:	0052      	lsls	r2, r2, #1
 8015890:	3301      	adds	r3, #1
 8015892:	e7ef      	b.n	8015874 <__ieee754_sqrt+0x138>
 8015894:	46a0      	mov	r8, r4
 8015896:	e7bf      	b.n	8015818 <__ieee754_sqrt+0xdc>
 8015898:	7ff00000 	.word	0x7ff00000

0801589c <fabs>:
 801589c:	ec51 0b10 	vmov	r0, r1, d0
 80158a0:	ee10 2a10 	vmov	r2, s0
 80158a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80158a8:	ec43 2b10 	vmov	d0, r2, r3
 80158ac:	4770      	bx	lr

080158ae <finite>:
 80158ae:	ee10 3a90 	vmov	r3, s1
 80158b2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80158b6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80158ba:	0fc0      	lsrs	r0, r0, #31
 80158bc:	4770      	bx	lr

080158be <matherr>:
 80158be:	2000      	movs	r0, #0
 80158c0:	4770      	bx	lr
 80158c2:	0000      	movs	r0, r0
 80158c4:	0000      	movs	r0, r0
	...

080158c8 <nan>:
 80158c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80158d0 <nan+0x8>
 80158cc:	4770      	bx	lr
 80158ce:	bf00      	nop
 80158d0:	00000000 	.word	0x00000000
 80158d4:	7ff80000 	.word	0x7ff80000

080158d8 <rint>:
 80158d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80158da:	ec51 0b10 	vmov	r0, r1, d0
 80158de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80158e2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80158e6:	2e13      	cmp	r6, #19
 80158e8:	460b      	mov	r3, r1
 80158ea:	ee10 4a10 	vmov	r4, s0
 80158ee:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80158f2:	dc56      	bgt.n	80159a2 <rint+0xca>
 80158f4:	2e00      	cmp	r6, #0
 80158f6:	da2b      	bge.n	8015950 <rint+0x78>
 80158f8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80158fc:	4302      	orrs	r2, r0
 80158fe:	d023      	beq.n	8015948 <rint+0x70>
 8015900:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8015904:	4302      	orrs	r2, r0
 8015906:	4254      	negs	r4, r2
 8015908:	4314      	orrs	r4, r2
 801590a:	0c4b      	lsrs	r3, r1, #17
 801590c:	0b24      	lsrs	r4, r4, #12
 801590e:	045b      	lsls	r3, r3, #17
 8015910:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8015914:	ea44 0103 	orr.w	r1, r4, r3
 8015918:	460b      	mov	r3, r1
 801591a:	492f      	ldr	r1, [pc, #188]	; (80159d8 <rint+0x100>)
 801591c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8015920:	e9d1 6700 	ldrd	r6, r7, [r1]
 8015924:	4602      	mov	r2, r0
 8015926:	4639      	mov	r1, r7
 8015928:	4630      	mov	r0, r6
 801592a:	f7ea fcaf 	bl	800028c <__adddf3>
 801592e:	e9cd 0100 	strd	r0, r1, [sp]
 8015932:	463b      	mov	r3, r7
 8015934:	4632      	mov	r2, r6
 8015936:	e9dd 0100 	ldrd	r0, r1, [sp]
 801593a:	f7ea fca5 	bl	8000288 <__aeabi_dsub>
 801593e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015942:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8015946:	4639      	mov	r1, r7
 8015948:	ec41 0b10 	vmov	d0, r0, r1
 801594c:	b003      	add	sp, #12
 801594e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015950:	4a22      	ldr	r2, [pc, #136]	; (80159dc <rint+0x104>)
 8015952:	4132      	asrs	r2, r6
 8015954:	ea01 0702 	and.w	r7, r1, r2
 8015958:	4307      	orrs	r7, r0
 801595a:	d0f5      	beq.n	8015948 <rint+0x70>
 801595c:	0852      	lsrs	r2, r2, #1
 801595e:	4011      	ands	r1, r2
 8015960:	430c      	orrs	r4, r1
 8015962:	d00b      	beq.n	801597c <rint+0xa4>
 8015964:	ea23 0202 	bic.w	r2, r3, r2
 8015968:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801596c:	2e13      	cmp	r6, #19
 801596e:	fa43 f306 	asr.w	r3, r3, r6
 8015972:	bf0c      	ite	eq
 8015974:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8015978:	2400      	movne	r4, #0
 801597a:	4313      	orrs	r3, r2
 801597c:	4916      	ldr	r1, [pc, #88]	; (80159d8 <rint+0x100>)
 801597e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8015982:	4622      	mov	r2, r4
 8015984:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015988:	4620      	mov	r0, r4
 801598a:	4629      	mov	r1, r5
 801598c:	f7ea fc7e 	bl	800028c <__adddf3>
 8015990:	e9cd 0100 	strd	r0, r1, [sp]
 8015994:	4622      	mov	r2, r4
 8015996:	462b      	mov	r3, r5
 8015998:	e9dd 0100 	ldrd	r0, r1, [sp]
 801599c:	f7ea fc74 	bl	8000288 <__aeabi_dsub>
 80159a0:	e7d2      	b.n	8015948 <rint+0x70>
 80159a2:	2e33      	cmp	r6, #51	; 0x33
 80159a4:	dd07      	ble.n	80159b6 <rint+0xde>
 80159a6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80159aa:	d1cd      	bne.n	8015948 <rint+0x70>
 80159ac:	ee10 2a10 	vmov	r2, s0
 80159b0:	f7ea fc6c 	bl	800028c <__adddf3>
 80159b4:	e7c8      	b.n	8015948 <rint+0x70>
 80159b6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80159ba:	f04f 32ff 	mov.w	r2, #4294967295
 80159be:	40f2      	lsrs	r2, r6
 80159c0:	4210      	tst	r0, r2
 80159c2:	d0c1      	beq.n	8015948 <rint+0x70>
 80159c4:	0852      	lsrs	r2, r2, #1
 80159c6:	4210      	tst	r0, r2
 80159c8:	bf1f      	itttt	ne
 80159ca:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80159ce:	ea20 0202 	bicne.w	r2, r0, r2
 80159d2:	4134      	asrne	r4, r6
 80159d4:	4314      	orrne	r4, r2
 80159d6:	e7d1      	b.n	801597c <rint+0xa4>
 80159d8:	08016f90 	.word	0x08016f90
 80159dc:	000fffff 	.word	0x000fffff

080159e0 <scalbn>:
 80159e0:	b570      	push	{r4, r5, r6, lr}
 80159e2:	ec55 4b10 	vmov	r4, r5, d0
 80159e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80159ea:	4606      	mov	r6, r0
 80159ec:	462b      	mov	r3, r5
 80159ee:	b9aa      	cbnz	r2, 8015a1c <scalbn+0x3c>
 80159f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80159f4:	4323      	orrs	r3, r4
 80159f6:	d03b      	beq.n	8015a70 <scalbn+0x90>
 80159f8:	4b31      	ldr	r3, [pc, #196]	; (8015ac0 <scalbn+0xe0>)
 80159fa:	4629      	mov	r1, r5
 80159fc:	2200      	movs	r2, #0
 80159fe:	ee10 0a10 	vmov	r0, s0
 8015a02:	f7ea fdf9 	bl	80005f8 <__aeabi_dmul>
 8015a06:	4b2f      	ldr	r3, [pc, #188]	; (8015ac4 <scalbn+0xe4>)
 8015a08:	429e      	cmp	r6, r3
 8015a0a:	4604      	mov	r4, r0
 8015a0c:	460d      	mov	r5, r1
 8015a0e:	da12      	bge.n	8015a36 <scalbn+0x56>
 8015a10:	a327      	add	r3, pc, #156	; (adr r3, 8015ab0 <scalbn+0xd0>)
 8015a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a16:	f7ea fdef 	bl	80005f8 <__aeabi_dmul>
 8015a1a:	e009      	b.n	8015a30 <scalbn+0x50>
 8015a1c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015a20:	428a      	cmp	r2, r1
 8015a22:	d10c      	bne.n	8015a3e <scalbn+0x5e>
 8015a24:	ee10 2a10 	vmov	r2, s0
 8015a28:	4620      	mov	r0, r4
 8015a2a:	4629      	mov	r1, r5
 8015a2c:	f7ea fc2e 	bl	800028c <__adddf3>
 8015a30:	4604      	mov	r4, r0
 8015a32:	460d      	mov	r5, r1
 8015a34:	e01c      	b.n	8015a70 <scalbn+0x90>
 8015a36:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015a3a:	460b      	mov	r3, r1
 8015a3c:	3a36      	subs	r2, #54	; 0x36
 8015a3e:	4432      	add	r2, r6
 8015a40:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015a44:	428a      	cmp	r2, r1
 8015a46:	dd0b      	ble.n	8015a60 <scalbn+0x80>
 8015a48:	ec45 4b11 	vmov	d1, r4, r5
 8015a4c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015ab8 <scalbn+0xd8>
 8015a50:	f000 f83c 	bl	8015acc <copysign>
 8015a54:	a318      	add	r3, pc, #96	; (adr r3, 8015ab8 <scalbn+0xd8>)
 8015a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a5a:	ec51 0b10 	vmov	r0, r1, d0
 8015a5e:	e7da      	b.n	8015a16 <scalbn+0x36>
 8015a60:	2a00      	cmp	r2, #0
 8015a62:	dd08      	ble.n	8015a76 <scalbn+0x96>
 8015a64:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015a68:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015a6c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015a70:	ec45 4b10 	vmov	d0, r4, r5
 8015a74:	bd70      	pop	{r4, r5, r6, pc}
 8015a76:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015a7a:	da0d      	bge.n	8015a98 <scalbn+0xb8>
 8015a7c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015a80:	429e      	cmp	r6, r3
 8015a82:	ec45 4b11 	vmov	d1, r4, r5
 8015a86:	dce1      	bgt.n	8015a4c <scalbn+0x6c>
 8015a88:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015ab0 <scalbn+0xd0>
 8015a8c:	f000 f81e 	bl	8015acc <copysign>
 8015a90:	a307      	add	r3, pc, #28	; (adr r3, 8015ab0 <scalbn+0xd0>)
 8015a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a96:	e7e0      	b.n	8015a5a <scalbn+0x7a>
 8015a98:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015a9c:	3236      	adds	r2, #54	; 0x36
 8015a9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015aa2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015aa6:	4620      	mov	r0, r4
 8015aa8:	4629      	mov	r1, r5
 8015aaa:	2200      	movs	r2, #0
 8015aac:	4b06      	ldr	r3, [pc, #24]	; (8015ac8 <scalbn+0xe8>)
 8015aae:	e7b2      	b.n	8015a16 <scalbn+0x36>
 8015ab0:	c2f8f359 	.word	0xc2f8f359
 8015ab4:	01a56e1f 	.word	0x01a56e1f
 8015ab8:	8800759c 	.word	0x8800759c
 8015abc:	7e37e43c 	.word	0x7e37e43c
 8015ac0:	43500000 	.word	0x43500000
 8015ac4:	ffff3cb0 	.word	0xffff3cb0
 8015ac8:	3c900000 	.word	0x3c900000

08015acc <copysign>:
 8015acc:	ec51 0b10 	vmov	r0, r1, d0
 8015ad0:	ee11 0a90 	vmov	r0, s3
 8015ad4:	ee10 2a10 	vmov	r2, s0
 8015ad8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015adc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015ae0:	ea41 0300 	orr.w	r3, r1, r0
 8015ae4:	ec43 2b10 	vmov	d0, r2, r3
 8015ae8:	4770      	bx	lr
	...

08015aec <_init>:
 8015aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015aee:	bf00      	nop
 8015af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015af2:	bc08      	pop	{r3}
 8015af4:	469e      	mov	lr, r3
 8015af6:	4770      	bx	lr

08015af8 <_fini>:
 8015af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015afa:	bf00      	nop
 8015afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015afe:	bc08      	pop	{r3}
 8015b00:	469e      	mov	lr, r3
 8015b02:	4770      	bx	lr
